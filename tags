!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT_IFNOT	svf-llvm/lib/ObjTypeInference.cpp	50;"	d	file:
ABORT_MSG	svf-llvm/lib/ObjTypeInference.cpp	44;"	d	file:
ABSTRACT_POINTSTO_H_	svf/include/MemoryModel/AbstractPointsToDS.h	54;"	d
AEDetector	svf/include/AE/Svfexe/AEDetector.h	/^    AEDetector(): kind(UNKNOWN) {}$/;"	f	class:SVF::AEDetector
AEDetector	svf/include/AE/Svfexe/AEDetector.h	/^class AEDetector$/;"	c	namespace:SVF
AEException	svf/include/AE/Svfexe/AEDetector.h	/^    AEException(const std::string& message)$/;"	f	class:SVF::AEException
AEException	svf/include/AE/Svfexe/AEDetector.h	/^class AEException : public std::exception$/;"	c	namespace:SVF
AEPrecision	svf/include/Util/Options.h	/^    static const Option<u32_t> AEPrecision;$/;"	m	class:SVF::Options
AEStat	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    AEStat(AbstractInterpretation* ae) : _ae(ae)$/;"	f	class:SVF::AEStat
AEStat	svf/include/AE/Svfexe/AbstractInterpretation.h	/^class AEStat : public SVFStat$/;"	c	namespace:SVF
AETest	svf-llvm/tools/AE/ae.cpp	/^class AETest$/;"	c	file:
AND	svf/lib/Util/Z3Expr.cpp	/^Z3Expr Z3Expr::AND(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
ANDERSENMEMSSA_H_	svf/include/MSSA/SVFGBuilder.h	31;"	d
ANDERSENSTAT_H_	svf/include/Util/PTAStat.h	31;"	d
ANNOTATOR_H_	svf/include/Util/Annotator.h	9;"	d
APIN	svf/include/SVFIR/SVFValue.h	/^        APIN,             \/\/ │   ├── Argument parameter input$/;"	e	enum:SVF::SVFValue::GNodeK
APNodes	svf/include/Graphs/ICFGNode.h	/^    ActualParmNodeVec APNodes;      \/\/\/ arguments$/;"	m	class:SVF::CallICFGNode
APOUT	svf/include/SVFIR/SVFValue.h	/^        APOUT,            \/\/ │   └── Argument parameter output$/;"	e	enum:SVF::SVFValue::GNodeK
APOffset	svf/include/Util/GeneralType.h	/^typedef s64_t APOffset;$/;"	t	namespace:SVF
AParm	svf/include/SVFIR/SVFValue.h	/^        AParm,            \/\/ │   ├── Represents an argument parameter$/;"	e	enum:SVF::SVFValue::GNodeK
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	590;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	593;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	596;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	599;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	602;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	606;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	608;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	610;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	614;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	617;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	620;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	625;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	628;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	631;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	636;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	639;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	642;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	645;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	648;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	651;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	654;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	657;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	660;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	663;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	666;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	671;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	674;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	677;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	680;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	683;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	686;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	691;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	694;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	699;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	702;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	705;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	708;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	711;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	715;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	718;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	723;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	726;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	729;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	732;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	735;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	738;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	741;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	745;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	569;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	572;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	575;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	578;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	581;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	585;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	587;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	589;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	593;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	596;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	599;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	604;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	607;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	610;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	615;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	618;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	621;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	624;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	627;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	630;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	633;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	636;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	639;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	642;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	645;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	650;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	653;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	656;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	659;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	662;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	665;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	670;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	673;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	678;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	681;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	684;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	687;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	690;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	694;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	697;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	702;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	705;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	708;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	711;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	714;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	717;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	720;"	d	file:
ARCHITECTURE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	724;"	d	file:
ARet	svf/include/SVFIR/SVFValue.h	/^        ARet,             \/\/ │   ├── Represents an argument return value$/;"	e	enum:SVF::SVFValue::GNodeK
ATVFNodeEnd	svf/include/Graphs/SVFGStat.h	/^    void ATVFNodeEnd()$/;"	f	class:SVF::SVFGStat
ATVFNodeStart	svf/include/Graphs/SVFGStat.h	/^    void ATVFNodeStart()$/;"	f	class:SVF::SVFGStat
AbsExtAPI	svf/include/AE/Svfexe/AbsExtAPI.h	/^class AbsExtAPI$/;"	c	namespace:SVF
AbsExtAPI	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^AbsExtAPI::AbsExtAPI(Map<const ICFGNode*, AbstractState>& traces): abstractTrace(traces)$/;"	f	class:AbsExtAPI
AbstractInterpretation	svf/include/AE/Svfexe/AbstractInterpretation.h	/^class AbstractInterpretation$/;"	c	namespace:SVF
AbstractInterpretation	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^AbstractInterpretation::AbstractInterpretation()$/;"	f	class:AbstractInterpretation
AbstractState	svf/include/AE/Core/AbstractState.h	/^    AbstractState()$/;"	f	class:SVF::AbstractState
AbstractState	svf/include/AE/Core/AbstractState.h	/^    AbstractState(AbstractState&&rhs) : _varToAbsVal(std::move(rhs._varToAbsVal)),$/;"	f	class:SVF::AbstractState
AbstractState	svf/include/AE/Core/AbstractState.h	/^    AbstractState(VarToAbsValMap&_varToValMap, AddrToAbsValMap&_locToValMap) : _varToAbsVal(_varToValMap), _addrToAbsVal(_locToValMap) {}$/;"	f	class:SVF::AbstractState
AbstractState	svf/include/AE/Core/AbstractState.h	/^    AbstractState(const AbstractState&rhs) : _varToAbsVal(rhs.getVarToVal()), _addrToAbsVal(rhs.getLocToVal())$/;"	f	class:SVF::AbstractState
AbstractState	svf/include/AE/Core/AbstractState.h	/^class AbstractState$/;"	c	namespace:SVF
AbstractValue	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue()$/;"	f	class:SVF::AbstractValue
AbstractValue	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue(AbstractValue &&other)$/;"	f	class:SVF::AbstractValue
AbstractValue	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue(const AbstractValue& other)$/;"	f	class:SVF::AbstractValue
AbstractValue	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue(const AddressValue& addr) : interval(IntervalValue::bottom()), addrs(addr) {}$/;"	f	class:SVF::AbstractValue
AbstractValue	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue(const IntervalValue& ival) : interval(ival), addrs(AddressValue()) {}$/;"	f	class:SVF::AbstractValue
AbstractValue	svf/include/AE/Core/AbstractValue.h	/^class AbstractValue$/;"	c	namespace:SVF
AccessPath	svf/include/MemoryModel/AccessPath.h	/^    AccessPath(APOffset o = 0, const SVFType* srcTy = nullptr) : fldIdx(o), gepPointeeType(srcTy) {}$/;"	f	class:SVF::AccessPath
AccessPath	svf/include/MemoryModel/AccessPath.h	/^    AccessPath(const AccessPath& ap)$/;"	f	class:SVF::AccessPath
AccessPath	svf/include/MemoryModel/AccessPath.h	/^class AccessPath$/;"	c	namespace:SVF
AccessPath_H_	svf/include/MemoryModel/AccessPath.h	34;"	d
ActualINSVFGNode	svf/include/Graphs/SVFGNode.h	/^    ActualINSVFGNode(NodeID id, const CallICFGNode* c, const MRVer* mrver):$/;"	f	class:SVF::ActualINSVFGNode
ActualINSVFGNode	svf/include/Graphs/SVFGNode.h	/^class ActualINSVFGNode : public MRSVFGNode$/;"	c	namespace:SVF
ActualINSVFGNodeSet	svf/include/Graphs/SVFG.h	/^    typedef NodeBS ActualINSVFGNodeSet;$/;"	t	class:SVF::SVFG
ActualOUTSVFGNode	svf/include/Graphs/SVFGNode.h	/^    ActualOUTSVFGNode(NodeID id, const CallICFGNode* cal, const MRVer* resVer):$/;"	f	class:SVF::ActualOUTSVFGNode
ActualOUTSVFGNode	svf/include/Graphs/SVFGNode.h	/^class ActualOUTSVFGNode : public MRSVFGNode$/;"	c	namespace:SVF
ActualOUTSVFGNodeSet	svf/include/Graphs/SVFG.h	/^    typedef NodeBS ActualOUTSVFGNodeSet;$/;"	t	class:SVF::SVFG
ActualParmNodeVec	svf/include/Graphs/ICFGNode.h	/^    typedef std::vector<const ValVar *> ActualParmNodeVec;$/;"	t	class:SVF::CallICFGNode
ActualParmSVFGNode	svf/include/Graphs/SVFG.h	/^typedef ActualParmVFGNode ActualParmSVFGNode;$/;"	t	namespace:SVF
ActualParmVFGNode	svf/include/Graphs/VFGNode.h	/^    ActualParmVFGNode(NodeID id, const PAGNode* n, const CallICFGNode* c) :$/;"	f	class:SVF::ActualParmVFGNode
ActualParmVFGNode	svf/include/Graphs/VFGNode.h	/^class ActualParmVFGNode : public ArgumentVFGNode$/;"	c	namespace:SVF
ActualRetSVFGNode	svf/include/Graphs/SVFG.h	/^typedef ActualRetVFGNode ActualRetSVFGNode;$/;"	t	namespace:SVF
ActualRetVFGNode	svf/include/Graphs/VFGNode.h	/^    ActualRetVFGNode(NodeID id, const PAGNode* n, const CallICFGNode* c) :$/;"	f	class:SVF::ActualRetVFGNode
ActualRetVFGNode	svf/include/Graphs/VFGNode.h	/^class ActualRetVFGNode: public ArgumentVFGNode$/;"	c	namespace:SVF
AddCallSiteCHI	svf/include/MSSA/MemSSA.h	/^    inline void AddCallSiteCHI(const CallICFGNode* cs,  const MRSet& mrSet)$/;"	f	class:SVF::MemSSA
AddCallSiteCHI	svf/include/MSSA/MemSSA.h	/^    inline void AddCallSiteCHI(const CallICFGNode* cs, const MemRegion* mr)$/;"	f	class:SVF::MemSSA
AddCallSiteMU	svf/include/MSSA/MemSSA.h	/^    inline void AddCallSiteMU(const CallICFGNode* cs,  const MRSet& mrSet)$/;"	f	class:SVF::MemSSA
AddCallSiteMU	svf/include/MSSA/MemSSA.h	/^    inline void AddCallSiteMU(const CallICFGNode* cs, const MemRegion* mr)$/;"	f	class:SVF::MemSSA
AddExtActualParmSVFGNodes	svf/lib/SABER/SaberSVFGBuilder.cpp	/^void SaberSVFGBuilder::AddExtActualParmSVFGNodes(CallGraph* callgraph)$/;"	f	class:SaberSVFGBuilder
AddLoadMU	svf/include/MSSA/MemSSA.h	/^    inline void AddLoadMU(const SVFBasicBlock* bb, const LoadStmt* load, const MRSet& mrSet)$/;"	f	class:SVF::MemSSA
AddLoadMU	svf/include/MSSA/MemSSA.h	/^    inline void AddLoadMU(const SVFBasicBlock* bb, const LoadStmt* load, const MemRegion* mr)$/;"	f	class:SVF::MemSSA
AddMSSAPHI	svf/include/MSSA/MemSSA.h	/^    inline void AddMSSAPHI(const SVFBasicBlock* bb, const MRSet& mrSet)$/;"	f	class:SVF::MemSSA
AddMSSAPHI	svf/include/MSSA/MemSSA.h	/^    inline void AddMSSAPHI(const SVFBasicBlock* bb, const MemRegion* mr)$/;"	f	class:SVF::MemSSA
AddStoreCHI	svf/include/MSSA/MemSSA.h	/^    inline void AddStoreCHI(const SVFBasicBlock* bb, const StoreStmt* store, const MRSet& mrSet)$/;"	f	class:SVF::MemSSA
AddStoreCHI	svf/include/MSSA/MemSSA.h	/^    inline void AddStoreCHI(const SVFBasicBlock* bb, const StoreStmt* store, const MemRegion* mr)$/;"	f	class:SVF::MemSSA
Addr	svf/include/Graphs/ConsGEdge.h	/^        Addr, Copy, Store, Load, NormalGep, VariantGep$/;"	e	enum:SVF::ConstraintEdge::ConstraintEdgeK
Addr	svf/include/SVFIR/SVFStatements.h	/^        Addr,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Addr	svf/include/SVFIR/SVFValue.h	/^        Addr,             \/\/ │   ├── Represents an address operation$/;"	e	enum:SVF::SVFValue::GNodeK
AddrCGEdge	svf/include/Graphs/ConsGEdge.h	/^class AddrCGEdge: public ConstraintEdge$/;"	c	namespace:SVF
AddrCGEdge	svf/lib/Graphs/ConsG.cpp	/^AddrCGEdge::AddrCGEdge(ConstraintNode* s, ConstraintNode* d, EdgeID id)$/;"	f	class:AddrCGEdge
AddrCGEdgeSet	svf/include/Graphs/ConsG.h	/^    ConstraintEdge::ConstraintEdgeSetTy AddrCGEdgeSet;$/;"	m	class:SVF::ConstraintGraph
AddrSVFGNode	svf/include/Graphs/SVFG.h	/^typedef AddrVFGNode AddrSVFGNode;$/;"	t	namespace:SVF
AddrSet	svf/include/AE/Core/AddressValue.h	/^    typedef Set<u32_t> AddrSet;$/;"	t	class:SVF::AddressValue
AddrSpace	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    unsigned AddrSpace;$/;"	m	class:llvm::generic_bridge_gep_type_iterator
AddrStmt	svf/include/SVFIR/SVFStatements.h	/^    AddrStmt() : AssignStmt(SVFStmt::Addr) {}$/;"	f	class:SVF::AddrStmt
AddrStmt	svf/include/SVFIR/SVFStatements.h	/^    AddrStmt(SVFVar* s, SVFVar* d) : AssignStmt(s, d, SVFStmt::Addr) {}$/;"	f	class:SVF::AddrStmt
AddrStmt	svf/include/SVFIR/SVFStatements.h	/^class AddrStmt: public AssignStmt$/;"	c	namespace:SVF
AddrToAbsValMap	svf/include/AE/Core/AbstractState.h	/^    typedef VarToAbsValMap AddrToAbsValMap;$/;"	t	class:SVF::AbstractState
AddrToValMap	svf/include/AE/Core/RelExeState.h	/^    typedef VarToValMap AddrToValMap;$/;"	t	class:SVF::RelExeState
AddrVFGNode	svf/include/Graphs/VFGNode.h	/^    AddrVFGNode(NodeID id, const AddrStmt* edge): StmtVFGNode(id, edge,Addr)$/;"	f	class:SVF::AddrVFGNode
AddrVFGNode	svf/include/Graphs/VFGNode.h	/^class AddrVFGNode: public StmtVFGNode$/;"	c	namespace:SVF
AddressMask	svf/include/AE/Core/AddressValue.h	33;"	d
AddressValue	svf/include/AE/Core/AddressValue.h	/^    AddressValue() {}$/;"	f	class:SVF::AddressValue
AddressValue	svf/include/AE/Core/AddressValue.h	/^    AddressValue(const AddressValue &other) : _addrs(other._addrs) {}$/;"	f	class:SVF::AddressValue
AddressValue	svf/include/AE/Core/AddressValue.h	/^    AddressValue(const Set<u32_t> &addrs) :  _addrs(addrs) {}$/;"	f	class:SVF::AddressValue
AddressValue	svf/include/AE/Core/AddressValue.h	/^    AddressValue(u32_t addr) :  _addrs({addr}) {}$/;"	f	class:SVF::AddressValue
AddressValue	svf/include/AE/Core/AddressValue.h	/^class AddressValue$/;"	c	namespace:SVF
AdvanceToFirstNonZero	svf/include/Util/SparseBitVector.h	/^        void AdvanceToFirstNonZero()$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
AdvanceToNextNonZero	svf/include/Util/SparseBitVector.h	/^        void AdvanceToNextNonZero()$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
AlgebraicNumRef	z3.obj/bin/python/z3/z3.py	/^class AlgebraicNumRef(ArithRef):$/;"	c
AliasCFLGraphBuilder	svf/include/CFL/CFLGraphBuilder.h	/^class AliasCFLGraphBuilder : public CFLGraphBuilder$/;"	c	namespace:SVF
AliasCheckRule	svf/include/WPA/WPAPass.h	/^    enum AliasCheckRule$/;"	g	class:SVF::WPAPass
AliasDDAClient	svf/include/DDA/DDAClient.h	/^    AliasDDAClient() : DDAClient() {}$/;"	f	class:SVF::AliasDDAClient
AliasDDAClient	svf/include/DDA/DDAClient.h	/^class AliasDDAClient : public DDAClient$/;"	c	namespace:SVF
AliasResult	svf/include/SVFIR/SVFType.h	/^enum AliasResult$/;"	g	namespace:SVF
AliasRule	svf/include/Util/Options.h	/^    static OptionMultiple<WPAPass::AliasCheckRule> AliasRule;$/;"	m	class:SVF::Options
AllPairMHP	svf/include/Util/Options.h	/^    static const Option<bool> AllPairMHP;$/;"	m	class:SVF::Options
AllPathReachableSolve	svf/lib/SABER/ProgSlice.cpp	/^bool ProgSlice::AllPathReachableSolve()$/;"	f	class:ProgSlice
AllocaInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AllocaInst AllocaInst;$/;"	t	namespace:SVF
AnalysisUtil_H_	svf/include/Util/SVFUtil.h	31;"	d
And	z3.obj/bin/python/z3/z3.py	/^def And(*args):$/;"	f
AndThen	z3.obj/bin/python/z3/z3.py	/^def AndThen(*ts, **ks):$/;"	f
AnderSVFG	svf/include/Util/Options.h	/^    static const Option<bool> AnderSVFG;$/;"	m	class:SVF::Options
AnderTimeLimit	svf/include/Util/Options.h	/^    static const Option<u32_t> AnderTimeLimit;$/;"	m	class:SVF::Options
Andersen	svf/include/WPA/Andersen.h	/^    Andersen(SVFIR* _pag, PTATY type = Andersen_WPA, bool alias_check = true)$/;"	f	class:SVF::Andersen
Andersen	svf/include/WPA/Andersen.h	/^class Andersen:  public AndersenBase$/;"	c	namespace:SVF
AndersenBase	svf/include/WPA/Andersen.h	/^    AndersenBase(SVFIR* _pag, PTATY type = Andersen_BASE, bool alias_check = true)$/;"	f	class:SVF::AndersenBase
AndersenBase	svf/include/WPA/Andersen.h	/^class AndersenBase:  public WPAConstraintSolver, public BVDataPTAImpl$/;"	c	namespace:SVF
AndersenSCD	svf/include/WPA/AndersenPWC.h	/^    AndersenSCD(SVFIR* _pag, PTATY type = AndersenSCD_WPA) :$/;"	f	class:SVF::AndersenSCD
AndersenSCD	svf/include/WPA/AndersenPWC.h	/^class AndersenSCD : public Andersen$/;"	c	namespace:SVF
AndersenSCD_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        AndersenSCD_WPA,    \/\/\/< Selective cycle detection andersen-style WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
AndersenSFR	svf/include/WPA/AndersenPWC.h	/^    AndersenSFR(SVFIR* _pag, PTATY type = AndersenSFR_WPA) :$/;"	f	class:SVF::AndersenSFR
AndersenSFR	svf/include/WPA/AndersenPWC.h	/^class AndersenSFR : public AndersenSCD$/;"	c	namespace:SVF
AndersenSFR_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        AndersenSFR_WPA,    \/\/\/< Stride-based field representation$/;"	e	enum:SVF::PointerAnalysis::PTATY
AndersenStat	svf/include/WPA/WPAStat.h	/^class AndersenStat : public PTAStat$/;"	c	namespace:SVF
AndersenStat	svf/lib/WPA/AndersenStat.cpp	/^AndersenStat::AndersenStat(AndersenBase* p): PTAStat(p),pta(p)$/;"	f	class:AndersenStat
AndersenWaveDiff	svf/include/WPA/Andersen.h	/^    AndersenWaveDiff(SVFIR* _pag, PTATY type = AndersenWaveDiff_WPA, bool alias_check = true): Andersen(_pag, type, alias_check) {}$/;"	f	class:SVF::AndersenWaveDiff
AndersenWaveDiff	svf/include/WPA/Andersen.h	/^class AndersenWaveDiff : public Andersen$/;"	c	namespace:SVF
AndersenWaveDiff_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        AndersenWaveDiff_WPA,	\/\/\/< Diff wave propagation andersen-style WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
Andersen_BASE	svf/include/MemoryModel/PointerAnalysis.h	/^        Andersen_BASE,		\/\/\/< Base Andersen PTA$/;"	e	enum:SVF::PointerAnalysis::PTATY
Andersen_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        Andersen_WPA,		\/\/\/< Andersen PTA$/;"	e	enum:SVF::PointerAnalysis::PTATY
AnnotationTime	svf/include/MTA/MTAStat.h	/^    double AnnotationTime;$/;"	m	class:SVF::MTAStat
Annotator	svf/include/Util/Annotator.h	/^    Annotator()$/;"	f	class:SVF::Annotator
Annotator	svf/include/Util/Annotator.h	/^class Annotator$/;"	c	namespace:SVF
AnyMemCpyInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AnyMemCpyInst AnyMemCpyInst;$/;"	t	namespace:SVF
AnyMemIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AnyMemIntrinsic AnyMemIntrinsic;$/;"	t	namespace:SVF
AnyMemMoveInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AnyMemMoveInst AnyMemMoveInst;$/;"	t	namespace:SVF
AnyMemSetInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AnyMemSetInst AnyMemSetInst;$/;"	t	namespace:SVF
AnyMemTransferInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AnyMemTransferInst AnyMemTransferInst;$/;"	t	namespace:SVF
ApplyResult	z3.obj/bin/python/z3/z3.py	/^class ApplyResult(Z3PPObject):$/;"	c
ApplyResultObj	z3.obj/bin/python/z3/z3types.py	/^class ApplyResultObj(ctypes.c_void_p):$/;"	c
ArgInDeadFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool ArgInDeadFunction(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
ArgInProgEntryFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool ArgInProgEntryFunction(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
ArgValNode	svf/include/SVFIR/SVFValue.h	/^        ArgValNode,              \/\/ ├── Represents an argument value variable$/;"	e	enum:SVF::SVFValue::GNodeK
ArgValVar	svf/include/SVFIR/SVFVariables.h	/^    ArgValVar(NodeID i, PNODEK ty = ArgValNode) : ValVar(i, ty) {}$/;"	f	class:SVF::ArgValVar
ArgValVar	svf/include/SVFIR/SVFVariables.h	/^class ArgValVar: public ValVar$/;"	c	namespace:SVF
ArgValVar	svf/lib/SVFIR/SVFVariables.cpp	/^ArgValVar::ArgValVar(NodeID i, u32_t argNo, const ICFGNode* icn,$/;"	f	class:ArgValVar
Argument	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Argument Argument;$/;"	t	namespace:SVF
ArgumentVFGNode	svf/include/Graphs/VFGNode.h	/^    ArgumentVFGNode(NodeID id, const PAGNode* p, VFGNodeK k): VFGNode(id,k), param(p)$/;"	f	class:SVF::ArgumentVFGNode
ArgumentVFGNode	svf/include/Graphs/VFGNode.h	/^class ArgumentVFGNode : public VFGNode$/;"	c	namespace:SVF
ArithRef	z3.obj/bin/python/z3/z3.py	/^class ArithRef(ExprRef):$/;"	c
ArithSortRef	z3.obj/bin/python/z3/z3.py	/^class ArithSortRef(SortRef):$/;"	c
Array	z3.obj/bin/python/z3/z3.py	/^def Array(name, dom, rng):$/;"	f
ArrayRef	z3.obj/bin/python/z3/z3.py	/^class ArrayRef(ExprRef):$/;"	c
ArraySort	z3.obj/bin/python/z3/z3.py	/^def ArraySort(*sig):$/;"	f
ArraySortRef	z3.obj/bin/python/z3/z3.py	/^class ArraySortRef(SortRef):$/;"	c
ArrayType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ArrayType ArrayType;$/;"	t	namespace:SVF
AssignStmt	svf/include/SVFIR/SVFStatements.h	/^    AssignStmt(GEdgeFlag k) : SVFStmt(k) {}$/;"	f	class:SVF::AssignStmt
AssignStmt	svf/include/SVFIR/SVFStatements.h	/^    AssignStmt(SVFVar* s, SVFVar* d, GEdgeFlag k) : SVFStmt(s, d, k) {}$/;"	f	class:SVF::AssignStmt
AssignStmt	svf/include/SVFIR/SVFStatements.h	/^class AssignStmt : public SVFStmt$/;"	c	namespace:SVF
AssumeInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AssumeInst AssumeInst;$/;"	t	namespace:SVF
Ast	z3.obj/bin/python/z3/z3types.py	/^class Ast(ctypes.c_void_p):$/;"	c
AstMap	z3.obj/bin/python/z3/z3.py	/^class AstMap:$/;"	c
AstMapObj	z3.obj/bin/python/z3/z3types.py	/^class AstMapObj(ctypes.c_void_p):$/;"	c
AstRef	z3.obj/bin/python/z3/z3.py	/^class AstRef(Z3PPObject):$/;"	c
AstVector	z3.obj/bin/python/z3/z3.py	/^class AstVector(Z3PPObject):$/;"	c
AstVectorObj	z3.obj/bin/python/z3/z3types.py	/^class AstVectorObj(ctypes.c_void_p):$/;"	c
AtEnd	svf/include/Util/SparseBitVector.h	/^        bool AtEnd;$/;"	m	class:SVF::SparseBitVector::SparseBitVectorIterator
AtLeast	z3.obj/bin/python/z3/z3.py	/^def AtLeast(*args):$/;"	f
AtMost	z3.obj/bin/python/z3/z3.py	/^def AtMost(*args):$/;"	f
AtomicCmpXchgInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicCmpXchgInst AtomicCmpXchgInst;$/;"	t	namespace:SVF
AtomicMemCpyInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicMemCpyInst AtomicMemCpyInst;$/;"	t	namespace:SVF
AtomicMemIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicMemIntrinsic AtomicMemIntrinsic;$/;"	t	namespace:SVF
AtomicMemMoveInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicMemMoveInst AtomicMemMoveInst;$/;"	t	namespace:SVF
AtomicMemSetInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicMemSetInst AtomicMemSetInst;$/;"	t	namespace:SVF
AtomicMemTransferInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicMemTransferInst AtomicMemTransferInst;$/;"	t	namespace:SVF
AtomicRMWInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::AtomicRMWInst AtomicRMWInst;$/;"	t	namespace:SVF
Attribute	svf/include/CFL/CFGrammar.h	/^    typedef u32_t Attribute;$/;"	t	class:SVF::GrammarBase
AttributedKindMaskBits	svf/include/CFL/CFGrammar.h	/^    static constexpr unsigned char AttributedKindMaskBits = 24; \/\/\/< We use the lower 24 bits to denote attributed kind$/;"	m	class:SVF::GrammarBase
AveragePointsToSetSize	svf/include/WPA/Andersen.h	/^    static u32_t AveragePointsToSetSize;$/;"	m	class:SVF::AndersenBase
AveragePointsToSetSize	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::AveragePointsToSetSize = 0;$/;"	m	class:AndersenBase	file:
BASICBLOCKGRAPH_H_	svf/include/Graphs/BasicBlockG.h	31;"	d
BBCondMap	svf/include/SABER/SaberCondAllocator.h	/^    typedef Map<const SVFBasicBlock*, CondPosMap > BBCondMap;	\/\/\/ map bb to a Condition$/;"	t	class:SVF::SaberCondAllocator
BBList	svf/include/MSSA/MemSSA.h	/^    typedef std::vector<const SVFBasicBlock*> BBList;$/;"	t	class:SVF::MemSSA
BBList	svf/include/SVFIR/SVFVariables.h	/^    typedef SVFLoopAndDomInfo::BBList BBList;$/;"	t	class:SVF::FunObjVar
BBList	svf/include/Util/SVFLoopAndDomInfo.h	/^    typedef std::vector<const SVFBasicBlock*> BBList;$/;"	t	class:SVF::SVFLoopAndDomInfo
BBSet	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef Set<const Instruction*> BBSet;$/;"	t	class:SVF::ICFGBuilder
BBSet	svf/include/SVFIR/SVFVariables.h	/^    typedef SVFLoopAndDomInfo::BBSet BBSet;$/;"	t	class:SVF::FunObjVar
BBSet	svf/include/Util/SVFLoopAndDomInfo.h	/^    typedef Set<const SVFBasicBlock*> BBSet;$/;"	t	class:SVF::SVFLoopAndDomInfo
BBToCondMap	svf/include/SABER/SaberCondAllocator.h	/^    typedef Map<const SVFBasicBlock*, Condition> BBToCondMap;	\/\/\/< map a basic block to its condition during control-flow guard computation$/;"	t	class:SVF::SaberCondAllocator
BBToMRSetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const SVFBasicBlock*, MRSet> BBToMRSetMap;$/;"	t	class:SVF::MemSSA
BBToPhiSetMap	svf/include/MSSA/MemSSA.h	/^    typedef OrderedMap<const SVFBasicBlock*, PHISet> BBToPhiSetMap;$/;"	t	class:SVF::MemSSA
BITCAST	svf/include/SVFIR/SVFStatements.h	/^        BITCAST,    \/\/ Type cast$/;"	e	enum:SVF::CopyStmt::CopyKind
BITS_PER_ELEMENT	svf/include/Util/SparseBitVector.h	/^        BITS_PER_ELEMENT = ElementSize$/;"	e	enum:SVF::SparseBitVectorElement::__anon25
BITVECTOR_H_	svf/include/Util/BitVector.h	13;"	d
BITWORDS_PER_ELEMENT	svf/include/Util/SparseBitVector.h	/^        BITWORDS_PER_ELEMENT = (ElementSize + BITWORD_SIZE - 1) \/ BITWORD_SIZE,$/;"	e	enum:SVF::SparseBitVectorElement::__anon25
BITWORD_SIZE	svf/include/Util/SparseBitVector.h	/^        BITWORD_SIZE = SparseBitVectorElement<ElementSize>::BITWORD_SIZE$/;"	e	enum:SVF::SparseBitVector::__anon26
BITWORD_SIZE	svf/include/Util/SparseBitVector.h	/^        BITWORD_SIZE = sizeof(BitWord) * CHAR_BIT,$/;"	e	enum:SVF::SparseBitVectorElement::__anon25
BRANCHFLAGMASK	svf/include/Util/SVFBugReport.h	40;"	d
BREAKCONSTANTGEPS_H	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	16;"	d
BS	svf/lib/AE/Core/RelationSolver.cpp	/^AbstractState RelationSolver::BS(const AbstractState& domain, const Z3Expr &phi)$/;"	f	class:RelationSolver
BS_time	svf-llvm/tools/AE/ae.cpp	/^    AbstractState BS_time(AbstractState& inv, const Z3Expr& phi,$/;"	f	class:SymblicAbstractionTest
BUF_OVERFLOW	svf/include/AE/Svfexe/AEDetector.h	/^        BUF_OVERFLOW,   \/\/\/< Detector for buffer overflow issues.$/;"	e	enum:SVF::AEDetector::DetectorKind
BV	svf/include/MemoryModel/PointsTo.h	/^        BV,$/;"	e	enum:SVF::PointsTo::Type
BV2Int	z3.obj/bin/python/z3/z3.py	/^def BV2Int(a, is_signed=False):$/;"	f
BVAddNoOverflow	z3.obj/bin/python/z3/z3.py	/^def BVAddNoOverflow(a, b, signed):$/;"	f
BVAddNoUnderflow	z3.obj/bin/python/z3/z3.py	/^def BVAddNoUnderflow(a, b):$/;"	f
BVDataImpl	svf/include/MemoryModel/PointerAnalysis.h	/^        BVDataImpl, \/\/\/< Represents BVDataPTAImpl.$/;"	e	enum:SVF::PointerAnalysis::PTAImplTy
BVDataPTAImpl	svf/include/MemoryModel/PointerAnalysisImpl.h	/^class BVDataPTAImpl : public PointerAnalysis$/;"	c	namespace:SVF
BVDataPTAImpl	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^BVDataPTAImpl::BVDataPTAImpl(SVFIR* p, PointerAnalysis::PTATY type, bool alias_check) :$/;"	f	class:BVDataPTAImpl
BVMulNoOverflow	z3.obj/bin/python/z3/z3.py	/^def BVMulNoOverflow(a, b, signed):$/;"	f
BVMulNoUnderflow	z3.obj/bin/python/z3/z3.py	/^def BVMulNoUnderflow(a, b):$/;"	f
BVRedAnd	z3.obj/bin/python/z3/z3.py	/^def BVRedAnd(a):$/;"	f
BVRedOr	z3.obj/bin/python/z3/z3.py	/^def BVRedOr(a):$/;"	f
BVSDivNoOverflow	z3.obj/bin/python/z3/z3.py	/^def BVSDivNoOverflow(a, b):$/;"	f
BVSNegNoOverflow	z3.obj/bin/python/z3/z3.py	/^def BVSNegNoOverflow(a):$/;"	f
BVSubNoOverflow	z3.obj/bin/python/z3/z3.py	/^def BVSubNoOverflow(a, b):$/;"	f
BVSubNoUnderflow	z3.obj/bin/python/z3/z3.py	/^def BVSubNoUnderflow(a, b, signed):$/;"	f
BWProcessCurNode	svf/include/SABER/SrcSnkSolver.h	/^    virtual void BWProcessCurNode(const DPIm&)$/;"	f	class:SVF::SrcSnkSolver
BWProcessCurNode	svf/include/Util/GraphReachSolver.h	/^    virtual void BWProcessCurNode(const DPIm&)$/;"	f	class:SVF::GraphReachSolver
BWProcessIncomingEdge	svf/include/SABER/SrcSnkSolver.h	/^    virtual void BWProcessIncomingEdge(const DPIm& item, GEDGE* edge)$/;"	f	class:SVF::SrcSnkSolver
BWProcessIncomingEdge	svf/include/Util/GraphReachSolver.h	/^    virtual void BWProcessIncomingEdge(const DPIm& item, GEDGE* edge)$/;"	f	class:SVF::GraphReachSolver
BWProcessIncomingEdge	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::BWProcessIncomingEdge(const DPIm&, SVFGEdge* edge)$/;"	f	class:SrcSnkDDA
Base	svf/include/AE/Core/ICFGWTO.h	/^    typedef WTO<ICFG> Base;$/;"	t	class:SVF::ICFGWTO
Base	svf/include/MemoryModel/AbstractPointsToDS.h	/^        Base,$/;"	e	enum:SVF::PTData::PTDataTy
BaseDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef DFPTData<Key, KeySet, Data, DataSet> BaseDFPTData;$/;"	t	class:SVF::MutableDFPTData
BaseDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef DFPTData<Key, KeySet, Data, DataSet> BaseDFPTData;$/;"	t	class:SVF::MutableIncDFPTData
BaseDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef DFPTData<Key, KeySet, Data, DataSet> BaseDFPTData;$/;"	t	class:SVF::PersistentDFPTData
BaseDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef DFPTData<Key, KeySet, Data, DataSet> BaseDFPTData;$/;"	t	class:SVF::PersistentIncDFPTData
BaseDiffPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef DiffPTData<Key, KeySet, Data, DataSet> BaseDiffPTData;$/;"	t	class:SVF::MutableDiffPTData
BaseDiffPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef DiffPTData<Key, KeySet, Data, DataSet> BaseDiffPTData;$/;"	t	class:SVF::PersistentDiffPTData
BaseImpl	svf/include/MemoryModel/PointerAnalysis.h	/^        BaseImpl,   \/\/\/< Represents PointerAnalaysis.$/;"	e	enum:SVF::PointerAnalysis::PTAImplTy
BaseMutDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef MutableDFPTData<Key, KeySet, Data, DataSet> BaseMutDFPTData;$/;"	t	class:SVF::MutableIncDFPTData
BaseMutPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef MutablePTData<Key, KeySet, Data, DataSet> BaseMutPTData;$/;"	t	class:SVF::MutableDFPTData
BaseMutPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef MutablePTData<Key, KeySet, Data, DataSet> BaseMutPTData;$/;"	t	class:SVF::MutableIncDFPTData
BaseObjNode	svf/include/SVFIR/SVFValue.h	/^        BaseObjNode,             \/\/ │   ├── Represents a base object node$/;"	e	enum:SVF::SVFValue::GNodeK
BaseObjVar	svf/include/SVFIR/SVFVariables.h	/^    BaseObjVar(NodeID i, ObjTypeInfo* ti,$/;"	f	class:SVF::BaseObjVar
BaseObjVar	svf/include/SVFIR/SVFVariables.h	/^    BaseObjVar(NodeID i, const ICFGNode* node, PNODEK ty = BaseObjNode) : ObjVar(i, ty), icfgNode(node) {}$/;"	f	class:SVF::BaseObjVar
BaseObjVar	svf/include/SVFIR/SVFVariables.h	/^class BaseObjVar : public ObjVar$/;"	c	namespace:SVF
BasePTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::DFPTData
BasePTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::DiffPTData
BasePTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::VersionedPTData
BasePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::MutableDFPTData
BasePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::MutableDiffPTData
BasePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::MutableIncDFPTData
BasePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::MutablePTData
BasePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::MutableVersionedPTData
BasePTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::PersistentDFPTData
BasePTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::PersistentDiffPTData
BasePTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::PersistentIncDFPTData
BasePTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::PersistentPTData
BasePTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PTData<Key, KeySet, Data, DataSet> BasePTData;$/;"	t	class:SVF::PersistentVersionedPTData
BasePersDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PersistentDFPTData<Key, KeySet, Data, DataSet> BasePersDFPTData;$/;"	t	class:SVF::PersistentIncDFPTData
BasePersPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PersistentPTData<Key, KeySet, Data, DataSet> BasePersPTData;$/;"	t	class:SVF::PersistentDFPTData
BasePersPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PersistentPTData<Key, KeySet, Data, DataSet> BasePersPTData;$/;"	t	class:SVF::PersistentDiffPTData
BasePersPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef PersistentPTData<Key, KeySet, Data, DataSet> BasePersPTData;$/;"	t	class:SVF::PersistentIncDFPTData
BaseVersionedPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef VersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet> BaseVersionedPTData;$/;"	t	class:SVF::MutableVersionedPTData
BaseVersionedPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef VersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet> BaseVersionedPTData;$/;"	t	class:SVF::PersistentVersionedPTData
BasicBlock	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::BasicBlock BasicBlock;$/;"	t	namespace:SVF
BasicBlockEdge	svf/include/Graphs/BasicBlockG.h	/^    BasicBlockEdge(SVFBasicBlock* s, SVFBasicBlock* d) : GenericBasicBlockEdgeTy(s, d, 0)$/;"	f	class:SVF::BasicBlockEdge
BasicBlockEdge	svf/include/Graphs/BasicBlockG.h	/^class BasicBlockEdge: public GenericBasicBlockEdgeTy$/;"	c	namespace:SVF
BasicBlockGraph	svf/include/Graphs/BasicBlockG.h	/^    BasicBlockGraph()$/;"	f	class:SVF::BasicBlockGraph
BasicBlockGraph	svf/include/Graphs/BasicBlockG.h	/^class BasicBlockGraph: public GenericBasicBlockGraphTy$/;"	c	namespace:SVF
BasicBlockKd	svf/include/SVFIR/SVFValue.h	/^        BasicBlockKd,     \/\/ Basic block node$/;"	e	enum:SVF::SVFValue::GNodeK
BasicBlockSet	svf/include/SABER/SaberCondAllocator.h	/^    typedef Set<const SVFBasicBlock*> BasicBlockSet;$/;"	t	class:SVF::SaberCondAllocator
BestCandidate	svf/include/Util/NodeIDAllocator.h	/^        static const std::string BestCandidate;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
BestCandidate	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::BestCandidate = "BestCandidate";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
Bilateral_time	svf-llvm/tools/AE/ae.cpp	/^    AbstractState Bilateral_time(AbstractState& inv, const Z3Expr& phi,$/;"	f	class:SymblicAbstractionTest
BinaryOPStmt	svf/include/SVFIR/SVFStatements.h	/^    BinaryOPStmt() : MultiOpndStmt(SVFStmt::BinaryOp) {}$/;"	f	class:SVF::BinaryOPStmt
BinaryOPStmt	svf/include/SVFIR/SVFStatements.h	/^class BinaryOPStmt: public MultiOpndStmt$/;"	c	namespace:SVF
BinaryOPStmt	svf/lib/SVFIR/SVFStatements.cpp	/^BinaryOPStmt::BinaryOPStmt(SVFVar* s, const OPVars& opnds, u32_t oc)$/;"	f	class:BinaryOPStmt
BinaryOPVFGNode	svf/include/Graphs/VFGNode.h	/^    BinaryOPVFGNode(NodeID id,const PAGNode* r): VFGNode(id,BinaryOp), res(r) { }$/;"	f	class:SVF::BinaryOPVFGNode
BinaryOPVFGNode	svf/include/Graphs/VFGNode.h	/^class BinaryOPVFGNode: public VFGNode$/;"	c	namespace:SVF
BinaryOp	svf/include/SVFIR/SVFStatements.h	/^        BinaryOp,$/;"	e	enum:SVF::SVFStmt::PEDGEK
BinaryOp	svf/include/SVFIR/SVFValue.h	/^        BinaryOp,         \/\/ ├── Represents a binary operation$/;"	e	enum:SVF::SVFValue::GNodeK
BinaryOpIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::BinaryOpIntrinsic BinaryOpIntrinsic;$/;"	t	namespace:SVF
BinaryOperator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::BinaryOperator BinaryOperator;$/;"	t	namespace:SVF
BitCastInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::BitCastInst BitCastInst;$/;"	t	namespace:SVF
BitNumber	svf/include/Util/SparseBitVector.h	/^        unsigned BitNumber;$/;"	m	class:SVF::SparseBitVector::SparseBitVectorIterator
BitVec	z3.obj/bin/python/z3/z3.py	/^def BitVec(name, bv, ctx=None):$/;"	f
BitVecNumRef	z3.obj/bin/python/z3/z3.py	/^class BitVecNumRef(BitVecRef):$/;"	c
BitVecRef	z3.obj/bin/python/z3/z3.py	/^class BitVecRef(ExprRef):$/;"	c
BitVecSort	z3.obj/bin/python/z3/z3.py	/^def BitVecSort(sz, ctx=None):$/;"	f
BitVecSortRef	z3.obj/bin/python/z3/z3.py	/^class BitVecSortRef(SortRef):$/;"	c
BitVecVal	z3.obj/bin/python/z3/z3.py	/^def BitVecVal(val, bv, ctx=None):$/;"	f
BitVecs	z3.obj/bin/python/z3/z3.py	/^def BitVecs(names, bv, ctx=None):$/;"	f
BitVector	svf/include/Util/BitVector.h	/^class BitVector : public CoreBitVector$/;"	c	namespace:SVF
BitVector	svf/include/Util/SparseBitVector.h	/^        const SparseBitVector<ElementSize> *BitVector = nullptr;$/;"	m	class:SVF::SparseBitVector::SparseBitVectorIterator
BitVector	svf/lib/Util/BitVector.cpp	/^BitVector::BitVector(BitVector &&bv)$/;"	f	class:SVF::BitVector
BitVector	svf/lib/Util/BitVector.cpp	/^BitVector::BitVector(const BitVector &bv)$/;"	f	class:SVF::BitVector
BitVector	svf/lib/Util/BitVector.cpp	/^BitVector::BitVector(size_t n)$/;"	f	class:SVF::BitVector
BitVector	svf/lib/Util/BitVector.cpp	/^BitVector::BitVector(void)$/;"	f	class:SVF::BitVector
Bits	svf/include/Util/SparseBitVector.h	/^        typename SparseBitVectorElement<ElementSize>::BitWord Bits;$/;"	m	class:SVF::SparseBitVector::SparseBitVectorIterator
Bits	svf/include/Util/SparseBitVector.h	/^    BitWord Bits[BITWORDS_PER_ELEMENT] = {0};$/;"	m	struct:SVF::SparseBitVectorElement
BlackHole	svf/include/Graphs/IRGraph.h	/^        BlackHole,$/;"	e	enum:SVF::IRGraph::SYMTYPE
BlackHoleAddr	svf/include/AE/Core/AddressValue.h	36;"	d
BlackHoleValNode	svf/include/SVFIR/SVFValue.h	/^        BlackHoleValNode,        \/\/ │   ├── Represents a black hole node$/;"	e	enum:SVF::SVFValue::GNodeK
BlackHoleValVar	svf/include/SVFIR/SVFVariables.h	/^    BlackHoleValVar(NodeID i, const SVFType* svfType, PNODEK ty = BlackHoleValNode)$/;"	f	class:SVF::BlackHoleValVar
BlackHoleValVar	svf/include/SVFIR/SVFVariables.h	/^class BlackHoleValVar : public ConstDataValVar$/;"	c	namespace:SVF
BlkPtr	svf/include/Graphs/IRGraph.h	/^        BlkPtr,$/;"	e	enum:SVF::IRGraph::SYMTYPE
BlockAddress	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::BlockAddress BlockAddress;$/;"	t	namespace:SVF
Bool	z3.obj/bin/python/z3/z3.py	/^def Bool(name, ctx=None):$/;"	f
BoolRef	z3.obj/bin/python/z3/z3.py	/^class BoolRef(ExprRef):$/;"	c
BoolSort	z3.obj/bin/python/z3/z3.py	/^def BoolSort(ctx=None):$/;"	f
BoolSortRef	z3.obj/bin/python/z3/z3.py	/^class BoolSortRef(SortRef):$/;"	c
BoolVal	z3.obj/bin/python/z3/z3.py	/^def BoolVal(val, ctx=None):$/;"	f
BoolVector	z3.obj/bin/python/z3/z3.py	/^def BoolVector(prefix, sz, ctx=None):$/;"	f
Bools	z3.obj/bin/python/z3/z3.py	/^def Bools(names, ctx=None):$/;"	f
BoundedDouble	svf/include/AE/Core/NumericValue.h	/^    BoundedDouble(BoundedDouble&& rhs) : _fVal(std::move(rhs._fVal)) {}$/;"	f	class:SVF::BoundedDouble
BoundedDouble	svf/include/AE/Core/NumericValue.h	/^    BoundedDouble(const BoundedDouble& rhs) : _fVal(rhs._fVal) {}$/;"	f	class:SVF::BoundedDouble
BoundedDouble	svf/include/AE/Core/NumericValue.h	/^    BoundedDouble(double fVal) : _fVal(fVal) {}$/;"	f	class:SVF::BoundedDouble
BoundedDouble	svf/include/AE/Core/NumericValue.h	/^class BoundedDouble$/;"	c	namespace:SVF
BoundedInt	svf/include/AE/Core/NumericValue.h	/^    BoundedInt(BoundedInt&& rhs) : _iVal(rhs._iVal), _isInf(rhs._isInf) {}$/;"	f	class:SVF::BoundedInt
BoundedInt	svf/include/AE/Core/NumericValue.h	/^    BoundedInt(const BoundedInt& rhs) : _iVal(rhs._iVal), _isInf(rhs._isInf) {}$/;"	f	class:SVF::BoundedInt
BoundedInt	svf/include/AE/Core/NumericValue.h	/^    BoundedInt(s64_t fVal) : _iVal(fVal), _isInf(false) {}$/;"	f	class:SVF::BoundedInt
BoundedInt	svf/include/AE/Core/NumericValue.h	/^    BoundedInt(s64_t fVal, bool isInf) : _iVal(fVal), _isInf(isInf) {}$/;"	f	class:SVF::BoundedInt
BoundedInt	svf/include/AE/Core/NumericValue.h	/^class BoundedInt$/;"	c	namespace:SVF
BoxedOptSolver	svf/lib/AE/Core/RelationSolver.cpp	/^Map<u32_t, s32_t> RelationSolver::BoxedOptSolver(const Z3Expr& phi, Map<u32_t, s32_t>& ret, Map<u32_t, s32_t>& low_values, Map<u32_t, s32_t>& high_values)$/;"	f	class:RelationSolver
Branch	svf/include/SVFIR/SVFStatements.h	/^        Branch,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Branch	svf/include/SVFIR/SVFValue.h	/^        Branch,           \/\/ ├── Represents a branch operation$/;"	e	enum:SVF::SVFValue::GNodeK
Branch	svf/include/Util/SVFBugReport.h	/^        Branch = 0x1,$/;"	e	enum:SVF::SVFBugEvent::EventType
BranchCondition	svf/include/Graphs/CDG.h	/^    typedef std::pair<const SVFVar *, s32_t> BranchCondition;$/;"	t	class:SVF::CDGEdge
BranchInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::BranchInst BranchInst;$/;"	t	namespace:SVF
BranchStmt	svf/include/SVFIR/SVFStatements.h	/^    BranchStmt() : SVFStmt(SVFStmt::Branch), cond{}, brInst{} {}$/;"	f	class:SVF::BranchStmt
BranchStmt	svf/include/SVFIR/SVFStatements.h	/^    BranchStmt(SVFVar* inst, SVFVar* c, const SuccAndCondPairVec& succs)$/;"	f	class:SVF::BranchStmt
BranchStmt	svf/include/SVFIR/SVFStatements.h	/^class BranchStmt: public SVFStmt$/;"	c	namespace:SVF
BranchVFGNode	svf/include/Graphs/VFGNode.h	/^    BranchVFGNode(NodeID id, const BranchStmt* r) : VFGNode(id, Branch), brstmt(r) { }$/;"	f	class:SVF::BranchVFGNode
BranchVFGNode	svf/include/Graphs/VFGNode.h	/^class BranchVFGNode: public VFGNode$/;"	c	namespace:SVF
BreakConstantGEPs	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    BreakConstantGEPs() : ModulePass(ID) {}$/;"	f	class:SVF::BreakConstantGEPs
BreakConstantGEPs	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^class BreakConstantGEPs : public ModulePass$/;"	c	namespace:SVF
BriefConsCGDotGraph	svf/include/Util/Options.h	/^    static const Option<bool> BriefConsCGDotGraph;$/;"	m	class:SVF::Options
BufOverflowDetector	svf/include/AE/Svfexe/AEDetector.h	/^    BufOverflowDetector()$/;"	f	class:SVF::BufOverflowDetector
BufOverflowDetector	svf/include/AE/Svfexe/AEDetector.h	/^class BufOverflowDetector : public AEDetector$/;"	c	namespace:SVF
BufferOverflowBug	svf/include/Util/SVFBugReport.h	/^    BufferOverflowBug(GenericBug::BugType bugType, const EventStack &eventStack,$/;"	f	class:SVF::BufferOverflowBug
BufferOverflowBug	svf/include/Util/SVFBugReport.h	/^class BufferOverflowBug: public GenericBug$/;"	c	namespace:SVF
BufferOverflowCheck	svf/include/Util/Options.h	/^    static const Option<bool> BufferOverflowCheck;$/;"	m	class:SVF::Options
BugSet	svf/include/Util/SVFBugReport.h	/^    typedef SVF::Set<const GenericBug *> BugSet;$/;"	t	class:SVF::SVFBugReport
BugType	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	g	class:SVF::GenericBug
BugType2Str	svf/include/Util/SVFBugReport.h	/^    static const std::map<GenericBug::BugType, std::string> BugType2Str;$/;"	m	class:SVF::GenericBug
BugType2Str	svf/lib/Util/SVFBugReport.cpp	/^const std::map<GenericBug::BugType, std::string> GenericBug::BugType2Str =$/;"	m	class:GenericBug	file:
BuildDirection	svf/include/CFL/CFLGraphBuilder.h	/^enum class BuildDirection$/;"	c	namespace:SVF
CALLCHI	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::CALLCHI CALLCHI;$/;"	t	class:SVF::SVFG
CALLCHI	svf/include/MSSA/MemSSA.h	/^    typedef CallCHI<Condition> CALLCHI;$/;"	t	class:SVF::MemSSA
CALLMU	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::CALLMU CALLMU;$/;"	t	class:SVF::SVFG
CALLMU	svf/include/MSSA/MemSSA.h	/^    typedef CallMU<Condition> CALLMU;$/;"	t	class:SVF::MemSSA
CBV	svf/include/MemoryModel/PointsTo.h	/^        CBV,$/;"	e	enum:SVF::PointsTo::Type
CDG	svf/include/Graphs/CDG.h	/^    CDG()$/;"	f	class:SVF::CDG
CDG	svf/include/Graphs/CDG.h	/^class CDG : public GenericCDGTy$/;"	c	namespace:SVF
CDGBuilder	svf/include/Util/CDGBuilder.h	/^    CDGBuilder() : _controlDG(CDG::getCDG())$/;"	f	class:SVF::CDGBuilder
CDGBuilder	svf/include/Util/CDGBuilder.h	/^class CDGBuilder$/;"	c	namespace:SVF
CDGEdge	svf/include/Graphs/CDG.h	/^    CDGEdge(CDGNode *s, CDGNode *d) : GenericCDGEdgeTy(s, d, 0)$/;"	f	class:SVF::CDGEdge
CDGEdge	svf/include/Graphs/CDG.h	/^class CDGEdge : public GenericCDGEdgeTy$/;"	c	namespace:SVF
CDGEdgeSetTy	svf/include/Graphs/CDG.h	/^    typedef CDGEdge::CDGEdgeSetTy CDGEdgeSetTy;$/;"	t	class:SVF::CDG
CDGEdgeSetTy	svf/include/Graphs/CDG.h	/^    typedef GenericNode<CDGNode, CDGEdge>::GEdgeSetTy CDGEdgeSetTy;$/;"	t	class:SVF::CDGEdge
CDGNode	svf/include/Graphs/CDG.h	/^    CDGNode(const ICFGNode *icfgNode) : GenericCDGNodeTy(icfgNode->getId(), CDNodeKd), _icfgNode(icfgNode)$/;"	f	class:SVF::CDGNode
CDGNode	svf/include/Graphs/CDG.h	/^class CDGNode : public GenericCDGNodeTy$/;"	c	namespace:SVF
CDGNodeIDToNodeMapTy	svf/include/Graphs/CDG.h	/^    typedef Map<NodeID, CDGNode *> CDGNodeIDToNodeMapTy;$/;"	t	class:SVF::CDG
CDNodeKd	svf/include/SVFIR/SVFValue.h	/^        CDNodeKd,         \/\/ Control dependence graph node$/;"	e	enum:SVF::SVFValue::GNodeK
CEDGEK	svf/include/Graphs/CallGraph.h	/^    enum CEDGEK$/;"	g	class:SVF::CallGraphEdge
CEDGEK	svf/include/MTA/TCT.h	/^    enum CEDGEK$/;"	g	class:SVF::TCTEdge
CFGNormalizer	svf/include/CFL/CFGNormalizer.h	/^    CFGNormalizer()$/;"	f	class:SVF::CFGNormalizer
CFGNormalizer	svf/include/CFL/CFGNormalizer.h	/^class CFGNormalizer$/;"	c	namespace:SVF
CFGrammar	svf/include/CFL/CFGrammar.h	/^class CFGrammar : public GrammarBase$/;"	c	namespace:SVF
CFGrammar	svf/lib/CFL/CFGrammar.cpp	/^CFGrammar::CFGrammar()$/;"	f	class:CFGrammar
CFLAlias	svf/include/CFL/CFLAlias.h	/^    CFLAlias(SVFIR* ir) : CFLBase(ir, PointerAnalysis::CFLFICI_WPA)$/;"	f	class:SVF::CFLAlias
CFLAlias	svf/include/CFL/CFLAlias.h	/^class CFLAlias : public CFLBase$/;"	c	namespace:SVF
CFLBase	svf/include/CFL/CFLBase.h	/^    CFLBase(SVFIR* ir, PointerAnalysis::PTATY pty) : BVDataPTAImpl(ir, pty), svfir(ir), graph(nullptr), grammar(nullptr), solver(nullptr)$/;"	f	class:SVF::CFLBase
CFLBase	svf/include/CFL/CFLBase.h	/^class CFLBase : public BVDataPTAImpl$/;"	c	namespace:SVF
CFLEdge	svf/include/Graphs/CFLGraph.h	/^    CFLEdge(CFLNode *s, CFLNode *d, GEdgeFlag k = 0):$/;"	f	class:SVF::CFLEdge
CFLEdge	svf/include/Graphs/CFLGraph.h	/^class CFLEdge: public GenericCFLEdgeTy$/;"	c	namespace:SVF
CFLEdgeDataTy	svf/include/Graphs/CFLGraph.h	/^    typedef std::map <GrammarBase::Symbol, CFLEdge::CFLEdgeSetTy> CFLEdgeDataTy;$/;"	t	class:SVF::CFLNode
CFLEdgeSet	svf/include/Graphs/CFLGraph.h	/^    typedef GenericNode<CFLNode,CFLEdge>::GEdgeSetTy CFLEdgeSet;$/;"	t	class:SVF::CFLGraph
CFLEdgeSetTy	svf/include/Graphs/CFLGraph.h	/^    typedef GenericNode<CFLNode, CFLEdge>::GEdgeSetTy CFLEdgeSetTy;$/;"	t	class:SVF::CFLEdge
CFLFICI_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        CFLFICI_WPA,		\/\/\/< Flow-, context-, insensitive CFL-reachability-based analysis$/;"	e	enum:SVF::PointerAnalysis::PTATY
CFLFIFOWorkList	svf/include/CFL/CFGrammar.h	/^    CFLFIFOWorkList() {}$/;"	f	class:SVF::CFLFIFOWorkList
CFLFIFOWorkList	svf/include/CFL/CFGrammar.h	/^class CFLFIFOWorkList$/;"	c	namespace:SVF
CFLFSCI_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        CFLFSCI_WPA,		\/\/\/< Flow-insensitive, context-sensitive CFL-reachability-based analysis$/;"	e	enum:SVF::PointerAnalysis::PTATY
CFLFSCS_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        CFLFSCS_WPA,	\/\/\/< Flow-, context-, CFL-reachability-based analysis$/;"	e	enum:SVF::PointerAnalysis::PTATY
CFLG_H_	svf/include/Graphs/CFLGraph.h	31;"	d
CFLGramGraphChecker	svf/include/CFL/CFLGramGraphChecker.h	/^class CFLGramGraphChecker$/;"	c	namespace:SVF
CFLGrammarStat	svf/lib/CFL/CFLStat.cpp	/^void CFLStat::CFLGrammarStat()$/;"	f	class:CFLStat
CFLGrammar_H_	svf/include/CFL/CFGrammar.h	30;"	d
CFLGraph	svf/include/Graphs/CFLGraph.h	/^    CFLGraph(Kind kind)$/;"	f	class:SVF::CFLGraph
CFLGraph	svf/include/Graphs/CFLGraph.h	/^class CFLGraph: public GenericCFLGraphTy$/;"	c	namespace:SVF
CFLGraph	svf/include/Util/Options.h	/^    static const Option<std::string> CFLGraph;$/;"	m	class:SVF::Options
CFLGraphBuilder	svf/include/CFL/CFLGraphBuilder.h	/^class CFLGraphBuilder$/;"	c	namespace:SVF
CFLGraphStat	svf/lib/CFL/CFLStat.cpp	/^void  CFLStat::CFLGraphStat()$/;"	f	class:CFLStat
CFLNode	svf/include/Graphs/CFLGraph.h	/^    CFLNode (NodeID i = 0, GNodeK k = CFLNodeKd):$/;"	f	class:SVF::CFLNode
CFLNode	svf/include/Graphs/CFLGraph.h	/^class CFLNode: public GenericCFLNodeTy$/;"	c	namespace:SVF
CFLNodeKd	svf/include/SVFIR/SVFValue.h	/^        CFLNodeKd,        \/\/ CFL graph node$/;"	e	enum:SVF::SVFValue::GNodeK
CFLSOLVER_H_	svf/include/SABER/SrcSnkSolver.h	31;"	d
CFLSOLVER_H_	svf/include/Util/GraphReachSolver.h	31;"	d
CFLSVFG	svf/include/Util/Options.h	/^    static const Option<bool>  CFLSVFG;$/;"	m	class:SVF::Options
CFLSVFGBuilder	svf/include/CFL/CFLSVFGBuilder.h	/^class CFLSVFGBuilder: public SaberSVFGBuilder$/;"	c	namespace:SVF
CFLSolver	svf/include/CFL/CFLSolver.h	/^    CFLSolver(CFLGraph* _graph, CFGrammar* _grammar): graph(_graph), grammar(_grammar)$/;"	f	class:SVF::CFLSolver
CFLSolver	svf/include/CFL/CFLSolver.h	/^class CFLSolver$/;"	c	namespace:SVF
CFLSolverStat	svf/lib/CFL/CFLStat.cpp	/^void CFLStat::CFLSolverStat()$/;"	f	class:CFLStat
CFLSrcSnkSolver	svf/include/SABER/SrcSnkDDA.h	/^typedef GraphReachSolver<SVFG*,CxtDPItem> CFLSrcSnkSolver;$/;"	t	namespace:SVF
CFLStat	svf/include/CFL/CFLStat.h	/^class CFLStat : public PTAStat$/;"	c	namespace:SVF
CFLStat	svf/lib/CFL/CFLStat.cpp	/^CFLStat::CFLStat(CFLBase* p): PTAStat(p),pta(p)$/;"	f	class:CFLStat
CFLVF	svf/include/CFL/CFLVF.h	/^    CFLVF(SVFIR* ir) : CFLBase(ir, PointerAnalysis::CFLFSCS_WPA)$/;"	f	class:SVF::CFLVF
CFLVF	svf/include/CFL/CFLVF.h	/^class CFLVF : public CFLBase$/;"	c	namespace:SVF
CFL_CFLSTAT_H_	svf/include/CFL/CFLStat.h	32;"	d
CFWorkList	svf/include/SABER/ProgSlice.h	/^    typedef FIFOWorkList<const SVFBasicBlock*> CFWorkList;	\/\/\/< worklist for control-flow guard computation$/;"	t	class:SVF::ProgSlice
CFWorkList	svf/include/SABER/SaberCondAllocator.h	/^    typedef FIFOWorkList<const SVFBasicBlock*> CFWorkList;	\/\/\/< worklist for control-flow guard computation$/;"	t	class:SVF::SaberCondAllocator
CGEK	svf/include/Graphs/CallGraph.h	/^    enum CGEK$/;"	g	class:SVF::CallGraph
CGSCC	svf/include/WPA/Andersen.h	/^    typedef SCCDetection<ConstraintGraph*> CGSCC;$/;"	t	class:SVF::Andersen
CGSCC	svf/include/WPA/CSC.h	/^typedef SCCDetection<ConstraintGraph *> CGSCC;$/;"	t	namespace:SVF
CHA_H_	svf/include/Graphs/CHG.h	34;"	d
CHECKER_TYPE	svf/include/SABER/SaberCheckerAPI.h	/^    enum CHECKER_TYPE$/;"	g	class:SVF::SaberCheckerAPI
CHEDGETYPE	svf/include/Graphs/CHG.h	/^    } CHEDGETYPE;$/;"	t	class:SVF::CHEdge	typeref:enum:SVF::CHEdge::__anon21
CHEdge	svf/include/Graphs/CHG.h	/^    CHEdge(CHNode* s, CHNode* d, CHEDGETYPE et, GEdgeFlag k = 0)$/;"	f	class:SVF::CHEdge
CHEdge	svf/include/Graphs/CHG.h	/^class CHEdge: public GenericCHEdgeTy$/;"	c	namespace:SVF
CHEdgeSetTy	svf/include/Graphs/CHG.h	/^    typedef GenericNode<CHNode, CHEdge>::GEdgeSetTy CHEdgeSetTy;$/;"	t	class:SVF::CHEdge
CHGBuilder	svf-llvm/include/SVF-LLVM/CHGBuilder.h	/^    CHGBuilder(CHGraph* c): chg(c)$/;"	f	class:SVF::CHGBuilder
CHGBuilder	svf-llvm/include/SVF-LLVM/CHGBuilder.h	/^class CHGBuilder$/;"	c	namespace:SVF
CHGKind	svf/include/Graphs/CHG.h	/^    enum CHGKind$/;"	g	class:SVF::CommonCHGraph
CHGraph	svf/include/Graphs/CHG.h	/^    CHGraph(): classNum(0), vfID(0), buildingCHGTime(0)$/;"	f	class:SVF::CHGraph
CHGraph	svf/include/Graphs/CHG.h	/^class CHGraph: public CommonCHGraph, public GenericCHGraphTy$/;"	c	namespace:SVF
CHI	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::CHI CHI;$/;"	t	class:SVF::SVFG
CHI	svf/include/MSSA/MemSSA.h	/^    typedef MSSACHI<Condition> CHI;$/;"	t	class:SVF::MemSSA
CHISet	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::CHISet CHISet;$/;"	t	class:SVF::SVFG
CHISet	svf/include/MSSA/MemSSA.h	/^    typedef Set<CHI*> CHISet;$/;"	t	class:SVF::MemSSA
CHITYPE	svf/include/MSSA/MSSAMuChi.h	/^    typedef typename MSSADEF::DEFTYPE CHITYPE;$/;"	t	class:SVF::MSSACHI
CHNode	svf/include/Graphs/CHG.h	/^    CHNode (const std::string& name, NodeID i = 0, GNodeK k = CHNodeKd):$/;"	f	class:SVF::CHNode
CHNode	svf/include/Graphs/CHG.h	/^class CHNode: public GenericCHNodeTy$/;"	c	namespace:SVF
CHNodeKd	svf/include/SVFIR/SVFValue.h	/^        CHNodeKd,         \/\/ Class hierarchy graph node$/;"	e	enum:SVF::SVFValue::GNodeK
CHNodeSetTy	svf-llvm/include/SVF-LLVM/CHGBuilder.h	/^    typedef CHGraph::CHNodeSetTy CHNodeSetTy;$/;"	t	class:SVF::CHGBuilder
CHNodeSetTy	svf/include/Graphs/CHG.h	/^    typedef Set<const CHNode*> CHNodeSetTy;$/;"	t	class:SVF::CHGraph
CILockToSpan	svf/include/MTA/LockAnalysis.h	/^    typedef Map<const ICFGNode*, CISpan>CILockToSpan;$/;"	t	class:SVF::LockAnalysis
CIRCO	svf/include/Graphs/GraphWriter.h	/^    CIRCO$/;"	e	enum:SVF::GraphProgram::Name
CISpan	svf/include/MTA/LockAnalysis.h	/^    typedef InstSet CISpan;$/;"	t	class:SVF::LockAnalysis
CJSON_CDECL	svf/include/Util/cJSON.h	55;"	d
CJSON_CDECL	svf/include/Util/cJSON.h	71;"	d
CJSON_EXPORT_SYMBOLS	svf/include/Util/cJSON.h	60;"	d
CJSON_NESTING_LIMIT	svf/include/Util/cJSON.h	137;"	d
CJSON_PUBLIC	svf/include/Util/cJSON.h	64;"	d
CJSON_PUBLIC	svf/include/Util/cJSON.h	66;"	d
CJSON_PUBLIC	svf/include/Util/cJSON.h	68;"	d
CJSON_PUBLIC	svf/include/Util/cJSON.h	75;"	d
CJSON_PUBLIC	svf/include/Util/cJSON.h	77;"	d
CJSON_STDCALL	svf/include/Util/cJSON.h	56;"	d
CJSON_STDCALL	svf/include/Util/cJSON.h	72;"	d
CJSON_VERSION_MAJOR	svf/include/Util/cJSON.h	82;"	d
CJSON_VERSION_MINOR	svf/include/Util/cJSON.h	83;"	d
CJSON_VERSION_PATCH	svf/include/Util/cJSON.h	84;"	d
CK_ALLOC	svf/include/SABER/SaberCheckerAPI.h	/^        CK_ALLOC,		\/\/\/ memory allocation$/;"	e	enum:SVF::SaberCheckerAPI::CHECKER_TYPE
CK_DUMMY	svf/include/SABER/SaberCheckerAPI.h	/^        CK_DUMMY = 0,		\/\/\/ dummy type$/;"	e	enum:SVF::SaberCheckerAPI::CHECKER_TYPE
CK_FCLOSE	svf/include/SABER/SaberCheckerAPI.h	/^        CK_FCLOSE		\/\/\/ File close$/;"	e	enum:SVF::SaberCheckerAPI::CHECKER_TYPE
CK_FOPEN	svf/include/SABER/SaberCheckerAPI.h	/^        CK_FOPEN,		\/\/\/ File open$/;"	e	enum:SVF::SaberCheckerAPI::CHECKER_TYPE
CK_FREE	svf/include/SABER/SaberCheckerAPI.h	/^        CK_FREE,      \/\/\/ memory deallocation$/;"	e	enum:SVF::SaberCheckerAPI::CHECKER_TYPE
CLASSATTR	svf-llvm/include/SVF-LLVM/DCHG.h	/^    } CLASSATTR;$/;"	t	class:SVF::DCHNode	typeref:enum:SVF::DCHNode::__anon12
CLASSATTR	svf/include/Graphs/CHG.h	/^    } CLASSATTR;$/;"	t	class:SVF::CHNode	typeref:enum:SVF::CHNode::__anon22
CLOCK_IN_MS	svf/include/SVFIR/SVFType.h	527;"	d
CMAKE_BINARY_DIR	Release-build/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/AE/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/CFL/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/DDA/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/Example/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/LLVM2SVF/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/MTA/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/SABER/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf-llvm/tools/WPA/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_BINARY_DIR	Release-build/svf/Makefile	/^CMAKE_BINARY_DIR = \/root\/SVF\/Release-build$/;"	m
CMAKE_COMMAND	Release-build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/AE/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/CFL/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/DDA/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/Example/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/LLVM2SVF/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/MTA/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/SABER/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf-llvm/tools/WPA/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	Release-build/svf/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	Release-build/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/AE/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/CFL/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/DDA/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/Example/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/LLVM2SVF/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/MTA/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/SABER/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf-llvm/tools/WPA/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
CMAKE_SOURCE_DIR	Release-build/svf/Makefile	/^CMAKE_SOURCE_DIR = \/root\/SVF$/;"	m
COMMANDLINE_H_	svf/include/Util/CommandLine.h	2;"	d
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	109;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	123;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	138;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	175;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	198;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	205;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	220;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	228;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	236;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	272;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	281;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	339;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	346;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	360;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	376;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	386;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	404;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	414;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	428;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	445;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	448;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	123;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	162;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	169;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	192;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	222;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	230;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	266;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	275;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	290;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	305;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	320;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	378;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	396;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	406;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	424;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	427;"	d	file:
COMPILER_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	258;"	d	file:
COMPILER_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	252;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	336;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	343;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	419;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	424;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	259;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	331;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	411;"	d	file:
COMPILER_VERSION_INTERNAL	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	416;"	d	file:
COMPILER_VERSION_INTERNAL_STR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_INTERNAL_STR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_INTERNAL_STR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
COMPILER_VERSION_INTERNAL_STR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	246;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	191;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	221;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	310;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	321;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	333;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	340;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	350;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	35;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	361;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	377;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	388;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	407;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	416;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	421;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	430;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	435;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	231;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	276;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	293;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	298;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	338;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	366;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	368;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	399;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	408;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	413;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	81;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	151;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	156;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	184;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	208;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	250;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	261;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	283;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	306;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	322;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	351;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	362;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	379;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	389;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	417;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	422;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	436;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	135;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	255;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	310;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	322;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	329;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	350;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	371;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	381;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	82;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	216;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	245;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	251;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	277;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	290;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	307;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	312;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	342;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	352;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	364;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	382;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	409;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	418;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	423;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	432;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	437;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	114;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	173;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	245;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	256;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	271;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	295;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	311;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	323;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	352;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	374;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	385;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	388;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	410;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	400;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	410;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	317;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	392;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	402;"	d	file:
COMPILER_VERSION_TWEAK	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
CONDVAR_H_	svf/include/MemoryModel/ConditionalPT.h	31;"	d
CONFIG_H_IN	Release-build/include/Util/config.h	2;"	d
CONSGEDGE_H_	svf/include/Graphs/ConsGEdge.h	31;"	d
CONSGNODE_H_	svf/include/Graphs/ConsGNode.h	31;"	d
CONSG_H_	svf/include/Graphs/ConsG.h	31;"	d
CONSTRUCTOR	svf/include/Graphs/CHG.h	/^        CONSTRUCTOR = 0x1, \/\/ connect node based on constructor$/;"	e	enum:SVF::CHGraph::__anon23
CONST_ARRAY_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        CONST_ARRAY_OBJ = 0x100,  \/\/ constant array$/;"	e	enum:SVF::ObjTypeInfo::__anon18
CONST_DATA	svf/include/SVFIR/ObjTypeInfo.h	/^        CONST_DATA = 0x400,  \/\/ constant object str e.g. 5, 10, 1.0$/;"	e	enum:SVF::ObjTypeInfo::__anon18
CONST_GLOBAL_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        CONST_GLOBAL_OBJ = 0x200,  \/\/ global constant object$/;"	e	enum:SVF::ObjTypeInfo::__anon18
CONST_STRUCT_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        CONST_STRUCT_OBJ = 0x80,  \/\/ constant struct$/;"	e	enum:SVF::ObjTypeInfo::__anon18
CONTEXT_LEAK	svf/include/SABER/LeakChecker.h	/^        CONTEXT_LEAK,$/;"	e	enum:SVF::LeakChecker::LEAK_TYPE
COPYVAL	svf/include/SVFIR/SVFStatements.h	/^        COPYVAL,    \/\/ Value copies (default one)$/;"	e	enum:SVF::CopyStmt::CopyKind
COREBITVECTOR_H_	svf/include/Util/CoreBitVector.h	13;"	d
CPPUtil_H_	svf-llvm/include/SVF-LLVM/CppUtil.h	31;"	d
CPU	svf/include/Util/SVFStat.h	/^        CPU,$/;"	e	enum:SVF::SVFStat::ClockType
CPtSet	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef CondStdSet<CVar>  CPtSet;$/;"	t	class:SVF::CondPTAImpl
CSC	svf/include/WPA/CSC.h	/^    CSC(ConstraintGraph* g, CGSCC* c)$/;"	f	class:SVF::CSC
CSC	svf/include/WPA/CSC.h	/^class CSC$/;"	c	namespace:SVF
CSCallString_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        CSCallString_WPA,	\/\/\/< Call string based context sensitive WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
CSSummary_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        CSSummary_WPA,		\/\/\/< Summary based context sensitive WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
CSToArgsListMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const CallICFGNode*,SVFVarList> CSToArgsListMap;$/;"	t	class:SVF::SVFIR
CSToCallNodeMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    CSToCallNodeMapTy CSToCallNodeMap; \/\/\/< map a callsite to its CallICFGNode$/;"	m	class:SVF::LLVMModuleSet
CSToCallNodeMapTy	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef Map<const Instruction*, CallICFGNode *> CSToCallNodeMapTy;$/;"	t	class:SVF::ICFGBuilder
CSToCallNodeMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Instruction*, CallICFGNode *> CSToCallNodeMapTy;$/;"	t	class:SVF::LLVMModuleSet
CSToRetMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const RetICFGNode*,const SVFVar*> CSToRetMap;$/;"	t	class:SVF::SVFIR
CSToRetNodeMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    CSToRetNodeMapTy CSToRetNodeMap; \/\/\/< map a callsite to its RetICFGNode$/;"	m	class:SVF::LLVMModuleSet
CSToRetNodeMapTy	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef Map<const Instruction*, RetICFGNode *> CSToRetNodeMapTy;$/;"	t	class:SVF::ICFGBuilder
CSToRetNodeMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Instruction*, RetICFGNode *> CSToRetNodeMapTy;$/;"	t	class:SVF::LLVMModuleSet
CSWorkList	svf/include/SABER/LeakChecker.h	/^    typedef FIFOWorkList<const CallICFGNode*> CSWorkList;$/;"	t	class:SVF::LeakChecker
CVar	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef CondVar<Cond> CVar;$/;"	t	class:SVF::CondPTAImpl
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	818;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	820;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	822;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	824;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	826;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	828;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	830;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	834;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	836;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	840;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	842;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	846;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	848;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	850;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	854;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	856;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	859;"	d	file:
CXX_STD	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	861;"	d	file:
CXX_STD_11	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	810;"	d	file:
CXX_STD_14	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	811;"	d	file:
CXX_STD_17	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	812;"	d	file:
CXX_STD_20	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	813;"	d	file:
CXX_STD_23	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	814;"	d	file:
CXX_STD_98	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	809;"	d	file:
C_STD	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	836;"	d	file:
C_STD_11	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	831;"	d	file:
C_STD_17	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	832;"	d	file:
C_STD_23	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	833;"	d	file:
C_STD_99	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	830;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	841;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	843;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	846;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	848;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	850;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	852;"	d	file:
C_VERSION	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	854;"	d	file:
Call	svf/include/SVFIR/SVFStatements.h	/^        Call,$/;"	e	enum:SVF::SVFStmt::PEDGEK
CallBase	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::CallBase CallBase;$/;"	t	namespace:SVF
CallBrInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::CallBrInst CallBrInst;$/;"	t	namespace:SVF
CallCF	svf/include/Graphs/ICFGEdge.h	/^        CallCF,$/;"	e	enum:SVF::ICFGEdge::ICFGEdgeK
CallCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    CallCFGEdge(ICFGNode* s, ICFGNode* d)$/;"	f	class:SVF::CallCFGEdge
CallCFGEdge	svf/include/Graphs/ICFGEdge.h	/^class CallCFGEdge : public ICFGEdge$/;"	c	namespace:SVF
CallCHI	svf/include/MSSA/MSSAMuChi.h	/^    CallCHI(const CallICFGNode* cs, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::CallCHI
CallCHI	svf/include/MSSA/MSSAMuChi.h	/^class CallCHI : public MSSACHI<Cond>$/;"	c	namespace:SVF
CallDirSVFGEdge	svf/include/Graphs/VFGEdge.h	/^    CallDirSVFGEdge(VFGNode* s, VFGNode* d, CallSiteID id):$/;"	f	class:SVF::CallDirSVFGEdge
CallDirSVFGEdge	svf/include/Graphs/VFGEdge.h	/^class CallDirSVFGEdge : public DirectSVFGEdge$/;"	c	namespace:SVF
CallDirVF	svf/include/Graphs/VFGEdge.h	/^        CallDirVF,$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
CallEdgeMap	svf/include/DDA/FlowDDA.h	/^    typedef BVDataPTAImpl::CallEdgeMap	CallEdgeMap;$/;"	t	class:SVF::FlowDDA
CallEdgeMap	svf/include/Graphs/CallGraph.h	/^    typedef OrderedMap<const CallICFGNode*, FunctionSet> CallEdgeMap;$/;"	t	class:SVF::CallGraph
CallEdgeMap	svf/include/MSSA/SVFGBuilder.h	/^    typedef PointerAnalysis::CallEdgeMap CallEdgeMap;$/;"	t	class:SVF::SVFGBuilder
CallEdgeMap	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef OrderedMap<const CallICFGNode*, FunctionSet> CallEdgeMap;$/;"	t	class:SVF::PointerAnalysis
CallGraph	svf/include/Graphs/CallGraph.h	/^class CallGraph : public GenericPTACallGraphTy$/;"	c	namespace:SVF
CallGraph	svf/lib/Graphs/CallGraph.cpp	/^CallGraph::CallGraph(CGEK k): kind(k)$/;"	f	class:CallGraph
CallGraph	svf/lib/Graphs/CallGraph.cpp	/^CallGraph::CallGraph(const CallGraph& other)$/;"	f	class:CallGraph
CallGraphBuilder	svf/include/Util/CallGraphBuilder.h	/^class CallGraphBuilder$/;"	c	namespace:SVF
CallGraphDotGraph	svf/include/Util/Options.h	/^    static const Option<bool> CallGraphDotGraph;$/;"	m	class:SVF::Options
CallGraphEdge	svf/include/Graphs/CallGraph.h	/^    CallGraphEdge(CallGraphNode* s, CallGraphNode* d, CEDGEK kind, CallSiteID cs) :$/;"	f	class:SVF::CallGraphEdge
CallGraphEdge	svf/include/Graphs/CallGraph.h	/^class CallGraphEdge : public GenericPTACallGraphEdgeTy$/;"	c	namespace:SVF
CallGraphEdgeConstIter	svf/include/Graphs/CallGraph.h	/^    typedef CallGraphEdgeSet::const_iterator CallGraphEdgeConstIter;$/;"	t	class:SVF::CallGraph
CallGraphEdgeIter	svf/include/Graphs/CallGraph.h	/^    typedef CallGraphEdgeSet::iterator CallGraphEdgeIter;$/;"	t	class:SVF::CallGraph
CallGraphEdgeSet	svf/include/Graphs/CallGraph.h	/^    typedef CallGraphEdge::CallGraphEdgeSet CallGraphEdgeSet;$/;"	t	class:SVF::CallGraph
CallGraphEdgeSet	svf/include/Graphs/CallGraph.h	/^    typedef GenericNode<CallGraphNode, CallGraphEdge>::GEdgeSetTy CallGraphEdgeSet;$/;"	t	class:SVF::CallGraphEdge
CallGraphNode	svf/include/Graphs/CallGraph.h	/^    CallGraphNode(NodeID i, const FunObjVar* f) : GenericPTACallGraphNodeTy(i,CallNodeKd), fun(f)$/;"	f	class:SVF::CallGraphNode
CallGraphNode	svf/include/Graphs/CallGraph.h	/^class CallGraphNode : public GenericPTACallGraphNodeTy$/;"	c	namespace:SVF
CallGraphSCC	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    typedef SCCDetection<CallGraph*> CallGraphSCC;$/;"	t	class:SVF::AbstractInterpretation
CallGraphSCC	svf/include/DDA/DDAVFSolver.h	/^    typedef SCCDetection<CallGraph*> CallGraphSCC;$/;"	t	class:SVF::DDAVFSolver
CallGraphSCC	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef SCCDetection<CallGraph*> CallGraphSCC;$/;"	t	class:SVF::PointerAnalysis
CallICFGNode	svf/include/Graphs/ICFGNode.h	/^    CallICFGNode(NodeID id) : InterICFGNode(id, FunCallBlock), ret{} {}$/;"	f	class:SVF::CallICFGNode
CallICFGNode	svf/include/Graphs/ICFGNode.h	/^    CallICFGNode(NodeID id, const SVFBasicBlock* b, const SVFType* ty,$/;"	f	class:SVF::CallICFGNode
CallICFGNode	svf/include/Graphs/ICFGNode.h	/^class CallICFGNode : public InterICFGNode$/;"	c	namespace:SVF
CallIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^    CallIndSVFGEdge(VFGNode* s, VFGNode* d, CallSiteID id):$/;"	f	class:SVF::CallIndSVFGEdge
CallIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^class CallIndSVFGEdge : public IndirectSVFGEdge$/;"	c	namespace:SVF
CallIndVF	svf/include/Graphs/VFGEdge.h	/^        CallIndVF,$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
CallInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::CallInst CallInst;$/;"	t	namespace:SVF
CallInstSet	svf/include/DDA/DDAVFSolver.h	/^    typedef CallGraphEdge::CallInstSet CallInstSet;$/;"	t	class:SVF::DDAVFSolver
CallInstSet	svf/include/Graphs/CallGraph.h	/^    typedef Set<const CallICFGNode*> CallInstSet;$/;"	t	class:SVF::CallGraphEdge
CallInstToCallGraphEdgesMap	svf/include/Graphs/CallGraph.h	/^    typedef Map<const CallICFGNode*, CallGraphEdgeSet> CallInstToCallGraphEdgesMap;$/;"	t	class:SVF::CallGraph
CallInstToForkEdgesMap	svf/include/Graphs/ThreadCallGraph.h	/^    typedef Map<const CallICFGNode*, ForkEdgeSet> CallInstToForkEdgesMap;$/;"	t	class:SVF::ThreadCallGraph
CallInstToJoinEdgesMap	svf/include/Graphs/ThreadCallGraph.h	/^    typedef Map<const CallICFGNode*, JoinEdgeSet> CallInstToJoinEdgesMap;$/;"	t	class:SVF::ThreadCallGraph
CallInstToParForEdgesMap	svf/include/Graphs/ThreadCallGraph.h	/^    typedef Map<const CallICFGNode*, ParForEdgeSet> CallInstToParForEdgesMap;$/;"	t	class:SVF::ThreadCallGraph
CallMSSACHI	svf/include/MSSA/MSSAMuChi.h	/^        CallMSSACHI,$/;"	e	enum:SVF::MSSADEF::DEFTYPE
CallMSSAMU	svf/include/MSSA/MSSAMuChi.h	/^        LoadMSSAMU, CallMSSAMU, RetMSSAMU$/;"	e	enum:SVF::MSSAMU::MUTYPE
CallMU	svf/include/MSSA/MSSAMuChi.h	/^    CallMU(const CallICFGNode* cs, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::CallMU
CallMU	svf/include/MSSA/MSSAMuChi.h	/^class CallMU : public MSSAMU<Cond>$/;"	c	namespace:SVF
CallNodeKd	svf/include/SVFIR/SVFValue.h	/^        CallNodeKd,       \/\/ Callgraph node$/;"	e	enum:SVF::SVFValue::GNodeK
CallNodeToCHNodesMap	svf/include/Graphs/CHG.h	/^    typedef Map<const ICFGNode*, CHNodeSetTy> CallNodeToCHNodesMap;$/;"	t	class:SVF::CHGraph
CallNodeToVFunSetMap	svf/include/Graphs/CHG.h	/^    typedef Map<const ICFGNode*, VFunSet> CallNodeToVFunSetMap;$/;"	t	class:SVF::CHGraph
CallNodeToVTableSetMap	svf/include/Graphs/CHG.h	/^    typedef Map<const ICFGNode*, VTableSet> CallNodeToVTableSetMap;$/;"	t	class:SVF::CHGraph
CallPE	svf/include/SVFIR/SVFStatements.h	/^    CallPE(GEdgeFlag k = SVFStmt::Call) : AssignStmt(k), call{}, entry{} {}$/;"	f	class:SVF::CallPE
CallPE	svf/include/SVFIR/SVFStatements.h	/^class CallPE: public AssignStmt$/;"	c	namespace:SVF
CallPE	svf/lib/SVFIR/SVFStatements.cpp	/^CallPE::CallPE(SVFVar* s, SVFVar* d, const CallICFGNode* i,$/;"	f	class:CallPE
CallPESet	svf/include/Graphs/ICFGNode.h	/^    typedef Set<const CallPE *> CallPESet;$/;"	t	class:SVF::ICFGNode
CallPESet	svf/include/Graphs/VFG.h	/^    typedef FormalParmVFGNode::CallPESet CallPESet;$/;"	t	class:SVF::VFG
CallPESet	svf/include/Graphs/VFGNode.h	/^    typedef Set<const CallPE*> CallPESet;$/;"	t	class:SVF::VFGNode
CallRetEdge	svf/include/Graphs/CallGraph.h	/^        CallRetEdge,TDForkEdge,TDJoinEdge,HareParForEdge$/;"	e	enum:SVF::CallGraphEdge::CEDGEK
CallSite	svf/include/Util/SVFBugReport.h	/^        CallSite = 0x3,$/;"	e	enum:SVF::SVFBugEvent::EventType
CallSite2DummyValPN	svf/include/CFL/CFLAlias.h	/^    typedef OrderedMap<const CallICFGNode*, NodeID> CallSite2DummyValPN;$/;"	t	class:SVF::CFLAlias
CallSite2DummyValPN	svf/include/WPA/Andersen.h	/^    typedef OrderedMap<const CallICFGNode*, NodeID> CallSite2DummyValPN;$/;"	t	class:SVF::AndersenBase
CallSiteID	svf/include/Util/GeneralType.h	/^typedef unsigned CallSiteID;$/;"	t	namespace:SVF
CallSitePair	svf/include/Graphs/CallGraph.h	/^    typedef std::pair<const CallICFGNode*, const FunObjVar*> CallSitePair;$/;"	t	class:SVF::CallGraph
CallSiteSet	svf/include/DDA/DDAVFSolver.h	/^    typedef SVFIR::CallSiteSet CallSiteSet;$/;"	t	class:SVF::DDAVFSolver
CallSiteSet	svf/include/DDA/FlowDDA.h	/^    typedef BVDataPTAImpl::CallSiteSet CallSiteSet;$/;"	t	class:SVF::FlowDDA
CallSiteSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef InstSet CallSiteSet;$/;"	t	class:SVF::ThreadCallGraph
CallSiteSet	svf/include/MSSA/SVFGBuilder.h	/^    typedef PointerAnalysis::CallSiteSet CallSiteSet;$/;"	t	class:SVF::SVFGBuilder
CallSiteSet	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef Set<const CallICFGNode*> CallSiteSet;$/;"	t	class:SVF::PointerAnalysis
CallSiteSet	svf/include/SABER/SrcSnkDDA.h	/^    typedef Set<const CallICFGNode*> CallSiteSet;$/;"	t	class:SVF::SrcSnkDDA
CallSiteSet	svf/include/SVFIR/SVFIR.h	/^    typedef Set<const CallICFGNode*> CallSiteSet;$/;"	t	class:SVF::SVFIR
CallSiteToActualINsMapTy	svf/include/Graphs/SVFG.h	/^    typedef Map<const CallICFGNode*, ActualINSVFGNodeSet>  CallSiteToActualINsMapTy;$/;"	t	class:SVF::SVFG
CallSiteToActualOUTsMapTy	svf/include/Graphs/SVFG.h	/^    typedef Map<const CallICFGNode*, ActualOUTSVFGNodeSet>  CallSiteToActualOUTsMapTy;$/;"	t	class:SVF::SVFG
CallSiteToCHISetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const CallICFGNode*, CHISet> CallSiteToCHISetMap;$/;"	t	class:SVF::MemSSA
CallSiteToFunPtrMap	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef SVFIR::CallSiteToFunPtrMap CallSiteToFunPtrMap;$/;"	t	class:SVF::PointerAnalysis
CallSiteToFunPtrMap	svf/include/SVFIR/SVFIR.h	/^    typedef OrderedMap<const CallICFGNode*,NodeID> CallSiteToFunPtrMap;$/;"	t	class:SVF::SVFIR
CallSiteToIdMap	svf/include/Graphs/CallGraph.h	/^    typedef Map<CallSitePair, CallSiteID> CallSiteToIdMap;$/;"	t	class:SVF::CallGraph
CallSiteToMRsMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const CallICFGNode*, MRSet> CallSiteToMRsMap;$/;"	t	class:SVF::MRGenerator
CallSiteToMUSetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const CallICFGNode*, MUSet> CallSiteToMUSetMap;$/;"	t	class:SVF::MemSSA
CallSiteToNodeBSMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const CallICFGNode*, NodeBS> CallSiteToNodeBSMap;$/;"	t	class:SVF::MRGenerator
CallSiteToPointsToMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const CallICFGNode*, NodeBS> CallSiteToPointsToMap;$/;"	t	class:SVF::MRGenerator
CallStrCxt	svf/include/Util/GeneralType.h	/^                    typedef std::vector<u32_t> CallStrCxt;$/;"	t	namespace:SVF
Caller	svf/include/Util/SVFBugReport.h	/^        Caller = 0x2,$/;"	e	enum:SVF::SVFBugEvent::EventType
CastInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::CastInst CastInst;$/;"	t	namespace:SVF
Cbrt	z3.obj/bin/python/z3/z3.py	/^def Cbrt(a, ctx=None):$/;"	f
Check	z3.obj/bin/python/z3/z3core.py	/^  def Check(self, ctx):$/;"	m	class:Elementaries
CheckSatResult	z3.obj/bin/python/z3/z3.py	/^class CheckSatResult:$/;"	c
ChildIteratorType	svf/include/Graphs/GenericGraph.h	/^    typedef mapped_iter<typename SVF::GenericNode<NodeTy,EdgeTy>::iterator, decltype(&edge_dest)> ChildIteratorType;$/;"	t	struct:SVF::GenericGraphTraits
ChildIteratorType	svf/lib/Graphs/CallGraph.cpp	/^    typedef NodeType::iterator ChildIteratorType;$/;"	t	struct:SVF::DOTGraphTraits	file:
ChildIteratorType	svf/lib/Graphs/IRGraph.cpp	/^    typedef NodeType::iterator ChildIteratorType;$/;"	t	struct:SVF::DOTGraphTraits	file:
ChildIteratorType	svf/lib/MTA/TCT.cpp	/^    typedef NodeType::iterator ChildIteratorType;$/;"	t	struct:SVF::DOTGraphTraits	file:
ChoiceFormatObject	z3.obj/bin/python/z3/z3printer.py	/^class ChoiceFormatObject(NAryFormatObject):$/;"	c
ClockType	svf/include/Util/Options.h	/^    static const OptionMap<enum PTAStat::ClockType> ClockType;$/;"	m	class:SVF::Options
ClockType	svf/include/Util/SVFStat.h	/^    enum ClockType$/;"	g	class:SVF::SVFStat
ClusterAnder	svf/include/Util/Options.h	/^    static const Option<bool> ClusterAnder;$/;"	m	class:SVF::Options
ClusterFs	svf/include/Util/Options.h	/^    static const Option<bool> ClusterFs;$/;"	m	class:SVF::Options
ClusterMethod	svf/include/Util/Options.h	/^    static const OptionMap<enum hclust_fast_methods> ClusterMethod;$/;"	m	class:SVF::Options
Clusterer	svf/include/Util/NodeIDAllocator.h	/^    class Clusterer$/;"	c	class:SVF::NodeIDAllocator
Cmp	svf/include/SVFIR/SVFStatements.h	/^        Cmp,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Cmp	svf/include/SVFIR/SVFValue.h	/^        Cmp,              \/\/ ├── Represents a comparison operation$/;"	e	enum:SVF::SVFValue::GNodeK
CmpInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::CmpInst CmpInst;$/;"	t	namespace:SVF
CmpStmt	svf/include/SVFIR/SVFStatements.h	/^    CmpStmt() : MultiOpndStmt(SVFStmt::Cmp) {}$/;"	f	class:SVF::CmpStmt
CmpStmt	svf/include/SVFIR/SVFStatements.h	/^class CmpStmt: public MultiOpndStmt$/;"	c	namespace:SVF
CmpStmt	svf/lib/SVFIR/SVFStatements.cpp	/^CmpStmt::CmpStmt(SVFVar* s, const OPVars& opnds, u32_t pre)$/;"	f	class:CmpStmt
CmpVFGNode	svf/include/Graphs/VFGNode.h	/^    CmpVFGNode(NodeID id,const PAGNode* r): VFGNode(id,Cmp), res(r) { }$/;"	f	class:SVF::CmpVFGNode
CmpVFGNode	svf/include/Graphs/VFGNode.h	/^class CmpVFGNode: public VFGNode$/;"	c	namespace:SVF
CollapseTime	svf/include/WPA/WPAStat.h	/^    static const char* CollapseTime;$/;"	m	class:SVF::AndersenStat
CollapseTime	svf/lib/WPA/AndersenStat.cpp	/^const char* AndersenStat::CollapseTime = "CollapseTime";$/;"	m	class:AndersenStat	file:
CollectExtRetGlobals	svf/include/Util/Options.h	/^    static const Option<bool> CollectExtRetGlobals;$/;"	m	class:SVF::Options
CollectPtsChain	svf/lib/MSSA/MemRegion.cpp	/^NodeBS& MRGenerator::CollectPtsChain(NodeID id)$/;"	f	class:MRGenerator
CollectPtsChain	svf/lib/SABER/SaberSVFGBuilder.cpp	/^PointsTo& SaberSVFGBuilder::CollectPtsChain(BVDataPTAImpl* pta, NodeID id, NodeToPTSSMap& cachedPtsMap)$/;"	f	class:SaberSVFGBuilder
CommonCHGraph	svf/include/Graphs/CHG.h	/^class CommonCHGraph$/;"	c	namespace:SVF
Complement	z3.obj/bin/python/z3/z3.py	/^def Complement(re):$/;"	f
ComposeFormatObject	z3.obj/bin/python/z3/z3printer.py	/^class ComposeFormatObject(NAryFormatObject):$/;"	c
ComputeInterCallVFGGuard	svf/include/SABER/ProgSlice.h	/^    inline Condition ComputeInterCallVFGGuard(const SVFBasicBlock* src, const SVFBasicBlock* dst, const SVFBasicBlock* callBB)$/;"	f	class:SVF::ProgSlice
ComputeInterCallVFGGuard	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::ComputeInterCallVFGGuard(const SVFBasicBlock* srcBB, const SVFBasicBlock* dstBB,$/;"	f	class:SaberCondAllocator
ComputeInterRetVFGGuard	svf/include/SABER/ProgSlice.h	/^    inline Condition ComputeInterRetVFGGuard(const SVFBasicBlock* src, const SVFBasicBlock* dst, const SVFBasicBlock* retBB)$/;"	f	class:SVF::ProgSlice
ComputeInterRetVFGGuard	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::ComputeInterRetVFGGuard(const SVFBasicBlock* srcBB, const SVFBasicBlock* dstBB, const SVFBasicBlock* retBB)$/;"	f	class:SaberCondAllocator
ComputeIntraVFGGuard	svf/include/SABER/ProgSlice.h	/^    inline Condition ComputeIntraVFGGuard(const SVFBasicBlock* src, const SVFBasicBlock* dst)$/;"	f	class:SVF::ProgSlice
ComputeIntraVFGGuard	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::ComputeIntraVFGGuard(const SVFBasicBlock* srcBB, const SVFBasicBlock* dstBB)$/;"	f	class:SaberCondAllocator
Concat	z3.obj/bin/python/z3/z3.py	/^def Concat(*args):$/;"	f
Cond	z3.obj/bin/python/z3/z3.py	/^def Cond(p, t1, t2, ctx=None):$/;"	f
CondImpl	svf/include/MemoryModel/PointerAnalysis.h	/^        CondImpl,   \/\/\/< Represents CondPTAImpl.$/;"	e	enum:SVF::PointerAnalysis::PTAImplTy
CondPTAImpl	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    CondPTAImpl(SVFIR* pag, PointerAnalysis::PTATY type) : PointerAnalysis(pag, type), normalized(false)$/;"	f	class:SVF::CondPTAImpl
CondPTAImpl	svf/include/MemoryModel/PointerAnalysisImpl.h	/^class CondPTAImpl : public PointerAnalysis$/;"	c	namespace:SVF
CondPointsToSet	svf/include/MemoryModel/ConditionalPT.h	/^    CondPointsToSet()$/;"	f	class:SVF::CondPointsToSet
CondPointsToSet	svf/include/MemoryModel/ConditionalPT.h	/^    CondPointsToSet(const Cond& cond, const PointsTo& pts)$/;"	f	class:SVF::CondPointsToSet
CondPointsToSet	svf/include/MemoryModel/ConditionalPT.h	/^    CondPointsToSet(const CondPointsToSet<Cond>& cptsSet)$/;"	f	class:SVF::CondPointsToSet
CondPointsToSet	svf/include/MemoryModel/ConditionalPT.h	/^class CondPointsToSet$/;"	c	namespace:SVF
CondPosMap	svf/include/SABER/SaberCondAllocator.h	/^    typedef Map<u32_t,Condition> CondPosMap;		\/\/\/< map a branch to its Condition$/;"	t	class:SVF::SaberCondAllocator
CondPts	svf/include/MemoryModel/ConditionalPT.h	/^    typedef Map<Cond, PointsTo> CondPts;$/;"	t	class:SVF::CondPointsToSet
CondPtsConstIter	svf/include/MemoryModel/ConditionalPT.h	/^    typedef typename CondPts::const_iterator CondPtsConstIter;$/;"	t	class:SVF::CondPointsToSet
CondPtsIter	svf/include/MemoryModel/ConditionalPT.h	/^    typedef typename CondPts::iterator CondPtsIter;$/;"	t	class:SVF::CondPointsToSet
CondPtsSetIterator	svf/include/MemoryModel/ConditionalPT.h	/^        CondPtsSetIterator(CondPointsToSet<Cond> &n, bool ae = false)$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
CondPtsSetIterator	svf/include/MemoryModel/ConditionalPT.h	/^    class CondPtsSetIterator$/;"	c	class:SVF::CondPointsToSet
CondStdSet	svf/include/MemoryModel/ConditionalPT.h	/^    CondStdSet() {}$/;"	f	class:SVF::CondStdSet
CondStdSet	svf/include/MemoryModel/ConditionalPT.h	/^    CondStdSet(const CondStdSet<Element>& cptsSet) : elements(cptsSet.getElementSet())$/;"	f	class:SVF::CondStdSet
CondStdSet	svf/include/MemoryModel/ConditionalPT.h	/^class CondStdSet$/;"	c	namespace:SVF
CondVar	svf/include/MemoryModel/ConditionalPT.h	/^    CondVar() : m_cond(), m_id(0) {}$/;"	f	class:SVF::CondVar
CondVar	svf/include/MemoryModel/ConditionalPT.h	/^    CondVar(const Cond& cond, NodeID id) : m_cond(cond),m_id(id)$/;"	f	class:SVF::CondVar
CondVar	svf/include/MemoryModel/ConditionalPT.h	/^    CondVar(const CondVar& conVar) : m_cond(conVar.m_cond), m_id(conVar.m_id)$/;"	f	class:SVF::CondVar
CondVar	svf/include/MemoryModel/ConditionalPT.h	/^class CondVar$/;"	c	namespace:SVF
Condition	svf/include/MSSA/MemRegion.h	/^    typedef bool Condition;$/;"	t	class:SVF::MemRegion
Condition	svf/include/MSSA/MemSSA.h	/^    typedef MemRegion::Condition Condition;$/;"	t	class:SVF::MemSSA
Condition	svf/include/SABER/ProgSlice.h	/^    typedef SaberCondAllocator::Condition Condition;$/;"	t	class:SVF::ProgSlice
Condition	svf/include/SABER/SaberCondAllocator.h	/^    typedef Z3Expr Condition;   \/\/\/ z3 condition$/;"	t	class:SVF::SaberCondAllocator
Config	z3.obj/bin/python/z3/z3types.py	/^class Config(ctypes.c_void_p):$/;"	c
ConnectVCallOnCHA	svf/include/Util/Options.h	/^    static const Option<bool> ConnectVCallOnCHA;$/;"	m	class:SVF::Options
ConsCGDotGraph	svf/include/Util/Options.h	/^    static const Option<bool> ConsCGDotGraph;$/;"	m	class:SVF::Options
Conservative	svf/include/WPA/WPAPass.h	/^        Conservative,	\/\/\/< return MayAlias if any pta says alias$/;"	e	enum:SVF::WPAPass::AliasCheckRule
Const	z3.obj/bin/python/z3/z3.py	/^def Const(name, sort):$/;"	f
ConstAggObjNode	svf/include/SVFIR/SVFValue.h	/^        ConstAggObjNode,         \/\/ │   ├── Represents a constant aggregate object$/;"	e	enum:SVF::SVFValue::GNodeK
ConstAggObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstAggObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node)$/;"	f	class:SVF::ConstAggObjVar
ConstAggObjVar	svf/include/SVFIR/SVFVariables.h	/^class ConstAggObjVar : public BaseObjVar$/;"	c	namespace:SVF
ConstAggValNode	svf/include/SVFIR/SVFValue.h	/^        ConstAggValNode,         \/\/ ├── Represents a constant aggregate value node$/;"	e	enum:SVF::SVFValue::GNodeK
ConstAggValVar	svf/include/SVFIR/SVFVariables.h	/^    ConstAggValVar(NodeID i, const ICFGNode* icn, const SVFType* svfTy)$/;"	f	class:SVF::ConstAggValVar
ConstAggValVar	svf/include/SVFIR/SVFVariables.h	/^class ConstAggValVar: public ValVar$/;"	c	namespace:SVF
ConstDataObjNode	svf/include/SVFIR/SVFValue.h	/^        ConstDataObjNode,        \/\/ │   ├── Represents a constant data object$/;"	e	enum:SVF::SVFValue::GNodeK
ConstDataObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstDataObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node, PNODEK ty = ConstDataObjNode)$/;"	f	class:SVF::ConstDataObjVar
ConstDataObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstDataObjVar(NodeID i, const ICFGNode* node) : BaseObjVar(i, node, ConstDataObjNode) {}$/;"	f	class:SVF::ConstDataObjVar
ConstDataObjVar	svf/include/SVFIR/SVFVariables.h	/^class ConstDataObjVar : public BaseObjVar$/;"	c	namespace:SVF
ConstDataValNode	svf/include/SVFIR/SVFValue.h	/^        ConstDataValNode,        \/\/ │   ├── Represents a constant data variable$/;"	e	enum:SVF::SVFValue::GNodeK
ConstDataValVar	svf/include/SVFIR/SVFVariables.h	/^    ConstDataValVar(NodeID i, const ICFGNode* icn, const SVFType* svfType,$/;"	f	class:SVF::ConstDataValVar
ConstDataValVar	svf/include/SVFIR/SVFVariables.h	/^class ConstDataValVar : public ValVar$/;"	c	namespace:SVF
ConstFPObjNode	svf/include/SVFIR/SVFValue.h	/^        ConstFPObjNode,          \/\/ │   ├── Represents a constant floating-point object$/;"	e	enum:SVF::SVFValue::GNodeK
ConstFPObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstFPObjVar(NodeID i, const ICFGNode* node) : ConstDataObjVar(i, node) {}$/;"	f	class:SVF::ConstFPObjVar
ConstFPObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstFPObjVar(NodeID i, double dv, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node)$/;"	f	class:SVF::ConstFPObjVar
ConstFPObjVar	svf/include/SVFIR/SVFVariables.h	/^class ConstFPObjVar : public ConstDataObjVar$/;"	c	namespace:SVF
ConstFPValNode	svf/include/SVFIR/SVFValue.h	/^        ConstFPValNode,          \/\/ │   ├── Represents a constant floating-point value node$/;"	e	enum:SVF::SVFValue::GNodeK
ConstFPValVar	svf/include/SVFIR/SVFVariables.h	/^    ConstFPValVar(NodeID i, double dv,$/;"	f	class:SVF::ConstFPValVar
ConstFPValVar	svf/include/SVFIR/SVFVariables.h	/^class ConstFPValVar : public ConstDataValVar$/;"	c	namespace:SVF
ConstIntObjNode	svf/include/SVFIR/SVFValue.h	/^        ConstIntObjNode,         \/\/ │   ├── Represents a constant integer object$/;"	e	enum:SVF::SVFValue::GNodeK
ConstIntObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstIntObjVar(NodeID i, const ICFGNode* node) : ConstDataObjVar(i, node) {}$/;"	f	class:SVF::ConstIntObjVar
ConstIntObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstIntObjVar(NodeID i, s64_t sv, u64_t zv, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node)$/;"	f	class:SVF::ConstIntObjVar
ConstIntObjVar	svf/include/SVFIR/SVFVariables.h	/^class ConstIntObjVar : public ConstDataObjVar$/;"	c	namespace:SVF
ConstIntValNode	svf/include/SVFIR/SVFValue.h	/^        ConstIntValNode,         \/\/ │   ├── Represents a constant integer value node$/;"	e	enum:SVF::SVFValue::GNodeK
ConstIntValVar	svf/include/SVFIR/SVFVariables.h	/^    ConstIntValVar(NodeID i, s64_t sv, u64_t zv, const ICFGNode* icn, const SVFType* svfType)$/;"	f	class:SVF::ConstIntValVar
ConstIntValVar	svf/include/SVFIR/SVFVariables.h	/^class ConstIntValVar : public ConstDataValVar$/;"	c	namespace:SVF
ConstNullPtrObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstNullPtrObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node)$/;"	f	class:SVF::ConstNullPtrObjVar
ConstNullPtrObjVar	svf/include/SVFIR/SVFVariables.h	/^    ConstNullPtrObjVar(NodeID i, const ICFGNode* node) : ConstDataObjVar(i, node) {}$/;"	f	class:SVF::ConstNullPtrObjVar
ConstNullPtrObjVar	svf/include/SVFIR/SVFVariables.h	/^class ConstNullPtrObjVar : public ConstDataObjVar$/;"	c	namespace:SVF
ConstNullPtrValVar	svf/include/SVFIR/SVFVariables.h	/^    ConstNullPtrValVar(NodeID i, const ICFGNode* icn, const SVFType* svfType)$/;"	f	class:SVF::ConstNullPtrValVar
ConstNullPtrValVar	svf/include/SVFIR/SVFVariables.h	/^class ConstNullPtrValVar : public ConstDataValVar$/;"	c	namespace:SVF
ConstNullptrObjNode	svf/include/SVFIR/SVFValue.h	/^        ConstNullptrObjNode,     \/\/ │   └── Represents a constant nullptr object$/;"	e	enum:SVF::SVFValue::GNodeK
ConstNullptrValNode	svf/include/SVFIR/SVFValue.h	/^        ConstNullptrValNode,     \/\/ │   └── Represents a constant nullptr value node$/;"	e	enum:SVF::SVFValue::GNodeK
ConstSVFGEdgeSet	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedSet<const SVFGEdge* > ConstSVFGEdgeSet;$/;"	t	class:SVF::DDAVFSolver
Constant	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Constant Constant;$/;"	t	namespace:SVF
ConstantAggregate	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantAggregate ConstantAggregate;$/;"	t	namespace:SVF
ConstantAggregateZero	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantAggregateZero ConstantAggregateZero;$/;"	t	namespace:SVF
ConstantArray	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantArray ConstantArray;$/;"	t	namespace:SVF
ConstantData	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantData ConstantData;$/;"	t	namespace:SVF
ConstantDataArray	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantDataArray ConstantDataArray;$/;"	t	namespace:SVF
ConstantDataSequential	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantDataSequential ConstantDataSequential;$/;"	t	namespace:SVF
ConstantExpr	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantExpr ConstantExpr;$/;"	t	namespace:SVF
ConstantFP	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantFP ConstantFP;$/;"	t	namespace:SVF
ConstantInt	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantInt ConstantInt;$/;"	t	namespace:SVF
ConstantObj	svf/include/Graphs/IRGraph.h	/^        ConstantObj,$/;"	e	enum:SVF::IRGraph::SYMTYPE
ConstantPointerNull	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantPointerNull ConstantPointerNull;$/;"	t	namespace:SVF
ConstantStruct	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstantStruct ConstantStruct;$/;"	t	namespace:SVF
ConstrainedFPCmpIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstrainedFPCmpIntrinsic ConstrainedFPCmpIntrinsic;$/;"	t	namespace:SVF
ConstrainedFPIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ConstrainedFPIntrinsic ConstrainedFPIntrinsic;$/;"	t	namespace:SVF
ConstraintEdge	svf/include/Graphs/ConsGEdge.h	/^    ConstraintEdge(ConstraintNode* s, ConstraintNode* d, ConstraintEdgeK k, EdgeID id = 0) : GenericConsEdgeTy(s,d,k),edgeId(id)$/;"	f	class:SVF::ConstraintEdge
ConstraintEdge	svf/include/Graphs/ConsGEdge.h	/^class ConstraintEdge : public GenericConsEdgeTy$/;"	c	namespace:SVF
ConstraintEdgeK	svf/include/Graphs/ConsGEdge.h	/^    enum ConstraintEdgeK$/;"	g	class:SVF::ConstraintEdge
ConstraintEdgeSetTy	svf/include/Graphs/ConsGEdge.h	/^    typedef GenericNode<ConstraintNode,ConstraintEdge>::GEdgeSetTy ConstraintEdgeSetTy;$/;"	t	class:SVF::ConstraintEdge
ConstraintGraph	svf/include/Graphs/ConsG.h	/^    ConstraintGraph(SVFIR* p): pag(p), edgeIndex(0)$/;"	f	class:SVF::ConstraintGraph
ConstraintGraph	svf/include/Graphs/ConsG.h	/^class ConstraintGraph :  public GenericGraph<ConstraintNode,ConstraintEdge>$/;"	c	namespace:SVF
ConstraintNode	svf/include/Graphs/ConsGNode.h	/^    ConstraintNode(NodeID i) : GenericConsNodeTy(i, ConstraintNodeKd), _isPWCNode(false)$/;"	f	class:SVF::ConstraintNode
ConstraintNode	svf/include/Graphs/ConsGNode.h	/^class ConstraintNode : public GenericConsNodeTy$/;"	c	namespace:SVF
ConstraintNodeIDToNodeMapTy	svf/include/Graphs/ConsG.h	/^    typedef OrderedMap<NodeID, ConstraintNode *> ConstraintNodeIDToNodeMapTy;$/;"	t	class:SVF::ConstraintGraph
ConstraintNodeIter	svf/include/Graphs/ConsG.h	/^    typedef ConstraintEdge::ConstraintEdgeSetTy::iterator ConstraintNodeIter;$/;"	t	class:SVF::ConstraintGraph
ConstraintNodeKd	svf/include/SVFIR/SVFValue.h	/^        ConstraintNodeKd, \/\/ Constraint graph node$/;"	e	enum:SVF::SVFValue::GNodeK
Constructor	z3.obj/bin/python/z3/z3types.py	/^class Constructor(ctypes.c_void_p):$/;"	c
ConstructorList	z3.obj/bin/python/z3/z3types.py	/^class ConstructorList(ctypes.c_void_p):$/;"	c
Consts	z3.obj/bin/python/z3/z3.py	/^def Consts(names, sort):$/;"	f
Contains	z3.obj/bin/python/z3/z3.py	/^def Contains(a, b):$/;"	f
Context	z3.obj/bin/python/z3/z3.py	/^class Context:$/;"	c
ContextCond	svf/include/Util/DPItem.h	/^    ContextCond():concreteCxt(true)$/;"	f	class:SVF::ContextCond
ContextCond	svf/include/Util/DPItem.h	/^    ContextCond(const ContextCond& cond): context(cond.getContexts()), concreteCxt(cond.isConcreteCxt())$/;"	f	class:SVF::ContextCond
ContextCond	svf/include/Util/DPItem.h	/^class ContextCond$/;"	c	namespace:SVF
ContextDDA	svf/include/DDA/ContextDDA.h	/^class ContextDDA : public CondPTAImpl<ContextCond>, public DDAVFSolver<CxtVar,CxtPtSet,CxtLocDPItem>$/;"	c	namespace:SVF
ContextDDA	svf/lib/DDA/ContextDDA.cpp	/^ContextDDA::ContextDDA(SVFIR* _pag,  DDAClient* client)$/;"	f	class:ContextDDA
ContextDDA_H_	svf/include/DDA/ContextDDA.h	38;"	d
ContextInsensitive	svf/include/Util/Options.h	/^    static const Option<bool> ContextInsensitive;$/;"	m	class:SVF::Options
ContextObj	z3.obj/bin/python/z3/z3types.py	/^class ContextObj(ctypes.c_void_p):$/;"	c
Copy	svf/include/Graphs/ConsGEdge.h	/^        Addr, Copy, Store, Load, NormalGep, VariantGep$/;"	e	enum:SVF::ConstraintEdge::ConstraintEdgeK
Copy	svf/include/SVFIR/SVFStatements.h	/^        Copy,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Copy	svf/include/SVFIR/SVFValue.h	/^        Copy,             \/\/ │   ├── Represents a copy operation$/;"	e	enum:SVF::SVFValue::GNodeK
CopyCGEdge	svf/include/Graphs/ConsGEdge.h	/^    CopyCGEdge(ConstraintNode* s, ConstraintNode* d, EdgeID id) : ConstraintEdge(s,d,Copy,id)$/;"	f	class:SVF::CopyCGEdge
CopyCGEdge	svf/include/Graphs/ConsGEdge.h	/^class CopyCGEdge: public ConstraintEdge$/;"	c	namespace:SVF
CopyKind	svf/include/SVFIR/SVFStatements.h	/^    enum CopyKind$/;"	g	class:SVF::CopyStmt
CopySVFGNode	svf/include/Graphs/SVFG.h	/^typedef CopyVFGNode CopySVFGNode;$/;"	t	namespace:SVF
CopyStmt	svf/include/SVFIR/SVFStatements.h	/^    CopyStmt() : AssignStmt(SVFStmt::Copy) {}$/;"	f	class:SVF::CopyStmt
CopyStmt	svf/include/SVFIR/SVFStatements.h	/^    CopyStmt(SVFVar* s, SVFVar* d, CopyKind k) : AssignStmt(s, d, SVFStmt::Copy), copyKind(k) {}$/;"	f	class:SVF::CopyStmt
CopyStmt	svf/include/SVFIR/SVFStatements.h	/^class CopyStmt: public AssignStmt$/;"	c	namespace:SVF
CopyVFGNode	svf/include/Graphs/VFGNode.h	/^    CopyVFGNode(NodeID id,const CopyStmt* copy): StmtVFGNode(id,copy,Copy)$/;"	f	class:SVF::CopyVFGNode
CopyVFGNode	svf/include/Graphs/VFGNode.h	/^class CopyVFGNode: public StmtVFGNode$/;"	c	namespace:SVF
CoreBitVector	svf/include/Util/CoreBitVector.h	/^class CoreBitVector$/;"	c	namespace:SVF
CoreBitVector	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::CoreBitVector(CoreBitVector &&cbv)$/;"	f	class:SVF::CoreBitVector
CoreBitVector	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::CoreBitVector(const CoreBitVector &cbv)$/;"	f	class:SVF::CoreBitVector
CoreBitVector	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::CoreBitVector(size_t n)$/;"	f	class:SVF::CoreBitVector
CoreBitVector	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::CoreBitVector(void)$/;"	f	class:SVF::CoreBitVector
CoreBitVectorIterator	svf/include/Util/CoreBitVector.h	/^    class CoreBitVectorIterator$/;"	c	class:SVF::CoreBitVector
CoreBitVectorIterator	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::CoreBitVectorIterator::CoreBitVectorIterator(const CoreBitVector *cbv, bool end)$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
CreateDatatypes	z3.obj/bin/python/z3/z3.py	/^def CreateDatatypes(*ds):$/;"	f
CtxSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef Set<CallSiteSet*> CtxSet;$/;"	t	class:SVF::ThreadCallGraph
CurTy	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    PointerIntPair<Type*,1> CurTy;$/;"	m	class:llvm::generic_bridge_gep_type_iterator
CurrElementIter	svf/include/Util/SparseBitVector.h	/^    mutable ElementListIter CurrElementIter;$/;"	m	class:SVF::SparseBitVector
CurrElementIter	svf/include/Util/SparseBitVector.h	/^    noexcept         : Elements(std::move(RHS.Elements)), CurrElementIter(Elements.begin()) {}$/;"	f	class:SVF::SparseBitVector
Customized	svf/include/Util/Options.h	/^    static const Option<bool> Customized;$/;"	m	class:SVF::Options
CxtBudget	svf/include/Util/Options.h	/^    static const Option<u32_t> CxtBudget;$/;"	m	class:SVF::Options
CxtDPItem	svf/include/Util/DPItem.h	/^    CxtDPItem(NodeID c, const ContextCond& cxt) : DPItem(c),context(cxt)$/;"	f	class:SVF::CxtDPItem
CxtDPItem	svf/include/Util/DPItem.h	/^    CxtDPItem(const CxtDPItem& dps) :$/;"	f	class:SVF::CxtDPItem
CxtDPItem	svf/include/Util/DPItem.h	/^    CxtDPItem(const CxtVar& var) : DPItem(var.get_id()),context(var.get_cond())$/;"	f	class:SVF::CxtDPItem
CxtDPItem	svf/include/Util/DPItem.h	/^class CxtDPItem : public DPItem$/;"	c	namespace:SVF
CxtLimit	svf/include/Util/Options.h	/^    static const Option<u32_t> CxtLimit;$/;"	m	class:SVF::Options
CxtLocDPItem	svf/include/DDA/ContextDDA.h	/^typedef CxtStmtDPItem<SVFGNode> CxtLocDPItem;$/;"	t	namespace:SVF
CxtLock	svf/include/MTA/LockAnalysis.h	/^    typedef CxtStmt CxtLock;$/;"	t	class:SVF::LockAnalysis
CxtLockProc	svf/include/MTA/LockAnalysis.h	/^    typedef CxtProc CxtLockProc;$/;"	t	class:SVF::LockAnalysis
CxtLockProcSet	svf/include/MTA/LockAnalysis.h	/^    typedef Set<CxtLockProc> CxtLockProcSet;$/;"	t	class:SVF::LockAnalysis
CxtLockProcVec	svf/include/MTA/LockAnalysis.h	/^    typedef FIFOWorkList<CxtLockProc> CxtLockProcVec;$/;"	t	class:SVF::LockAnalysis
CxtLockSet	svf/include/MTA/LockAnalysis.h	/^    typedef Set<CxtLock> CxtLockSet;$/;"	t	class:SVF::LockAnalysis
CxtLockToLockSet	svf/include/MTA/LockAnalysis.h	/^    typedef Map<CxtLock, NodeBS> CxtLockToLockSet;$/;"	t	class:SVF::LockAnalysis
CxtLockToSpan	svf/include/MTA/LockAnalysis.h	/^    typedef Map<CxtLock, LockSpan> CxtLockToSpan;$/;"	t	class:SVF::LockAnalysis
CxtProc	svf/include/Util/CxtStmt.h	/^    CxtProc(const CallStrCxt& c, const FunObjVar* f) :$/;"	f	class:SVF::CxtProc
CxtProc	svf/include/Util/CxtStmt.h	/^    CxtProc(const CxtProc& ctm) :$/;"	f	class:SVF::CxtProc
CxtProc	svf/include/Util/CxtStmt.h	/^class CxtProc$/;"	c	namespace:SVF
CxtPtSet	svf/include/Util/DPItem.h	/^typedef CondStdSet<CxtVar> CxtPtSet;$/;"	t	namespace:SVF
CxtStmt	svf/include/Util/CxtStmt.h	/^    CxtStmt(const CallStrCxt& c, const ICFGNode* f) :cxt(c), inst(f)$/;"	f	class:SVF::CxtStmt
CxtStmt	svf/include/Util/CxtStmt.h	/^    CxtStmt(const CxtStmt& ctm) : cxt(ctm.getContext()),inst(ctm.getStmt())$/;"	f	class:SVF::CxtStmt
CxtStmt	svf/include/Util/CxtStmt.h	/^class CxtStmt$/;"	c	namespace:SVF
CxtStmtDPItem	svf/include/Util/DPItem.h	/^    CxtStmtDPItem(const CxtStmtDPItem<LocCond>& dps) :$/;"	f	class:SVF::CxtStmtDPItem
CxtStmtDPItem	svf/include/Util/DPItem.h	/^    CxtStmtDPItem(const CxtVar& var, const LocCond* locCond) : StmtDPItem<LocCond>(var.get_id(),locCond), context(var.get_cond())$/;"	f	class:SVF::CxtStmtDPItem
CxtStmtDPItem	svf/include/Util/DPItem.h	/^class CxtStmtDPItem : public StmtDPItem<LocCond>$/;"	c	namespace:SVF
CxtStmtSet	svf/include/MTA/LockAnalysis.h	/^    typedef Set<CxtStmt> CxtStmtSet;$/;"	t	class:SVF::LockAnalysis
CxtStmtToAliveFlagMap	svf/include/MTA/MHP.h	/^    typedef Map<CxtStmt,ValDomain> CxtStmtToAliveFlagMap;$/;"	t	class:SVF::ForkJoinAnalysis
CxtStmtToCxtLockSet	svf/include/MTA/LockAnalysis.h	/^    typedef Map<CxtStmt, CxtLockSet> CxtStmtToCxtLockSet;$/;"	t	class:SVF::LockAnalysis
CxtStmtToLockFlagMap	svf/include/MTA/LockAnalysis.h	/^    typedef Map<CxtStmt, ValDomain> CxtStmtToLockFlagMap;$/;"	t	class:SVF::LockAnalysis
CxtStmtToLoopMap	svf/include/MTA/MHP.h	/^    typedef Map<CxtStmt, LoopBBs> CxtStmtToLoopMap;$/;"	t	class:SVF::ForkJoinAnalysis
CxtStmtToTIDMap	svf/include/MTA/MHP.h	/^    typedef Map<CxtStmt,NodeBS> CxtStmtToTIDMap;$/;"	t	class:SVF::ForkJoinAnalysis
CxtStmtWorkList	svf/include/MTA/LockAnalysis.h	/^    typedef FIFOWorkList<CxtStmt> CxtStmtWorkList;$/;"	t	class:SVF::LockAnalysis
CxtStmtWorkList	svf/include/MTA/MHP.h	/^    typedef FIFOWorkList<CxtStmt> CxtStmtWorkList;$/;"	t	class:SVF::ForkJoinAnalysis
CxtThread	svf/include/Util/CxtStmt.h	/^    CxtThread(const CallStrCxt& c, const ICFGNode* fork) : cxt(c), forksite(fork), inloop(false), incycle(false)$/;"	f	class:SVF::CxtThread
CxtThread	svf/include/Util/CxtStmt.h	/^    CxtThread(const CxtThread& ct) :$/;"	f	class:SVF::CxtThread
CxtThread	svf/include/Util/CxtStmt.h	/^class CxtThread$/;"	c	namespace:SVF
CxtThreadProc	svf/include/Util/CxtStmt.h	/^    CxtThreadProc(NodeID t, const CallStrCxt& c, const FunObjVar* f) :CxtProc(c,f),tid(t)$/;"	f	class:SVF::CxtThreadProc
CxtThreadProc	svf/include/Util/CxtStmt.h	/^    CxtThreadProc(const CxtThreadProc& ctm) : CxtProc(ctm.getContext(),ctm.getProc()), tid(ctm.getTid())$/;"	f	class:SVF::CxtThreadProc
CxtThreadProc	svf/include/Util/CxtStmt.h	/^class CxtThreadProc : public CxtProc$/;"	c	namespace:SVF
CxtThreadProcSet	svf/include/MTA/TCT.h	/^    typedef Set<CxtThreadProc> CxtThreadProcSet;$/;"	t	class:SVF::TCT
CxtThreadProcVec	svf/include/MTA/TCT.h	/^    typedef FIFOWorkList<CxtThreadProc> CxtThreadProcVec;$/;"	t	class:SVF::TCT
CxtThreadStmt	svf/include/Util/CxtStmt.h	/^    CxtThreadStmt(NodeID t, const CallStrCxt& c, const ICFGNode* f) :CxtStmt(c,f), tid(t)$/;"	f	class:SVF::CxtThreadStmt
CxtThreadStmt	svf/include/Util/CxtStmt.h	/^    CxtThreadStmt(const CxtThreadStmt& ctm) :CxtStmt(ctm), tid(ctm.getTid())$/;"	f	class:SVF::CxtThreadStmt
CxtThreadStmt	svf/include/Util/CxtStmt.h	/^class CxtThreadStmt : public CxtStmt$/;"	c	namespace:SVF
CxtThreadStmtSet	svf/include/MTA/MHP.h	/^    typedef Set<CxtThreadStmt> CxtThreadStmtSet;$/;"	t	class:SVF::MHP
CxtThreadStmtWorkList	svf/include/MTA/MHP.h	/^    typedef FIFOWorkList<CxtThreadStmt> CxtThreadStmtWorkList;$/;"	t	class:SVF::MHP
CxtThreadToForkCxt	svf/include/MTA/TCT.h	/^    typedef Map<CxtThread,CallStrCxt> CxtThreadToForkCxt;$/;"	t	class:SVF::TCT
CxtThreadToFun	svf/include/MTA/TCT.h	/^    typedef Map<CxtThread,const FunObjVar*> CxtThreadToFun;$/;"	t	class:SVF::TCT
CxtThreadToNodeMap	svf/include/MTA/TCT.h	/^    typedef Map<CxtThread,TCTNode*> CxtThreadToNodeMap;$/;"	t	class:SVF::TCT
CxtVar	svf/include/Util/DPItem.h	/^typedef CondVar<ContextCond> CxtVar;$/;"	t	namespace:SVF
Cxt_DDA	svf/include/MemoryModel/PointerAnalysis.h	/^        Cxt_DDA,		\/\/\/< context sensitive DDA$/;"	e	enum:SVF::PointerAnalysis::PTATY
Cycle	svf/include/Graphs/WTO.h	/^        Cycle$/;"	e	enum:SVF::WTOComponent::WTOCT
CycleDepthNumber	svf/include/Graphs/WTO.h	/^    typedef u32_t CycleDepthNumber;$/;"	t	class:SVF::WTO
CyclicFldIdx	svf/include/Util/Options.h	/^    static const Option<bool> CyclicFldIdx;$/;"	m	class:SVF::Options
DAndersen	svf/include/SVFIR/SVFType.h	517;"	d
DBOUT	svf/include/SVFIR/SVFType.h	498;"	d
DBUG	svf/include/Util/NodeIDAllocator.h	/^        DBUG,$/;"	e	enum:SVF::NodeIDAllocator::Strategy
DCHA	svf/include/SVFIR/SVFType.h	520;"	d
DCHEdge	svf-llvm/include/SVF-LLVM/DCHG.h	/^    DCHEdge(DCHNode *src, DCHNode *dst, GEdgeFlag k = 0)$/;"	f	class:SVF::DCHEdge
DCHEdge	svf-llvm/include/SVF-LLVM/DCHG.h	/^class DCHEdge : public GenericEdge<DCHNode>$/;"	c	namespace:SVF
DCHEdgeSetTy	svf-llvm/include/SVF-LLVM/DCHG.h	/^    typedef GenericNode<DCHNode, DCHEdge>::GEdgeSetTy DCHEdgeSetTy;$/;"	t	class:SVF::DCHEdge
DCHG_H_	svf-llvm/include/SVF-LLVM/DCHG.h	15;"	d
DCHGraph	svf-llvm/include/SVF-LLVM/DCHG.h	/^    DCHGraph()$/;"	f	class:SVF::DCHGraph
DCHGraph	svf-llvm/include/SVF-LLVM/DCHG.h	/^class DCHGraph : public CommonCHGraph, public GenericGraph<DCHNode, DCHEdge>$/;"	c	namespace:SVF
DCHNode	svf-llvm/include/SVF-LLVM/DCHG.h	/^    DCHNode(const DIType* diType, NodeID i = 0, GNodeK k = GNodeK::DCHNodeKd)$/;"	f	class:SVF::DCHNode
DCHNode	svf-llvm/include/SVF-LLVM/DCHG.h	/^class DCHNode : public GenericNode<DCHNode, DCHEdge>$/;"	c	namespace:SVF
DCHNodeKd	svf/include/SVFIR/SVFValue.h	/^        DCHNodeKd,        \/\/ DCHG node$/;"	e	enum:SVF::SVFValue::GNodeK
DCOMModel	svf/include/SVFIR/SVFType.h	509;"	d
DCache	svf/include/SVFIR/SVFType.h	513;"	d
DDACLIENT_H_	svf/include/DDA/DDAClient.h	35;"	d
DDAClient	svf/include/DDA/DDAClient.h	/^    DDAClient() : pag(nullptr), curPtr(0), solveAll(true) {}$/;"	f	class:SVF::DDAClient
DDAClient	svf/include/DDA/DDAClient.h	/^class DDAClient$/;"	c	namespace:SVF
DDAPASS_H_	svf/include/DDA/DDAPass.h	33;"	d
DDAPass	svf/include/DDA/DDAPass.h	/^    DDAPass() : _pta(nullptr), _client(nullptr) {}$/;"	f	class:SVF::DDAPass
DDAPass	svf/include/DDA/DDAPass.h	/^class DDAPass$/;"	c	namespace:SVF
DDASTAT_H_	svf/include/DDA/DDAStat.h	31;"	d
DDASelected	svf/include/Util/Options.h	/^    static OptionMultiple<PointerAnalysis::PTATY> DDASelected;$/;"	m	class:SVF::Options
DDAStat	svf/include/DDA/DDAStat.h	/^class DDAStat : public PTAStat$/;"	c	namespace:SVF
DDAStat	svf/lib/DDA/DDAStat.cpp	/^DDAStat::DDAStat(ContextDDA* pta) : PTAStat(pta), flowDDA(nullptr), contextDDA(pta)$/;"	f	class:DDAStat
DDAStat	svf/lib/DDA/DDAStat.cpp	/^DDAStat::DDAStat(FlowDDA* pta) : PTAStat(pta), flowDDA(pta), contextDDA(nullptr)$/;"	f	class:DDAStat
DDAVFSolver	svf/include/DDA/DDAVFSolver.h	/^    DDAVFSolver(): outOfBudgetQuery(false),_pag(nullptr),_svfg(nullptr),_ander(nullptr),_callGraph(nullptr), _callGraphSCC(nullptr), _svfgSCC(nullptr), ddaStat(nullptr)$/;"	f	class:SVF::DDAVFSolver
DDAVFSolver	svf/include/DDA/DDAVFSolver.h	/^class DDAVFSolver$/;"	c	namespace:SVF
DDDA	svf/include/SVFIR/SVFType.h	510;"	d
DDumpPT	svf/include/SVFIR/SVFType.h	511;"	d
DEBUG_TYPE	svf-llvm/lib/BreakConstantExpr.cpp	67;"	d	file:
DEC	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	749;"	d	file:
DEC	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	728;"	d	file:
DEFINE_TYPE	z3.obj/include/z3_macros.h	20;"	d
DEFTYPE	svf/include/MSSA/MSSAMuChi.h	/^    enum DEFTYPE$/;"	g	class:SVF::MSSADEF
DENSE	svf/include/Util/NodeIDAllocator.h	/^        DENSE,$/;"	e	enum:SVF::NodeIDAllocator::Strategy
DESTRUCTOR	svf/include/Graphs/CHG.h	/^        DESTRUCTOR = 0x2 \/\/ connect node based on destructor$/;"	e	enum:SVF::CHGraph::__anon23
DFInOutMap	svf/include/WPA/FlowSensitive.h	/^    typedef BVDataPTAImpl::MutDFPTDataTy::DFPtsMap DFInOutMap;$/;"	t	class:SVF::FlowSensitive
DFInOutMap	svf/include/WPA/WPAStat.h	/^    typedef FlowSensitive::DFInOutMap DFInOutMap;$/;"	t	class:SVF::FlowSensitiveStat
DFKeyToIDMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef Map<LocID, KeyToIDMap> DFKeyToIDMap;$/;"	t	class:SVF::PersistentDFPTData
DFPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    DFPTData(bool reversePT = true, PTDataTy ty = BasePTData::DataFlow) : BasePTData(reversePT, ty) { }$/;"	f	class:SVF::DFPTData
DFPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^class DFPTData : public PTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
DFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef DFPTData<NodeID, NodeSet, NodeID, PointsTo> DFPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
DFPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef Map<LocID, PtsMap> DFPtsMap;	\/\/\/< Data-flow point-to map$/;"	t	class:SVF::MutableDFPTData
DFPtsMapIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename DFPtsMap::iterator DFPtsMapIter;$/;"	t	class:SVF::MutableDFPTData
DFPtsMapconstIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename DFPtsMap::const_iterator DFPtsMapconstIter;$/;"	t	class:SVF::MutableDFPTData
DFreeCheck	svf/include/Util/Options.h	/^    static const Option<bool> DFreeCheck;$/;"	m	class:SVF::Options
DGENERAL	svf/include/SVFIR/SVFType.h	504;"	d
DI	svf/include/Graphs/CHG.h	/^        DI$/;"	e	enum:SVF::CommonCHGraph::CHGKind
DIBasicType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DIBasicType DIBasicType;$/;"	t	namespace:SVF
DICompositeType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DICompositeType DICompositeType;$/;"	t	namespace:SVF
DIDerivedType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DIDerivedType DIDerivedType;$/;"	t	namespace:SVF
DINode	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DINode DINode;$/;"	t	namespace:SVF
DINodeArray	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DINodeArray DINodeArray;$/;"	t	namespace:SVF
DISNCTMRGENERATOR_H_	svf/include/MSSA/MemPartition.h	37;"	d
DISubprogram	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DISubprogram DISubprogram;$/;"	t	namespace:SVF
DISubrange	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DISubrange DISubrange;$/;"	t	namespace:SVF
DISubroutineType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DISubroutineType DISubroutineType;$/;"	t	namespace:SVF
DIType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DIType DIType;$/;"	t	namespace:SVF
DITypeRefArray	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DITypeRefArray DITypeRefArray;$/;"	t	namespace:SVF
DInstrument	svf/include/SVFIR/SVFType.h	516;"	d
DMSSA	svf/include/SVFIR/SVFType.h	515;"	d
DMTA	svf/include/SVFIR/SVFType.h	519;"	d
DMemModel	svf/include/SVFIR/SVFType.h	507;"	d
DMemModelCE	svf/include/SVFIR/SVFType.h	508;"	d
DOSTAT	svf/include/SVFIR/SVFType.h	499;"	d
DOT	svf/include/Graphs/GraphWriter.h	/^    DOT,$/;"	e	enum:SVF::GraphProgram::Name
DOT	svf/include/Graphs/GraphWriter.h	/^namespace DOT    \/\/ Private functions...$/;"	n	namespace:SVF
DOTGraphTraits	svf/include/Graphs/CDG.h	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/include/Graphs/CDG.h	/^struct DOTGraphTraits<SVF::CDG *> : public DOTGraphTraits<SVF::PAG *>$/;"	s	namespace:SVF
DOTGraphTraits	svf/include/Graphs/DOTGraphTraits.h	/^    DOTGraphTraits (bool simple=false) : DefaultDOTGraphTraits (simple) {}$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/include/Graphs/DOTGraphTraits.h	/^struct DOTGraphTraits : public DefaultDOTGraphTraits$/;"	s	namespace:SVF
DOTGraphTraits	svf/lib/Graphs/CFLGraph.cpp	/^    DOTGraphTraits(bool isSimple = false) : DefaultDOTGraphTraits(isSimple)$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/CFLGraph.cpp	/^struct DOTGraphTraits<CFLGraph*> : public DefaultDOTGraphTraits$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/CHG.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/CHG.cpp	/^struct DOTGraphTraits<CHGraph*> : public DefaultDOTGraphTraits$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/CallGraph.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/CallGraph.cpp	/^struct DOTGraphTraits<CallGraph*> : public DefaultDOTGraphTraits$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/ConsG.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/ConsG.cpp	/^struct DOTGraphTraits<ConstraintGraph*> : public DOTGraphTraits<SVFIR*>$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/ICFG.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/ICFG.cpp	/^struct DOTGraphTraits<ICFG*> : public DOTGraphTraits<SVFIR*>$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/IRGraph.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/IRGraph.cpp	/^struct DOTGraphTraits<IRGraph*> : public DefaultDOTGraphTraits$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/SVFG.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/SVFG.cpp	/^struct DOTGraphTraits<SVFG*> : public DOTGraphTraits<SVFIR*>$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/Graphs/VFG.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/Graphs/VFG.cpp	/^struct DOTGraphTraits<VFG*> : public DOTGraphTraits<SVFIR*>$/;"	s	namespace:SVF	file:
DOTGraphTraits	svf/lib/MTA/TCT.cpp	/^    DOTGraphTraits(bool isSimple = false) :$/;"	f	struct:SVF::DOTGraphTraits
DOTGraphTraits	svf/lib/MTA/TCT.cpp	/^struct DOTGraphTraits<TCT*> : public DefaultDOTGraphTraits$/;"	s	namespace:SVF	file:
DOTIMESTAT	svf/include/SVFIR/SVFType.h	500;"	d
DOUBLEFREE	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
DOUBLEFREECHECKER_H_	svf/include/SABER/DoubleFreeChecker.h	31;"	d
DPAGBuild	svf/include/SVFIR/SVFType.h	506;"	d
DPITEM_H_	svf/include/Util/DPItem.h	31;"	d
DPIm	svf/include/SABER/SrcSnkDDA.h	/^    typedef CxtDPItem DPIm;$/;"	t	class:SVF::SrcSnkDDA
DPImSet	svf/include/SABER/SrcSnkDDA.h	/^    typedef Set<DPIm> DPImSet;							\/\/\/< dpitem set$/;"	t	class:SVF::SrcSnkDDA
DPImToCPtSetMap	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedMap<DPIm, CPtSet> DPImToCPtSetMap;$/;"	t	class:SVF::DDAVFSolver
DPItem	svf/include/Util/DPItem.h	/^    DPItem(NodeID c) : cur(c)$/;"	f	class:SVF::DPItem
DPItem	svf/include/Util/DPItem.h	/^    DPItem(const DPItem& dps) : cur(dps.cur)$/;"	f	class:SVF::DPItem
DPItem	svf/include/Util/DPItem.h	/^class DPItem$/;"	c	namespace:SVF
DPMToCVarMap	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedMap<DPIm,CVar> DPMToCVarMap;$/;"	t	class:SVF::DDAVFSolver
DPMToDPMMap	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedMap<DPIm,DPIm> DPMToDPMMap;$/;"	t	class:SVF::DDAVFSolver
DPTItemSet	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedSet<DPIm> DPTItemSet;$/;"	t	class:SVF::DDAVFSolver
DR_CHECK	svf/include/Util/Annotator.h	/^    const char* DR_CHECK;$/;"	m	class:SVF::Annotator
DR_NOT_CHECK	svf/include/Util/Annotator.h	/^    const char* DR_NOT_CHECK;$/;"	m	class:SVF::Annotator
DRefinePT	svf/include/SVFIR/SVFType.h	512;"	d
DSaber	svf/include/SVFIR/SVFType.h	518;"	d
DWPA	svf/include/SVFIR/SVFType.h	514;"	d
DataDeque	svf/include/CFL/CFGrammar.h	/^    typedef std::deque<Data> DataDeque;$/;"	t	class:SVF::CFLFIFOWorkList
DataDeque	svf/include/Util/WorkList.h	/^    typedef std::deque<Data> DataDeque;$/;"	t	class:SVF::FIFOWorkList
DataFlow	svf/include/MemoryModel/AbstractPointsToDS.h	/^        DataFlow,$/;"	e	enum:SVF::PTData::PTDataTy
DataIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename DataSet::iterator DataIter;$/;"	t	class:SVF::MutableIncDFPTData
DataLayout	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DataLayout DataLayout;$/;"	t	namespace:SVF
DataMap	svf/include/CFL/CFLSolver.h	/^    typedef std::unordered_map<NodeID, TypeMap> DataMap;            \/\/ Each Node has a TypeMap$/;"	t	class:SVF::POCRSolver
DataOp	svf/include/MemoryModel/PersistentPointsToCache.h	/^    typedef std::function<Data(const Data &, const Data &)> DataOp;$/;"	t	class:SVF::PersistentPointsToCache
DataSet	svf/include/CFL/CFGrammar.h	/^    typedef GrammarBase::SymbolSet<Data> DataSet;$/;"	t	class:SVF::CFLFIFOWorkList
DataSet	svf/include/Util/WorkList.h	/^    typedef Set<Data> DataSet;$/;"	t	class:SVF::FIFOWorkList
DataSet	svf/include/Util/WorkList.h	/^    typedef Set<Data> DataSet;$/;"	t	class:SVF::FILOWorkList
DataSet	svf/include/Util/WorkList.h	/^    typedef Set<Data> DataSet;$/;"	t	class:SVF::List
DataVector	svf/include/Util/WorkList.h	/^    typedef std::vector<Data> DataVector;$/;"	t	class:SVF::FILOWorkList
Datatype	z3.obj/bin/python/z3/z3.py	/^class Datatype:$/;"	c
DatatypeRef	z3.obj/bin/python/z3/z3.py	/^class DatatypeRef(ExprRef):$/;"	c
DatatypeSortRef	z3.obj/bin/python/z3/z3.py	/^class DatatypeSortRef(SortRef):$/;"	c
DbgDeclareInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DbgDeclareInst DbgDeclareInst;$/;"	t	namespace:SVF
DbgInfoIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DbgInfoIntrinsic DbgInfoIntrinsic;$/;"	t	namespace:SVF
DbgLabelInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DbgLabelInst DbgLabelInst;$/;"	t	namespace:SVF
DbgValueInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DbgValueInst DbgValueInst;$/;"	t	namespace:SVF
DbgVariableIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DbgVariableIntrinsic DbgVariableIntrinsic;$/;"	t	namespace:SVF
DebugInfoFinder	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DebugInfoFinder DebugInfoFinder;$/;"	t	namespace:SVF
DeclareSort	z3.obj/bin/python/z3/z3.py	/^def DeclareSort(name, ctx=None):$/;"	f
Default	z3.obj/bin/python/z3/z3.py	/^def Default(a):$/;"	f
DefaultDOTGraphTraits	svf/include/Graphs/DOTGraphTraits.h	/^    explicit DefaultDOTGraphTraits(bool simple=false) : IsSimple (simple) {}$/;"	f	struct:SVF::DefaultDOTGraphTraits
DefaultDOTGraphTraits	svf/include/Graphs/DOTGraphTraits.h	/^struct DefaultDOTGraphTraits$/;"	s	namespace:SVF
Default_PTA	svf/include/MemoryModel/PointerAnalysis.h	/^        Default_PTA		\/\/\/< default pta without any analysis$/;"	e	enum:SVF::PointerAnalysis::PTATY
DemangledName	svf-llvm/include/SVF-LLVM/CppUtil.h	/^struct DemangledName$/;"	s	namespace:SVF::cppUtil
DendrogramTraversalTime	svf/include/Util/NodeIDAllocator.h	/^        static const std::string DendrogramTraversalTime;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
DendrogramTraversalTime	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::DendrogramTraversalTime = "DendrogramTravTime";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
DetectPWC	svf/include/Util/Options.h	/^    static Option<bool> DetectPWC;$/;"	m	class:SVF::Options
DetectorKind	svf/include/AE/Svfexe/AEDetector.h	/^    enum DetectorKind$/;"	g	class:SVF::AEDetector
Diff	svf/include/MemoryModel/AbstractPointsToDS.h	/^        Diff,$/;"	e	enum:SVF::PTData::PTDataTy
DiffPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    DiffPTData(bool reversePT = true, PTDataTy ty = PTDataTy::Diff) : BasePTData(reversePT, ty) { }$/;"	f	class:SVF::DiffPTData
DiffPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^class DiffPTData : public PTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
DiffPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef DiffPTData<NodeID, NodeSet, NodeID, PointsTo> DiffPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
DiffPts	svf/include/Util/Options.h	/^    static const Option<bool> DiffPts;$/;"	m	class:SVF::Options
DirectSVFGEdge	svf/include/Graphs/VFGEdge.h	/^    DirectSVFGEdge(VFGNode* s, VFGNode* d, GEdgeFlag k): VFGEdge(s,d,k)$/;"	f	class:SVF::DirectSVFGEdge
DirectSVFGEdge	svf/include/Graphs/VFGEdge.h	/^class DirectSVFGEdge : public VFGEdge$/;"	c	namespace:SVF
DisableWarn	svf/include/Util/Options.h	/^    static const Option<bool> DisableWarn;$/;"	m	class:SVF::Options
DisjointSum	z3.obj/bin/python/z3/z3.py	/^def DisjointSum(name, sorts, ctx=None):$/;"	f
DistOccMap	svf/include/Util/NodeIDAllocator.h	/^        typedef Map<NodePair, std::pair<unsigned, unsigned>> DistOccMap;$/;"	t	class:SVF::NodeIDAllocator::Clusterer
DistanceMatrixTime	svf/include/Util/NodeIDAllocator.h	/^        static const std::string DistanceMatrixTime;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
DistanceMatrixTime	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::DistanceMatrixTime = "DistanceMatrixTime";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
Distinct	svf/include/MSSA/MemSSA.h	/^        Distinct,$/;"	e	enum:SVF::MemSSA::MemPartition
Distinct	z3.obj/bin/python/z3/z3.py	/^def Distinct(*args):$/;"	f
DistinctMRG	svf/include/MSSA/MemPartition.h	/^    DistinctMRG(BVDataPTAImpl* p, bool ptrOnly) : MRGenerator(p, ptrOnly)$/;"	f	class:SVF::DistinctMRG
DistinctMRG	svf/include/MSSA/MemPartition.h	/^class DistinctMRG : public MRGenerator$/;"	c	namespace:SVF
DoLockAnalysis	svf/include/Util/Options.h	/^    static const Option<bool> DoLockAnalysis;$/;"	m	class:SVF::Options
DomTreeNode	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DomTreeNode DomTreeNode;$/;"	t	namespace:SVF
DominanceFrontier	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DominanceFrontier DominanceFrontier;$/;"	t	namespace:SVF
DominanceFrontierBase	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DominanceFrontierBase<llvm::BasicBlock, false> DominanceFrontierBase;$/;"	t	namespace:SVF
DominatorTree	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::DominatorTree DominatorTree;$/;"	t	namespace:SVF
DoubleFreeBug	svf/include/Util/SVFBugReport.h	/^    DoubleFreeBug(const EventStack &bugEventStack):$/;"	f	class:SVF::DoubleFreeBug
DoubleFreeBug	svf/include/Util/SVFBugReport.h	/^class DoubleFreeBug : public GenericBug$/;"	c	namespace:SVF
DoubleFreeChecker	svf/include/SABER/DoubleFreeChecker.h	/^    DoubleFreeChecker(): LeakChecker()$/;"	f	class:SVF::DoubleFreeChecker
DoubleFreeChecker	svf/include/SABER/DoubleFreeChecker.h	/^class DoubleFreeChecker : public LeakChecker$/;"	c	namespace:SVF
DummyObjNode	svf/include/SVFIR/SVFValue.h	/^        DummyObjNode,            \/\/ │   └── Dummy node for uninitialized objects$/;"	e	enum:SVF::SVFValue::GNodeK
DummyObjVar	svf/include/SVFIR/SVFVariables.h	/^    DummyObjVar(NodeID i, ObjTypeInfo* ti, const ICFGNode* node, const SVFType* svfType = SVFType::getSVFPtrType())$/;"	f	class:SVF::DummyObjVar
DummyObjVar	svf/include/SVFIR/SVFVariables.h	/^    DummyObjVar(NodeID i, const ICFGNode* node) : BaseObjVar(i, node, DummyObjNode) {}$/;"	f	class:SVF::DummyObjVar
DummyObjVar	svf/include/SVFIR/SVFVariables.h	/^class DummyObjVar: public BaseObjVar$/;"	c	namespace:SVF
DummyVProp	svf/include/SVFIR/SVFValue.h	/^        DummyVProp,       \/\/ ├── Dummy node for value propagation$/;"	e	enum:SVF::SVFValue::GNodeK
DummyValNode	svf/include/SVFIR/SVFValue.h	/^        DummyValNode,            \/\/ │   └── Dummy node for uninitialized values$/;"	e	enum:SVF::SVFValue::GNodeK
DummyValVar	svf/include/SVFIR/SVFVariables.h	/^    DummyValVar(NodeID i, const ICFGNode* node, const SVFType* svfType = SVFType::getSVFPtrType())$/;"	f	class:SVF::DummyValVar
DummyValVar	svf/include/SVFIR/SVFVariables.h	/^class DummyValVar: public ValVar$/;"	c	namespace:SVF
DummyVersionPropSVFGNode	svf/include/Graphs/SVFGNode.h	/^    DummyVersionPropSVFGNode(NodeID id, NodeID object, Version version)$/;"	f	class:SVF::DummyVersionPropSVFGNode
DummyVersionPropSVFGNode	svf/include/Graphs/SVFGNode.h	/^class DummyVersionPropSVFGNode : public VFGNode$/;"	c	namespace:SVF
DumpCHA	svf/include/Util/Options.h	/^    static const Option<bool> DumpCHA;$/;"	m	class:SVF::Options
DumpICFG	svf/include/Util/Options.h	/^    static const Option<bool> DumpICFG;$/;"	m	class:SVF::Options
DumpJson	svf/include/Util/Options.h	/^    static const Option<std::string> DumpJson;$/;"	m	class:SVF::Options
DumpMSSA	svf/include/Util/Options.h	/^    static const Option<bool> DumpMSSA;$/;"	m	class:SVF::Options
DumpSlice	svf/include/Util/Options.h	/^    static const Option<bool> DumpSlice;$/;"	m	class:SVF::Options
DumpVFG	svf/include/Util/Options.h	/^    static const Option<bool> DumpVFG;$/;"	m	class:SVF::Options
E	z3.obj/bin/python/z3/z3rcf.py	/^def E(ctx=None):$/;"	f
EBNFSigns	svf/include/CFL/CFGrammar.h	/^    Map<std::string, Kind> EBNFSigns; \/\/\/ Map contains Signs' String and associated Symbols$/;"	m	class:SVF::GrammarBase
ENTRYCHI	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::ENTRYCHI ENTRYCHI;$/;"	t	class:SVF::SVFG
ENTRYCHI	svf/include/MSSA/MemSSA.h	/^    typedef EntryCHI<Condition> ENTRYCHI;$/;"	t	class:SVF::MemSSA
ENUM_INOUT	svf/include/WPA/WPAStat.h	/^    enum ENUM_INOUT$/;"	g	class:SVF::FlowSensitiveStat
EQUALS	Release-build/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/AE/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/CFL/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/DDA/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/Example/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/LLVM2SVF/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/MTA/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/SABER/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf-llvm/tools/WPA/Makefile	/^EQUALS = =$/;"	m
EQUALS	Release-build/svf/Makefile	/^EQUALS = =$/;"	m
ERR_MSG	svf-llvm/lib/ObjTypeInference.cpp	38;"	d	file:
EVENTTYPEMASK	svf/include/Util/SVFBugReport.h	41;"	d
EdgeID	svf/include/Util/GeneralType.h	/^typedef u32_t EdgeID;$/;"	t	namespace:SVF
EdgeKindMask	svf/include/CFL/CFGrammar.h	/^    static constexpr u64_t EdgeKindMask = (~0ULL) >> (64 - EdgeKindMaskBits);$/;"	m	class:SVF::GrammarBase
EdgeKindMask	svf/include/Graphs/GenericGraph.h	/^    static constexpr u64_t EdgeKindMask = (~0ULL) >> (64 - EdgeKindMaskBits);$/;"	m	class:SVF::GenericEdge
EdgeKindMaskBits	svf/include/CFL/CFGrammar.h	/^    static constexpr unsigned char EdgeKindMaskBits = 8;  \/\/\/< We use the lower 8 bits to denote edge kind$/;"	m	class:SVF::GrammarBase
EdgeKindMaskBits	svf/include/Graphs/GenericGraph.h	/^    static constexpr unsigned char EdgeKindMaskBits = 8;  \/\/\/< We use the lower 8 bits to denote edge kind$/;"	m	class:SVF::GenericEdge
EdgeSet	svf/include/Util/GeneralType.h	/^                    typedef NodeSet EdgeSet;$/;"	t	namespace:SVF
EdgeT	svf/include/Graphs/WTO.h	/^    typedef typename GraphT::EdgeType EdgeT;$/;"	t	class:SVF::WTO
EdgeType	svf/include/Graphs/GenericGraph.h	/^    typedef EdgeTy EdgeType;$/;"	t	class:SVF::GenericGraph
EdgeType	svf/include/Graphs/GenericGraph.h	/^    typedef EdgeTy EdgeType;$/;"	t	class:SVF::GenericNode
EdgeType	svf/include/Graphs/GenericGraph.h	/^    typedef EdgeTy EdgeType;$/;"	t	struct:SVF::GenericGraphTraits
EdgeVector	svf/include/Util/GeneralType.h	/^                    typedef std::vector<EdgeID> EdgeVector;$/;"	t	namespace:SVF
ElementIndex	svf/include/Util/SparseBitVector.h	/^    unsigned ElementIndex = 0;$/;"	m	struct:SVF::SparseBitVectorElement
ElementSet	svf/include/MemoryModel/ConditionalPT.h	/^    typedef OrderedSet<Element> ElementSet;$/;"	t	class:SVF::CondStdSet
Elementaries	z3.obj/bin/python/z3/z3core.py	/^class Elementaries:$/;"	c
Elements	svf/include/Util/SparseBitVector.h	/^    ElementList Elements;$/;"	m	class:SVF::SparseBitVector
Empty	svf/include/MTA/LockAnalysis.h	/^        Empty,  \/\/ initial(dummy) state$/;"	e	enum:SVF::LockAnalysis::ValDomain
Empty	svf/include/MTA/MHP.h	/^        Empty,  \/\/ initial(dummy) state$/;"	e	enum:SVF::ForkJoinAnalysis::ValDomain
Empty	z3.obj/bin/python/z3/z3.py	/^def Empty(s):$/;"	f
EmptySet	z3.obj/bin/python/z3/z3.py	/^def EmptySet(s):$/;"	f
EnableAliasCheck	svf/include/Util/Options.h	/^    static const Option<bool> EnableAliasCheck;$/;"	m	class:SVF::Options
EnableThreadCallGraph	svf/include/Util/Options.h	/^    static const Option<bool> EnableThreadCallGraph;$/;"	m	class:SVF::Options
EnableTypeCheck	svf/include/Util/Options.h	/^    static const Option<bool> EnableTypeCheck;$/;"	m	class:SVF::Options
EntryCHI	svf/include/MSSA/MSSAMuChi.h	/^    EntryCHI(const FunObjVar* f, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::EntryCHI
EntryCHI	svf/include/MSSA/MSSAMuChi.h	/^class EntryCHI : public MSSACHI<Cond>$/;"	c	namespace:SVF
EntryMSSACHI	svf/include/MSSA/MSSAMuChi.h	/^        EntryMSSACHI,$/;"	e	enum:SVF::MSSADEF::DEFTYPE
EnumSort	z3.obj/bin/python/z3/z3.py	/^def EnumSort(name, values, ctx=None):$/;"	f
EscapeStr	svf/lib/Graphs/GraphWriter.cpp	/^std::string SVF::DOT::EscapeStr(const std::string &Label)$/;"	f	class:SVF::DOT
EvalTime	svf/include/Util/NodeIDAllocator.h	/^        static const std::string EvalTime;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
EvalTime	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::EvalTime = "EvalTime";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
EventStack	svf/include/Util/SVFBugReport.h	/^    typedef std::vector<SVFBugEvent> EventStack;$/;"	t	class:SVF::GenericBug
EventType	svf/include/Util/SVFBugReport.h	/^    enum EventType$/;"	g	class:SVF::SVFBugEvent
Exists	z3.obj/bin/python/z3/z3.py	/^def Exists(vs, body, weight=1, qid="", skid="", patterns=[], no_patterns=[]):$/;"	f
ExprRef	z3.obj/bin/python/z3/z3.py	/^class ExprRef(AstRef):$/;"	c
Ext	z3.obj/bin/python/z3/z3.py	/^def Ext(a, b):$/;"	f
ExtAPI	svf/include/Util/ExtAPI.h	/^class ExtAPI$/;"	c	namespace:SVF
ExtAPIPath	svf/include/Util/Options.h	/^    static const Option<std::string> ExtAPIPath;$/;"	m	class:SVF::Options
ExtAPIType	svf/include/AE/Svfexe/AbsExtAPI.h	/^    enum ExtAPIType { UNCLASSIFIED, MEMCPY, MEMSET, STRCPY, STRCAT };$/;"	g	class:SVF::AbsExtAPI
ExtFun2Annotations	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Fun2AnnoMap ExtFun2Annotations;$/;"	m	class:SVF::LLVMModuleSet
ExtFuncsVec	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunctionSetType ExtFuncsVec;$/;"	m	class:SVF::LLVMModuleSet
Extract	z3.obj/bin/python/z3/z3.py	/^def Extract(high, low, a):$/;"	f
ExtractElementInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ExtractElementInst ExtractElementInst;$/;"	t	namespace:SVF
ExtractValueInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ExtractValueInst  ExtractValueInst;$/;"	t	namespace:SVF
F	svf/include/Graphs/GenericGraph.h	/^    FuncTy F;$/;"	m	class:SVF::mapped_iter
FDP	svf/include/Graphs/GraphWriter.h	/^    FDP,$/;"	e	enum:SVF::GraphProgram::Name
FIFOWorkList	svf/include/Util/WorkList.h	/^    FIFOWorkList() {}$/;"	f	class:SVF::FIFOWorkList
FIFOWorkList	svf/include/Util/WorkList.h	/^class FIFOWorkList$/;"	c	namespace:SVF
FILECHECK_H_	svf/include/SABER/FileChecker.h	31;"	d
FILENEVERCLOSE	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
FILEPARTIALCLOSE	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
FILOWorkList	svf/include/Util/WorkList.h	/^    FILOWorkList() {}$/;"	f	class:SVF::FILOWorkList
FILOWorkList	svf/include/Util/WorkList.h	/^class FILOWorkList$/;"	c	namespace:SVF
FIRST_FIELD	svf-llvm/include/SVF-LLVM/DCHG.h	/^        FIRST_FIELD,  \/\/ src -ff-> dst => dst is first field of src$/;"	e	enum:SVF::DCHEdge::__anon11
FLOWSENSITIVEANALYSIS_H_	svf/include/WPA/FlowSensitive.h	31;"	d
FLOWSENSITIVESTAT_H_	svf/include/WPA/WPAStat.h	32;"	d
FP	z3.obj/bin/python/z3/z3.py	/^def FP(name, fpsort, ctx=None):$/;"	f
FPIN	svf/include/SVFIR/SVFValue.h	/^        FPIN,             \/\/ │   ├── Function parameter input$/;"	e	enum:SVF::SVFValue::GNodeK
FPNodes	svf/include/Graphs/ICFGNode.h	/^    FormalParmNodeVec FPNodes;$/;"	m	class:SVF::FunEntryICFGNode
FPNumRef	z3.obj/bin/python/z3/z3.py	/^class FPNumRef(FPRef):$/;"	c
FPOUT	svf/include/SVFIR/SVFValue.h	/^        FPOUT,            \/\/ │   ├── Function parameter output$/;"	e	enum:SVF::SVFValue::GNodeK
FPRMRef	z3.obj/bin/python/z3/z3.py	/^class FPRMRef(ExprRef):$/;"	c
FPRMSortRef	z3.obj/bin/python/z3/z3.py	/^class FPRMSortRef(SortRef):$/;"	c
FPRef	z3.obj/bin/python/z3/z3.py	/^class FPRef(ExprRef):$/;"	c
FPSort	z3.obj/bin/python/z3/z3.py	/^def FPSort(ebits, sbits, ctx=None):$/;"	f
FPSortRef	z3.obj/bin/python/z3/z3.py	/^class FPSortRef(SortRef):$/;"	c
FPTOSI	svf/include/SVFIR/SVFStatements.h	/^        FPTOSI,     \/\/ floating point -> SInt$/;"	e	enum:SVF::CopyStmt::CopyKind
FPTOUI	svf/include/SVFIR/SVFStatements.h	/^        FPTOUI,     \/\/ floating point -> UInt$/;"	e	enum:SVF::CopyStmt::CopyKind
FPTRUNC	svf/include/SVFIR/SVFStatements.h	/^        FPTRUNC,    \/\/ Truncate floating point$/;"	e	enum:SVF::CopyStmt::CopyKind
FPVal	z3.obj/bin/python/z3/z3.py	/^def FPVal(sig, exp=None, fps=None, ctx=None):$/;"	f
FParm	svf/include/SVFIR/SVFValue.h	/^        FParm,            \/\/ │   └── Represents a function parameter$/;"	e	enum:SVF::SVFValue::GNodeK
FPs	z3.obj/bin/python/z3/z3.py	/^def FPs(names, fpsort, ctx=None):$/;"	f
FRet	svf/include/SVFIR/SVFValue.h	/^        FRet,             \/\/ │   ├── Represents a function return value$/;"	e	enum:SVF::SVFValue::GNodeK
FSCS_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        FSCS_WPA,			\/\/\/< Flow-, context- sensitive WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
FSDATAFLOW_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        FSDATAFLOW_WPA,	\/\/\/< Traditional Dataflow-based flow sensitive WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
FSSPARSE_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        FSSPARSE_WPA,		\/\/\/< Sparse flow sensitive WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
FULLBUFOVERFLOW	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
FULLNULLPTRDEREFERENCE	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
FULLSVFG	svf/include/Graphs/VFG.h	/^        FULLSVFG, PTRONLYSVFG, FULLSVFG_OPT, PTRONLYSVFG_OPT$/;"	e	enum:SVF::VFG::VFGK
FULLSVFG_OPT	svf/include/Graphs/VFG.h	/^        FULLSVFG, PTRONLYSVFG, FULLSVFG_OPT, PTRONLYSVFG_OPT$/;"	e	enum:SVF::VFG::VFGK
FUNCTION_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        FUNCTION_OBJ = 0x1,  \/\/ object is a function$/;"	e	enum:SVF::ObjTypeInfo::__anon18
FWProcessCurNode	svf/include/SABER/SrcSnkSolver.h	/^    virtual void FWProcessCurNode(const DPIm&)$/;"	f	class:SVF::SrcSnkSolver
FWProcessCurNode	svf/include/Util/GraphReachSolver.h	/^    virtual void FWProcessCurNode(const DPIm&)$/;"	f	class:SVF::GraphReachSolver
FWProcessOutgoingEdge	svf/include/SABER/SrcSnkSolver.h	/^    virtual void FWProcessOutgoingEdge(const DPIm& item, GEDGE* edge)$/;"	f	class:SVF::SrcSnkSolver
FWProcessOutgoingEdge	svf/include/Util/GraphReachSolver.h	/^    virtual void FWProcessOutgoingEdge(const DPIm& item, GEDGE* edge)$/;"	f	class:SVF::GraphReachSolver
FWProcessOutgoingEdge	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::FWProcessOutgoingEdge(const DPIm& item, SVFGEdge* edge)$/;"	f	class:SrcSnkDDA
FailIf	z3.obj/bin/python/z3/z3.py	/^def FailIf(p, ctx=None):$/;"	f
FastClusterTime	svf/include/Util/NodeIDAllocator.h	/^        static const std::string FastClusterTime;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
FastClusterTime	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::FastClusterTime = "FastClusterTime";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
FenceInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::FenceInst FenceInst;$/;"	t	namespace:SVF
FieldReps	svf/include/WPA/AndersenPWC.h	/^    typedef Map<NodeID, NodeSet> FieldReps;$/;"	t	class:SVF::AndersenSFR
FieldS_DDA	svf/include/MemoryModel/PointerAnalysis.h	/^        FieldS_DDA,		\/\/\/< Field sensitive DDA$/;"	e	enum:SVF::PointerAnalysis::PTATY
FileCheck	svf/include/Util/Options.h	/^    static const Option<bool> FileCheck;$/;"	m	class:SVF::Options
FileChecker	svf/include/SABER/FileChecker.h	/^    FileChecker(): LeakChecker()$/;"	f	class:SVF::FileChecker
FileChecker	svf/include/SABER/FileChecker.h	/^class FileChecker : public LeakChecker$/;"	c	namespace:SVF
FileNeverCloseBug	svf/include/Util/SVFBugReport.h	/^    FileNeverCloseBug(const EventStack &bugEventStack):$/;"	f	class:SVF::FileNeverCloseBug
FileNeverCloseBug	svf/include/Util/SVFBugReport.h	/^class FileNeverCloseBug : public GenericBug$/;"	c	namespace:SVF
FilePartialCloseBug	svf/include/Util/SVFBugReport.h	/^    FilePartialCloseBug(const EventStack &bugEventStack):$/;"	f	class:SVF::FilePartialCloseBug
FilePartialCloseBug	svf/include/Util/SVFBugReport.h	/^class FilePartialCloseBug : public GenericBug$/;"	c	namespace:SVF
FindLowerBound	svf/include/Util/SparseBitVector.h	/^    ElementListIter FindLowerBound(unsigned ElementIndex)$/;"	f	class:SVF::SparseBitVector
FindLowerBoundConst	svf/include/Util/SparseBitVector.h	/^    ElementListConstIter FindLowerBoundConst(unsigned ElementIndex) const$/;"	f	class:SVF::SparseBitVector
FindLowerBoundImpl	svf/include/Util/SparseBitVector.h	/^    ElementListIter FindLowerBoundImpl(unsigned ElementIndex) const$/;"	f	class:SVF::SparseBitVector
FiniteDomainNumRef	z3.obj/bin/python/z3/z3.py	/^class FiniteDomainNumRef(FiniteDomainRef):$/;"	c
FiniteDomainRef	z3.obj/bin/python/z3/z3.py	/^class FiniteDomainRef(ExprRef):$/;"	c
FiniteDomainSort	z3.obj/bin/python/z3/z3.py	/^def FiniteDomainSort(name, sz, ctx=None):$/;"	f
FiniteDomainSortRef	z3.obj/bin/python/z3/z3.py	/^class FiniteDomainSortRef(SortRef):$/;"	c
FiniteDomainVal	z3.obj/bin/python/z3/z3.py	/^def FiniteDomainVal(val, sort, ctx=None):$/;"	f
FirstFieldEqBase	svf/include/Util/Options.h	/^    static const Option<bool> FirstFieldEqBase;$/;"	m	class:SVF::Options
Fixedpoint	z3.obj/bin/python/z3/z3.py	/^class Fixedpoint(Z3PPObject):$/;"	c
FixedpointObj	z3.obj/bin/python/z3/z3types.py	/^class FixedpointObj(ctypes.c_void_p):$/;"	c
FlexSymMap	svf/include/Util/Options.h	/^    static const Option<bool> FlexSymMap;$/;"	m	class:SVF::Options
FlippedAddressMask	svf/include/AE/Core/AddressValue.h	34;"	d
Float128	z3.obj/bin/python/z3/z3.py	/^def Float128(ctx=None):$/;"	f
Float16	z3.obj/bin/python/z3/z3.py	/^def Float16(ctx=None):$/;"	f
Float32	z3.obj/bin/python/z3/z3.py	/^def Float32(ctx=None):$/;"	f
Float64	z3.obj/bin/python/z3/z3.py	/^def Float64(ctx=None):$/;"	f
FloatDouble	z3.obj/bin/python/z3/z3.py	/^def FloatDouble(ctx=None):$/;"	f
FloatHalf	z3.obj/bin/python/z3/z3.py	/^def FloatHalf(ctx=None):$/;"	f
FloatQuadruple	z3.obj/bin/python/z3/z3.py	/^def FloatQuadruple(ctx=None):$/;"	f
FloatSingle	z3.obj/bin/python/z3/z3.py	/^def FloatSingle(ctx=None):$/;"	f
FlowBudget	svf/include/Util/Options.h	/^    static const Option<u32_t> FlowBudget;$/;"	m	class:SVF::Options
FlowDDA	svf/include/DDA/FlowDDA.h	/^    FlowDDA(SVFIR* _pag, DDAClient* client): BVDataPTAImpl(_pag, PointerAnalysis::FlowS_DDA),$/;"	f	class:SVF::FlowDDA
FlowDDA	svf/include/DDA/FlowDDA.h	/^class FlowDDA : public BVDataPTAImpl, public DDAVFSolver<NodeID,PointsTo,LocDPItem>$/;"	c	namespace:SVF
FlowDDA_H_	svf/include/DDA/FlowDDA.h	38;"	d
FlowS_DDA	svf/include/MemoryModel/PointerAnalysis.h	/^        FlowS_DDA,		\/\/\/< Flow sensitive DDA$/;"	e	enum:SVF::PointerAnalysis::PTATY
FlowSensitive	svf/include/WPA/FlowSensitive.h	/^    explicit FlowSensitive(SVFIR* _pag, PTATY type = FSSPARSE_WPA) : WPASVFGFSSolver(), BVDataPTAImpl(_pag, type)$/;"	f	class:SVF::FlowSensitive
FlowSensitive	svf/include/WPA/FlowSensitive.h	/^class FlowSensitive : public WPASVFGFSSolver, public BVDataPTAImpl$/;"	c	namespace:SVF
FlowSensitiveStat	svf/include/WPA/WPAStat.h	/^    FlowSensitiveStat(FlowSensitive* pta): PTAStat(pta)$/;"	f	class:SVF::FlowSensitiveStat
FlowSensitiveStat	svf/include/WPA/WPAStat.h	/^class FlowSensitiveStat : public PTAStat$/;"	c	namespace:SVF
ForAll	z3.obj/bin/python/z3/z3.py	/^def ForAll(vs, body, weight=1, qid="", skid="", patterns=[], no_patterns=[]):$/;"	f
ForkEdgeSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef GenericNode<CallGraphNode, ThreadForkEdge>::GEdgeSetTy ForkEdgeSet;$/;"	t	class:SVF::ThreadForkEdge
ForkEdgeSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef ThreadForkEdge::ForkEdgeSet ForkEdgeSet;$/;"	t	class:SVF::ThreadCallGraph
ForkJoinAnalysis	svf/include/MTA/MHP.h	/^    ForkJoinAnalysis(TCT* t) : tct(t)$/;"	f	class:SVF::ForkJoinAnalysis
ForkJoinAnalysis	svf/include/MTA/MHP.h	/^class ForkJoinAnalysis$/;"	c	namespace:SVF
FormalINSVFGNode	svf/include/Graphs/SVFGNode.h	/^    FormalINSVFGNode(NodeID id, const MRVer* resVer, const FunEntryICFGNode* funEntry): MRSVFGNode(id, FPIN)$/;"	f	class:SVF::FormalINSVFGNode
FormalINSVFGNode	svf/include/Graphs/SVFGNode.h	/^class FormalINSVFGNode : public MRSVFGNode$/;"	c	namespace:SVF
FormalINSVFGNodeSet	svf/include/Graphs/SVFG.h	/^    typedef NodeBS FormalINSVFGNodeSet;$/;"	t	class:SVF::SVFG
FormalOUTSVFGNode	svf/include/Graphs/SVFGNode.h	/^class FormalOUTSVFGNode : public MRSVFGNode$/;"	c	namespace:SVF
FormalOUTSVFGNode	svf/lib/Graphs/SVFG.cpp	/^FormalOUTSVFGNode::FormalOUTSVFGNode(NodeID id, const MRVer* mrVer, const FunExitICFGNode* funExit): MRSVFGNode(id, FPOUT)$/;"	f	class:FormalOUTSVFGNode
FormalOUTSVFGNodeSet	svf/include/Graphs/SVFG.h	/^    typedef NodeBS FormalOUTSVFGNodeSet;$/;"	t	class:SVF::SVFG
FormalParmNodeVec	svf/include/Graphs/ICFGNode.h	/^    typedef std::vector<const SVFVar *> FormalParmNodeVec;$/;"	t	class:SVF::FunEntryICFGNode
FormalParmSVFGNode	svf/include/Graphs/SVFG.h	/^typedef FormalParmVFGNode FormalParmSVFGNode;$/;"	t	namespace:SVF
FormalParmVFGNode	svf/include/Graphs/VFGNode.h	/^    FormalParmVFGNode(NodeID id, const PAGNode* n, const FunObjVar* f):$/;"	f	class:SVF::FormalParmVFGNode
FormalParmVFGNode	svf/include/Graphs/VFGNode.h	/^class FormalParmVFGNode : public ArgumentVFGNode$/;"	c	namespace:SVF
FormalRetSVFGNode	svf/include/Graphs/SVFG.h	/^typedef FormalRetVFGNode FormalRetSVFGNode;$/;"	t	namespace:SVF
FormalRetVFGNode	svf/include/Graphs/VFGNode.h	/^class FormalRetVFGNode: public ArgumentVFGNode$/;"	c	namespace:SVF
FormalRetVFGNode	svf/lib/Graphs/VFG.cpp	/^FormalRetVFGNode::FormalRetVFGNode(NodeID id, const PAGNode* n, const FunObjVar* f) :$/;"	f	class:FormalRetVFGNode
FormatObject	z3.obj/bin/python/z3/z3printer.py	/^class FormatObject:$/;"	c
Formatter	z3.obj/bin/python/z3/z3printer.py	/^class Formatter:$/;"	c
FreezeInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::FreezeInst FreezeInst;$/;"	t	namespace:SVF
FreshBool	z3.obj/bin/python/z3/z3.py	/^def FreshBool(prefix='b', ctx=None):$/;"	f
FreshConst	z3.obj/bin/python/z3/z3.py	/^def FreshConst(sort, prefix='c'):$/;"	f
FreshFunction	z3.obj/bin/python/z3/z3.py	/^def FreshFunction(*sig):$/;"	f
FreshInt	z3.obj/bin/python/z3/z3.py	/^def FreshInt(prefix='x', ctx=None):$/;"	f
FreshReal	z3.obj/bin/python/z3/z3.py	/^def FreshReal(prefix='b', ctx=None):$/;"	f
FsTimeLimit	svf/include/Util/Options.h	/^    static const Option<u32_t> FsTimeLimit;$/;"	m	class:SVF::Options
Full	z3.obj/bin/python/z3/z3.py	/^def Full(s):$/;"	f
FullBufferOverflowBug	svf/include/Util/SVFBugReport.h	/^    FullBufferOverflowBug(const EventStack &eventStack,$/;"	f	class:SVF::FullBufferOverflowBug
FullBufferOverflowBug	svf/include/Util/SVFBugReport.h	/^class FullBufferOverflowBug: public BufferOverflowBug$/;"	c	namespace:SVF
FullNullPtrDereferenceBug	svf/include/Util/SVFBugReport.h	/^    FullNullPtrDereferenceBug(const EventStack &bugEventStack):$/;"	f	class:SVF::FullNullPtrDereferenceBug
FullNullPtrDereferenceBug	svf/include/Util/SVFBugReport.h	/^class FullNullPtrDereferenceBug : public GenericBug$/;"	c	namespace:SVF
FullSet	z3.obj/bin/python/z3/z3.py	/^def FullSet(s):$/;"	f
Fun2AnnoMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<std::string, std::vector<std::string>> Fun2AnnoMap;$/;"	t	class:SVF::LLVMModuleSet
FunCallBlock	svf/include/SVFIR/SVFValue.h	/^        FunCallBlock,     \/\/ │   ├── Call site in the function$/;"	e	enum:SVF::SVFValue::GNodeK
FunDeclToDefMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, const Function*> FunDeclToDefMapTy;$/;"	t	class:SVF::LLVMModuleSet
FunDefToDeclsMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, FunctionSetType> FunDefToDeclsMapTy;$/;"	t	class:SVF::LLVMModuleSet
FunEntryBlock	svf/include/SVFIR/SVFValue.h	/^        FunEntryBlock,    \/\/ │   ├── Entry point of a function$/;"	e	enum:SVF::SVFValue::GNodeK
FunEntryICFGNode	svf/include/Graphs/ICFGNode.h	/^    FunEntryICFGNode(NodeID id) : InterICFGNode(id, FunEntryBlock) {}$/;"	f	class:SVF::FunEntryICFGNode
FunEntryICFGNode	svf/include/Graphs/ICFGNode.h	/^class FunEntryICFGNode : public InterICFGNode$/;"	c	namespace:SVF
FunEntryICFGNode	svf/lib/Graphs/ICFG.cpp	/^FunEntryICFGNode::FunEntryICFGNode(NodeID id, const FunObjVar* f) : InterICFGNode(id, FunEntryBlock)$/;"	f	class:FunEntryICFGNode
FunExitBlock	svf/include/SVFIR/SVFValue.h	/^        FunExitBlock,     \/\/ │   ├── Exit point of a function$/;"	e	enum:SVF::SVFValue::GNodeK
FunExitICFGNode	svf/include/Graphs/ICFGNode.h	/^    FunExitICFGNode(NodeID id) : InterICFGNode(id, FunExitBlock), formalRet{} {}$/;"	f	class:SVF::FunExitICFGNode
FunExitICFGNode	svf/include/Graphs/ICFGNode.h	/^class FunExitICFGNode : public InterICFGNode$/;"	c	namespace:SVF
FunExitICFGNode	svf/lib/Graphs/ICFG.cpp	/^FunExitICFGNode::FunExitICFGNode(NodeID id, const FunObjVar* f)$/;"	f	class:FunExitICFGNode
FunObjNode	svf/include/SVFIR/SVFValue.h	/^        FunObjNode,              \/\/ │   ├── Represents a function object$/;"	e	enum:SVF::SVFValue::GNodeK
FunObjVar	svf/include/SVFIR/SVFVariables.h	/^    FunObjVar(NodeID i, const ICFGNode* node) : BaseObjVar(i,node, FunObjNode) {}$/;"	f	class:SVF::FunObjVar
FunObjVar	svf/include/SVFIR/SVFVariables.h	/^class FunObjVar : public BaseObjVar$/;"	c	namespace:SVF
FunObjVar	svf/lib/SVFIR/SVFVariables.cpp	/^FunObjVar::FunObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node)$/;"	f	class:FunObjVar
FunObjVarToIDMapTy	svf/include/Graphs/IRGraph.h	/^    typedef OrderedMap<const FunObjVar*, NodeID> FunObjVarToIDMapTy;$/;"	t	class:SVF::IRGraph
FunPtrToCallSitesMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeID,CallSiteSet> FunPtrToCallSitesMap;$/;"	t	class:SVF::SVFIR
FunRetBlock	svf/include/SVFIR/SVFValue.h	/^        FunRetBlock,      \/\/ │   └── Return site in the function$/;"	e	enum:SVF::SVFValue::GNodeK
FunSet	svf/include/MTA/LockAnalysis.h	/^    typedef Set<const FunObjVar*> FunSet;$/;"	t	class:SVF::LockAnalysis
FunSet	svf/include/MTA/MHP.h	/^    typedef Set<const FunObjVar*> FunSet;$/;"	t	class:SVF::MHP
FunSet	svf/include/MTA/TCT.h	/^    typedef Set<const FunObjVar*> FunSet;$/;"	t	class:SVF::TCT
FunToArgsListMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const FunObjVar*,SVFVarList> FunToArgsListMap;$/;"	t	class:SVF::SVFIR
FunToCallGraphNodeMap	svf/include/Graphs/CallGraph.h	/^    typedef Map<const FunObjVar*, CallGraphNode*> FunToCallGraphNodeMap;$/;"	t	class:SVF::CallGraph
FunToDominatorTree	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Map<const Function*, DominatorTree> FunToDominatorTree;$/;"	m	class:SVF::LLVMModuleSet
FunToEntryChiSetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const FunObjVar*, CHISet> FunToEntryChiSetMap;$/;"	t	class:SVF::MemSSA
FunToExitBBMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, const BasicBlock*> FunToExitBBMap;$/;"	t	class:SVF::LLVMModuleSet
FunToExitBBsMap	svf/include/SABER/SaberCondAllocator.h	/^    typedef Map<const FunObjVar*,  BasicBlockSet> FunToExitBBsMap;  \/\/\/< map a function to all its basic blocks calling program exit$/;"	t	class:SVF::SaberCondAllocator
FunToFunEntryNodeMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunToFunEntryNodeMapTy FunToFunEntryNodeMap; \/\/\/< map a function to its FunExitICFGNode$/;"	m	class:SVF::LLVMModuleSet
FunToFunEntryNodeMap	svf/include/Graphs/ICFG.h	/^    FunToFunEntryNodeMapTy FunToFunEntryNodeMap; \/\/\/< map a function to its FunExitICFGNode$/;"	m	class:SVF::ICFG
FunToFunEntryNodeMapTy	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef Map<const Function*, FunEntryICFGNode *> FunToFunEntryNodeMapTy;$/;"	t	class:SVF::ICFGBuilder
FunToFunEntryNodeMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, FunEntryICFGNode *> FunToFunEntryNodeMapTy;$/;"	t	class:SVF::LLVMModuleSet
FunToFunEntryNodeMapTy	svf/include/Graphs/ICFG.h	/^    typedef Map<const FunObjVar*, FunEntryICFGNode *> FunToFunEntryNodeMapTy;$/;"	t	class:SVF::ICFG
FunToFunExitNodeMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunToFunExitNodeMapTy FunToFunExitNodeMap; \/\/\/< map a function to its FunEntryICFGNode$/;"	m	class:SVF::LLVMModuleSet
FunToFunExitNodeMap	svf/include/Graphs/ICFG.h	/^    FunToFunExitNodeMapTy FunToFunExitNodeMap; \/\/\/< map a function to its FunEntryICFGNode$/;"	m	class:SVF::ICFG
FunToFunExitNodeMapTy	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef Map<const Function*, FunExitICFGNode *> FunToFunExitNodeMapTy;$/;"	t	class:SVF::ICFGBuilder
FunToFunExitNodeMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, FunExitICFGNode *> FunToFunExitNodeMapTy;$/;"	t	class:SVF::LLVMModuleSet
FunToFunExitNodeMapTy	svf/include/Graphs/ICFG.h	/^    typedef Map<const FunObjVar*, FunExitICFGNode *> FunToFunExitNodeMapTy;$/;"	t	class:SVF::ICFG
FunToIDMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef OrderedMap<const Function*, NodeID> FunToIDMapTy;$/;"	t	class:SVF::LLVMModuleSet
FunToInterMap	svf/include/MSSA/MemPartition.h	/^    typedef Map<const FunObjVar*, PointsToList> FunToInterMap;$/;"	t	class:SVF::IntraDisjointMRG
FunToMRsMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const FunObjVar*, MRSet> FunToMRsMap;$/;"	t	class:SVF::MRGenerator
FunToNodeBSMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const FunObjVar*, NodeBS> FunToNodeBSMap;$/;"	t	class:SVF::MRGenerator
FunToPAGEdgeSetMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const FunObjVar*,SVFStmtSet> FunToPAGEdgeSetMap;$/;"	t	class:SVF::SVFIR
FunToPointsToMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const FunObjVar*, NodeBS> FunToPointsToMap;$/;"	t	class:SVF::MRGenerator
FunToPointsTosMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const FunObjVar*, PointsToList> FunToPointsTosMap;$/;"	t	class:SVF::MRGenerator
FunToPtsMap	svf/include/MSSA/MemPartition.h	/^    typedef Map<const FunObjVar*, PtsToSubPtsMap> FunToPtsMap;$/;"	t	class:SVF::IntraDisjointMRG
FunToRealDefFunMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, const Function *> FunToRealDefFunMap;$/;"	t	class:SVF::LLVMModuleSet
FunToRetMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const FunObjVar*,const SVFVar*> FunToRetMap;$/;"	t	class:SVF::SVFIR
FunToReturnMuSetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const FunObjVar*, MUSet> FunToReturnMuSetMap;$/;"	t	class:SVF::MemSSA
FunToVFGNodesMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const FunObjVar*, VFGNodeSet > FunToVFGNodesMapTy;$/;"	t	class:SVF::VFG
FunValNode	svf/include/SVFIR/SVFValue.h	/^        FunValNode,              \/\/ ├── Represents a function value variable$/;"	e	enum:SVF::SVFValue::GNodeK
FunValVar	svf/include/SVFIR/SVFVariables.h	/^class FunValVar : public ValVar$/;"	c	namespace:SVF
FunValVar	svf/lib/SVFIR/SVFVariables.cpp	/^FunValVar::FunValVar(NodeID i, const ICFGNode* icn, const FunObjVar* cgn, const SVFType* svfType)$/;"	f	class:FunValVar
FuncDecl	z3.obj/bin/python/z3/z3types.py	/^class FuncDecl(ctypes.c_void_p):$/;"	c
FuncDeclRef	z3.obj/bin/python/z3/z3.py	/^class FuncDeclRef(AstRef):$/;"	c
FuncEntry	z3.obj/bin/python/z3/z3.py	/^class FuncEntry:$/;"	c
FuncEntryObj	z3.obj/bin/python/z3/z3types.py	/^class FuncEntryObj(ctypes.c_void_p):$/;"	c
FuncInterp	z3.obj/bin/python/z3/z3.py	/^class FuncInterp(Z3PPObject):$/;"	c
FuncInterpObj	z3.obj/bin/python/z3/z3types.py	/^class FuncInterpObj(ctypes.c_void_p):$/;"	c
FuncPair	svf/include/MTA/MHP.h	/^    typedef std::pair<const FunObjVar*,const FunObjVar*> FuncPair;$/;"	t	class:SVF::MHP
FuncPairToBool	svf/include/MTA/MHP.h	/^    typedef Map<FuncPair, bool> FuncPairToBool;$/;"	t	class:SVF::MHP
FuncPointerPrint	svf/include/Util/Options.h	/^    static const Option<bool> FuncPointerPrint;$/;"	m	class:SVF::Options
FuncVector	svf-llvm/include/SVF-LLVM/DCHG.h	/^    typedef std::vector<const Function*> FuncVector;$/;"	t	class:SVF::DCHNode
FuncVector	svf/include/Graphs/CHG.h	/^    typedef std::vector<const FunObjVar*> FuncVector;$/;"	t	class:SVF::CHNode
Function	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Function Function;$/;"	t	namespace:SVF
Function	z3.obj/bin/python/z3/z3.py	/^def Function(name, *sig):$/;"	f
FunctionCallee	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::FunctionCallee FunctionCallee;$/;"	t	namespace:SVF
FunctionSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef std::vector<const Function*> FunctionSet;$/;"	t	class:SVF::LLVMModuleSet
FunctionSet	svf/include/DDA/FlowDDA.h	/^    typedef BVDataPTAImpl::FunctionSet	FunctionSet;$/;"	t	class:SVF::FlowDDA
FunctionSet	svf/include/Graphs/CallGraph.h	/^    typedef Set<const FunObjVar*> FunctionSet;$/;"	t	class:SVF::CallGraph
FunctionSet	svf/include/MSSA/SVFGBuilder.h	/^    typedef PointerAnalysis::FunctionSet FunctionSet;$/;"	t	class:SVF::SVFGBuilder
FunctionSet	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef Set<const FunObjVar*> FunctionSet;$/;"	t	class:SVF::PointerAnalysis
FunctionSetType	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef std::vector<const Function*> FunctionSetType;$/;"	t	class:SVF::LLVMModuleSet
FunctionToFormalINsMapTy	svf/include/Graphs/SVFG.h	/^    typedef Map<const FunObjVar*, FormalINSVFGNodeSet>  FunctionToFormalINsMapTy;$/;"	t	class:SVF::SVFG
FunctionToFormalOUTsMapTy	svf/include/Graphs/SVFG.h	/^    typedef Map<const FunObjVar*, FormalOUTSVFGNodeSet>  FunctionToFormalOUTsMapTy;$/;"	t	class:SVF::SVFG
FunctionType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::FunctionType FunctionType;$/;"	t	namespace:SVF
FunptrDDAClient	svf/include/DDA/DDAClient.h	/^    FunptrDDAClient() : DDAClient() {}$/;"	f	class:SVF::FunptrDDAClient
FunptrDDAClient	svf/include/DDA/DDAClient.h	/^class FunptrDDAClient : public DDAClient$/;"	c	namespace:SVF
G	svf/include/Graphs/GraphWriter.h	/^    const GraphType &G;$/;"	m	class:SVF::GraphWriter
GCProjectionInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GCProjectionInst GCProjectionInst;$/;"	t	namespace:SVF
GCRelocateInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GCRelocateInst GCRelocateInst;$/;"	t	namespace:SVF
GCResultInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GCResultInst GCResultInst;$/;"	t	namespace:SVF
GCStatepointInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GCStatepointInst GCStatepointInst;$/;"	t	namespace:SVF
GEDGE	svf/include/SABER/SrcSnkSolver.h	/^    typedef typename GTraits::EdgeType          GEDGE;$/;"	t	class:SVF::SrcSnkSolver
GEDGE	svf/include/Util/GraphReachSolver.h	/^    typedef typename GTraits::EdgeType          GEDGE;$/;"	t	class:SVF::GraphReachSolver
GEDGE	svf/include/WPA/WPASolver.h	/^    typedef typename GTraits::EdgeType          GEDGE;$/;"	t	class:SVF::WPASolver
GENERICGRAPH_H_	svf/include/Graphs/GenericGraph.h	31;"	d
GEPOperator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GEPOperator GEPOperator;$/;"	t	namespace:SVF
GEdgeFlag	svf/include/Graphs/GenericGraph.h	/^    typedef u64_t GEdgeFlag;$/;"	t	class:SVF::GenericEdge
GEdgeKind	svf/include/Graphs/GenericGraph.h	/^    typedef s64_t GEdgeKind;$/;"	t	class:SVF::GenericEdge
GEdgeKind	svf/include/SVFIR/SVFVariables.h	/^    typedef s64_t GEdgeKind;$/;"	t	class:SVF::SVFVar
GEdgeSetTy	svf/include/Graphs/GenericGraph.h	/^    typedef OrderedSet<EdgeType*, typename EdgeType::equalGEdge> GEdgeSetTy;$/;"	t	class:SVF::GenericNode
GLOBAL_LEAK	svf/include/SABER/LeakChecker.h	/^        GLOBAL_LEAK$/;"	e	enum:SVF::LeakChecker::LEAK_TYPE
GLOBVAR_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        GLOBVAR_OBJ = 0x2,  \/\/ object is a global variable$/;"	e	enum:SVF::ObjTypeInfo::__anon18
GNODE	svf/include/Graphs/SCC.h	/^    typedef typename GTraits::NodeRef          GNODE;$/;"	t	class:SVF::SCCDetection
GNODE	svf/include/SABER/SrcSnkSolver.h	/^    typedef typename GTraits::NodeType          GNODE;$/;"	t	class:SVF::SrcSnkSolver
GNODE	svf/include/Util/GraphReachSolver.h	/^    typedef typename GTraits::NodeType          GNODE;$/;"	t	class:SVF::GraphReachSolver
GNODE	svf/include/WPA/WPAFSSolver.h	/^    typedef typename WPASolver<GraphType>::GNODE GNODE;$/;"	t	class:SVF::WPAMinimumSolver
GNODE	svf/include/WPA/WPAFSSolver.h	/^    typedef typename WPASolver<GraphType>::GNODE GNODE;$/;"	t	class:SVF::WPASCCSolver
GNODE	svf/include/WPA/WPASolver.h	/^    typedef typename GTraits::NodeRef           GNODE;$/;"	t	class:SVF::WPASolver
GNODESCCInfoMap	svf/include/Graphs/SCC.h	/^    typedef Map<NodeID,GNodeSCCInfo > GNODESCCInfoMap;$/;"	t	class:SVF::SCCDetection
GNodeK	svf/include/SVFIR/SVFType.h	/^    typedef s64_t GNodeK;$/;"	t	class:SVF::SVFType
GNodeK	svf/include/SVFIR/SVFValue.h	/^    enum GNodeK$/;"	g	class:SVF::SVFValue
GNodeSCCInfo	svf/include/Graphs/SCC.h	/^        GNodeSCCInfo() : _visited(false), _inSCC(false), _rep(UINT_MAX) {}$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
GNodeSCCInfo	svf/include/Graphs/SCC.h	/^    class GNodeSCCInfo$/;"	c	class:SVF::SCCDetection
GNodeSCCInfo	svf/include/Graphs/SCC.h	/^    const inline GNODESCCInfoMap &GNodeSCCInfo() const$/;"	f	class:SVF::SCCDetection
GNodeStack	svf/include/Graphs/SCC.h	/^    typedef std::stack<NodeID> GNodeStack;$/;"	t	class:SVF::SCCDetection
GRAPHSOLVER_H_	svf/include/WPA/WPASolver.h	32;"	d
GRAPHS_DOTGRAPHTRAITS_H	svf/include/Graphs/DOTGraphTraits.h	17;"	d
GRAPHS_GRAPHTRAITS_H	svf/include/Graphs/GraphTraits.h	18;"	d
GRAPHS_GRAPHWRITER_H	svf/include/Graphs/GraphWriter.h	23;"	d
GTraits	svf/include/Graphs/SCC.h	/^    typedef SVF::GenericGraphTraits<GraphType> GTraits;$/;"	t	class:SVF::SCCDetection
GTraits	svf/include/SABER/SrcSnkSolver.h	/^    typedef SVF::GenericGraphTraits<GraphType> GTraits;$/;"	t	class:SVF::SrcSnkSolver
GTraits	svf/include/Util/GraphReachSolver.h	/^    typedef SVF::GenericGraphTraits<GraphType> GTraits;$/;"	t	class:SVF::GraphReachSolver
GTraits	svf/include/WPA/WPAFSSolver.h	/^    typedef typename WPASolver<GraphType>::GTraits GTraits;$/;"	t	class:SVF::WPAMinimumSolver
GTraits	svf/include/WPA/WPAFSSolver.h	/^    typedef typename WPASolver<GraphType>::GTraits GTraits;$/;"	t	class:SVF::WPASCCSolver
GTraits	svf/include/WPA/WPASolver.h	/^    typedef SVF::GenericGraphTraits<GraphType> GTraits;$/;"	t	class:SVF::WPASolver
GenericBasicBlockEdgeTy	svf/include/Graphs/BasicBlockG.h	/^typedef GenericEdge<SVFBasicBlock> GenericBasicBlockEdgeTy;$/;"	t	namespace:SVF
GenericBasicBlockGraphTy	svf/include/Graphs/BasicBlockG.h	/^typedef GenericGraph<SVFBasicBlock, BasicBlockEdge> GenericBasicBlockGraphTy;$/;"	t	namespace:SVF
GenericBasicBlockNodeTy	svf/include/Graphs/BasicBlockG.h	/^typedef GenericNode<SVFBasicBlock, BasicBlockEdge> GenericBasicBlockNodeTy;$/;"	t	namespace:SVF
GenericBug	svf/include/Util/SVFBugReport.h	/^    GenericBug(BugType bugType, const EventStack &bugEventStack):$/;"	f	class:SVF::GenericBug
GenericBug	svf/include/Util/SVFBugReport.h	/^class GenericBug$/;"	c	namespace:SVF
GenericCDGEdgeTy	svf/include/Graphs/CDG.h	/^typedef GenericEdge<CDGNode> GenericCDGEdgeTy;$/;"	t	namespace:SVF
GenericCDGNodeTy	svf/include/Graphs/CDG.h	/^typedef GenericNode<CDGNode, CDGEdge> GenericCDGNodeTy;$/;"	t	namespace:SVF
GenericCDGTy	svf/include/Graphs/CDG.h	/^typedef GenericGraph<CDGNode, CDGEdge> GenericCDGTy;$/;"	t	namespace:SVF
GenericCFLEdgeTy	svf/include/Graphs/CFLGraph.h	/^typedef GenericEdge<CFLNode> GenericCFLEdgeTy;$/;"	t	namespace:SVF
GenericCFLGraphTy	svf/include/Graphs/CFLGraph.h	/^typedef GenericGraph<CFLNode,CFLEdge> GenericCFLGraphTy;$/;"	t	namespace:SVF
GenericCFLNodeTy	svf/include/Graphs/CFLGraph.h	/^typedef GenericNode<CFLNode,CFLEdge> GenericCFLNodeTy;$/;"	t	namespace:SVF
GenericCHEdgeTy	svf/include/Graphs/CHG.h	/^typedef GenericEdge<CHNode> GenericCHEdgeTy;$/;"	t	namespace:SVF
GenericCHGraphTy	svf/include/Graphs/CHG.h	/^typedef GenericGraph<CHNode, CHEdge> GenericCHGraphTy;$/;"	t	namespace:SVF
GenericCHNodeTy	svf/include/Graphs/CHG.h	/^typedef GenericNode<CHNode, CHEdge> GenericCHNodeTy;$/;"	t	namespace:SVF
GenericConsEdgeTy	svf/include/Graphs/ConsGEdge.h	/^typedef GenericEdge<ConstraintNode> GenericConsEdgeTy;$/;"	t	namespace:SVF
GenericConsNodeTy	svf/include/Graphs/ConsGNode.h	/^typedef GenericNode<ConstraintNode,ConstraintEdge> GenericConsNodeTy;$/;"	t	namespace:SVF
GenericEdge	svf/include/Graphs/GenericGraph.h	/^    GenericEdge(NodeTy* s, NodeTy* d, GEdgeFlag k) : src(s), dst(d), edgeFlag(k)$/;"	f	class:SVF::GenericEdge
GenericEdge	svf/include/Graphs/GenericGraph.h	/^class GenericEdge$/;"	c	namespace:SVF
GenericGraph	svf/include/Graphs/GenericGraph.h	/^    GenericGraph() : edgeNum(0), nodeNum(0) {}$/;"	f	class:SVF::GenericGraph
GenericGraph	svf/include/Graphs/GenericGraph.h	/^class GenericGraph$/;"	c	namespace:SVF
GenericGraphTraits	svf-llvm/include/SVF-LLVM/DCHG.h	/^struct GenericGraphTraits<Inverse<SVF::DCHNode*> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::DCHNode,SVF::DCHEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf-llvm/include/SVF-LLVM/DCHG.h	/^template<> struct GenericGraphTraits<SVF::DCHGraph*> : public GenericGraphTraits<SVF::GenericGraph<SVF::DCHNode,SVF::DCHEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf-llvm/include/SVF-LLVM/DCHG.h	/^template<> struct GenericGraphTraits<SVF::DCHNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::DCHNode,SVF::DCHEdge>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CDG.h	/^struct GenericGraphTraits<Inverse<SVF::CDGNode *> > : public GenericGraphTraits<$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CDG.h	/^struct GenericGraphTraits<SVF::CDG *>$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CDG.h	/^struct GenericGraphTraits<SVF::CDGNode *>$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CFLGraph.h	/^struct GenericGraphTraits<Inverse<SVF::CFLNode *> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::CFLNode,SVF::CFLEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CFLGraph.h	/^template<> struct GenericGraphTraits<SVF::CFLGraph*> : public GenericGraphTraits<SVF::GenericGraph<SVF::CFLNode,SVF::CFLEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CFLGraph.h	/^template<> struct GenericGraphTraits<SVF::CFLNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::CFLNode,SVF::CFLEdge>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CHG.h	/^struct GenericGraphTraits<Inverse<SVF::CHNode*>>$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CHG.h	/^struct GenericGraphTraits<SVF::CHGraph*>$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CHG.h	/^struct GenericGraphTraits<SVF::CHNode*>$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CallGraph.h	/^struct GenericGraphTraits<Inverse<SVF::CallGraphNode*> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::CallGraphNode,SVF::CallGraphEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CallGraph.h	/^template<> struct GenericGraphTraits<SVF::CallGraph*> : public GenericGraphTraits<SVF::GenericGraph<SVF::CallGraphNode,SVF::CallGraphEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/CallGraph.h	/^template<> struct GenericGraphTraits<SVF::CallGraphNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::CallGraphNode,SVF::CallGraphEdge>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/ConsG.h	/^struct GenericGraphTraits<Inverse<SVF::ConstraintNode *> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::ConstraintNode,SVF::ConstraintEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/ConsG.h	/^template<> struct GenericGraphTraits<SVF::ConstraintGraph*> : public GenericGraphTraits<SVF::GenericGraph<SVF::ConstraintNode,SVF::ConstraintEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/ConsG.h	/^template<> struct GenericGraphTraits<SVF::ConstraintNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::ConstraintNode,SVF::ConstraintEdge>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/GenericGraph.h	/^struct GenericGraphTraits<Inverse<SVF::GenericNode<NodeTy,EdgeTy>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/GenericGraph.h	/^template<class NodeTy,class EdgeTy> struct GenericGraphTraits<SVF::GenericGraph<NodeTy,EdgeTy>* > : public GenericGraphTraits<SVF::GenericNode<NodeTy,EdgeTy>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/GenericGraph.h	/^template<class NodeTy,class EdgeTy> struct GenericGraphTraits<SVF::GenericNode<NodeTy,EdgeTy>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/GraphTraits.h	/^struct GenericGraphTraits$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/GraphTraits.h	/^template <class T> struct GenericGraphTraits<Inverse<Inverse<T>>> : GenericGraphTraits<T> {};$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/ICFG.h	/^struct GenericGraphTraits<Inverse<SVF::ICFGNode *> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::ICFGNode,SVF::ICFGEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/ICFG.h	/^template<> struct GenericGraphTraits<SVF::ICFG*> : public GenericGraphTraits<SVF::GenericGraph<SVF::ICFGNode,SVF::ICFGEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/ICFG.h	/^template<> struct GenericGraphTraits<SVF::ICFGNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::ICFGNode,SVF::ICFGEdge>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/IRGraph.h	/^template<> struct GenericGraphTraits<Inverse<SVF::SVFVar *> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::SVFVar,SVF::SVFStmt>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/IRGraph.h	/^template<> struct GenericGraphTraits<SVF::IRGraph*> : public GenericGraphTraits<SVF::GenericGraph<SVF::SVFVar,SVF::SVFStmt>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/IRGraph.h	/^template<> struct GenericGraphTraits<SVF::SVFVar*> : public GenericGraphTraits<SVF::GenericNode<SVF::SVFVar,SVF::SVFStmt>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/SVFG.h	/^template<> struct GenericGraphTraits<SVF::SVFG*> : public GenericGraphTraits<SVF::GenericGraph<SVF::SVFGNode,SVF::SVFGEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/VFG.h	/^struct GenericGraphTraits<Inverse<SVF::VFGNode *> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::VFGNode,SVF::VFGEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/VFG.h	/^template<> struct GenericGraphTraits<SVF::VFG*> : public GenericGraphTraits<SVF::GenericGraph<SVF::VFGNode,SVF::VFGEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/Graphs/VFG.h	/^template<> struct GenericGraphTraits<SVF::VFGNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::VFGNode,SVF::VFGEdge>*  >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/MTA/TCT.h	/^struct GenericGraphTraits<Inverse<SVF::TCTNode *> > : public GenericGraphTraits<Inverse<SVF::GenericNode<SVF::TCTNode,SVF::TCTEdge>* > >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/MTA/TCT.h	/^template<> struct GenericGraphTraits<SVF::TCT*> : public GenericGraphTraits<SVF::GenericGraph<SVF::TCTNode,SVF::TCTEdge>* >$/;"	s	namespace:SVF
GenericGraphTraits	svf/include/MTA/TCT.h	/^template<> struct GenericGraphTraits<SVF::TCTNode*> : public GenericGraphTraits<SVF::GenericNode<SVF::TCTNode,SVF::TCTEdge>*  >$/;"	s	namespace:SVF
GenericGraphTy	svf/include/Graphs/GenericGraph.h	/^    typedef SVF::GenericGraph<NodeTy,EdgeTy> GenericGraphTy;$/;"	t	struct:SVF::GenericGraphTraits
GenericICFGEdgeTy	svf/include/Graphs/ICFGEdge.h	/^typedef GenericEdge<ICFGNode> GenericICFGEdgeTy;$/;"	t	namespace:SVF
GenericICFGNodeTy	svf/include/Graphs/ICFGNode.h	/^typedef GenericNode<ICFGNode, ICFGEdge> GenericICFGNodeTy;$/;"	t	namespace:SVF
GenericICFGTy	svf/include/Graphs/ICFG.h	/^typedef GenericGraph<ICFGNode,ICFGEdge> GenericICFGTy;$/;"	t	namespace:SVF
GenericNode	svf/include/Graphs/GenericGraph.h	/^    GenericNode(NodeID i, GNodeK k, const SVFType* svfType = nullptr): SVFValue(i, k, svfType)$/;"	f	class:SVF::GenericNode
GenericNode	svf/include/Graphs/GenericGraph.h	/^class GenericNode: public SVFValue$/;"	c	namespace:SVF
GenericPAGEdgeTy	svf/include/SVFIR/SVFStatements.h	/^typedef GenericEdge<SVFVar> GenericPAGEdgeTy;$/;"	t	namespace:SVF
GenericPAGNodeTy	svf/include/SVFIR/SVFVariables.h	/^typedef GenericNode<SVFVar, SVFStmt> GenericPAGNodeTy;$/;"	t	namespace:SVF
GenericPTACallGraphEdgeTy	svf/include/Graphs/CallGraph.h	/^typedef GenericEdge<CallGraphNode> GenericPTACallGraphEdgeTy;$/;"	t	namespace:SVF
GenericPTACallGraphNodeTy	svf/include/Graphs/CallGraph.h	/^typedef GenericNode<CallGraphNode, CallGraphEdge> GenericPTACallGraphNodeTy;$/;"	t	namespace:SVF
GenericPTACallGraphTy	svf/include/Graphs/CallGraph.h	/^typedef GenericGraph<CallGraphNode, CallGraphEdge> GenericPTACallGraphTy;$/;"	t	namespace:SVF
GenericTCTEdgeTy	svf/include/MTA/TCT.h	/^typedef GenericEdge<TCTNode> GenericTCTEdgeTy;$/;"	t	namespace:SVF
GenericTCTNodeTy	svf/include/MTA/TCT.h	/^typedef GenericNode<TCTNode, TCTEdge> GenericTCTNodeTy;$/;"	t	namespace:SVF
GenericThreadCreateTreeTy	svf/include/MTA/TCT.h	/^typedef GenericGraph<TCTNode, TCTEdge> GenericThreadCreateTreeTy;$/;"	t	namespace:SVF
GenericVFGEdgeTy	svf/include/Graphs/VFGEdge.h	/^typedef GenericEdge<VFGNode> GenericVFGEdgeTy;$/;"	t	namespace:SVF
GenericVFGNodeTy	svf/include/Graphs/VFGNode.h	/^typedef GenericNode<VFGNode,VFGEdge> GenericVFGNodeTy;$/;"	t	namespace:SVF
GenericVFGTy	svf/include/Graphs/VFG.h	/^typedef GenericGraph<VFGNode,VFGEdge> GenericVFGTy;$/;"	t	namespace:SVF
Gep	svf/include/SVFIR/SVFStatements.h	/^        Gep,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Gep	svf/include/SVFIR/SVFValue.h	/^        Gep,              \/\/ │   ├── Represents a GEP operation$/;"	e	enum:SVF::SVFValue::GNodeK
GepCGEdge	svf/include/Graphs/ConsGEdge.h	/^    GepCGEdge(ConstraintNode* s, ConstraintNode* d, ConstraintEdgeK k, EdgeID id)$/;"	f	class:SVF::GepCGEdge
GepCGEdge	svf/include/Graphs/ConsGEdge.h	/^class GepCGEdge: public ConstraintEdge$/;"	c	namespace:SVF
GepObjNode	svf/include/SVFIR/SVFValue.h	/^        GepObjNode,              \/\/ │   ├── Represents a GEP object variable$/;"	e	enum:SVF::SVFValue::GNodeK
GepObjVar	svf/include/SVFIR/SVFVariables.h	/^    GepObjVar(NodeID i, PNODEK ty = GepObjNode) : ObjVar(i, ty), base{} {}$/;"	f	class:SVF::GepObjVar
GepObjVar	svf/include/SVFIR/SVFVariables.h	/^    GepObjVar(const BaseObjVar* baseObj, NodeID i,$/;"	f	class:SVF::GepObjVar
GepObjVar	svf/include/SVFIR/SVFVariables.h	/^class GepObjVar: public ObjVar$/;"	c	namespace:SVF
GepObjVarMap	svf/include/SVFIR/SVFIR.h	/^    NodeOffsetMap GepObjVarMap;	\/\/\/< Map a pair<base,off> to a gep obj node id$/;"	m	class:SVF::SVFIR
GepSVFGNode	svf/include/Graphs/SVFG.h	/^typedef GepVFGNode GepSVFGNode;$/;"	t	namespace:SVF
GepStmt	svf/include/SVFIR/SVFStatements.h	/^    GepStmt() : AssignStmt(SVFStmt::Gep) {}$/;"	f	class:SVF::GepStmt
GepStmt	svf/include/SVFIR/SVFStatements.h	/^    GepStmt(SVFVar* s, SVFVar* d, const AccessPath& ap, bool varfld = false)$/;"	f	class:SVF::GepStmt
GepStmt	svf/include/SVFIR/SVFStatements.h	/^class GepStmt: public AssignStmt$/;"	c	namespace:SVF
GepUnknownIdx	svf/include/Util/Options.h	/^    static const Option<bool> GepUnknownIdx;$/;"	m	class:SVF::Options
GepVFGNode	svf/include/Graphs/VFGNode.h	/^    GepVFGNode(NodeID id,const GepStmt* edge): StmtVFGNode(id,edge,Gep)$/;"	f	class:SVF::GepVFGNode
GepVFGNode	svf/include/Graphs/VFGNode.h	/^class GepVFGNode: public StmtVFGNode$/;"	c	namespace:SVF
GepValNode	svf/include/SVFIR/SVFValue.h	/^        GepValNode,              \/\/ ├── Represents a GEP value variable$/;"	e	enum:SVF::SVFValue::GNodeK
GepValObjMap	svf/include/SVFIR/SVFIR.h	/^    GepValueVarMap GepValObjMap;	\/\/\/< Map a pair<base,off> to a gep value node id$/;"	m	class:SVF::SVFIR
GepValVar	svf/include/SVFIR/SVFVariables.h	/^    GepValVar(NodeID i) : ValVar(i, GepValNode), gepValType{} {}$/;"	f	class:SVF::GepValVar
GepValVar	svf/include/SVFIR/SVFVariables.h	/^class GepValVar: public ValVar$/;"	c	namespace:SVF
GepValVar	svf/lib/SVFIR/SVFVariables.cpp	/^GepValVar::GepValVar(const ValVar* baseNode, NodeID i,$/;"	f	class:GepValVar
GepValueVarMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeID, NodeAccessPathMap> GepValueVarMap;$/;"	t	class:SVF::SVFIR
GetElementPtrInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GetElementPtrInst GetElementPtrInst;$/;"	t	namespace:SVF
GetStdoutFromCommand	svf/lib/Util/ExtAPI.cpp	/^static std::string GetStdoutFromCommand(const std::string& command)$/;"	f	file:
GlobalAlias	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GlobalAlias GlobalAlias;$/;"	t	namespace:SVF
GlobalBlock	svf/include/SVFIR/SVFValue.h	/^        GlobalBlock,      \/\/ ├── Represents a global-level block$/;"	e	enum:SVF::SVFValue::GNodeK
GlobalDefToRepMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    GlobalDefToRepMapTy GlobalDefToRepMap;$/;"	m	class:SVF::LLVMModuleSet
GlobalDefToRepMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const GlobalVariable*, GlobalVariable*> GlobalDefToRepMapTy;$/;"	t	class:SVF::LLVMModuleSet
GlobalICFGNode	svf/include/Graphs/ICFGNode.h	/^    GlobalICFGNode(NodeID id) : ICFGNode(id, GlobalBlock)$/;"	f	class:SVF::GlobalICFGNode
GlobalICFGNode	svf/include/Graphs/ICFGNode.h	/^class GlobalICFGNode : public ICFGNode$/;"	c	namespace:SVF
GlobalIFunc	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GlobalIFunc GlobalIFunc;$/;"	t	namespace:SVF
GlobalObjNode	svf/include/SVFIR/SVFValue.h	/^        GlobalObjNode,           \/\/ │   ├── Represents a global object$/;"	e	enum:SVF::SVFValue::GNodeK
GlobalObjVar	svf/include/SVFIR/SVFVariables.h	/^    GlobalObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node,$/;"	f	class:SVF::GlobalObjVar
GlobalObjVar	svf/include/SVFIR/SVFVariables.h	/^    GlobalObjVar(NodeID i, const ICFGNode* node) : BaseObjVar(i, node, GlobalObjNode) {}$/;"	f	class:SVF::GlobalObjVar
GlobalObjVar	svf/include/SVFIR/SVFVariables.h	/^class GlobalObjVar : public BaseObjVar$/;"	c	namespace:SVF
GlobalObject	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GlobalObject GlobalObject;$/;"	t	namespace:SVF
GlobalVFGNodeSet	svf/include/Graphs/VFG.h	/^    typedef Set<const VFGNode*> GlobalVFGNodeSet;$/;"	t	class:SVF::VFG
GlobalValNode	svf/include/SVFIR/SVFValue.h	/^        GlobalValNode,           \/\/ ├── Represents a global variable node$/;"	e	enum:SVF::SVFValue::GNodeK
GlobalValVar	svf/include/SVFIR/SVFVariables.h	/^    GlobalValVar(NodeID i, const ICFGNode* icn, const SVFType* svfType)$/;"	f	class:SVF::GlobalValVar
GlobalValVar	svf/include/SVFIR/SVFVariables.h	/^class GlobalValVar : public ValVar$/;"	c	namespace:SVF
GlobalValue	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GlobalValue GlobalValue;$/;"	t	namespace:SVF
GlobalVariable	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::GlobalVariable GlobalVariable;$/;"	t	namespace:SVF
Goal	z3.obj/bin/python/z3/z3.py	/^class Goal(Z3PPObject):$/;"	c
GoalObj	z3.obj/bin/python/z3/z3types.py	/^class GoalObj(ctypes.c_void_p):$/;"	c
GrammarBase	svf/include/CFL/CFGrammar.h	/^class GrammarBase$/;"	c	namespace:SVF
GrammarBuilder	svf/include/CFL/GrammarBuilder.h	/^    GrammarBuilder(std::string fileName): fileName(fileName), grammar(nullptr)$/;"	f	class:SVF::GrammarBuilder
GrammarBuilder	svf/include/CFL/GrammarBuilder.h	/^class GrammarBuilder$/;"	c	namespace:SVF
GrammarFilename	svf/include/Util/Options.h	/^    static const Option<std::string> GrammarFilename;$/;"	m	class:SVF::Options
Graph	svf/include/Graphs/GraphTraits.h	/^    const GraphType &Graph;$/;"	m	struct:SVF::Inverse
GraphPrinter	svf/include/Graphs/GraphPrinter.h	/^    GraphPrinter()$/;"	f	class:SVF::GraphPrinter
GraphPrinter	svf/include/Graphs/GraphPrinter.h	/^class GraphPrinter$/;"	c	namespace:SVF
GraphProgram	svf/include/Graphs/GraphWriter.h	/^namespace GraphProgram$/;"	n	namespace:SVF
GraphReachSolver	svf/include/Util/GraphReachSolver.h	/^    GraphReachSolver(): _graph(nullptr)$/;"	f	class:SVF::GraphReachSolver
GraphReachSolver	svf/include/Util/GraphReachSolver.h	/^class GraphReachSolver$/;"	c	namespace:SVF
GraphTWTOCycleDepth	svf/include/Graphs/WTO.h	/^    typedef WTOCycleDepth<GraphT> GraphTWTOCycleDepth;$/;"	t	class:SVF::WTO
GraphWriter	svf/include/Graphs/GraphWriter.h	/^    GraphWriter(std::ofstream &o, const GraphType &g, bool SN) : O(o), G(g)$/;"	f	class:SVF::GraphWriter
GraphWriter	svf/include/Graphs/GraphWriter.h	/^class GraphWriter$/;"	c	namespace:SVF
Graphtxt	svf/include/Util/Options.h	/^    static const Option<std::string> Graphtxt;$/;"	m	class:SVF::Options
HARE_PAR_FOR	svf/include/Util/ThreadAPI.h	/^        HARE_PAR_FOR$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
HAS_CLZ	svf/include/Util/SparseBitVector.h	21;"	d
HAS_CLZ	svf/include/Util/SparseBitVector.h	26;"	d
HAS_CLZ	svf/include/Util/SparseBitVector.h	28;"	d
HAS_CLZLL	svf/include/Util/SparseBitVector.h	22;"	d
HAS_CLZLL	svf/include/Util/SparseBitVector.h	27;"	d
HAS_CLZLL	svf/include/Util/SparseBitVector.h	29;"	d
HAS_CTZ	svf/include/Util/SparseBitVector.h	23;"	d
HAS_CTZLL	svf/include/Util/SparseBitVector.h	24;"	d
HBPair	svf/include/MTA/MHP.h	/^    ThreadPairSet HBPair;		\/\/\/< thread happens-before pair$/;"	m	class:SVF::ForkJoinAnalysis
HCLUST_METHOD_AVERAGE	svf/include/FastCluster/fastcluster.h	/^    HCLUST_METHOD_AVERAGE = 2,$/;"	e	enum:hclust_fast_methods
HCLUST_METHOD_COMPLETE	svf/include/FastCluster/fastcluster.h	/^    HCLUST_METHOD_COMPLETE = 1,$/;"	e	enum:hclust_fast_methods
HCLUST_METHOD_MEDIAN	svf/include/FastCluster/fastcluster.h	/^    HCLUST_METHOD_MEDIAN = 3,$/;"	e	enum:hclust_fast_methods
HCLUST_METHOD_SINGLE	svf/include/FastCluster/fastcluster.h	/^    HCLUST_METHOD_SINGLE = 0,$/;"	e	enum:hclust_fast_methods
HCLUST_METHOD_SVF_BEST	svf/include/FastCluster/fastcluster.h	/^    HCLUST_METHOD_SVF_BEST = 4$/;"	e	enum:hclust_fast_methods
HEAP_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        HEAP_OBJ = 0x10,  \/\/ object is a heap variable$/;"	e	enum:SVF::ObjTypeInfo::__anon18
HEX	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	760;"	d	file:
HEX	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	739;"	d	file:
HPPair	svf/include/MTA/MHP.h	/^    ThreadPairSet HPPair;		\/\/\/< threads happen-in-parallel$/;"	m	class:SVF::ForkJoinAnalysis
HTMLFormatter	z3.obj/bin/python/z3/z3printer.py	/^class HTMLFormatter(Formatter):$/;"	c
HandBlackHole	svf/include/Util/Options.h	/^    static Option<bool> HandBlackHole;$/;"	m	class:SVF::Options
HareParForEdge	svf/include/Graphs/CallGraph.h	/^        CallRetEdge,TDForkEdge,TDJoinEdge,HareParForEdge$/;"	e	enum:SVF::CallGraphEdge::CEDGEK
HareParForEdge	svf/include/Graphs/ThreadCallGraph.h	/^    HareParForEdge(CallGraphNode* s, CallGraphNode* d, CallSiteID csId) :$/;"	f	class:SVF::HareParForEdge
HareParForEdge	svf/include/Graphs/ThreadCallGraph.h	/^class HareParForEdge: public CallGraphEdge$/;"	c	namespace:SVF
Hash	svf/include/SVFIR/SVFType.h	/^template <> struct Hash<NodePair>$/;"	s	namespace:SVF
Hash	svf/include/Util/CoreBitVector.h	/^struct Hash<CoreBitVector>$/;"	s	namespace:SVF
Hash	svf/include/Util/GeneralType.h	/^template <class S, class T> struct Hash<std::pair<S, T>>$/;"	s	namespace:SVF
Hash	svf/include/Util/GeneralType.h	/^template <class T> struct Hash$/;"	s	namespace:SVF
HeapObjNode	svf/include/SVFIR/SVFValue.h	/^        HeapObjNode,             \/\/ │   ├── Represents a heap object$/;"	e	enum:SVF::SVFValue::GNodeK
HeapObjVar	svf/include/SVFIR/SVFVariables.h	/^    HeapObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node):$/;"	f	class:SVF::HeapObjVar
HeapObjVar	svf/include/SVFIR/SVFVariables.h	/^    HeapObjVar(NodeID i, const ICFGNode* node) : BaseObjVar(i, node, HeapObjNode) {}$/;"	f	class:SVF::HeapObjVar
HeapObjVar	svf/include/SVFIR/SVFVariables.h	/^class HeapObjVar: public BaseObjVar$/;"	c	namespace:SVF
I	svf/include/Util/iterator.h	/^        DerivedT I;$/;"	m	class:SVF::iter_facade_base::ReferenceProxy
I	svf/include/Util/iterator.h	/^    WrappedIteratorT I;$/;"	m	class:SVF::iter_adaptor_base
ICFG	svf/include/Graphs/ICFG.h	/^class ICFG : public GenericICFGTy$/;"	c	namespace:SVF
ICFG	svf/lib/Graphs/ICFG.cpp	/^ICFG::ICFG(): totalICFGNode(0), globalBlockNode(nullptr)$/;"	f	class:ICFG
ICFGBuilder	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^class ICFGBuilder$/;"	c	namespace:SVF
ICFGCycleWTO	svf/include/AE/Core/ICFGWTO.h	/^typedef WTOCycle<ICFG> ICFGCycleWTO;$/;"	t	namespace:SVF
ICFGEdge	svf/include/Graphs/ICFGEdge.h	/^    ICFGEdge(ICFGNode* s, ICFGNode* d, GEdgeFlag k) : GenericICFGEdgeTy(s, d, k)$/;"	f	class:SVF::ICFGEdge
ICFGEdge	svf/include/Graphs/ICFGEdge.h	/^class ICFGEdge : public GenericICFGEdgeTy$/;"	c	namespace:SVF
ICFGEdgeK	svf/include/Graphs/ICFGEdge.h	/^    enum ICFGEdgeK$/;"	g	class:SVF::ICFGEdge
ICFGEdgeSet	svf/include/MemoryModel/SVFLoop.h	/^    typedef Set<const ICFGEdge *> ICFGEdgeSet;$/;"	t	class:SVF::SVFLoop
ICFGEdgeSetTy	svf/include/Graphs/ICFG.h	/^    typedef ICFGEdge::ICFGEdgeSetTy ICFGEdgeSetTy;$/;"	t	class:SVF::ICFG
ICFGEdgeSetTy	svf/include/Graphs/ICFGEdge.h	/^    typedef GenericNode<ICFGNode, ICFGEdge>::GEdgeSetTy ICFGEdgeSetTy;$/;"	t	class:SVF::ICFGEdge
ICFGEdge_H_	svf/include/Graphs/ICFGEdge.h	31;"	d
ICFGMergeAdjacentNodes	svf/include/Util/Options.h	/^    static const Option<bool> ICFGMergeAdjacentNodes;$/;"	m	class:SVF::Options
ICFGNODE_H_	svf/include/Graphs/ICFGNode.h	31;"	d
ICFGNode	svf/include/Graphs/ICFGNode.h	/^    ICFGNode(NodeID i, GNodeK k) : GenericICFGNodeTy(i, k), fun(nullptr), bb(nullptr)$/;"	f	class:SVF::ICFGNode
ICFGNode	svf/include/Graphs/ICFGNode.h	/^class ICFGNode : public GenericICFGNodeTy$/;"	c	namespace:SVF
ICFGNode2SVFStmtsMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const ICFGNode*,SVFStmtList> ICFGNode2SVFStmtsMap;$/;"	t	class:SVF::SVFIR
ICFGNodeIDToNodeMapTy	svf/include/Graphs/ICFG.h	/^    typedef OrderedMap<NodeID, ICFGNode *> ICFGNodeIDToNodeMapTy;$/;"	t	class:SVF::ICFG
ICFGNodeK	svf/include/Graphs/ICFGNode.h	/^    typedef GNodeK ICFGNodeK;$/;"	t	class:SVF::ICFGNode
ICFGNodePairVector	svf/include/Graphs/CDG.h	/^    typedef std::vector<std::pair<const ICFGNode *, const ICFGNode *>> ICFGNodePairVector;$/;"	t	class:SVF::CDG
ICFGNodeSet	svf/include/Graphs/ICFGStat.h	/^    typedef Set<const ICFGNode *> ICFGNodeSet;$/;"	t	class:SVF::ICFGStat
ICFGNodeSet	svf/include/MemoryModel/SVFLoop.h	/^    typedef Set<const ICFGNode *> ICFGNodeSet;$/;"	t	class:SVF::SVFLoop
ICFGNodeToSVFLoopVec	svf/include/Graphs/ICFG.h	/^    typedef Map<const ICFGNode *, SVFLoopVec> ICFGNodeToSVFLoopVec;$/;"	t	class:SVF::ICFG
ICFGNodeVector	svf/include/Graphs/CDG.h	/^    typedef std::vector<const ICFGNode *> ICFGNodeVector;$/;"	t	class:SVF::CDG
ICFGNodesBegin	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGNodeSet::iterator ICFGNodesBegin()$/;"	f	class:SVF::SVFLoop
ICFGNodesEnd	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGNodeSet::iterator ICFGNodesEnd()$/;"	f	class:SVF::SVFLoop
ICFGSingletonWTO	svf/include/AE/Core/ICFGWTO.h	/^typedef WTONode<ICFG> ICFGSingletonWTO;$/;"	t	namespace:SVF
ICFGStat	svf/include/Graphs/ICFGStat.h	/^    ICFGStat(ICFG *cfg) : PTAStat(nullptr), icfg(cfg)$/;"	f	class:SVF::ICFGStat
ICFGStat	svf/include/Graphs/ICFGStat.h	/^class ICFGStat : public PTAStat$/;"	c	namespace:SVF
ICFGWTO	svf/include/AE/Core/ICFGWTO.h	/^    explicit ICFGWTO(ICFG* graph, const ICFGNode* node) : Base(graph, node) {}$/;"	f	class:SVF::ICFGWTO
ICFGWTO	svf/include/AE/Core/ICFGWTO.h	/^class ICFGWTO : public WTO<ICFG>$/;"	c	namespace:SVF
ICFGWTOComp	svf/include/AE/Core/ICFGWTO.h	/^typedef WTOComponent<ICFG> ICFGWTOComp;$/;"	t	namespace:SVF
ICFGWTONode	svf/include/AE/Core/ICFGWTO.h	/^    typedef WTOComponentVisitor<ICFG>::WTONodeT ICFGWTONode;$/;"	t	class:SVF::ICFGWTO
ID	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    static char ID;$/;"	m	class:SVF::BreakConstantGEPs
ID	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    static char ID;$/;"	m	class:SVF::MergeFunctionRets
ID	svf-llvm/lib/BreakConstantExpr.cpp	/^char BreakConstantGEPs::ID = 0;$/;"	m	class:BreakConstantGEPs	file:
ID	svf-llvm/lib/BreakConstantExpr.cpp	/^char MergeFunctionRets::ID = 0;$/;"	m	class:MergeFunctionRets	file:
ID	svf/include/DDA/DDAPass.h	/^    static char ID;$/;"	m	class:SVF::DDAPass
ID	svf/include/WPA/WPAPass.h	/^    static char ID;$/;"	m	class:SVF::WPAPass
ID	svf/lib/DDA/DDAPass.cpp	/^char DDAPass::ID = 0;$/;"	m	class:DDAPass	file:
ID	svf/lib/WPA/WPAPass.cpp	/^char WPAPass::ID = 0;$/;"	m	class:WPAPass	file:
IDToNodeMap	svf/include/Graphs/GenericGraph.h	/^    IDToNodeMapTy IDToNodeMap; \/\/\/< node map$/;"	m	class:SVF::GenericGraph
IDToNodeMapTy	svf/include/Graphs/GenericGraph.h	/^    typedef OrderedMap<NodeID, NodeType*> IDToNodeMapTy;$/;"	t	class:SVF::GenericGraph
IDToTypeInfoMapTy	svf/include/Graphs/IRGraph.h	/^    typedef OrderedMap<NodeID, ObjTypeInfo*> IDToTypeInfoMapTy;$/;"	t	class:SVF::IRGraph
ID_VOID_MAIN	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IN	svf/include/WPA/WPAStat.h	/^        IN,$/;"	e	enum:SVF::FlowSensitiveStat::ENUM_INOUT
INCDFPTData	svf/include/Util/Options.h	/^    static const Option<bool> INCDFPTData;$/;"	m	class:SVF::Options
INCLUDE_CFL_CFGNORMALIZER_H_	svf/include/CFL/CFGNormalizer.h	31;"	d
INCLUDE_CFL_CFLALIAS_H_	svf/include/CFL/CFLAlias.h	31;"	d
INCLUDE_CFL_CFLBASE_H_	svf/include/CFL/CFLBase.h	31;"	d
INCLUDE_CFL_CFLGRAMGRAPHCHECKER_H_	svf/include/CFL/CFLGramGraphChecker.h	30;"	d
INCLUDE_CFL_CFLGRAPHBUILDER_H_	svf/include/CFL/CFLGraphBuilder.h	31;"	d
INCLUDE_CFL_CFLSolver_H_	svf/include/CFL/CFLSolver.h	31;"	d
INCLUDE_CFL_CFLVF_H_	svf/include/CFL/CFLVF.h	31;"	d
INCLUDE_CFL_GRAMMARBUILDER_H_	svf/include/CFL/GrammarBuilder.h	31;"	d
INCLUDE_GRAPHS_GRAPHPRINTER_H_	svf/include/Graphs/GraphPrinter.h	32;"	d
INCLUDE_MEMORYMODEL_POINTERANALYSISIMPL_H_	svf/include/MemoryModel/PointerAnalysisImpl.h	31;"	d
INCLUDE_MSSA_SVFGEDGE_H_	svf/include/Graphs/SVFGEdge.h	31;"	d
INCLUDE_MSSA_SVFGNODE_H_	svf/include/Graphs/SVFGNode.h	31;"	d
INCLUDE_MTA_LockAnalysis_H_	svf/include/MTA/LockAnalysis.h	31;"	d
INCLUDE_SVFIR_H_	svf/include/SVFIR/SVFIR.h	31;"	d
INCLUDE_SVFIR_OBJTYPEINFO_H_	svf/include/SVFIR/ObjTypeInfo.h	31;"	d
INCLUDE_SVFIR_PAGBUILDERFROMFILE_H_	svf/include/SVFIR/PAGBuilderFromFile.h	31;"	d
INCLUDE_SVFIR_SVFSTATEMENT_H_	svf/include/SVFIR/SVFStatements.h	32;"	d
INCLUDE_SVFIR_SVFTYPE_H_	svf/include/SVFIR/SVFType.h	31;"	d
INCLUDE_SVFIR_SVFVALUE_H_	svf/include/SVFIR/SVFValue.h	31;"	d
INCLUDE_SVFIR_SVFVARIABLE_H_	svf/include/SVFIR/SVFVariables.h	31;"	d
INCLUDE_SVF_FE_CALLGRAPHBUILDER_H_	svf/include/Util/CallGraphBuilder.h	32;"	d
INCLUDE_SVF_FE_LLVMMODULE_H_	svf-llvm/include/SVF-LLVM/LLVMModule.h	31;"	d
INCLUDE_SVF_FE_LLVMUTIL_H_	svf-llvm/include/SVF-LLVM/LLVMUtil.h	31;"	d
INCLUDE_UTIL_CASTING_H_	svf/include/Util/Casting.h	9;"	d
INCLUDE_UTIL_CXTSTMT_H_	svf/include/Util/CxtStmt.h	31;"	d
INCLUDE_UTIL_ICFGBUILDER_H_	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	31;"	d
INCLUDE_UTIL_ICFGSTAT_H_	svf/include/Graphs/ICFGStat.h	30;"	d
INCLUDE_UTIL_ICFG_H_	svf/include/Graphs/ICFG.h	31;"	d
INCLUDE_UTIL_VFGEDGE_H_	svf/include/Graphs/VFGEdge.h	31;"	d
INCLUDE_UTIL_VFGNODE_H_	svf/include/Graphs/VFGNode.h	31;"	d
INCLUDE_UTIL_VFG_H_	svf/include/Graphs/VFG.h	31;"	d
INCLUDE_WPA_ANDERSEN_H_	svf/include/WPA/Andersen.h	36;"	d
INCLUDE_WPA_STEENSGAARD_H_	svf/include/WPA/Steensgaard.h	9;"	d
INCLUDE_WPA_TYPEANALYSIS_H_	svf/include/WPA/TypeAnalysis.h	31;"	d
INHERITANCE	svf-llvm/include/SVF-LLVM/DCHG.h	/^        INHERITANCE,  \/\/ inheritance relation$/;"	e	enum:SVF::DCHEdge::__anon11
INHERITANCE	svf/include/Graphs/CHG.h	/^        INHERITANCE = 0x1, \/\/ inheritance relation$/;"	e	enum:SVF::CHEdge::__anon21
INSTANCE	svf-llvm/include/SVF-LLVM/DCHG.h	/^        INSTANCE,     \/\/ template-instance relation$/;"	e	enum:SVF::DCHEdge::__anon11
INSTANTCE	svf/include/Graphs/CHG.h	/^        INSTANTCE = 0x2    \/\/ template-instance relation$/;"	e	enum:SVF::CHEdge::__anon21
INTTOPTR	svf/include/SVFIR/SVFStatements.h	/^        INTTOPTR,   \/\/ Integer -> Pointer$/;"	e	enum:SVF::CopyStmt::CopyKind
IRBuilder	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::IRBuilder<> IRBuilder;$/;"	t	namespace:SVF
IRGRAPH_H_	svf/include/Graphs/IRGraph.h	32;"	d
IRGraph	svf/include/Graphs/IRGraph.h	/^    IRGraph(bool buildFromFile)$/;"	f	class:SVF::IRGraph
IRGraph	svf/include/Graphs/IRGraph.h	/^class IRGraph : public GenericGraph<SVFVar, SVFStmt>$/;"	c	namespace:SVF
IdToCallSiteMap	svf/include/Graphs/CallGraph.h	/^    typedef Map<CallSiteID, CallSitePair> IdToCallSiteMap;$/;"	t	class:SVF::CallGraph
IdToIdMap	svf/include/WPA/CSC.h	/^    typedef Map<NodeID, NodeID> IdToIdMap;$/;"	t	class:SVF::CSC
IdxOperandPair	svf/include/MemoryModel/AccessPath.h	/^    typedef std::pair<const SVFVar*, const SVFType*> IdxOperandPair;$/;"	t	class:SVF::AccessPath
IdxOperandPairs	svf/include/MemoryModel/AccessPath.h	/^    typedef std::vector<IdxOperandPair> IdxOperandPairs;$/;"	t	class:SVF::AccessPath
If	z3.obj/bin/python/z3/z3.py	/^def If(a, b, c, ctx=None):$/;"	f
Iff	z3.obj/bin/python/z3/z3util.py	/^Iff = lambda f: And(Implies(f[0],f[1]),Implies(f[1],f[0]))$/;"	v
IgnoreDeadFun	svf/include/Util/Options.h	/^    static const Option<bool> IgnoreDeadFun;$/;"	m	class:SVF::Options
Implies	z3.obj/bin/python/z3/z3.py	/^def Implies(a, b, ctx=None):$/;"	f
InEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    inline const_iterator InEdgeBegin() const$/;"	f	class:SVF::GenericNode
InEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    inline iterator InEdgeBegin()$/;"	f	class:SVF::GenericNode
InEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    inline const_iterator InEdgeEnd() const$/;"	f	class:SVF::GenericNode
InEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    inline iterator InEdgeEnd()$/;"	f	class:SVF::GenericNode
InEdgeKindToSetMap	svf/include/SVFIR/SVFVariables.h	/^    SVFStmt::KindToSVFStmtMapTy InEdgeKindToSetMap;$/;"	m	class:SVF::SVFVar
InEdges	svf/include/Graphs/GenericGraph.h	/^    GEdgeSetTy InEdges; \/\/\/< all incoming edge of this node$/;"	m	class:SVF::GenericNode
InRe	z3.obj/bin/python/z3/z3.py	/^def InRe(s, re):$/;"	f
IndentFormatObject	z3.obj/bin/python/z3/z3printer.py	/^class IndentFormatObject(FormatObject):$/;"	c
IndexOf	z3.obj/bin/python/z3/z3.py	/^def IndexOf(s, substr):$/;"	f
IndexOf	z3.obj/bin/python/z3/z3.py	/^def IndexOf(s, substr, offset):$/;"	f
IndexToTermInstMap	svf/include/SABER/SaberCondAllocator.h	/^    typedef Map<u32_t, const ICFGNode*> IndexToTermInstMap; \/\/\/ id to instruction map for z3$/;"	t	class:SVF::SaberCondAllocator
IndirectCallLimit	svf/include/Util/Options.h	/^    static const Option<u32_t> IndirectCallLimit;$/;"	m	class:SVF::Options
IndirectSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^    IndirectSVFGEdge(VFGNode* s, VFGNode* d, GEdgeFlag k): VFGEdge(s,d,k)$/;"	f	class:SVF::IndirectSVFGEdge
IndirectSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^class IndirectSVFGEdge : public VFGEdge$/;"	c	namespace:SVF
InitialGlobal	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::InitialGlobal(const GlobalVariable *gvar, Constant *C,$/;"	f	class:SVFIRBuilder
InsenCycle	svf/include/Util/Options.h	/^    static const Option<bool> InsenCycle;$/;"	m	class:SVF::Options
InsenRecur	svf/include/Util/Options.h	/^    static const Option<bool> InsenRecur;$/;"	m	class:SVF::Options
InsertElementInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::InsertElementInst InsertElementInst;$/;"	t	namespace:SVF
InsertValueInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::InsertValueInst InsertValueInst;$/;"	t	namespace:SVF
Inst2LabelMap	svf/include/SVFIR/SVFStatements.h	/^    typedef Map<const ICFGNode*, u32_t> Inst2LabelMap;$/;"	t	class:SVF::SVFStmt
InstSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef Set<const CallICFGNode*> InstSet;$/;"	t	class:SVF::ThreadCallGraph
InstSet	svf/include/MTA/LockAnalysis.h	/^    typedef Set<const ICFGNode*> InstSet;$/;"	t	class:SVF::LockAnalysis
InstSet	svf/include/MTA/MTAStat.h	/^    typedef Set<const Instruction*> InstSet;$/;"	t	class:SVF::MTAStat
InstSet	svf/include/MTA/TCT.h	/^    typedef Set<const ICFGNode*> InstSet;$/;"	t	class:SVF::TCT
InstToBlockNodeMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    InstToBlockNodeMapTy InstToBlockNodeMap; \/\/\/< map a basic block to its ICFGNode$/;"	m	class:SVF::LLVMModuleSet
InstToBlockNodeMapTy	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef Map<const Instruction*, IntraICFGNode *> InstToBlockNodeMapTy;$/;"	t	class:SVF::ICFGBuilder
InstToBlockNodeMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Instruction*, IntraICFGNode *> InstToBlockNodeMapTy;$/;"	t	class:SVF::LLVMModuleSet
InstToCxtStmt	svf/include/MTA/LockAnalysis.h	/^    typedef Map<const ICFGNode*, CxtStmtSet> InstToCxtStmt;$/;"	t	class:SVF::LockAnalysis
InstToCxtStmtSet	svf/include/MTA/LockAnalysis.h	/^    typedef Map<const ICFGNode*, LockSpan> InstToCxtStmtSet;$/;"	t	class:SVF::LockAnalysis
InstToInstSetMap	svf/include/MTA/LockAnalysis.h	/^    typedef Map<const ICFGNode*, InstSet> InstToInstSetMap;$/;"	t	class:SVF::LockAnalysis
InstToLoopMap	svf/include/MTA/TCT.h	/^    typedef Map<const ICFGNode*, LoopBBs> InstToLoopMap;$/;"	t	class:SVF::TCT
InstToThreadStmtSetMap	svf/include/MTA/MHP.h	/^    typedef Map<const ICFGNode*,CxtThreadStmtSet> InstToThreadStmtSetMap;$/;"	t	class:SVF::MHP
InstVec	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef std::vector<const Instruction*> InstVec;$/;"	t	class:SVF::ICFGBuilder
InstVec	svf/include/MTA/LockAnalysis.h	/^    typedef TCT::InstVec InstVec;$/;"	t	class:SVF::LockAnalysis
InstVec	svf/include/MTA/MHP.h	/^    typedef TCT::InstVec InstVec;$/;"	t	class:SVF::ForkJoinAnalysis
InstVec	svf/include/MTA/TCT.h	/^    typedef std::vector<const ICFGNode*> InstVec;$/;"	t	class:SVF::TCT
InstrProfIncrementInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::InstrProfIncrementInst InstrProfIncrementInst;$/;"	t	namespace:SVF
InstrProfIncrementInstStep	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::InstrProfIncrementInstStep InstrProfIncrementInstStep;$/;"	t	namespace:SVF
InstrProfValueProfileInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::InstrProfValueProfileInst InstrProfValueProfileInst;$/;"	t	namespace:SVF
Instruction	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Instruction Instruction;$/;"	t	namespace:SVF
Int	z3.obj/bin/python/z3/z3.py	/^def Int(name, ctx=None):$/;"	f
Int2BV	z3.obj/bin/python/z3/z3.py	/^def Int2BV(a, num_bits):$/;"	f
IntNumRef	z3.obj/bin/python/z3/z3.py	/^class IntNumRef(ArithRef):$/;"	c
IntSort	z3.obj/bin/python/z3/z3.py	/^def IntSort(ctx=None):$/;"	f
IntToPtrInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::IntToPtrInst IntToPtrInst;$/;"	t	namespace:SVF
IntToStr	z3.obj/bin/python/z3/z3.py	/^def IntToStr(s):$/;"	f
IntVal	z3.obj/bin/python/z3/z3.py	/^def IntVal(val, ctx=None):$/;"	f
IntVector	z3.obj/bin/python/z3/z3.py	/^def IntVector(prefix, sz, ctx=None):$/;"	f
IntegerType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::IntegerType IntegerType;$/;"	t	namespace:SVF
InterDisjoint	svf/include/MSSA/MemSSA.h	/^        InterDisjoint$/;"	e	enum:SVF::MemSSA::MemPartition
InterDisjointMRG	svf/include/MSSA/MemPartition.h	/^    InterDisjointMRG(BVDataPTAImpl* p, bool ptrOnly) : IntraDisjointMRG(p, ptrOnly)$/;"	f	class:SVF::InterDisjointMRG
InterDisjointMRG	svf/include/MSSA/MemPartition.h	/^class InterDisjointMRG : public IntraDisjointMRG$/;"	c	namespace:SVF
InterICFGNode	svf/include/Graphs/ICFGNode.h	/^    InterICFGNode(NodeID id, ICFGNodeK k) : ICFGNode(id, k)$/;"	f	class:SVF::InterICFGNode
InterICFGNode	svf/include/Graphs/ICFGNode.h	/^class InterICFGNode : public ICFGNode$/;"	c	namespace:SVF
InterMSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^    InterMSSAPHISVFGNode(NodeID id, const ActualOUTSVFGNode* ao) : MSSAPHISVFGNode(id, ao->getMRVer(), MInterPhi), fun(nullptr),callInst(ao->getCallSite()) {}$/;"	f	class:SVF::InterMSSAPHISVFGNode
InterMSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^    InterMSSAPHISVFGNode(NodeID id, const FormalINSVFGNode* fi) : MSSAPHISVFGNode(id, fi->getMRVer(), MInterPhi),fun(fi->getFun()),callInst(nullptr) {}$/;"	f	class:SVF::InterMSSAPHISVFGNode
InterMSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^class InterMSSAPHISVFGNode : public MSSAPHISVFGNode$/;"	c	namespace:SVF
InterPHISVFGNode	svf/include/Graphs/SVFG.h	/^typedef InterPHIVFGNode InterPHISVFGNode;$/;"	t	namespace:SVF
InterPHIVFGNode	svf/include/Graphs/VFGNode.h	/^    InterPHIVFGNode(NodeID id, const ActualRetVFGNode* ar) : PHIVFGNode(id, ar->getRev(), TInterPhi), fun(ar->getCaller()),callInst(ar->getCallSite()) {}$/;"	f	class:SVF::InterPHIVFGNode
InterPHIVFGNode	svf/include/Graphs/VFGNode.h	/^    InterPHIVFGNode(NodeID id, const FormalParmVFGNode* fp) : PHIVFGNode(id, fp->getParam(), TInterPhi),fun(fp->getFun()),callInst(nullptr) {}$/;"	f	class:SVF::InterPHIVFGNode
InterPHIVFGNode	svf/include/Graphs/VFGNode.h	/^class InterPHIVFGNode : public PHIVFGNode$/;"	c	namespace:SVF
Intersect	z3.obj/bin/python/z3/z3.py	/^def Intersect(*args):$/;"	f
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue() : _lb(minus_infinity()), _ub(plus_infinity()) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(BoundedInt lb, BoundedInt ub) : _lb(std::move(lb)), _ub(std::move(ub))$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(BoundedInt n) : IntervalValue(n, n) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(double lb, double ub) : IntervalValue(BoundedInt(lb), BoundedInt(ub)) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(double n) : _lb(n), _ub(n) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(float lb, float ub) : IntervalValue(BoundedInt(lb), BoundedInt(ub)) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(s32_t lb, s32_t ub) : IntervalValue((s64_t) lb, (s64_t) ub) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(s32_t n) : IntervalValue((s64_t) n) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(s64_t lb, s64_t ub) : IntervalValue(BoundedInt(lb), BoundedInt(ub)) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(s64_t n) : _lb(n), _ub(n) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(u32_t lb, u32_t ub) : IntervalValue((s64_t) lb, (s64_t) ub) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(u32_t n) : IntervalValue((s64_t) n) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^    explicit IntervalValue(u64_t lb, u64_t ub) : IntervalValue((s64_t) lb, (s64_t) ub) {}$/;"	f	class:SVF::IntervalValue
IntervalValue	svf/include/AE/Core/IntervalValue.h	/^class IntervalValue$/;"	c	namespace:SVF
IntraBlock	svf/include/SVFIR/SVFValue.h	/^        IntraBlock,       \/\/ ├── Represents a node within a single procedure$/;"	e	enum:SVF::SVFValue::GNodeK
IntraCF	svf/include/Graphs/ICFGEdge.h	/^        IntraCF,$/;"	e	enum:SVF::ICFGEdge::ICFGEdgeK
IntraCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    IntraCFGEdge(ICFGNode* s, ICFGNode* d)$/;"	f	class:SVF::IntraCFGEdge
IntraCFGEdge	svf/include/Graphs/ICFGEdge.h	/^class IntraCFGEdge : public ICFGEdge$/;"	c	namespace:SVF
IntraDirSVFGEdge	svf/include/Graphs/VFGEdge.h	/^    IntraDirSVFGEdge(VFGNode* s, VFGNode* d): DirectSVFGEdge(s,d,IntraDirectVF)$/;"	f	class:SVF::IntraDirSVFGEdge
IntraDirSVFGEdge	svf/include/Graphs/VFGEdge.h	/^class IntraDirSVFGEdge : public DirectSVFGEdge$/;"	c	namespace:SVF
IntraDirectVF	svf/include/Graphs/VFGEdge.h	/^        IntraDirectVF,$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
IntraDisjoint	svf/include/MSSA/MemSSA.h	/^        IntraDisjoint,$/;"	e	enum:SVF::MemSSA::MemPartition
IntraDisjointMRG	svf/include/MSSA/MemPartition.h	/^    IntraDisjointMRG(BVDataPTAImpl* p, bool ptrOnly) : MRGenerator(p, ptrOnly)$/;"	f	class:SVF::IntraDisjointMRG
IntraDisjointMRG	svf/include/MSSA/MemPartition.h	/^class IntraDisjointMRG : public MRGenerator$/;"	c	namespace:SVF
IntraICFGNode	svf/include/Graphs/ICFGNode.h	/^    IntraICFGNode(NodeID id) : ICFGNode(id, IntraBlock), isRet(false) {}$/;"	f	class:SVF::IntraICFGNode
IntraICFGNode	svf/include/Graphs/ICFGNode.h	/^    IntraICFGNode(NodeID id, const SVFBasicBlock* b, bool isReturn) : ICFGNode(id, IntraBlock), isRet(isReturn)$/;"	f	class:SVF::IntraICFGNode
IntraICFGNode	svf/include/Graphs/ICFGNode.h	/^class IntraICFGNode : public ICFGNode$/;"	c	namespace:SVF
IntraIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^    IntraIndSVFGEdge(VFGNode* s, VFGNode* d): IndirectSVFGEdge(s,d,IntraIndirectVF)$/;"	f	class:SVF::IntraIndSVFGEdge
IntraIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^class IntraIndSVFGEdge : public IndirectSVFGEdge$/;"	c	namespace:SVF
IntraIndirectVF	svf/include/Graphs/VFGEdge.h	/^        IntraIndirectVF,$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
IntraLock	svf/include/Util/Options.h	/^    static const Option<bool> IntraLock;$/;"	m	class:SVF::Options
IntraMSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^    IntraMSSAPHISVFGNode(NodeID id, const MRVer* resVer): MSSAPHISVFGNode(id, resVer, MIntraPhi)$/;"	f	class:SVF::IntraMSSAPHISVFGNode
IntraMSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^class IntraMSSAPHISVFGNode : public MSSAPHISVFGNode$/;"	c	namespace:SVF
IntraPHISVFGNode	svf/include/Graphs/SVFG.h	/^typedef IntraPHIVFGNode IntraPHISVFGNode;$/;"	t	namespace:SVF
IntraPHIVFGNode	svf/include/Graphs/VFGNode.h	/^    IntraPHIVFGNode(NodeID id, const PAGNode* r): PHIVFGNode(id, r, TIntraPhi)$/;"	f	class:SVF::IntraPHIVFGNode
IntraPHIVFGNode	svf/include/Graphs/VFGNode.h	/^class IntraPHIVFGNode : public PHIVFGNode$/;"	c	namespace:SVF
IntrinsicInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::IntrinsicInst IntrinsicInst;$/;"	t	namespace:SVF
Ints	z3.obj/bin/python/z3/z3.py	/^def Ints(names, ctx=None):$/;"	f
InvGTraits	svf/include/SABER/SrcSnkSolver.h	/^    typedef SVF::GenericGraphTraits<SVF::Inverse<GNODE *> > InvGTraits;$/;"	t	class:SVF::SrcSnkSolver
InvGTraits	svf/include/Util/GraphReachSolver.h	/^    typedef SVF::GenericGraphTraits<SVF::Inverse<GNODE *> > InvGTraits;$/;"	t	class:SVF::GraphReachSolver
Inverse	svf/include/Graphs/GraphTraits.h	/^    inline Inverse(const GraphType &G) : Graph(G) {}$/;"	f	struct:SVF::Inverse
Inverse	svf/include/Graphs/GraphTraits.h	/^struct Inverse$/;"	s	namespace:SVF
InvokeInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::InvokeInst InvokeInst;$/;"	t	namespace:SVF
IsBidirectional	svf/include/Util/iterator.h	/^        IsBidirectional = std::is_base_of<std::bidirectional_iterator_tag,$/;"	e	enum:SVF::iter_facade_base::__anon24
IsInt	z3.obj/bin/python/z3/z3.py	/^def IsInt(a):$/;"	f
IsMember	z3.obj/bin/python/z3/z3.py	/^def IsMember(e, s):$/;"	f
IsRandomAccess	svf/include/Util/iterator.h	/^        IsRandomAccess = std::is_base_of<std::random_access_iterator_tag,$/;"	e	enum:SVF::iter_facade_base::__anon24
IsSimple	svf/include/Graphs/DOTGraphTraits.h	/^    bool IsSimple;$/;"	m	struct:SVF::DefaultDOTGraphTraits
IsSubset	z3.obj/bin/python/z3/z3.py	/^def IsSubset(a, b):$/;"	f
Iter	svf/include/Util/SparseBitVector.h	/^        ElementListConstIter Iter;$/;"	m	class:SVF::SparseBitVector::SparseBitVectorIterator
Iterator	svf/include/Graphs/WTO.h	/^    typedef typename NodeRefList::const_iterator Iterator;$/;"	t	class:SVF::WTOCycleDepth
Iterator	svf/include/Graphs/WTO.h	/^    typedef typename WTOComponentRefList::const_iterator Iterator;$/;"	t	class:SVF::WTO
Iterator	svf/include/Graphs/WTO.h	/^    typedef typename WTOComponentRefList::const_iterator Iterator;$/;"	t	class:SVF::final
JoinEdgeSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef GenericNode<CallGraphNode, ThreadJoinEdge>::GEdgeSetTy JoinEdgeSet;$/;"	t	class:SVF::ThreadJoinEdge
JoinEdgeSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef ThreadJoinEdge::JoinEdgeSet JoinEdgeSet;$/;"	t	class:SVF::ThreadCallGraph
K	z3.obj/bin/python/z3/z3.py	/^def K(dom, v):$/;"	f
KBLU	svf/lib/Util/SVFUtil.cpp	45;"	d	file:
KCYA	svf/lib/Util/SVFUtil.cpp	47;"	d	file:
KGRN	svf/lib/Util/SVFUtil.cpp	43;"	d	file:
KNRM	svf/lib/Util/SVFUtil.cpp	41;"	d	file:
KPUR	svf/lib/Util/SVFUtil.cpp	46;"	d	file:
KRED	svf/lib/Util/SVFUtil.cpp	42;"	d	file:
KWHT	svf/lib/Util/SVFUtil.cpp	48;"	d	file:
KYEL	svf/lib/Util/SVFUtil.cpp	44;"	d	file:
KeepAOFI	svf/include/Util/Options.h	/^    static const Option<bool> KeepAOFI;$/;"	m	class:SVF::Options
KeepAllSelfCycle	svf/lib/Graphs/SVFGOPT.cpp	/^static std::string KeepAllSelfCycle = "all";$/;"	v	file:
KeepContextSelfCycle	svf/lib/Graphs/SVFGOPT.cpp	/^static std::string KeepContextSelfCycle = "context";$/;"	v	file:
KeepNoneSelfCycle	svf/lib/Graphs/SVFGOPT.cpp	/^static std::string KeepNoneSelfCycle = "none";$/;"	v	file:
KeyToIDMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef Map<Key, PointsToID> KeyToIDMap;$/;"	t	class:SVF::PersistentPTData
KeyToIDMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePersPTData::KeyToIDMap KeyToIDMap;$/;"	t	class:SVF::PersistentDFPTData
KeyToIDMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePersPTData::KeyToIDMap KeyToIDMap;$/;"	t	class:SVF::PersistentDiffPTData
KeyToIDMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename PersistentPTData<Key, KeySet, Data, DataSet>::KeyToIDMap KeyToIDMap;$/;"	t	class:SVF::PersistentVersionedPTData
Kind	svf/include/CFL/CFGrammar.h	/^    typedef u32_t Kind;$/;"	t	class:SVF::GrammarBase
Kind	svf/include/CFL/CFLGraphBuilder.h	/^    typedef CFGrammar::Kind Kind;$/;"	t	class:SVF::CFLGraphBuilder
Kind	svf/include/Graphs/CFLGraph.h	/^    typedef CFGrammar::Kind Kind;$/;"	t	class:SVF::CFLGraph
KindToPTASVFStmtSetMap	svf/include/Graphs/IRGraph.h	/^    SVFStmt::KindToSVFStmtMapTy KindToPTASVFStmtSetMap; \/\/\/< SVFIR edge map containing only pointer-related edges, i.e., both LHS and RHS are of pointer type$/;"	m	class:SVF::IRGraph
KindToSVFStmtMapTy	svf/include/SVFIR/SVFStatements.h	/^    typedef PAGEdgeToSetMapTy KindToSVFStmtMapTy;$/;"	t	class:SVF::SVFStmt
KindToSVFStmtSetMap	svf/include/Graphs/IRGraph.h	/^    SVFStmt::KindToSVFStmtMapTy KindToSVFStmtSetMap; \/\/\/< SVFIR edge map containing all PAGEdges$/;"	m	class:SVF::IRGraph
LEAKCHECKER_H_	svf/include/SABER/LeakChecker.h	31;"	d
LEAK_TYPE	svf/include/SABER/LeakChecker.h	/^    enum LEAK_TYPE$/;"	g	class:SVF::LeakChecker
LLVMBB2SVFBB	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    LLVMBB2SVFBBMap LLVMBB2SVFBB;$/;"	m	class:SVF::LLVMModuleSet
LLVMBB2SVFBBMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const BasicBlock*, SVFBasicBlock*> LLVMBB2SVFBBMap;$/;"	t	class:SVF::LLVMModuleSet
LLVMContext	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::LLVMContext LLVMContext;$/;"	t	namespace:SVF
LLVMFun2FunObjVar	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    LLVMFun2FunObjVarMap LLVMFun2FunObjVar; \/\/\/< Map an LLVM Function to an SVF Funobjvar$/;"	m	class:SVF::LLVMModuleSet
LLVMFun2FunObjVarMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Function*, FunObjVar*> LLVMFun2FunObjVarMap;$/;"	t	class:SVF::LLVMModuleSet
LLVMLoopAnalysis	svf-llvm/include/SVF-LLVM/LLVMLoopAnalysis.h	/^class LLVMLoopAnalysis$/;"	c	namespace:SVF
LLVMModuleSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^class LLVMModuleSet$/;"	c	namespace:SVF
LLVMModuleSet	svf-llvm/lib/LLVMModule.cpp	/^LLVMModuleSet::LLVMModuleSet()$/;"	f	class:LLVMModuleSet
LLVMType2SVFType	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    LLVMType2SVFTypeMap LLVMType2SVFType;$/;"	m	class:SVF::LLVMModuleSet
LLVMType2SVFTypeMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Type*, SVFType*> LLVMType2SVFTypeMap;$/;"	t	class:SVF::LLVMModuleSet
LLVMUtil	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^namespace LLVMUtil$/;"	n	namespace:SVF
LLVM_HAS_CPP_ATTRIBUTE	svf/include/Util/Casting.h	36;"	d
LLVM_HAS_CPP_ATTRIBUTE	svf/include/Util/Casting.h	38;"	d
LLVM_NODISCARD	svf/include/Util/Casting.h	46;"	d
LLVM_NODISCARD	svf/include/Util/Casting.h	48;"	d
LLVM_NODISCARD	svf/include/Util/Casting.h	54;"	d
LLVM_NODISCARD	svf/include/Util/Casting.h	56;"	d
LOADMU	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::LOADMU LOADMU;$/;"	t	class:SVF::SVFG
LOADMU	svf/include/MSSA/MemSSA.h	/^    typedef LoadMU<Condition> LOADMU;$/;"	t	class:SVF::MemSSA
LSRelation	svf/include/MemoryModel/AccessPath.h	/^    enum LSRelation$/;"	g	class:SVF::AccessPath
LShR	z3.obj/bin/python/z3/z3.py	/^def LShR(a, b):$/;"	f
Label	svf/include/CFL/CFLSolver.h	/^typedef GrammarBase::Symbol Label;$/;"	t	namespace:SVF
Lambda	z3.obj/bin/python/z3/z3.py	/^def Lambda(vs, body):$/;"	f
LandingPadInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::LandingPadInst LandingPadInst;$/;"	t	namespace:SVF
LargestRegion	svf/include/Util/NodeIDAllocator.h	/^        static const std::string LargestRegion;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
LargestRegion	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::LargestRegion = "LargestRegion";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
LastIndexOf	z3.obj/bin/python/z3/z3.py	/^def LastIndexOf(s, substr):$/;"	f
LeadingZerosCounter	svf/include/Util/SparseBitVector.h	/^template <typename T, std::size_t SizeOfT> struct LeadingZerosCounter$/;"	s	namespace:SVF
LeadingZerosCounter	svf/include/Util/SparseBitVector.h	/^template <typename T> struct LeadingZerosCounter<T, 4>$/;"	s	namespace:SVF
LeadingZerosCounter	svf/include/Util/SparseBitVector.h	/^template <typename T> struct LeadingZerosCounter<T, 8>$/;"	s	namespace:SVF
LeakChecker	svf/include/SABER/LeakChecker.h	/^    LeakChecker()$/;"	f	class:SVF::LeakChecker
LeakChecker	svf/include/SABER/LeakChecker.h	/^class LeakChecker : public SrcSnkDDA$/;"	c	namespace:SVF
Length	z3.obj/bin/python/z3/z3.py	/^def Length(s):$/;"	f
LineBreakFormatObject	z3.obj/bin/python/z3/z3printer.py	/^class LineBreakFormatObject(FormatObject):$/;"	c
LinearOrder	z3.obj/bin/python/z3/z3.py	/^def LinearOrder(a, index):$/;"	f
List	svf/include/Util/WorkList.h	/^    List()$/;"	f	class:SVF::List
List	svf/include/Util/WorkList.h	/^class List$/;"	c	namespace:SVF
ListNode	svf/include/Util/WorkList.h	/^        ListNode(const Data &d)$/;"	f	class:SVF::List::ListNode
ListNode	svf/include/Util/WorkList.h	/^    class ListNode$/;"	c	class:SVF::List
Literals	z3.obj/bin/python/z3/z3types.py	/^class Literals(ctypes.c_void_p):$/;"	c
Load	svf/include/Graphs/ConsGEdge.h	/^        Addr, Copy, Store, Load, NormalGep, VariantGep$/;"	e	enum:SVF::ConstraintEdge::ConstraintEdgeK
Load	svf/include/SVFIR/SVFStatements.h	/^        Load,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Load	svf/include/SVFIR/SVFValue.h	/^        Load,             \/\/ │   └── Represents a load operation$/;"	e	enum:SVF::SVFValue::GNodeK
LoadCGEdge	svf/include/Graphs/ConsGEdge.h	/^    LoadCGEdge(ConstraintNode* s, ConstraintNode* d, EdgeID id) : ConstraintEdge(s,d,Load,id)$/;"	f	class:SVF::LoadCGEdge
LoadCGEdge	svf/include/Graphs/ConsGEdge.h	/^class LoadCGEdge: public ConstraintEdge$/;"	c	namespace:SVF
LoadCGEdgeSet	svf/include/Graphs/ConsG.h	/^    ConstraintEdge::ConstraintEdgeSetTy LoadCGEdgeSet;$/;"	m	class:SVF::ConstraintGraph
LoadInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::LoadInst LoadInst;$/;"	t	namespace:SVF
LoadMSSAMU	svf/include/MSSA/MSSAMuChi.h	/^        LoadMSSAMU, CallMSSAMU, RetMSSAMU$/;"	e	enum:SVF::MSSAMU::MUTYPE
LoadMU	svf/include/MSSA/MSSAMuChi.h	/^    LoadMU(const SVFBasicBlock* b,const LoadStmt* i, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::LoadMU
LoadMU	svf/include/MSSA/MSSAMuChi.h	/^class LoadMU : public MSSAMU<Cond>$/;"	c	namespace:SVF
LoadSVFGNode	svf/include/Graphs/SVFG.h	/^typedef LoadVFGNode LoadSVFGNode;$/;"	t	namespace:SVF
LoadStmt	svf/include/SVFIR/SVFStatements.h	/^    LoadStmt(): AssignStmt(SVFStmt::Load) {}$/;"	f	class:SVF::LoadStmt
LoadStmt	svf/include/SVFIR/SVFStatements.h	/^    LoadStmt(SVFVar* s, SVFVar* d) : AssignStmt(s, d, SVFStmt::Load) {}$/;"	f	class:SVF::LoadStmt
LoadStmt	svf/include/SVFIR/SVFStatements.h	/^class LoadStmt: public AssignStmt$/;"	c	namespace:SVF
LoadToMUSetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const LoadStmt*, MUSet> LoadToMUSetMap;$/;"	t	class:SVF::MemSSA
LoadVFGNode	svf/include/Graphs/VFGNode.h	/^    LoadVFGNode(NodeID id, const LoadStmt* edge): StmtVFGNode(id, edge,Load)$/;"	f	class:SVF::LoadVFGNode
LoadVFGNode	svf/include/Graphs/VFGNode.h	/^class LoadVFGNode: public StmtVFGNode$/;"	c	namespace:SVF
LoadsToMRsMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const LoadStmt*, MRSet> LoadsToMRsMap;$/;"	t	class:SVF::MRGenerator
LoadsToPointsToMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const LoadStmt*, NodeBS> LoadsToPointsToMap;$/;"	t	class:SVF::MRGenerator
LocDPItem	svf/include/DDA/FlowDDA.h	/^typedef StmtDPItem<SVFGNode> LocDPItem;$/;"	t	namespace:SVF
LocID	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef NodeID LocID;$/;"	t	class:SVF::DFPTData
LocID	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BaseDFPTData::LocID LocID;$/;"	t	class:SVF::MutableDFPTData
LocID	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BaseDFPTData::LocID LocID;$/;"	t	class:SVF::MutableIncDFPTData
LocID	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BaseDFPTData::LocID LocID;$/;"	t	class:SVF::PersistentDFPTData
LocID	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BaseDFPTData::LocID LocID;$/;"	t	class:SVF::PersistentIncDFPTData
LocMemModel	svf/include/Util/Options.h	/^    static const Option<bool> LocMemModel;$/;"	m	class:SVF::Options
LocToDPMVecMap	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedMap<NodeID, DPTItemSet> LocToDPMVecMap;$/;"	t	class:SVF::DDAVFSolver
LocVersionMap	svf/include/WPA/VersionedFlowSensitive.h	/^    typedef std::vector<ObjToVersionMap> LocVersionMap;$/;"	t	class:SVF::VersionedFlowSensitive
LockAnalysis	svf/include/MTA/LockAnalysis.h	/^    LockAnalysis(TCT* t) : tct(t), lockTime(0),numOfTotalQueries(0), numOfLockedQueries(0), lockQueriesTime(0)$/;"	f	class:SVF::LockAnalysis
LockAnalysis	svf/include/MTA/LockAnalysis.h	/^class LockAnalysis$/;"	c	namespace:SVF
LockSet	svf/include/MTA/LockAnalysis.h	/^    typedef NodeBS LockSet;$/;"	t	class:SVF::LockAnalysis
LockSiteToLockSet	svf/include/MTA/LockAnalysis.h	/^    typedef Map<const ICFGNode*, NodeBS> LockSiteToLockSet;$/;"	t	class:SVF::LockAnalysis
LockSpan	svf/include/MTA/LockAnalysis.h	/^    typedef Set<CxtStmt> LockSpan;$/;"	t	class:SVF::LockAnalysis
LockSpan	svf/include/MTA/MHP.h	/^    typedef Set<CxtStmt> LockSpan;$/;"	t	class:SVF::MHP
Loop	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Loop Loop;$/;"	t	namespace:SVF
Loop	svf/include/Util/SVFBugReport.h	/^        Loop = 0x4,$/;"	e	enum:SVF::SVFBugEvent::EventType
Loop	z3.obj/bin/python/z3/z3.py	/^def Loop(re, lo, hi=0):$/;"	f
LoopAnalysis	svf/include/Util/Options.h	/^    static const Option<bool> LoopAnalysis;$/;"	m	class:SVF::Options
LoopBBs	svf/include/MTA/MHP.h	/^    typedef SVFLoopAndDomInfo::LoopBBs LoopBBs;$/;"	t	class:SVF::ForkJoinAnalysis
LoopBBs	svf/include/MTA/MHP.h	/^    typedef SVFLoopAndDomInfo::LoopBBs LoopBBs;$/;"	t	class:SVF::MHP
LoopBBs	svf/include/MTA/TCT.h	/^    typedef SVFLoopAndDomInfo::LoopBBs LoopBBs;$/;"	t	class:SVF::TCT
LoopBBs	svf/include/SVFIR/SVFVariables.h	/^    typedef SVFLoopAndDomInfo::LoopBBs LoopBBs;$/;"	t	class:SVF::FunObjVar
LoopBBs	svf/include/Util/SVFLoopAndDomInfo.h	/^    typedef BBList LoopBBs;$/;"	t	class:SVF::SVFLoopAndDomInfo
LoopBound	svf/include/Util/Options.h	/^    static const Option<u32_t> LoopBound;$/;"	m	class:SVF::Options
LoopInfo	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::LoopInfo LoopInfo;$/;"	t	namespace:SVF
MDEF	svf/include/MSSA/MemSSA.h	/^    typedef MSSADEF MDEF;$/;"	t	class:SVF::MemSSA
MDNode	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MDNode MDNode;$/;"	t	namespace:SVF
MDString	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MDString MDString;$/;"	t	namespace:SVF
MEMCPY	svf/include/AE/Svfexe/AbsExtAPI.h	/^    enum ExtAPIType { UNCLASSIFIED, MEMCPY, MEMSET, STRCPY, STRCAT };$/;"	e	enum:SVF::AbsExtAPI::ExtAPIType
MEMORYREGION_H_	svf/include/MSSA/MemRegion.h	35;"	d
MEMORYSSAPASS_H_	svf/include/MSSA/MemSSA.h	37;"	d
MEMSET	svf/include/AE/Svfexe/AbsExtAPI.h	/^    enum ExtAPIType { UNCLASSIFIED, MEMCPY, MEMSET, STRCPY, STRCAT };$/;"	e	enum:SVF::AbsExtAPI::ExtAPIType
MEMTYPE	svf/include/SVFIR/ObjTypeInfo.h	/^    } MEMTYPE;$/;"	t	class:SVF::ObjTypeInfo	typeref:enum:SVF::ObjTypeInfo::__anon18
MHP	svf/include/MTA/MHP.h	/^class MHP$/;"	c	namespace:SVF
MHP	svf/lib/MTA/MHP.cpp	/^MHP::MHP(TCT* t) : tcg(t->getThreadCallGraph()), tct(t), numOfTotalQueries(0), numOfMHPQueries(0),$/;"	f	class:MHP
MHPTime	svf/include/MTA/MTAStat.h	/^    double MHPTime;$/;"	m	class:SVF::MTAStat
MHP_H_	svf/include/MTA/MHP.h	31;"	d
MInterPhi	svf/include/SVFIR/SVFValue.h	/^        MInterPhi,        \/\/ │       └── Inter-procedural memory PHI node$/;"	e	enum:SVF::SVFValue::GNodeK
MIntraPhi	svf/include/SVFIR/SVFValue.h	/^        MIntraPhi,        \/\/ │       ├── Intra-procedural memory PHI node$/;"	e	enum:SVF::SVFValue::GNodeK
MK_EXPR1	z3.obj/include/z3++.h	3356;"	d
MK_EXPR2	z3.obj/include/z3++.h	3361;"	d
MPhi	svf/include/SVFIR/SVFValue.h	/^        MPhi,             \/\/ │       ├── Memory PHI node$/;"	e	enum:SVF::SVFValue::GNodeK
MRGenerator	svf/include/MSSA/MemRegion.h	/^class MRGenerator$/;"	c	namespace:SVF
MRGenerator	svf/lib/MSSA/MemRegion.cpp	/^MRGenerator::MRGenerator(BVDataPTAImpl* p, bool ptrOnly) :$/;"	f	class:MRGenerator
MRID	svf/include/MSSA/MemRegion.h	/^typedef NodeID MRID;$/;"	t	namespace:SVF
MRSVFGNode	svf/include/Graphs/SVFGNode.h	/^    MRSVFGNode(NodeID id, VFGNodeK k) : VFGNode(id, k) {}$/;"	f	class:SVF::MRSVFGNode
MRSVFGNode	svf/include/Graphs/SVFGNode.h	/^class MRSVFGNode : public VFGNode$/;"	c	namespace:SVF
MRSet	svf/include/MSSA/MemRegion.h	/^    typedef OrderedSet<const MemRegion*, MemRegion::equalMemRegion> MRSet;$/;"	t	class:SVF::MRGenerator
MRSet	svf/include/MSSA/MemSSA.h	/^    typedef MRGenerator::MRSet MRSet;$/;"	t	class:SVF::MemSSA
MRVERID	svf/include/MSSA/MemRegion.h	/^typedef NodeID MRVERID;$/;"	t	namespace:SVF
MRVERSION	svf/include/MSSA/MemRegion.h	/^typedef NodeID MRVERSION;$/;"	t	namespace:SVF
MRVector	svf/include/MSSA/MemSSA.h	/^    typedef std::vector<const MemRegion*> MRVector;$/;"	t	class:SVF::MemSSA
MRVer	svf/include/MSSA/MSSAMuChi.h	/^    MRVer(const MemRegion* m, MRVERSION v, MSSADef* d) :$/;"	f	class:SVF::MRVer
MRVer	svf/include/MSSA/MSSAMuChi.h	/^class MRVer$/;"	c	namespace:SVF
MRVerSet	svf/include/Graphs/SVFGEdge.h	/^    typedef Set<const MRVer*> MRVerSet;$/;"	t	class:SVF::IndirectSVFGEdge
MSSACHI	svf/include/MSSA/MSSAMuChi.h	/^    MSSACHI(CHITYPE t, const MemRegion* m, Cond c): MSSADEF(t,m), opVer(nullptr), cond(c)$/;"	f	class:SVF::MSSACHI
MSSACHI	svf/include/MSSA/MSSAMuChi.h	/^class MSSACHI : public MSSADEF$/;"	c	namespace:SVF
MSSADEF	svf/include/MSSA/MSSAMuChi.h	/^    MSSADEF(DEFTYPE t, const MemRegion* m): type(t), mr(m), resVer(nullptr)$/;"	f	class:SVF::MSSADEF
MSSADEF	svf/include/MSSA/MSSAMuChi.h	/^class MSSADEF$/;"	c	namespace:SVF
MSSADef	svf/include/MSSA/MSSAMuChi.h	/^    typedef MSSADEF MSSADef;$/;"	t	class:SVF::MRVer
MSSAFun	svf/include/Util/Options.h	/^    static const Option<std::string> MSSAFun;$/;"	m	class:SVF::Options
MSSAMU	svf/include/MSSA/MSSAMuChi.h	/^    MSSAMU(MUTYPE t, const MemRegion* m, Cond c) : type(t), mr(m), ver(nullptr), cond(c)$/;"	f	class:SVF::MSSAMU
MSSAMU	svf/include/MSSA/MSSAMuChi.h	/^class MSSAMU$/;"	c	namespace:SVF
MSSAMUCHI_H_	svf/include/MSSA/MSSAMuChi.h	31;"	d
MSSAPHI	svf/include/MSSA/MSSAMuChi.h	/^    MSSAPHI(const SVFBasicBlock* b, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::MSSAPHI
MSSAPHI	svf/include/MSSA/MSSAMuChi.h	/^class MSSAPHI : public MSSADEF$/;"	c	namespace:SVF
MSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^    MSSAPHISVFGNode(NodeID id, const MRVer* resVer,VFGNodeK k = MPhi): MRSVFGNode(id, k)$/;"	f	class:SVF::MSSAPHISVFGNode
MSSAPHISVFGNode	svf/include/Graphs/SVFGNode.h	/^class MSSAPHISVFGNode : public MRSVFGNode$/;"	c	namespace:SVF
MSSAVarToDefMap	svf/include/Graphs/SVFG.h	/^    MSSAVarToDefMapTy MSSAVarToDefMap;	\/\/\/< map a memory SSA operator to its definition SVFG node$/;"	m	class:SVF::SVFG
MSSAVarToDefMapTy	svf/include/Graphs/SVFG.h	/^    typedef Map<const MRVer*, NodeID> MSSAVarToDefMapTy;$/;"	t	class:SVF::SVFG
MTA	svf/include/MTA/MTA.h	/^class MTA$/;"	c	namespace:SVF
MTA	svf/lib/MTA/MTA.cpp	/^MTA::MTA() : tcg(nullptr), tct(nullptr), mhp(nullptr), lsa(nullptr)$/;"	f	class:MTA
MTASTAT_H_	svf/include/MTA/MTAStat.h	31;"	d
MTAStat	svf/include/MTA/MTAStat.h	/^    MTAStat():PTAStat(nullptr),TCTTime(0),MHPTime(0),AnnotationTime(0)$/;"	f	class:SVF::MTAStat
MTAStat	svf/include/MTA/MTAStat.h	/^class MTAStat : public PTAStat$/;"	c	namespace:SVF
MTA_H_	svf/include/MTA/MTA.h	35;"	d
MU	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::MU MU;$/;"	t	class:SVF::SVFG
MU	svf/include/MSSA/MemSSA.h	/^    typedef MSSAMU<Condition> MU;$/;"	t	class:SVF::MemSSA
MULTI_INHERITANCE	svf-llvm/include/SVF-LLVM/DCHG.h	/^        MULTI_INHERITANCE = 0x2, \/\/ multi inheritance class$/;"	e	enum:SVF::DCHNode::__anon12
MULTI_INHERITANCE	svf/include/Graphs/CHG.h	/^        MULTI_INHERITANCE = 0x2, \/\/ multi inheritance class$/;"	e	enum:SVF::CHNode::__anon22
MUSet	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::MUSet MUSet;$/;"	t	class:SVF::SVFG
MUSet	svf/include/MSSA/MemSSA.h	/^    typedef Set<MU*> MUSet;$/;"	t	class:SVF::MemSSA
MUTABLE_POINTSTO_H_	svf/include/MemoryModel/MutablePointsToDS.h	37;"	d
MUTYPE	svf/include/MSSA/MSSAMuChi.h	/^    enum MUTYPE$/;"	g	class:SVF::MSSAMU
Map	z3.obj/bin/python/z3/z3.py	/^def Map(f, *args):$/;"	f
MappingPtr	svf/include/MemoryModel/PointsTo.h	/^    typedef std::shared_ptr<std::vector<NodeID>> MappingPtr;$/;"	t	class:SVF::PointsTo
MarkedClocksOnly	svf/include/Util/Options.h	/^    static const Option<bool> MarkedClocksOnly;$/;"	m	class:SVF::Options
MaxBVLen	svf/include/Util/Options.h	/^    static const Option<u32_t> MaxBVLen;$/;"	m	class:SVF::Options
MaxContextLen	svf/include/Util/Options.h	/^    static const Option<u32_t> MaxContextLen;$/;"	m	class:SVF::Options
MaxCxtSize	svf/include/MTA/TCT.h	/^    u32_t MaxCxtSize;$/;"	m	class:SVF::TCT
MaxFieldLimit	svf/include/Util/Options.h	/^    static const Option<u32_t> MaxFieldLimit;$/;"	m	class:SVF::Options
MaxPathLen	svf/include/Util/Options.h	/^    static const Option<u32_t> MaxPathLen;$/;"	m	class:SVF::Options
MaxPointsToSetSize	svf/include/WPA/Andersen.h	/^    static u32_t MaxPointsToSetSize;$/;"	m	class:SVF::AndersenBase
MaxPointsToSetSize	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::MaxPointsToSetSize = 0;$/;"	m	class:AndersenBase	file:
MaxStepInWrapper	svf/include/Util/Options.h	/^    static const Option<u32_t> MaxStepInWrapper;$/;"	m	class:SVF::Options
MaxZ3Size	svf/include/Util/Options.h	/^    static const Option<u32_t> MaxZ3Size;$/;"	m	class:SVF::Options
MayAlias	svf/include/SVFIR/SVFType.h	/^    MayAlias,$/;"	e	enum:SVF::AliasResult
MeldVersion	svf/include/WPA/VersionedFlowSensitive.h	/^    typedef CoreBitVector MeldVersion;$/;"	t	class:SVF::VersionedFlowSensitive
MemCpyInlineInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemCpyInlineInst MemCpyInlineInst;$/;"	t	namespace:SVF
MemCpyInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemCpyInst MemCpyInst;$/;"	t	namespace:SVF
MemIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemIntrinsic MemIntrinsic;$/;"	t	namespace:SVF
MemMoveInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemMoveInst MemMoveInst;$/;"	t	namespace:SVF
MemObjToFieldsMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeID,NodeBS> MemObjToFieldsMap;$/;"	t	class:SVF::SVFIR
MemPar	svf/include/Util/Options.h	/^    static const OptionMap<MemSSA::MemPartition> MemPar;$/;"	m	class:SVF::Options
MemPartition	svf/include/MSSA/MemSSA.h	/^    enum MemPartition$/;"	g	class:SVF::MemSSA
MemRegToBBsMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const MemRegion*, BBList> MemRegToBBsMap;$/;"	t	class:SVF::MemSSA
MemRegToCounterMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const MemRegion*, MRVERSION> MemRegToCounterMap;$/;"	t	class:SVF::MemSSA
MemRegToVerStackMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const MemRegion*, std::vector<MRVer*> > MemRegToVerStackMap;$/;"	t	class:SVF::MemSSA
MemRegion	svf/include/MSSA/MemRegion.h	/^    MemRegion(const NodeBS& cp) :$/;"	f	class:SVF::MemRegion
MemRegion	svf/include/MSSA/MemRegion.h	/^class MemRegion$/;"	c	namespace:SVF
MemSSA	svf/include/MSSA/MemSSA.h	/^class MemSSA$/;"	c	namespace:SVF
MemSSA	svf/lib/MSSA/MemSSA.cpp	/^MemSSA::MemSSA(BVDataPTAImpl* p, bool ptrOnlyMSSA)$/;"	f	class:MemSSA
MemSSAStat	svf/include/Graphs/SVFGStat.h	/^class MemSSAStat : public PTAStat$/;"	c	namespace:SVF
MemSSAStat	svf/lib/Graphs/SVFGStat.cpp	/^MemSSAStat::MemSSAStat(MemSSA* memSSA) : PTAStat(nullptr)$/;"	f	class:MemSSAStat
MemSetInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemSetInst MemSetInst;$/;"	t	namespace:SVF
MemTransferInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemTransferInst MemTransferInst;$/;"	t	namespace:SVF
MemoryLeakCheck	svf/include/Util/Options.h	/^    static const Option<bool> MemoryLeakCheck;$/;"	m	class:SVF::Options
MemoryLocation	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MemoryLocation MemoryLocation;$/;"	t	namespace:SVF
MergeFunctionRets	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    MergeFunctionRets() : ModulePass(ID) {}$/;"	f	class:SVF::MergeFunctionRets
MergeFunctionRets	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^class MergeFunctionRets : public ModulePass$/;"	c	namespace:SVF
MetadataAsValue	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MetadataAsValue MetadataAsValue;$/;"	t	namespace:SVF
MinMaxIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::MinMaxIntrinsic MinMaxIntrinsic;$/;"	t	namespace:SVF
MkInfinitesimal	z3.obj/bin/python/z3/z3rcf.py	/^def MkInfinitesimal(name="eps", ctx=None):$/;"	f
MkRoots	z3.obj/bin/python/z3/z3rcf.py	/^def MkRoots(p, ctx=None):$/;"	f
Mod	svf/include/SVFIR/SVFType.h	/^    Mod,$/;"	e	enum:SVF::ModRefInfo
ModRef	svf/include/SVFIR/SVFType.h	/^    ModRef,$/;"	e	enum:SVF::ModRefInfo
ModRefInfo	svf/include/SVFIR/SVFType.h	/^enum ModRefInfo$/;"	g	namespace:SVF
Model	z3.obj/bin/python/z3/z3.py	/^def Model(ctx = None):$/;"	f
Model	z3.obj/bin/python/z3/z3types.py	/^class Model(ctypes.c_void_p):$/;"	c
ModelArrays	svf/include/Util/Options.h	/^    static Option<bool> ModelArrays;$/;"	m	class:SVF::Options
ModelConsts	svf/include/Util/Options.h	/^    static Option<bool> ModelConsts;$/;"	m	class:SVF::Options
ModelObj	z3.obj/bin/python/z3/z3types.py	/^class ModelObj(ctypes.c_void_p):$/;"	c
ModelRef	z3.obj/bin/python/z3/z3.py	/^class ModelRef(Z3PPObject):$/;"	c
Module	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Module Module;$/;"	t	namespace:SVF
ModulePass	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ModulePass ModulePass;$/;"	t	namespace:SVF
MultiOpndStmt	svf/include/SVFIR/SVFStatements.h	/^    MultiOpndStmt(GEdgeFlag k) : SVFStmt(k) {}$/;"	f	class:SVF::MultiOpndStmt
MultiOpndStmt	svf/include/SVFIR/SVFStatements.h	/^class MultiOpndStmt : public SVFStmt$/;"	c	namespace:SVF
MultiOpndStmt	svf/lib/SVFIR/SVFStatements.cpp	/^MultiOpndStmt::MultiOpndStmt(SVFVar* r, const OPVars& opnds, GEdgeFlag k)$/;"	f	class:MultiOpndStmt
MultiPattern	z3.obj/bin/python/z3/z3.py	/^def MultiPattern(*args):$/;"	f
MustAlias	svf/include/SVFIR/SVFType.h	/^    MustAlias,$/;"	e	enum:SVF::AliasResult
MutBase	svf/include/MemoryModel/AbstractPointsToDS.h	/^        MutBase,$/;"	e	enum:SVF::PTData::PTDataTy
MutDFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef MutableDFPTData<NodeID, NodeSet, NodeID, PointsTo> MutDFPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
MutDFPTDataTy	svf/include/WPA/FlowSensitive.h	/^    typedef BVDataPTAImpl::MutDFPTDataTy MutDFPTDataTy;$/;"	t	class:SVF::FlowSensitive
MutDataFlow	svf/include/MemoryModel/AbstractPointsToDS.h	/^        MutDataFlow,$/;"	e	enum:SVF::PTData::PTDataTy
MutDiff	svf/include/MemoryModel/AbstractPointsToDS.h	/^        MutDiff,$/;"	e	enum:SVF::PTData::PTDataTy
MutDiffPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef MutableDiffPTData<NodeID, NodeSet, NodeID, PointsTo> MutDiffPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
MutIncDFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef MutableIncDFPTData<NodeID, NodeSet, NodeID, PointsTo> MutIncDFPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
MutIncDataFlow	svf/include/MemoryModel/AbstractPointsToDS.h	/^        MutIncDataFlow,$/;"	e	enum:SVF::PTData::PTDataTy
MutPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef MutablePTData<CVar, Set<CVar>, CVar, CPtSet> MutPTDataTy;$/;"	t	class:SVF::CondPTAImpl
MutPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef MutablePTData<NodeID, NodeSet, NodeID, PointsTo> MutPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
MutVersioned	svf/include/MemoryModel/AbstractPointsToDS.h	/^        MutVersioned,$/;"	e	enum:SVF::PTData::PTDataTy
MutVersionedPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef MutableVersionedPTData<NodeID, NodeSet, NodeID, PointsTo, VersionedVar, Set<VersionedVar>> MutVersionedPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
Mutable	svf/include/MemoryModel/PointerAnalysisImpl.h	/^        Mutable,$/;"	e	enum:SVF::BVDataPTAImpl::PTBackingType
MutableDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutableDFPTData(bool reversePT = true, PTDataTy ty = BaseDFPTData::MutDataFlow) : BaseDFPTData(reversePT, ty), mutPTData(reversePT) { }$/;"	f	class:SVF::MutableDFPTData
MutableDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^class MutableDFPTData : public DFPTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
MutableDiffPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    explicit MutableDiffPTData(bool reversePT = true, PTDataTy ty = PTDataTy::Diff) : BaseDiffPTData(reversePT, ty), mutPTData(reversePT) { }$/;"	f	class:SVF::MutableDiffPTData
MutableDiffPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^class MutableDiffPTData : public DiffPTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
MutableIncDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutableIncDFPTData(bool reversePT = true, PTDataTy ty = BasePTData::MutIncDataFlow) : BaseMutDFPTData(reversePT, ty) { }$/;"	f	class:SVF::MutableIncDFPTData
MutableIncDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^class MutableIncDFPTData : public MutableDFPTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
MutablePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutablePTData(bool reversePT = true, PTDataTy ty = PTDataTy::MutBase) : BasePTData(reversePT, ty) { }$/;"	f	class:SVF::MutablePTData
MutablePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^class MutablePTData : public PTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
MutableVersionedPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutableVersionedPTData(bool reversePT = true, PTDataTy ty = PTDataTy::MutVersioned)$/;"	f	class:SVF::MutableVersionedPTData
MutableVersionedPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^class MutableVersionedPTData : public VersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet>$/;"	c	namespace:SVF
NAN	svf/lib/Util/cJSON.cpp	82;"	d	file:
NAN	svf/lib/Util/cJSON.cpp	84;"	d	file:
NATIVE_INT_SIZE	svf/include/SVFIR/SVFType.h	530;"	d
NAryFormatObject	z3.obj/bin/python/z3/z3printer.py	/^class NAryFormatObject(FormatObject):$/;"	c
NEATO	svf/include/Graphs/GraphWriter.h	/^    NEATO,$/;"	e	enum:SVF::GraphProgram::Name
NEG	svf/include/Util/Z3Expr.h	/^    static inline Z3Expr NEG(const Z3Expr &z3Expr)$/;"	f	class:SVF::Z3Expr
NEVERFREE	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
NEVER_FREE_LEAK	svf/include/SABER/LeakChecker.h	/^        NEVER_FREE_LEAK,$/;"	e	enum:SVF::LeakChecker::LEAK_TYPE
NODEIDALLOCATOR_H_	svf/include/Util/NodeIDAllocator.h	4;"	d
NPtr	svf/include/SVFIR/SVFValue.h	/^        NPtr,             \/\/ ├── Represents a null pointer operation$/;"	e	enum:SVF::SVFValue::GNodeK
NULL	svf-llvm/lib/extapi.c	2;"	d	file:
NUMStatMap	svf/include/Util/SVFStat.h	/^    typedef OrderedMap<std::string, u32_t> NUMStatMap;$/;"	t	class:SVF::SVFStat
NVThunkFunLabel	svf-llvm/lib/CppUtil.cpp	/^const std::string NVThunkFunLabel = "non-virtual thunk to ";$/;"	v
Name	svf/include/Graphs/GraphWriter.h	/^enum Name$/;"	g	namespace:SVF::GraphProgram
NameToCHNodesMap	svf/include/Graphs/CHG.h	/^    typedef Map<std::string, CHNodeSetTy> NameToCHNodesMap;$/;"	t	class:SVF::CHGraph
NamedMDNode	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::NamedMDNode NamedMDNode;$/;"	t	namespace:SVF
NeverFreeBug	svf/include/Util/SVFBugReport.h	/^    NeverFreeBug(const EventStack &bugEventStack):$/;"	f	class:SVF::NeverFreeBug
NeverFreeBug	svf/include/Util/SVFBugReport.h	/^class NeverFreeBug : public GenericBug$/;"	c	namespace:SVF
NewBvNumWords	svf/include/Util/NodeIDAllocator.h	/^        static const std::string NewBvNumWords;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
NewBvNumWords	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::NewBvNumWords = "NewBvWords";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
NewSbvNumWords	svf/include/Util/NodeIDAllocator.h	/^        static const std::string NewSbvNumWords;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
NewSbvNumWords	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::NewSbvNumWords = "NewSbvWords";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
NoAlias	svf/include/SVFIR/SVFType.h	/^    NoAlias,$/;"	e	enum:SVF::AliasResult
NoAliasScopeDeclInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::NoAliasScopeDeclInst NoAliasScopeDeclInst;$/;"	t	namespace:SVF
NoModRef	svf/include/SVFIR/SVFType.h	/^    NoModRef,$/;"	e	enum:SVF::ModRefInfo
Node	svf/include/Graphs/SCC.h	/^    inline GNODE Node(NodeID id) const$/;"	f	class:SVF::SCCDetection
Node	svf/include/Graphs/WTO.h	/^        Node,$/;"	e	enum:SVF::WTOComponent::WTOCT
Node	svf/include/Util/WorkList.h	/^    typedef ListNode Node;$/;"	t	class:SVF::List
Node	svf/include/WPA/WPASolver.h	/^    inline GNODE* Node(NodeID id)$/;"	f	class:SVF::WPASolver
NodeAccessPath	svf/include/SVFIR/SVFIR.h	/^    typedef std::pair<NodeID, AccessPath> NodeAccessPath;$/;"	t	class:SVF::SVFIR
NodeAccessPathMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeAccessPath,NodeID> NodeAccessPathMap;$/;"	t	class:SVF::SVFIR
NodeAllocStrat	svf/include/Util/Options.h	/^    static const OptionMap<SVF::NodeIDAllocator::Strategy> NodeAllocStrat;$/;"	m	class:SVF::Options
NodeBS	svf/include/Util/GeneralType.h	/^typedef SparseBitVector<> NodeBS;$/;"	t	namespace:SVF
NodeData	svf/include/WPA/VersionedFlowSensitive.h	/^        typedef struct NodeData$/;"	s	class:SVF::VersionedFlowSensitive::SCC
NodeData	svf/include/WPA/VersionedFlowSensitive.h	/^        } NodeData;$/;"	t	class:SVF::VersionedFlowSensitive::SCC	typeref:struct:SVF::VersionedFlowSensitive::SCC::NodeData
NodeDeque	svf/include/Util/GeneralType.h	/^                    typedef std::deque<NodeID> NodeDeque;$/;"	t	namespace:SVF
NodeID	svf/include/Graphs/SCC.h	/^    typedef unsigned NodeID ;$/;"	t	class:SVF::SCCDetection
NodeID	svf/include/Util/GeneralType.h	/^typedef u32_t NodeID;$/;"	t	namespace:SVF
NodeIDAllocator	svf/include/Util/NodeIDAllocator.h	/^class NodeIDAllocator$/;"	c	namespace:SVF
NodeIDAllocator	svf/lib/Util/NodeIDAllocator.cpp	/^NodeIDAllocator::NodeIDAllocator(void)$/;"	f	class:SVF::NodeIDAllocator
NodeIDToNodeIDMap	svf/include/Graphs/SVFGOPT.h	/^    typedef Map<NodeID, NodeID> NodeIDToNodeIDMap;$/;"	t	class:SVF::SVFGOPT
NodeList	svf/include/Util/GeneralType.h	/^                    typedef std::list<NodeID> NodeList;$/;"	t	namespace:SVF
NodeOffset	svf/include/SVFIR/SVFIR.h	/^    typedef std::pair<NodeID, APOffset> NodeOffset;$/;"	t	class:SVF::SVFIR
NodeOffsetMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeOffset,NodeID> NodeOffsetMap;$/;"	t	class:SVF::SVFIR
NodePair	svf/include/Util/GeneralType.h	/^                    typedef std::pair<NodeID, NodeID> NodePair;$/;"	t	namespace:SVF
NodePairMap	svf/include/Util/GeneralType.h	/^                    typedef Map<NodePair, NodeID> NodePairMap;$/;"	t	namespace:SVF
NodePairSet	svf/include/Util/GeneralType.h	/^                    typedef Set<NodePair> NodePairSet;$/;"	t	namespace:SVF
NodePairSetMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodePair,NodeID> NodePairSetMap;$/;"	t	class:SVF::SVFIR
NodePairVector	svf/include/Graphs/CDG.h	/^typedef std::vector<std::pair<NodeID, NodeID>> NodePairVector;$/;"	t	namespace:SVF
NodeRef	svf-llvm/include/SVF-LLVM/DCHG.h	/^    typedef SVF::DCHNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/CDG.h	/^    typedef SVF::CDGNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/CFLGraph.h	/^    typedef SVF::CFLNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/CHG.h	/^    typedef SVF::CHNode* NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/CallGraph.h	/^    typedef SVF::CallGraphNode*NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/ConsG.h	/^    typedef SVF::ConstraintNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/ICFG.h	/^    typedef SVF::ICFGNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/IRGraph.h	/^    typedef SVF::SVFVar* NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/SVFG.h	/^    typedef SVF::SVFGNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/Graphs/VFG.h	/^    typedef SVF::VFGNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRef	svf/include/MTA/TCT.h	/^    typedef SVF::TCTNode *NodeRef;$/;"	t	struct:SVF::GenericGraphTraits
NodeRefList	svf/include/Graphs/WTO.h	/^    typedef Set<const NodeT*> NodeRefList;$/;"	t	class:SVF::WTO
NodeRefList	svf/include/Graphs/WTO.h	/^    typedef std::vector<const NodeT*> NodeRefList;$/;"	t	class:SVF::WTOCycleDepth
NodeRefTONodeRefListMap	svf/include/Graphs/WTO.h	/^    typedef Map<const NodeT*, NodeRefList> NodeRefTONodeRefListMap;$/;"	t	class:SVF::WTO
NodeRefToCycleDepthNumber	svf/include/Graphs/WTO.h	/^    typedef Map<const NodeT*, CycleDepthNumber> NodeRefToCycleDepthNumber;$/;"	t	class:SVF::WTO
NodeRefToWTOCycleDepthPtr	svf/include/Graphs/WTO.h	/^    typedef Map<const NodeT*, WTOCycleDepthPtr> NodeRefToWTOCycleDepthPtr;$/;"	t	class:SVF::WTO
NodeRefToWTOCycleMap	svf/include/Graphs/WTO.h	/^    typedef Map<const NodeT*, const WTOCycleT*> NodeRefToWTOCycleMap;$/;"	t	class:SVF::WTO
NodeSet	svf/include/Util/GeneralType.h	/^                    typedef Set<NodeID> NodeSet;$/;"	t	namespace:SVF
NodeStack	svf/include/Util/GeneralType.h	/^                    typedef std::stack<NodeID> NodeStack;$/;"	t	namespace:SVF
NodeStrides	svf/include/WPA/AndersenPWC.h	/^    typedef Map<NodeID, NodeBS> NodeStrides;$/;"	t	class:SVF::AndersenSFR
NodeT	svf/include/Graphs/WTO.h	/^    typedef typename GraphT::NodeType NodeT;$/;"	t	class:SVF::WTO
NodeT	svf/include/Graphs/WTO.h	/^    typedef typename GraphT::NodeType NodeT;$/;"	t	class:SVF::WTOCycleDepth
NodeT	svf/include/Graphs/WTO.h	/^    typedef typename GraphT::NodeType NodeT;$/;"	t	class:SVF::final
NodeToEquivClassMap	svf/include/WPA/Steensgaard.h	/^    typedef Map<NodeID, NodeID> NodeToEquivClassMap;$/;"	t	class:SVF::Steensgaard
NodeToNodeMap	svf/include/Graphs/SCC.h	/^    typedef Map<NodeID, NodeID> NodeToNodeMap;$/;"	t	class:SVF::SCCDetection
NodeToNodeMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeID, NodeID> NodeToNodeMap;$/;"	t	class:SVF::SVFIR
NodeToNodeMap	svf/include/WPA/AndersenPWC.h	/^    typedef Map<NodeID, NodeID> NodeToNodeMap;$/;"	t	class:SVF::AndersenSCD
NodeToPTSSMap	svf/include/CFL/CFLSVFGBuilder.h	/^    typedef Map<NodeID, PointsTo> NodeToPTSSMap;$/;"	t	class:SVF::CFLSVFGBuilder
NodeToPTSSMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<NodeID, NodeBS> NodeToPTSSMap;$/;"	t	class:SVF::MRGenerator
NodeToPTSSMap	svf/include/SABER/SaberSVFGBuilder.h	/^    typedef Map<NodeID, PointsTo> NodeToPTSSMap;$/;"	t	class:SVF::SaberSVFGBuilder
NodeToRepMap	svf/include/Graphs/ConsG.h	/^    typedef Map<NodeID, NodeID> NodeToRepMap;$/;"	t	class:SVF::ConstraintGraph
NodeToSubsMap	svf/include/Graphs/ConsG.h	/^    typedef Map<NodeID, NodeBS> NodeToSubsMap;$/;"	t	class:SVF::ConstraintGraph
NodeToSubsMap	svf/include/WPA/Steensgaard.h	/^    typedef Map<NodeID, Set<NodeID>> NodeToSubsMap;$/;"	t	class:SVF::Steensgaard
NodeType	svf/include/Graphs/CDG.h	/^    typedef SVF::CDGNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits
NodeType	svf/include/Graphs/GenericGraph.h	/^    typedef NodeTy NodeType;$/;"	t	class:SVF::GenericEdge
NodeType	svf/include/Graphs/GenericGraph.h	/^    typedef NodeTy NodeType;$/;"	t	class:SVF::GenericGraph
NodeType	svf/include/Graphs/GenericGraph.h	/^    typedef NodeTy NodeType;$/;"	t	class:SVF::GenericNode
NodeType	svf/include/Graphs/GenericGraph.h	/^    typedef NodeTy NodeType;$/;"	t	struct:SVF::GenericGraphTraits
NodeType	svf/lib/Graphs/CFLGraph.cpp	/^    typedef CFLNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/CHG.cpp	/^    typedef CHNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/CallGraph.cpp	/^    typedef CallGraphNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/ConsG.cpp	/^    typedef ConstraintNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/ICFG.cpp	/^    typedef ICFGNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/IRGraph.cpp	/^    typedef SVFVar NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/SVFG.cpp	/^    typedef SVFGNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/Graphs/VFG.cpp	/^    typedef VFGNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeType	svf/lib/MTA/TCT.cpp	/^    typedef TCTNode NodeType;$/;"	t	struct:SVF::DOTGraphTraits	file:
NodeVector	svf/include/Util/GeneralType.h	/^                    typedef std::vector<NodeID> NodeVector;$/;"	t	namespace:SVF
Node_Index	svf/include/Graphs/SCC.h	/^    inline NodeID Node_Index(GNODE node) const$/;"	f	class:SVF::SCCDetection
Node_Index	svf/include/WPA/WPASolver.h	/^    inline NodeID Node_Index(GNODE node)$/;"	f	class:SVF::WPASolver
NonOverlap	svf/include/MemoryModel/AccessPath.h	/^        NonOverlap, Overlap, Subset, Superset, Same$/;"	e	enum:SVF::AccessPath::LSRelation
NormCallGraph	svf/include/Graphs/CallGraph.h	/^        NormCallGraph, ThdCallGraph$/;"	e	enum:SVF::CallGraph::CGEK
NormalGep	svf/include/Graphs/ConsGEdge.h	/^        Addr, Copy, Store, Load, NormalGep, VariantGep$/;"	e	enum:SVF::ConstraintEdge::ConstraintEdgeK
NormalGepCGEdge	svf/include/Graphs/ConsGEdge.h	/^    NormalGepCGEdge(ConstraintNode* s, ConstraintNode* d, const AccessPath& ap,$/;"	f	class:SVF::NormalGepCGEdge
NormalGepCGEdge	svf/include/Graphs/ConsGEdge.h	/^class NormalGepCGEdge : public GepCGEdge$/;"	c	namespace:SVF
Not	z3.obj/bin/python/z3/z3.py	/^def Not(a, ctx=None):$/;"	f
NullPtr	svf/include/Graphs/IRGraph.h	/^        NullPtr,$/;"	e	enum:SVF::IRGraph::SYMTYPE
NullPtrSVFGNode	svf/include/Graphs/SVFG.h	/^typedef NullPtrVFGNode NullPtrSVFGNode;$/;"	t	namespace:SVF
NullPtrVFGNode	svf/include/Graphs/VFGNode.h	/^    NullPtrVFGNode(NodeID id, const PAGNode* n) : VFGNode(id,NPtr), node(n)$/;"	f	class:SVF::NullPtrVFGNode
NullPtrVFGNode	svf/include/Graphs/VFGNode.h	/^class NullPtrVFGNode : public VFGNode$/;"	c	namespace:SVF
NumGtIntRegions	svf/include/Util/NodeIDAllocator.h	/^        static const std::string NumGtIntRegions;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
NumGtIntRegions	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::NumGtIntRegions = "NumGtIntRegions";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
NumNonTrivialRegionObjects	svf/include/Util/NodeIDAllocator.h	/^        static const std::string NumNonTrivialRegionObjects;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
NumNonTrivialRegionObjects	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::NumNonTrivialRegionObjects = "NumNonTrivObj";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
NumObjects	svf/include/Util/NodeIDAllocator.h	/^        static const std::string NumObjects;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
NumObjects	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::NumObjects = "NumObjects";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
NumOfAveragePtsInRegion	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfAveragePtsInRegion;	\/\/\/< Number of average points-to set in region.$/;"	m	class:SVF::MemSSAStat
NumOfAveragePtsInRegion	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfAveragePtsInRegion = "AverageRegSize";	\/\/\/< Number of average points-to set in region.$/;"	m	class:MemSSAStat	file:
NumOfBBHasMSSAPhi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfBBHasMSSAPhi;	\/\/\/< Number of basic blocks which have mssa phi$/;"	m	class:SVF::MemSSAStat
NumOfBBHasMSSAPhi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfBBHasMSSAPhi = "BBHasMSSAPhi";	\/\/\/< Number of basic blocks which have mssa phi$/;"	m	class:MemSSAStat	file:
NumOfCSChi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfCSChi;	\/\/\/< Number of call site chi$/;"	m	class:SVF::MemSSAStat
NumOfCSChi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfCSChi = "CSChiNode";	\/\/\/< Number of call site chi$/;"	m	class:MemSSAStat	file:
NumOfCSHasChi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfCSHasChi;	\/\/\/< Number of call sites which have chi$/;"	m	class:SVF::MemSSAStat
NumOfCSHasChi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfCSHasChi = "CSHasChi";	\/\/\/< Number of call sites which have chi$/;"	m	class:MemSSAStat	file:
NumOfCSHasMu	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfCSHasMu;	\/\/\/< Number of call sites which have mu$/;"	m	class:SVF::MemSSAStat
NumOfCSHasMu	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfCSHasMu = "CSHasMu";	\/\/\/< Number of call sites which have mu$/;"	m	class:MemSSAStat	file:
NumOfCSMu	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfCSMu;	\/\/\/< Number of call site mu$/;"	m	class:SVF::MemSSAStat
NumOfCSMu	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfCSMu = "CSMuNode";	\/\/\/< Number of call site mu$/;"	m	class:MemSSAStat	file:
NumOfEntryChi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfEntryChi;	\/\/\/< Number of function entry chi$/;"	m	class:SVF::MemSSAStat
NumOfEntryChi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfEntryChi = "FunEntryChi";	\/\/\/< Number of function entry chi$/;"	m	class:MemSSAStat	file:
NumOfFunHasEntryChi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfFunHasEntryChi;	\/\/\/< Number of functions which have entry chi$/;"	m	class:SVF::MemSSAStat
NumOfFunHasEntryChi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfFunHasEntryChi = "FunHasEntryChi";	\/\/\/< Number of functions which have entry chi$/;"	m	class:MemSSAStat	file:
NumOfFunHasRetMu	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfFunHasRetMu;	\/\/\/< Number of functions which have return mu$/;"	m	class:SVF::MemSSAStat
NumOfFunHasRetMu	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfFunHasRetMu = "FunHasRetMu";	\/\/\/< Number of functions which have return mu$/;"	m	class:MemSSAStat	file:
NumOfLoadHasMu	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfLoadHasMu;	\/\/\/< Number of loads which have mu$/;"	m	class:SVF::MemSSAStat
NumOfLoadHasMu	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfLoadHasMu = "LoadHasMu";	\/\/\/< Number of loads which have mu$/;"	m	class:MemSSAStat	file:
NumOfLoadMu	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfLoadMu;	\/\/\/< Number of load mu$/;"	m	class:SVF::MemSSAStat
NumOfLoadMu	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfLoadMu = "LoadMuNode";	\/\/\/< Number of load mu$/;"	m	class:MemSSAStat	file:
NumOfMSSAPhi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfMSSAPhi;	\/\/\/< Number of mssa phi$/;"	m	class:SVF::MemSSAStat
NumOfMSSAPhi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfMSSAPhi = "MSSAPhi";	\/\/\/< Number of non-top level ptr phi$/;"	m	class:MemSSAStat	file:
NumOfMaxRegion	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfMaxRegion;	\/\/\/< Number of max points-to set in region.$/;"	m	class:SVF::MemSSAStat
NumOfMaxRegion	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfMaxRegion = "MaxRegSize";	\/\/\/< Number of max points-to set in region.$/;"	m	class:MemSSAStat	file:
NumOfMemRegions	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfMemRegions;	\/\/\/< Number of memory regions$/;"	m	class:SVF::MemSSAStat
NumOfMemRegions	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfMemRegions = "MemRegions";	\/\/\/< Number of memory regions$/;"	m	class:MemSSAStat	file:
NumOfRetMu	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfRetMu;	\/\/\/< Number of function return mu$/;"	m	class:SVF::MemSSAStat
NumOfRetMu	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfRetMu = "FunRetMu";	\/\/\/< Number of function return mu$/;"	m	class:MemSSAStat	file:
NumOfStoreChi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfStoreChi;	\/\/\/< Number of store chi$/;"	m	class:SVF::MemSSAStat
NumOfStoreChi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfStoreChi = "StoreChiNode";	\/\/\/< Number of store chi$/;"	m	class:MemSSAStat	file:
NumOfStoreHasChi	svf/include/Graphs/SVFGStat.h	/^    static const char* NumOfStoreHasChi;	\/\/\/< Number of stores which have chi$/;"	m	class:SVF::MemSSAStat
NumOfStoreHasChi	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::NumOfStoreHasChi = "StoreHasChi";	\/\/\/< Number of stores which have chi$/;"	m	class:MemSSAStat	file:
NumPerQueryStatMap	svf/include/DDA/DDAStat.h	/^    NUMStatMap NumPerQueryStatMap;$/;"	m	class:SVF::DDAStat
NumRegions	svf/include/Util/NodeIDAllocator.h	/^        static const std::string NumRegions;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
NumRegions	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::NumRegions = "NumRegions";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
Numeral	z3.obj/bin/python/z3/z3num.py	/^class Numeral:$/;"	c
O	svf/include/Graphs/GraphWriter.h	/^    std::ofstream &O;$/;"	m	class:SVF::GraphWriter
OCGDotGraph	svf/include/Util/Options.h	/^    static const Option<bool> OCGDotGraph;$/;"	m	class:SVF::Options
OOBResetVisited	svf/include/DDA/DDAVFSolver.h	/^    inline void OOBResetVisited()$/;"	f	class:SVF::DDAVFSolver
OPIncomingBBs	svf/include/Graphs/VFGNode.h	/^    typedef Map<u32_t,const ICFGNode*> OPIncomingBBs;$/;"	t	class:SVF::IntraPHIVFGNode
OPTIONS_H_	svf/include/Util/Options.h	4;"	d
OPTSVFG	svf/include/Util/Options.h	/^    static Option<bool> OPTSVFG;$/;"	m	class:SVF::Options
OPVars	svf/include/SVFIR/SVFStatements.h	/^    typedef std::vector<SVFVar*> OPVars;$/;"	t	class:SVF::MultiOpndStmt
OPVers	svf/include/Graphs/SVFGNode.h	/^    typedef Map<u32_t,const MRVer*> OPVers;$/;"	t	class:SVF::MSSAPHISVFGNode
OPVers	svf/include/Graphs/VFGNode.h	/^    typedef Map<u32_t,const PAGNode*> OPVers;$/;"	t	class:SVF::BinaryOPVFGNode
OPVers	svf/include/Graphs/VFGNode.h	/^    typedef Map<u32_t,const PAGNode*> OPVers;$/;"	t	class:SVF::CmpVFGNode
OPVers	svf/include/Graphs/VFGNode.h	/^    typedef Map<u32_t,const PAGNode*> OPVers;$/;"	t	class:SVF::PHIVFGNode
OPVers	svf/include/Graphs/VFGNode.h	/^    typedef Map<u32_t,const PAGNode*> OPVers;$/;"	t	class:SVF::UnaryOPVFGNode
OPVers	svf/include/MSSA/MSSAMuChi.h	/^    typedef Map<u32_t,const MRVer*> OPVers;$/;"	t	class:SVF::MSSAPHI
OR	svf/lib/Util/Z3Expr.cpp	/^Z3Expr Z3Expr::OR(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
OUT	svf/include/WPA/WPAStat.h	/^        OUT$/;"	e	enum:SVF::FlowSensitiveStat::ENUM_INOUT
ObjNode	svf/include/SVFIR/SVFValue.h	/^        ObjNode,                 \/\/ ├── Represents an object variable$/;"	e	enum:SVF::SVFValue::GNodeK
ObjSymbol	svf/include/Graphs/IRGraph.h	/^        ObjSymbol,$/;"	e	enum:SVF::IRGraph::SYMTYPE
ObjToClsNameSources	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef Map<const Value *, Set<const CallBase *>> ObjToClsNameSources;$/;"	t	class:SVF::ObjTypeInference
ObjToVersionMap	svf/include/WPA/VersionedFlowSensitive.h	/^    typedef Map<NodeID, Version> ObjToVersionMap;$/;"	t	class:SVF::VersionedFlowSensitive
ObjTypeInference	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^class ObjTypeInference$/;"	c	namespace:SVF
ObjTypeInfo	svf/include/SVFIR/ObjTypeInfo.h	/^    ObjTypeInfo(const SVFType* t, u32_t max) : type(t), flags(0), maxOffsetLimit(max), elemNum(max)$/;"	f	class:SVF::ObjTypeInfo
ObjTypeInfo	svf/include/SVFIR/ObjTypeInfo.h	/^class ObjTypeInfo$/;"	c	namespace:SVF
ObjVar	svf/include/SVFIR/SVFVariables.h	/^    ObjVar(NodeID i, PNODEK ty = ObjNode) : SVFVar(i, ty) {}$/;"	f	class:SVF::ObjVar
ObjVar	svf/include/SVFIR/SVFVariables.h	/^    ObjVar(NodeID i, const SVFType* svfType, PNODEK ty = ObjNode) :$/;"	f	class:SVF::ObjVar
ObjVar	svf/include/SVFIR/SVFVariables.h	/^class ObjVar: public SVFVar$/;"	c	namespace:SVF
OnTheFlyIterBudgetForStat	svf/include/MemoryModel/PointerAnalysis.h	/^    u32_t OnTheFlyIterBudgetForStat;$/;"	m	class:SVF::PointerAnalysis
OpCache	svf/include/MemoryModel/PersistentPointsToCache.h	/^    typedef Map<std::pair<PointsToID, PointsToID>, PointsToID> OpCache;$/;"	t	class:SVF::PersistentPointsToCache
OpICFGNodeVec	svf/include/SVFIR/SVFStatements.h	/^    typedef std::vector<const ICFGNode*> OpICFGNodeVec;$/;"	t	class:SVF::PhiStmt
OpIt	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    ItTy OpIt;$/;"	m	class:llvm::generic_bridge_gep_type_iterator
Optimize	z3.obj/bin/python/z3/z3.py	/^class Optimize(Z3PPObject):$/;"	c
OptimizeObj	z3.obj/bin/python/z3/z3types.py	/^class OptimizeObj(ctypes.c_void_p):$/;"	c
OptimizeObjective	z3.obj/bin/python/z3/z3.py	/^class OptimizeObjective:$/;"	c
Option	svf/include/Util/CommandLine.h	/^    Option(const std::string& name, const std::string& description, T init)$/;"	f	class:Option
Option	svf/include/Util/CommandLine.h	/^class Option : public OptionBase$/;"	c
Option	z3.obj/bin/python/z3/z3.py	/^def Option(re):$/;"	f
OptionBase	svf/include/Util/CommandLine.h	/^    OptionBase(std::string name, std::string description)$/;"	f	class:OptionBase
OptionBase	svf/include/Util/CommandLine.h	/^    OptionBase(std::string name, std::string description, PossibilityDescriptions possibilityDescriptions)$/;"	f	class:OptionBase
OptionBase	svf/include/Util/CommandLine.h	/^class OptionBase$/;"	c
OptionMap	svf/include/Util/CommandLine.h	/^    OptionMap(std::string name, std::string description, T init, OptionPossibilities possibilities)$/;"	f	class:OptionMap
OptionMap	svf/include/Util/CommandLine.h	/^class OptionMap : public OptionBase$/;"	c
OptionMultiple	svf/include/Util/CommandLine.h	/^    OptionMultiple(std::string description, OptionPossibilities possibilities)$/;"	f	class:OptionMultiple
OptionMultiple	svf/include/Util/CommandLine.h	/^class OptionMultiple : public OptionBase$/;"	c
OptionPossibilities	svf/include/Util/CommandLine.h	/^    typedef std::vector<OptionPossibility<T>> OptionPossibilities;$/;"	t	class:OptionMap
OptionPossibilities	svf/include/Util/CommandLine.h	/^    typedef std::vector<OptionPossibility<T>> OptionPossibilities;$/;"	t	class:OptionMultiple
Options	svf/include/Util/Options.h	/^class Options$/;"	c	namespace:SVF
Or	z3.obj/bin/python/z3/z3.py	/^def Or(*args):$/;"	f
OrElse	z3.obj/bin/python/z3/z3.py	/^def OrElse(*ts, **ks):$/;"	f
OrderedNodeSet	svf/include/Util/GeneralType.h	/^                    typedef OrderedSet<NodeID> OrderedNodeSet;$/;"	t	namespace:SVF
OriginalBvNumWords	svf/include/Util/NodeIDAllocator.h	/^        static const std::string OriginalBvNumWords;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
OriginalBvNumWords	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::OriginalBvNumWords = "OriginalBvWords";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
OriginalSbvNumWords	svf/include/Util/NodeIDAllocator.h	/^        static const std::string OriginalSbvNumWords;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
OriginalSbvNumWords	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::OriginalSbvNumWords = "OriginalSbvWords";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
OtherKd	svf/include/SVFIR/SVFValue.h	/^        OtherKd           \/\/ Other node kind$/;"	e	enum:SVF::SVFValue::GNodeK
OutEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    inline const_iterator OutEdgeBegin() const$/;"	f	class:SVF::GenericNode
OutEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    inline iterator OutEdgeBegin()$/;"	f	class:SVF::GenericNode
OutEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    inline const_iterator OutEdgeEnd() const$/;"	f	class:SVF::GenericNode
OutEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    inline iterator OutEdgeEnd()$/;"	f	class:SVF::GenericNode
OutEdgeKindToSetMap	svf/include/SVFIR/SVFVariables.h	/^    SVFStmt::KindToSVFStmtMapTy OutEdgeKindToSetMap;$/;"	m	class:SVF::SVFVar
OutEdges	svf/include/Graphs/GenericGraph.h	/^    GEdgeSetTy OutEdges; \/\/\/< all outgoing edge of this node$/;"	m	class:SVF::GenericNode
OutStream	svf/include/Util/GeneralType.h	/^typedef std::ostream OutStream;$/;"	t	namespace:SVF
OutputName	svf/include/Util/Options.h	/^    static const Option<std::string> OutputName;$/;"	m	class:SVF::Options
Overlap	svf/include/MemoryModel/AccessPath.h	/^        NonOverlap, Overlap, Subset, Superset, Same$/;"	e	enum:SVF::AccessPath::LSRelation
PAG	svf/include/SVFIR/SVFIR.h	/^typedef SVFIR PAG;$/;"	t	namespace:SVF
PAGBUILDER_H_	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	31;"	d
PAGBuilderFromFile	svf/include/SVFIR/PAGBuilderFromFile.h	/^    PAGBuilderFromFile(std::string f) :$/;"	f	class:SVF::PAGBuilderFromFile
PAGBuilderFromFile	svf/include/SVFIR/PAGBuilderFromFile.h	/^class PAGBuilderFromFile$/;"	c	namespace:SVF
PAGDotGraph	svf/include/Util/Options.h	/^    static const Option<bool> PAGDotGraph;$/;"	m	class:SVF::Options
PAGEdge	svf/include/Graphs/IRGraph.h	/^typedef SVFStmt PAGEdge;$/;"	t	namespace:SVF
PAGEdgeSetTy	svf/include/SVFIR/SVFStatements.h	/^    typedef SVFStmtSetTy PAGEdgeSetTy;$/;"	t	class:SVF::SVFStmt
PAGEdgeToFunMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const PAGEdge*, const FunObjVar*> PAGEdgeToFunMap;$/;"	t	class:SVF::MRGenerator
PAGEdgeToSetMapTy	svf/include/SVFIR/SVFStatements.h	/^    typedef Map<EdgeID, SVFStmtSetTy> PAGEdgeToSetMapTy;$/;"	t	class:SVF::SVFStmt
PAGEdgeToStmtVFGNodeMap	svf/include/Graphs/VFG.h	/^    PAGEdgeToStmtVFGNodeMapTy PAGEdgeToStmtVFGNodeMap;	\/\/\/< map a PAGEdge to its StmtVFGNode$/;"	m	class:SVF::VFG
PAGEdgeToStmtVFGNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGEdge*, StmtVFGNode*> PAGEdgeToStmtVFGNodeMapTy;$/;"	t	class:SVF::VFG
PAGNode	svf/include/Graphs/IRGraph.h	/^typedef SVFVar PAGNode;$/;"	t	namespace:SVF
PAGNodeSet	svf/include/DDA/DDAClient.h	/^    typedef OrderedSet<const PAGNode*> PAGNodeSet;$/;"	t	class:SVF::AliasDDAClient
PAGNodeSet	svf/include/Graphs/VFG.h	/^    typedef Set<const PAGNode*> PAGNodeSet;$/;"	t	class:SVF::VFG
PAGNodeToActualParmMap	svf/include/Graphs/VFG.h	/^    PAGNodeToActualParmMapTy PAGNodeToActualParmMap; \/\/\/< map a PAGNode to an actual parameter$/;"	m	class:SVF::VFG
PAGNodeToActualParmMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<std::pair<NodeID,const CallICFGNode*>, ActualParmVFGNode *> PAGNodeToActualParmMapTy;$/;"	t	class:SVF::VFG
PAGNodeToActualRetMap	svf/include/Graphs/VFG.h	/^    PAGNodeToActualRetMapTy PAGNodeToActualRetMap; \/\/\/< map a PAGNode to an actual return$/;"	m	class:SVF::VFG
PAGNodeToActualRetMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, ActualRetVFGNode *> PAGNodeToActualRetMapTy;$/;"	t	class:SVF::VFG
PAGNodeToBinaryOPVFGNodeMap	svf/include/Graphs/VFG.h	/^    PAGNodeToBinaryOPVFGNodeMapTy PAGNodeToBinaryOPVFGNodeMap;	\/\/\/< map a PAGNode to its BinaryOPVFGNode$/;"	m	class:SVF::VFG
PAGNodeToBinaryOPVFGNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, BinaryOPVFGNode*> PAGNodeToBinaryOPVFGNodeMapTy;$/;"	t	class:SVF::VFG
PAGNodeToBranchVFGNodeMap	svf/include/Graphs/VFG.h	/^    PAGNodeToBranchVFGNodeMapTy PAGNodeToBranchVFGNodeMap;	\/\/\/< map a PAGNode to its BranchVFGNode$/;"	m	class:SVF::VFG
PAGNodeToBranchVFGNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, BranchVFGNode*> PAGNodeToBranchVFGNodeMapTy;$/;"	t	class:SVF::VFG
PAGNodeToCmpVFGNodeMap	svf/include/Graphs/VFG.h	/^    PAGNodeToCmpVFGNodeMapTy PAGNodeToCmpVFGNodeMap;	\/\/\/< map a PAGNode to its CmpVFGNode$/;"	m	class:SVF::VFG
PAGNodeToCmpVFGNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, CmpVFGNode*> PAGNodeToCmpVFGNodeMapTy;$/;"	t	class:SVF::VFG
PAGNodeToDefMap	svf/include/Graphs/VFG.h	/^    PAGNodeToDefMapTy PAGNodeToDefMap;	\/\/\/< map a pag node to its definition SVG node$/;"	m	class:SVF::VFG
PAGNodeToDefMapTy	svf/include/Graphs/SVFG.h	/^    typedef Map<const PAGNode*, NodeID> PAGNodeToDefMapTy;$/;"	t	class:SVF::SVFG
PAGNodeToDefMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, NodeID> PAGNodeToDefMapTy;$/;"	t	class:SVF::VFG
PAGNodeToFormalParmMap	svf/include/Graphs/VFG.h	/^    PAGNodeToFormalParmMapTy PAGNodeToFormalParmMap; \/\/\/< map a PAGNode to a formal parameter$/;"	m	class:SVF::VFG
PAGNodeToFormalParmMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, FormalParmVFGNode *> PAGNodeToFormalParmMapTy;$/;"	t	class:SVF::VFG
PAGNodeToFormalRetMap	svf/include/Graphs/VFG.h	/^    PAGNodeToFormalRetMapTy PAGNodeToFormalRetMap; \/\/\/< map a PAGNode to a formal return$/;"	m	class:SVF::VFG
PAGNodeToFormalRetMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, FormalRetVFGNode *> PAGNodeToFormalRetMapTy;$/;"	t	class:SVF::VFG
PAGNodeToIntraPHIVFGNodeMap	svf/include/Graphs/VFG.h	/^    PAGNodeToPHIVFGNodeMapTy PAGNodeToIntraPHIVFGNodeMap;	\/\/\/< map a PAGNode to its PHIVFGNode$/;"	m	class:SVF::VFG
PAGNodeToPHIVFGNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, IntraPHIVFGNode*> PAGNodeToPHIVFGNodeMapTy;$/;"	t	class:SVF::VFG
PAGNodeToUnaryOPVFGNodeMap	svf/include/Graphs/VFG.h	/^    PAGNodeToUnaryOPVFGNodeMapTy PAGNodeToUnaryOPVFGNodeMap;	\/\/\/< map a PAGNode to its UnaryOPVFGNode$/;"	m	class:SVF::VFG
PAGNodeToUnaryOPVFGNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef Map<const PAGNode*, UnaryOPVFGNode*> PAGNodeToUnaryOPVFGNodeMapTy;$/;"	t	class:SVF::VFG
PAGPrint	svf/include/Util/Options.h	/^    static const Option<bool> PAGPrint;$/;"	m	class:SVF::Options
PARTIALBUFOVERFLOW	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
PARTIALLEAK	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
PARTIALNULLPTRDEREFERENCE	svf/include/Util/SVFBugReport.h	/^    enum BugType {FULLBUFOVERFLOW, PARTIALBUFOVERFLOW, NEVERFREE, PARTIALLEAK, DOUBLEFREE, FILENEVERCLOSE, FILEPARTIALCLOSE, FULLNULLPTRDEREFERENCE, PARTIALNULLPTRDEREFERENCE};$/;"	e	enum:SVF::GenericBug::BugType
PASelected	svf/include/Util/Options.h	/^    static OptionMultiple<PointerAnalysis::PTATY> PASelected;$/;"	m	class:SVF::Options
PATHALLOCATOR_H_	svf/include/SABER/SaberCondAllocator.h	31;"	d
PATH_LEAK	svf/include/SABER/LeakChecker.h	/^        PATH_LEAK,$/;"	e	enum:SVF::LeakChecker::LEAK_TYPE
PEDGEK	svf/include/SVFIR/SVFStatements.h	/^    enum PEDGEK$/;"	g	class:SVF::SVFStmt
PEGTransfer	svf/include/Util/Options.h	/^    static const Option<bool>  PEGTransfer;$/;"	m	class:SVF::Options
PERSISTENT_POINTSTO_H_	svf/include/MemoryModel/PersistentPointsToDS.h	15;"	d
PERSISTENT_POINTS_TO_H_	svf/include/MemoryModel/PersistentPointsToCache.h	15;"	d
PHI	svf/include/MSSA/MemSSA.h	/^    typedef MSSAPHI<Condition> PHI;$/;"	t	class:SVF::MemSSA
PHINode	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::PHINode PHINode;$/;"	t	namespace:SVF
PHINodeMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<const SVFVar*,PhiStmt*> PHINodeMap;$/;"	t	class:SVF::SVFIR
PHISVFGNode	svf/include/Graphs/SVFG.h	/^typedef PHIVFGNode PHISVFGNode;$/;"	t	namespace:SVF
PHISet	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::PHISet PHISet;$/;"	t	class:SVF::SVFG
PHISet	svf/include/MSSA/MemSSA.h	/^    typedef Set<PHI*> PHISet;$/;"	t	class:SVF::MemSSA
PHIVFGNode	svf/include/Graphs/VFGNode.h	/^class PHIVFGNode : public VFGNode$/;"	c	namespace:SVF
PHIVFGNode	svf/lib/Graphs/VFG.cpp	/^PHIVFGNode::PHIVFGNode(NodeID id, const PAGNode* r,VFGNodeK k): VFGNode(id, k), res(r)$/;"	f	class:PHIVFGNode
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	473;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	476;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	479;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	482;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	485;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	488;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	491;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	494;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	497;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	500;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	503;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	506;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	509;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	512;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	515;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	518;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	521;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	524;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	527;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	530;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	533;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	536;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	539;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	542;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	545;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	549;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	552;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	555;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	558;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	561;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	564;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	569;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	572;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	576;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	579;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	452;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	455;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	458;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	461;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	470;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	473;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	476;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	479;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	482;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	485;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	488;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	491;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	494;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	497;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	500;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	503;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	506;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	509;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	512;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	515;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	518;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	521;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	524;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	528;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	531;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	534;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	537;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	540;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	543;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	548;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	551;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	555;"	d	file:
PLATFORM_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	558;"	d	file:
PNODEK	svf/include/SVFIR/SVFVariables.h	/^    typedef GNodeK PNODEK;$/;"	t	class:SVF::SVFVar
POCRAlias	svf/include/CFL/CFLAlias.h	/^    POCRAlias(SVFIR* ir) : CFLAlias(ir)$/;"	f	class:SVF::POCRAlias
POCRAlias	svf/include/CFL/CFLAlias.h	/^class POCRAlias : public CFLAlias$/;"	c	namespace:SVF
POCRAlias	svf/include/Util/Options.h	/^    static const Option<bool> POCRAlias;$/;"	m	class:SVF::Options
POCRHybrid	svf/include/CFL/CFLAlias.h	/^    POCRHybrid(SVFIR* ir) : CFLAlias(ir)$/;"	f	class:SVF::POCRHybrid
POCRHybrid	svf/include/CFL/CFLAlias.h	/^class POCRHybrid : public CFLAlias$/;"	c	namespace:SVF
POCRHybrid	svf/include/Util/Options.h	/^    static const Option<bool> POCRHybrid;$/;"	m	class:SVF::Options
POCRHybridSolver	svf/include/CFL/CFLSolver.h	/^    POCRHybridSolver(CFLGraph* _graph, CFGrammar* _grammar) : POCRSolver(_graph, _grammar)$/;"	f	class:SVF::POCRHybridSolver
POCRHybridSolver	svf/include/CFL/CFLSolver.h	/^class POCRHybridSolver : public POCRSolver$/;"	c	namespace:SVF
POCRSolver	svf/include/CFL/CFLSolver.h	/^    POCRSolver(CFLGraph* _graph, CFGrammar* _grammar) : CFLSolver(_graph, _grammar)$/;"	f	class:SVF::POCRSolver
POCRSolver	svf/include/CFL/CFLSolver.h	/^class POCRSolver : public CFLSolver$/;"	c	namespace:SVF
POINTERANALYSIS_H_	svf/include/MemoryModel/PointerAnalysis.h	31;"	d
POINTSTO_H_	svf/include/MemoryModel/PointsTo.h	13;"	d
PP	z3.obj/bin/python/z3/z3printer.py	/^class PP:$/;"	c
PROGSLICE_H_	svf/include/SABER/ProgSlice.h	38;"	d
PROJECT_ANDERSENSFR_H	svf/include/WPA/AndersenPWC.h	31;"	d
PROJECT_CSC_H	svf/include/WPA/CSC.h	31;"	d
PStat	svf/include/Util/Options.h	/^    static const Option<bool> PStat;$/;"	m	class:SVF::Options
PTACALLGRAPH_H_	svf/include/Graphs/CallGraph.h	31;"	d
PTACGNodeSet	svf/include/MTA/TCT.h	/^    typedef Set<const CallGraphNode*> PTACGNodeSet;$/;"	t	class:SVF::TCT
PTAImplTy	svf/include/MemoryModel/PointerAnalysis.h	/^    enum PTAImplTy$/;"	g	class:SVF::PointerAnalysis
PTAName	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual const std::string PTAName() const$/;"	f	class:SVF::PointerAnalysis
PTAName	svf/include/WPA/Andersen.h	/^    virtual const std::string PTAName() const$/;"	f	class:SVF::Andersen
PTAStat	svf/include/Util/PTAStat.h	/^class PTAStat: public SVFStat$/;"	c	namespace:SVF
PTAStat	svf/lib/Util/PTAStat.cpp	/^PTAStat::PTAStat(PointerAnalysis* p) : SVFStat(),$/;"	f	class:PTAStat
PTATY	svf/include/MemoryModel/PointerAnalysis.h	/^    enum PTATY$/;"	g	class:SVF::PointerAnalysis
PTAVector	svf/include/DDA/DDAPass.h	/^    typedef std::vector<PointerAnalysis*> PTAVector;$/;"	t	class:SVF::DDAPass
PTAVector	svf/include/WPA/WPAPass.h	/^    typedef std::vector<PointerAnalysis*> PTAVector;$/;"	t	class:SVF::WPAPass
PTBackingType	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    enum PTBackingType$/;"	g	class:SVF::BVDataPTAImpl
PTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    PTData(bool reversePT = true, PTDataTy ty = PTDataTy::Base) : rev(reversePT), ptdTy(ty) { }$/;"	f	class:SVF::PTData
PTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^class PTData$/;"	c	namespace:SVF
PTDataTy	svf/include/MemoryModel/AbstractPointsToDS.h	/^    enum PTDataTy$/;"	g	class:SVF::PTData
PTDataTy	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::DFPTData
PTDataTy	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::DiffPTData
PTDataTy	svf/include/MemoryModel/AbstractPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::VersionedPTData
PTDataTy	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::MutableDFPTData
PTDataTy	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::MutableDiffPTData
PTDataTy	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::MutableIncDFPTData
PTDataTy	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::MutablePTData
PTDataTy	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::MutableVersionedPTData
PTDataTy	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::PersistentDFPTData
PTDataTy	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::PersistentDiffPTData
PTDataTy	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::PersistentIncDFPTData
PTDataTy	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::PersistentPTData
PTDataTy	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePTData::PTDataTy PTDataTy;$/;"	t	class:SVF::PersistentVersionedPTData
PTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PTData<CVar, Set<CVar>, CVar, CPtSet> PTDataTy;$/;"	t	class:SVF::CondPTAImpl
PTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PTData<NodeID, NodeSet, NodeID, PointsTo> PTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
PTNumStatMap	svf/include/Util/SVFStat.h	/^    NUMStatMap PTNumStatMap;$/;"	m	class:SVF::SVFStat
PTRONLYSVFG	svf/include/Graphs/VFG.h	/^        FULLSVFG, PTRONLYSVFG, FULLSVFG_OPT, PTRONLYSVFG_OPT$/;"	e	enum:SVF::VFG::VFGK
PTRONLYSVFG_OPT	svf/include/Graphs/VFG.h	/^        FULLSVFG, PTRONLYSVFG, FULLSVFG_OPT, PTRONLYSVFG_OPT$/;"	e	enum:SVF::VFG::VFGK
PTRTOINT	svf/include/SVFIR/SVFStatements.h	/^        PTRTOINT    \/\/ Pointer -> Integer$/;"	e	enum:SVF::CopyStmt::CopyKind
PTSAllPrint	svf/include/Util/Options.h	/^    static const Option<bool> PTSAllPrint;$/;"	m	class:SVF::Options
PTSPrint	svf/include/Util/Options.h	/^    static const Option<bool> PTSPrint;$/;"	m	class:SVF::Options
PTSToIDMap	svf/include/MemoryModel/PersistentPointsToCache.h	/^    typedef Map<Data, PointsToID> PTSToIDMap;$/;"	t	class:SVF::PersistentPointsToCache
PURE_ABSTRACT	svf-llvm/include/SVF-LLVM/DCHG.h	/^        PURE_ABSTRACT = 0x1,     \/\/ pure virtual abstract class$/;"	e	enum:SVF::DCHNode::__anon12
PURE_ABSTRACT	svf/include/Graphs/CHG.h	/^        PURE_ABSTRACT = 0x1, \/\/ pure virtual abstract class$/;"	e	enum:SVF::CHNode::__anon22
PWCDetect	svf/lib/WPA/AndersenSCD.cpp	/^void AndersenSCD::PWCDetect()$/;"	f	class:AndersenSCD
PWCDetect	svf/lib/WPA/AndersenSFR.cpp	/^void AndersenSFR::PWCDetect()$/;"	f	class:AndersenSFR
PairTy	svf/include/Graphs/GenericGraph.h	/^    typedef std::pair<SVF::NodeID, NodeType*> PairTy;$/;"	t	struct:SVF::GenericGraphTraits
ParAndThen	z3.obj/bin/python/z3/z3.py	/^def ParAndThen(t1, t2, ctx=None):$/;"	f
ParForEdgeSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef GenericNode<CallGraphNode, HareParForEdge>::GEdgeSetTy ParForEdgeSet;$/;"	t	class:SVF::HareParForEdge
ParForEdgeSet	svf/include/Graphs/ThreadCallGraph.h	/^    typedef HareParForEdge::ParForEdgeSet ParForEdgeSet;$/;"	t	class:SVF::ThreadCallGraph
ParOr	z3.obj/bin/python/z3/z3.py	/^def ParOr(*ts, **ks):$/;"	f
ParThen	z3.obj/bin/python/z3/z3.py	/^def ParThen(t1, t2, ctx=None):$/;"	f
ParamDescrs	z3.obj/bin/python/z3/z3types.py	/^class ParamDescrs(ctypes.c_void_p):$/;"	c
ParamDescrsRef	z3.obj/bin/python/z3/z3.py	/^class ParamDescrsRef:$/;"	c
Params	z3.obj/bin/python/z3/z3types.py	/^class Params(ctypes.c_void_p):$/;"	c
ParamsRef	z3.obj/bin/python/z3/z3.py	/^class ParamsRef:$/;"	c
PartialAlias	svf/include/SVFIR/SVFType.h	/^    PartialAlias,$/;"	e	enum:SVF::AliasResult
PartialBufferOverflowBug	svf/include/Util/SVFBugReport.h	/^    PartialBufferOverflowBug( const EventStack &eventStack,$/;"	f	class:SVF::PartialBufferOverflowBug
PartialBufferOverflowBug	svf/include/Util/SVFBugReport.h	/^class PartialBufferOverflowBug: public BufferOverflowBug$/;"	c	namespace:SVF
PartialLeakBug	svf/include/Util/SVFBugReport.h	/^    PartialLeakBug(const EventStack &bugEventStack):$/;"	f	class:SVF::PartialLeakBug
PartialLeakBug	svf/include/Util/SVFBugReport.h	/^class PartialLeakBug : public GenericBug$/;"	c	namespace:SVF
PartialNullPtrDereferenceBug	svf/include/Util/SVFBugReport.h	/^    PartialNullPtrDereferenceBug(const EventStack &bugEventStack):$/;"	f	class:SVF::PartialNullPtrDereferenceBug
PartialNullPtrDereferenceBug	svf/include/Util/SVFBugReport.h	/^class PartialNullPtrDereferenceBug : public GenericBug$/;"	c	namespace:SVF
PartialOrder	z3.obj/bin/python/z3/z3.py	/^def PartialOrder(a, index):$/;"	f
PathS_DDA	svf/include/MemoryModel/PointerAnalysis.h	/^        PathS_DDA,		\/\/\/< Guarded value-flow DDA$/;"	e	enum:SVF::PointerAnalysis::PTATY
Pattern	z3.obj/bin/python/z3/z3types.py	/^class Pattern(ctypes.c_void_p):$/;"	c
PatternRef	z3.obj/bin/python/z3/z3.py	/^class PatternRef(ExprRef):$/;"	c
PbEq	z3.obj/bin/python/z3/z3.py	/^def PbEq(args, k, ctx = None):$/;"	f
PbGe	z3.obj/bin/python/z3/z3.py	/^def PbGe(args, k):$/;"	f
PbLe	z3.obj/bin/python/z3/z3.py	/^def PbLe(args, k):$/;"	f
PersBase	svf/include/MemoryModel/AbstractPointsToDS.h	/^        PersBase,$/;"	e	enum:SVF::PTData::PTDataTy
PersDFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PersistentDFPTData<NodeID, NodeSet, NodeID, PointsTo> PersDFPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
PersDataFlow	svf/include/MemoryModel/AbstractPointsToDS.h	/^        PersDataFlow,$/;"	e	enum:SVF::PTData::PTDataTy
PersDiff	svf/include/MemoryModel/AbstractPointsToDS.h	/^        PersDiff,$/;"	e	enum:SVF::PTData::PTDataTy
PersDiffPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PersistentDiffPTData<NodeID, NodeSet, NodeID, PointsTo> PersDiffPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
PersIncDFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PersistentIncDFPTData<NodeID, NodeSet, NodeID, PointsTo> PersIncDFPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
PersIncDataFlow	svf/include/MemoryModel/AbstractPointsToDS.h	/^        PersIncDataFlow,$/;"	e	enum:SVF::PTData::PTDataTy
PersPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PersistentPTData<NodeID, NodeSet, NodeID, PointsTo> PersPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
PersVersioned	svf/include/MemoryModel/AbstractPointsToDS.h	/^        PersVersioned,$/;"	e	enum:SVF::PTData::PTDataTy
PersVersionedPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef PersistentVersionedPTData<NodeID, NodeSet, NodeID, PointsTo, VersionedVar, Set<VersionedVar>> PersVersionedPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
Persistent	svf/include/MemoryModel/PointerAnalysisImpl.h	/^        Persistent,$/;"	e	enum:SVF::BVDataPTAImpl::PTBackingType
PersistentDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    explicit PersistentDFPTData(PersistentPointsToCache<DataSet> &cache, bool reversePT = true, PTDataTy ty = PTDataTy::PersDataFlow)$/;"	f	class:SVF::PersistentDFPTData
PersistentDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^class PersistentDFPTData : public DFPTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
PersistentDiffPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    explicit PersistentDiffPTData(PersistentPointsToCache<DataSet> &cache, bool reversePT = true, PTDataTy ty = PTDataTy::PersDiff)$/;"	f	class:SVF::PersistentDiffPTData
PersistentDiffPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^class PersistentDiffPTData : public DiffPTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
PersistentIncDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    explicit PersistentIncDFPTData(PersistentPointsToCache<DataSet> &cache, bool reversePT = true, PTDataTy ty = BasePTData::PersIncDataFlow)$/;"	f	class:SVF::PersistentIncDFPTData
PersistentIncDFPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^class PersistentIncDFPTData : public PersistentDFPTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
PersistentPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    explicit PersistentPTData(PersistentPointsToCache<DataSet> &cache, bool reversePT = true, PTDataTy ty = PTDataTy::PersBase)$/;"	f	class:SVF::PersistentPTData
PersistentPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^class PersistentPTData : public PTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
PersistentPointsToCache	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PersistentPointsToCache(void) : idCounter(1)$/;"	f	class:SVF::PersistentPointsToCache
PersistentPointsToCache	svf/include/MemoryModel/PersistentPointsToCache.h	/^class PersistentPointsToCache$/;"	c	namespace:SVF
PersistentVersionedPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    explicit PersistentVersionedPTData(PersistentPointsToCache<DataSet> &cache, bool reversePT = true, PTDataTy ty = PTDataTy::PersVersioned)$/;"	f	class:SVF::PersistentVersionedPTData
PersistentVersionedPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^class PersistentVersionedPTData : public VersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet>$/;"	c	namespace:SVF
Phi	svf/include/SVFIR/SVFStatements.h	/^        Phi,$/;"	e	enum:SVF::SVFStmt::PEDGEK
PhiStmt	svf/include/SVFIR/SVFStatements.h	/^    PhiStmt() : MultiOpndStmt(SVFStmt::Phi) {}$/;"	f	class:SVF::PhiStmt
PhiStmt	svf/include/SVFIR/SVFStatements.h	/^    PhiStmt(SVFVar* s, const OPVars& opnds, const OpICFGNodeVec& icfgNodes)$/;"	f	class:SVF::PhiStmt
PhiStmt	svf/include/SVFIR/SVFStatements.h	/^class PhiStmt: public MultiOpndStmt$/;"	c	namespace:SVF
Pi	z3.obj/bin/python/z3/z3rcf.py	/^def Pi(ctx=None):$/;"	f
PiecewiseLinearOrder	z3.obj/bin/python/z3/z3.py	/^def PiecewiseLinearOrder(a, index):$/;"	f
PlainMappingFs	svf/include/Util/Options.h	/^    static const Option<bool> PlainMappingFs;$/;"	m	class:SVF::Options
Plus	z3.obj/bin/python/z3/z3.py	/^def Plus(re):$/;"	f
PointerAnalysis	svf/include/MemoryModel/PointerAnalysis.h	/^class PointerAnalysis$/;"	c	namespace:SVF
PointerAnalysis	svf/lib/MemoryModel/PointerAnalysis.cpp	/^PointerAnalysis::PointerAnalysis(SVFIR *p, PTATY ty, bool alias_check) : ptaTy(ty), stat(nullptr), callgraph(nullptr),$/;"	f	class:PointerAnalysis
PointerType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::PointerType PointerType;$/;"	t	namespace:SVF
PointsTo	svf/include/MemoryModel/PointsTo.h	/^class PointsTo$/;"	c	namespace:SVF
PointsTo	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::PointsTo()$/;"	f	class:SVF::PointsTo
PointsTo	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::PointsTo(const PointsTo &pt)$/;"	f	class:SVF::PointsTo
PointsToID	svf/include/Util/GeneralType.h	/^typedef unsigned PointsToID;$/;"	t	namespace:SVF
PointsToIterator	svf/include/MemoryModel/PointsTo.h	/^    class PointsToIterator$/;"	c	class:SVF::PointsTo
PointsToIterator	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::PointsToIterator::PointsToIterator(const PointsTo *pt, bool end)$/;"	f	class:SVF::PointsTo::PointsToIterator
PointsToIterator	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::PointsToIterator::PointsToIterator(const PointsToIterator &pt)$/;"	f	class:SVF::PointsTo::PointsToIterator
PointsToList	svf/include/MSSA/MemRegion.h	/^    typedef OrderedSet<NodeBS, SVFUtil::equalNodeBS> PointsToList;$/;"	t	class:SVF::MRGenerator
PointsToList	svf/include/Util/SVFUtil.h	/^typedef OrderedSet<PointsTo, equalPointsTo> PointsToList;$/;"	t	namespace:SVF::SVFUtil
PopulationCounter	svf/include/Util/SparseBitVector.h	/^template <typename T, std::size_t SizeOfT> struct PopulationCounter$/;"	s	namespace:SVF
PopulationCounter	svf/include/Util/SparseBitVector.h	/^template <typename T> struct PopulationCounter<T, 8>$/;"	s	namespace:SVF
PossibilityDescription	svf/include/Util/CommandLine.h	/^    typedef std::pair<std::string, std::string> PossibilityDescription;$/;"	t	class:OptionBase
PossibilityDescriptions	svf/include/Util/CommandLine.h	/^    typedef std::vector<std::pair<std::string, std::string>> PossibilityDescriptions;$/;"	t	class:OptionBase
PostDominatorTree	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::PostDominatorTree PostDominatorTree;$/;"	t	namespace:SVF
Precise	svf/include/WPA/WPAPass.h	/^        Precise			\/\/\/< return alias result by the most precise pta$/;"	e	enum:SVF::WPAPass::AliasCheckRule
PredictPtOcc	svf/include/Util/Options.h	/^    static const Option<bool> PredictPtOcc;$/;"	m	class:SVF::Options
PrefixOf	z3.obj/bin/python/z3/z3.py	/^def PrefixOf(a, b):$/;"	f
PrintAliasPairs	svf/lib/WPA/WPAPass.cpp	/^void WPAPass::PrintAliasPairs(PointerAnalysis* pta)$/;"	f	class:WPAPass
PrintAliases	svf/include/Util/Options.h	/^    static const Option<bool> PrintAliases;$/;"	m	class:SVF::Options
PrintCFL	svf/include/Util/Options.h	/^    static const Option<bool> PrintCFL;$/;"	m	class:SVF::Options
PrintCGGraph	svf/include/Util/Options.h	/^    static const Option<bool> PrintCGGraph;$/;"	m	class:SVF::Options
PrintCPts	svf/include/Util/Options.h	/^    static const Option<bool> PrintCPts;$/;"	m	class:SVF::Options
PrintDCHG	svf/include/Util/Options.h	/^    static const Option<bool> PrintDCHG;$/;"	m	class:SVF::Options
PrintFieldWithBasePrefix	svf/include/Util/Options.h	/^    static const Option<bool> PrintFieldWithBasePrefix;$/;"	m	class:SVF::Options
PrintGraph	svf/include/Graphs/GraphPrinter.h	/^    static void PrintGraph(SVF::OutStream &O, const std::string &GraphName,$/;"	f	class:SVF::GraphPrinter
PrintInterLev	svf/include/Util/Options.h	/^    static const Option<bool> PrintInterLev;$/;"	m	class:SVF::Options
PrintLockSpan	svf/include/Util/Options.h	/^    static const Option<bool> PrintLockSpan;$/;"	m	class:SVF::Options
PrintPathCond	svf/include/Util/Options.h	/^    static const Option<bool> PrintPathCond;$/;"	m	class:SVF::Options
PrintQueryPts	svf/include/Util/Options.h	/^    static const Option<bool> PrintQueryPts;$/;"	m	class:SVF::Options
Probe	z3.obj/bin/python/z3/z3.py	/^class Probe:$/;"	c
ProbeObj	z3.obj/bin/python/z3/z3types.py	/^class ProbeObj(ctypes.c_void_p):$/;"	c
Product	z3.obj/bin/python/z3/z3.py	/^def Product(*args):$/;"	f
Production	svf/include/CFL/CFGrammar.h	/^             typedef std::vector<Symbol> Production;$/;"	t	class:SVF::GrammarBase
Production	svf/include/CFL/CFLSolver.h	/^    typedef CFGrammar::Production Production;$/;"	t	class:SVF::CFLSolver
Productions	svf/include/CFL/CFGrammar.h	/^             typedef SymbolSet<Production> Productions;$/;"	t	class:SVF::GrammarBase
ProgSlice	svf/include/SABER/ProgSlice.h	/^    ProgSlice(const SVFGNode* src, SaberCondAllocator* pa, const SVFG* graph):$/;"	f	class:SVF::ProgSlice
ProgSlice	svf/include/SABER/ProgSlice.h	/^class ProgSlice$/;"	c	namespace:SVF
PseudoProbeInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::PseudoProbeInst PseudoProbeInst;$/;"	t	namespace:SVF
PtType	svf/include/Util/Options.h	/^    static const OptionMap<PointsTo::Type> PtType;$/;"	m	class:SVF::Options
Ptr	svf/include/Util/iterator.h	/^    mutable T Ptr;$/;"	m	class:SVF::pointer_iterator
PtrToBVPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef Map<NodeID,PointsTo> PtrToBVPtsMap; \/\/\/ map a pointer to its BitVector points-to representation$/;"	t	class:SVF::CondPTAImpl
PtrToCPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef Map<NodeID,CPtSet> PtrToCPtsMap;	 \/\/\/ map a pointer to its conditional points-to set$/;"	t	class:SVF::CondPTAImpl
PtrToNSMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef Map<NodeID, NodeSet> PtrToNSMap;$/;"	t	class:SVF::CondPTAImpl
PtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef Map<Key, DataSet> PtsMap;$/;"	t	class:SVF::MutablePTData
PtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BaseMutPTData::PtsMap PtsMap;$/;"	t	class:SVF::MutableDFPTData
PtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename MutablePTData<Key, KeySet, Data, DataSet>::PtsMap PtsMap;$/;"	t	class:SVF::MutableDiffPTData
PtsMap	svf/include/WPA/FlowSensitive.h	/^    typedef BVDataPTAImpl::MutDFPTDataTy::PtsMap PtsMap;$/;"	t	class:SVF::FlowSensitive
PtsMap	svf/include/WPA/WPAStat.h	/^    typedef FlowSensitive::PtsMap PtsMap;$/;"	t	class:SVF::FlowSensitiveStat
PtsMapConstIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename BaseMutPTData::PtsMapConstIter PtsMapConstIter;$/;"	t	class:SVF::MutableDFPTData
PtsMapConstIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename PtsMap::const_iterator PtsMapConstIter;$/;"	t	class:SVF::MutablePTData
PtsMapIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename PtsMap::iterator PtsMapIter;$/;"	t	class:SVF::MutablePTData
PtsToRepPtsSetMap	svf/include/MSSA/MemRegion.h	/^    typedef OrderedMap<NodeBS, NodeBS, SVFUtil::equalNodeBS> PtsToRepPtsSetMap;$/;"	t	class:SVF::MRGenerator
PtsToSubPtsMap	svf/include/MSSA/MemPartition.h	/^    typedef OrderedMap<NodeBS, PointsToList> PtsToSubPtsMap;$/;"	t	class:SVF::IntraDisjointMRG
Q	z3.obj/bin/python/z3/z3.py	/^def Q(a, b, ctx=None):$/;"	f
QuantifierRef	z3.obj/bin/python/z3/z3.py	/^class QuantifierRef(BoolRef):$/;"	c
RCFNum	z3.obj/bin/python/z3/z3rcf.py	/^class RCFNum:$/;"	c
RCFNumObj	z3.obj/bin/python/z3/z3types.py	/^class RCFNumObj(ctypes.c_void_p):$/;"	c
RCG_H_	svf/include/Graphs/ThreadCallGraph.h	31;"	d
RELATIONTYPE	svf/include/Graphs/CHG.h	/^    } RELATIONTYPE;$/;"	t	class:SVF::CHGraph	typeref:enum:SVF::CHGraph::__anon23
RETMU	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::RETMU RETMU;$/;"	t	class:SVF::SVFG
RETMU	svf/include/MSSA/MemSSA.h	/^    typedef RetMU<Condition> RETMU;$/;"	t	class:SVF::MemSSA
REVERSE_DENSE	svf/include/Util/NodeIDAllocator.h	/^        REVERSE_DENSE,$/;"	e	enum:SVF::NodeIDAllocator::Strategy
RM	Release-build/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/AE/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/CFL/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/DDA/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/Example/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/LLVM2SVF/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/MTA/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/SABER/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf-llvm/tools/WPA/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RM	Release-build/svf/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
RNA	z3.obj/bin/python/z3/z3.py	/^def RNA (ctx=None):$/;"	f
RNA	z3.obj/include/z3++.h	/^        RNA,$/;"	e	enum:z3::rounding_mode
RNE	z3.obj/bin/python/z3/z3.py	/^def RNE (ctx=None):$/;"	f
RNE	z3.obj/include/z3++.h	/^        RNE,$/;"	e	enum:z3::rounding_mode
RSY	svf/lib/AE/Core/RelationSolver.cpp	/^AbstractState RelationSolver::RSY(const AbstractState& domain, const Z3Expr& phi)$/;"	f	class:RelationSolver
RSY_time	svf-llvm/tools/AE/ae.cpp	/^    AbstractState RSY_time(AbstractState& inv, const Z3Expr& phi,$/;"	f	class:SymblicAbstractionTest
RTN	z3.obj/bin/python/z3/z3.py	/^def RTN(ctx=None):$/;"	f
RTN	z3.obj/include/z3++.h	/^        RTN,$/;"	e	enum:z3::rounding_mode
RTP	z3.obj/bin/python/z3/z3.py	/^def RTP(ctx=None):$/;"	f
RTP	z3.obj/include/z3++.h	/^        RTP,$/;"	e	enum:z3::rounding_mode
RTZ	z3.obj/bin/python/z3/z3.py	/^def RTZ(ctx=None):$/;"	f
RTZ	z3.obj/include/z3++.h	/^        RTZ$/;"	e	enum:z3::rounding_mode
RaceCheck	svf/include/Util/Options.h	/^    static const Option<bool> RaceCheck;$/;"	m	class:SVF::Options
Range	z3.obj/bin/python/z3/z3.py	/^def Range(lo, hi, ctx = None):$/;"	f
RatNumRef	z3.obj/bin/python/z3/z3.py	/^class RatNumRef(ArithRef):$/;"	c
RatVal	z3.obj/bin/python/z3/z3.py	/^def RatVal(a, b, ctx=None):$/;"	f
Re	z3.obj/bin/python/z3/z3.py	/^def Re(s, ctx=None):$/;"	f
ReRef	z3.obj/bin/python/z3/z3.py	/^class ReRef(ExprRef):$/;"	c
ReSort	z3.obj/bin/python/z3/z3.py	/^def ReSort(s):$/;"	f
ReSortRef	z3.obj/bin/python/z3/z3.py	/^class ReSortRef(SortRef):$/;"	c
ReadAnder	svf/include/Util/Options.h	/^    static const Option<std::string> ReadAnder;$/;"	m	class:SVF::Options
ReadJson	svf/include/Util/Options.h	/^    static const Option<bool> ReadJson;$/;"	m	class:SVF::Options
ReadSVFG	svf/include/Util/Options.h	/^    static const Option<std::string> ReadSVFG;$/;"	m	class:SVF::Options
Real	z3.obj/bin/python/z3/z3.py	/^def Real(name, ctx=None):$/;"	f
RealSort	z3.obj/bin/python/z3/z3.py	/^def RealSort(ctx=None):$/;"	f
RealVal	z3.obj/bin/python/z3/z3.py	/^def RealVal(val, ctx=None):$/;"	f
RealVar	z3.obj/bin/python/z3/z3.py	/^def RealVar(idx, ctx=None):$/;"	f
RealVarVector	z3.obj/bin/python/z3/z3.py	/^def RealVarVector(n, ctx=None):$/;"	f
RealVector	z3.obj/bin/python/z3/z3.py	/^def RealVector(prefix, sz, ctx=None):$/;"	f
Reals	z3.obj/bin/python/z3/z3.py	/^def Reals(names, ctx=None):$/;"	f
RecAddDefinition	z3.obj/bin/python/z3/z3.py	/^def RecAddDefinition(f, args, body):$/;"	f
RecFunction	z3.obj/bin/python/z3/z3.py	/^def RecFunction(name, *sig):$/;"	f
Ref	svf/include/SVFIR/SVFType.h	/^    Ref,$/;"	e	enum:SVF::ModRefInfo
ReferenceProxy	svf/include/Util/iterator.h	/^        ReferenceProxy(DerivedT I) : I(std::move(I)) {}$/;"	f	class:SVF::iter_facade_base::ReferenceProxy
ReferenceProxy	svf/include/Util/iterator.h	/^    class ReferenceProxy$/;"	c	class:SVF::iter_facade_base
RegionAlign	svf/include/Util/Options.h	/^    static const Option<bool> RegionAlign;$/;"	m	class:SVF::Options
RegionedClustering	svf/include/Util/Options.h	/^    static const Option<bool> RegionedClustering;$/;"	m	class:SVF::Options
RegioningTime	svf/include/Util/NodeIDAllocator.h	/^        static const std::string RegioningTime;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
RegioningTime	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::RegioningTime = "RegioningTime";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
RelExeState	svf/include/AE/Core/RelExeState.h	/^    RelExeState(VarToValMap &varToVal, AddrToValMap&locToVal) : _varToVal(varToVal), _addrToVal(locToVal) {}$/;"	f	class:SVF::RelExeState
RelExeState	svf/include/AE/Core/RelExeState.h	/^    RelExeState(const RelExeState &rhs) : _varToVal(rhs.getVarToVal()), _addrToVal(rhs.getLocToVal())$/;"	f	class:SVF::RelExeState
RelExeState	svf/include/AE/Core/RelExeState.h	/^class RelExeState$/;"	c	namespace:SVF
RelationSolver	svf/include/AE/Core/RelationSolver.h	/^class RelationSolver$/;"	c	namespace:SVF
RenameChiSet	svf/include/MSSA/MemSSA.h	/^    inline void RenameChiSet(const CHISet& chiSet, MRVector& memRegs)$/;"	f	class:SVF::MemSSA
RenameMuSet	svf/include/MSSA/MemSSA.h	/^    inline void RenameMuSet(const MUSet& muSet)$/;"	f	class:SVF::MemSSA
RenamePhiOps	svf/include/MSSA/MemSSA.h	/^    inline void RenamePhiOps(const PHISet& phiSet, u32_t pos, MRVector&)$/;"	f	class:SVF::MemSSA
RenamePhiRes	svf/include/MSSA/MemSSA.h	/^    inline void RenamePhiRes(const PHISet& phiSet, MRVector& memRegs)$/;"	f	class:SVF::MemSSA
Repeat	z3.obj/bin/python/z3/z3.py	/^def Repeat(t, max=4294967295, ctx=None):$/;"	f
RepeatBitVec	z3.obj/bin/python/z3/z3.py	/^def RepeatBitVec(n, a):$/;"	f
Replace	z3.obj/bin/python/z3/z3.py	/^def Replace(s, src, dst):$/;"	f
ResumeInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ResumeInst ResumeInst;$/;"	t	namespace:SVF
Ret	svf/include/SVFIR/SVFStatements.h	/^        Ret,$/;"	e	enum:SVF::SVFStmt::PEDGEK
RetCF	svf/include/Graphs/ICFGEdge.h	/^        RetCF,$/;"	e	enum:SVF::ICFGEdge::ICFGEdgeK
RetCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    RetCFGEdge(ICFGNode* s, ICFGNode* d)$/;"	f	class:SVF::RetCFGEdge
RetCFGEdge	svf/include/Graphs/ICFGEdge.h	/^class RetCFGEdge : public ICFGEdge$/;"	c	namespace:SVF
RetDirSVFGEdge	svf/include/Graphs/VFGEdge.h	/^    RetDirSVFGEdge(VFGNode* s, VFGNode* d, CallSiteID id):$/;"	f	class:SVF::RetDirSVFGEdge
RetDirSVFGEdge	svf/include/Graphs/VFGEdge.h	/^class RetDirSVFGEdge : public DirectSVFGEdge$/;"	c	namespace:SVF
RetDirVF	svf/include/Graphs/VFGEdge.h	/^        RetDirVF,$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
RetICFGNode	svf/include/Graphs/ICFGNode.h	/^    RetICFGNode(NodeID id)$/;"	f	class:SVF::RetICFGNode
RetICFGNode	svf/include/Graphs/ICFGNode.h	/^    RetICFGNode(NodeID id, CallICFGNode* cb) :$/;"	f	class:SVF::RetICFGNode
RetICFGNode	svf/include/Graphs/ICFGNode.h	/^class RetICFGNode : public InterICFGNode$/;"	c	namespace:SVF
RetIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^    RetIndSVFGEdge(VFGNode* s, VFGNode* d, CallSiteID id):$/;"	f	class:SVF::RetIndSVFGEdge
RetIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^class RetIndSVFGEdge : public IndirectSVFGEdge$/;"	c	namespace:SVF
RetIndVF	svf/include/Graphs/VFGEdge.h	/^        RetIndVF,$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
RetMSSAMU	svf/include/MSSA/MSSAMuChi.h	/^        LoadMSSAMU, CallMSSAMU, RetMSSAMU$/;"	e	enum:SVF::MSSAMU::MUTYPE
RetMU	svf/include/MSSA/MSSAMuChi.h	/^    RetMU(const FunObjVar* f, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::RetMU
RetMU	svf/include/MSSA/MSSAMuChi.h	/^class RetMU : public MSSAMU<Cond>$/;"	c	namespace:SVF
RetPE	svf/include/SVFIR/SVFStatements.h	/^    RetPE(GEdgeFlag k = SVFStmt::Ret) : AssignStmt(k), call{}, exit{} {}$/;"	f	class:SVF::RetPE
RetPE	svf/include/SVFIR/SVFStatements.h	/^class RetPE: public AssignStmt$/;"	c	namespace:SVF
RetPE	svf/lib/SVFIR/SVFStatements.cpp	/^RetPE::RetPE(SVFVar* s, SVFVar* d, const CallICFGNode* i,$/;"	f	class:RetPE
RetPESet	svf/include/Graphs/ICFGNode.h	/^    typedef Set<const RetPE *> RetPESet;$/;"	t	class:SVF::ICFGNode
RetPESet	svf/include/Graphs/VFG.h	/^    typedef FormalRetVFGNode::RetPESet RetPESet;$/;"	t	class:SVF::VFG
RetPESet	svf/include/Graphs/VFGNode.h	/^    typedef Set<const RetPE*> RetPESet;$/;"	t	class:SVF::VFGNode
RetSymbol	svf/include/Graphs/IRGraph.h	/^        RetSymbol,$/;"	e	enum:SVF::IRGraph::SYMTYPE
RetValNode	svf/include/SVFIR/SVFValue.h	/^        RetValNode,              \/\/ ├── Represents a return value node$/;"	e	enum:SVF::SVFValue::GNodeK
RetValPN	svf/include/SVFIR/SVFVariables.h	/^    RetValPN(NodeID i) : ValVar(i, RetValNode) {}$/;"	f	class:SVF::RetValPN
RetValPN	svf/include/SVFIR/SVFVariables.h	/^class RetValPN : public ValVar$/;"	c	namespace:SVF
RetValPN	svf/lib/SVFIR/SVFVariables.cpp	/^RetValPN::RetValPN(NodeID i, const FunObjVar* node, const SVFType* svfType, const ICFGNode* icn)$/;"	f	class:RetValPN
ReturnInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ReturnInst ReturnInst;$/;"	t	namespace:SVF
RevPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef Map<Data, KeySet> RevPtsMap;$/;"	t	class:SVF::MutablePTData
RevPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef Map<Data, KeySet> RevPtsMap;$/;"	t	class:SVF::PersistentPTData
RevPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename BasePersPTData::RevPtsMap RevPtsMap;$/;"	t	class:SVF::PersistentDiffPTData
RotateLeft	z3.obj/bin/python/z3/z3.py	/^def RotateLeft(a, b):$/;"	f
RotateRight	z3.obj/bin/python/z3/z3.py	/^def RotateRight(a, b):$/;"	f
RoundNearestTiesToAway	z3.obj/bin/python/z3/z3.py	/^def RoundNearestTiesToAway(ctx=None):$/;"	f
RoundNearestTiesToEven	z3.obj/bin/python/z3/z3.py	/^def RoundNearestTiesToEven(ctx=None):$/;"	f
RoundTowardNegative	z3.obj/bin/python/z3/z3.py	/^def RoundTowardNegative(ctx=None):$/;"	f
RoundTowardPositive	z3.obj/bin/python/z3/z3.py	/^def RoundTowardPositive(ctx=None):$/;"	f
RoundTowardZero	z3.obj/bin/python/z3/z3.py	/^def RoundTowardZero(ctx=None):$/;"	f
RunUncallFuncs	svf/include/Util/Options.h	/^    static const Option<bool> RunUncallFuncs;$/;"	m	class:SVF::Options
SABERCHECKERAPI_H_	svf/include/SABER/SaberCheckerAPI.h	31;"	d
SABERFULLSVFG	svf/include/Util/Options.h	/^    static const Option<bool> SABERFULLSVFG;$/;"	m	class:SVF::Options
SABERSVFGBUILDER_H_	svf/include/SABER/SaberSVFGBuilder.h	31;"	d
SBV	svf/include/MemoryModel/PointsTo.h	/^        SBV,$/;"	e	enum:SVF::PointsTo::Type
SB_FESIBLE	svf/include/Util/Annotator.h	/^    const char* SB_FESIBLE;$/;"	m	class:SVF::Annotator
SB_INFESIBLE	svf/include/Util/Annotator.h	/^    const char* SB_INFESIBLE;$/;"	m	class:SVF::Annotator
SB_SLICESINK	svf/include/Util/Annotator.h	/^    const char* SB_SLICESINK;$/;"	m	class:SVF::Annotator
SB_SLICESOURCE	svf/include/Util/Annotator.h	/^    const char* SB_SLICESOURCE;$/;"	m	class:SVF::Annotator
SCALAR	svf-llvm/include/SVF-LLVM/DCHG.h	/^        SCALAR = 0x08            \/\/ non-class scalar type$/;"	e	enum:SVF::DCHNode::__anon12
SCC	svf/include/MSSA/MemRegion.h	/^    typedef SCCDetection<CallGraph*> SCC;$/;"	t	class:SVF::MRGenerator
SCC	svf/include/WPA/VersionedFlowSensitive.h	/^    class SCC$/;"	c	class:SVF::VersionedFlowSensitive
SCC	svf/include/WPA/WPASolver.h	/^    typedef SCCDetection<GraphType> SCC;$/;"	t	class:SVF::WPASolver
SCCDetect	svf/include/WPA/WPAFSSolver.h	/^    virtual NodeStack& SCCDetect()$/;"	f	class:SVF::WPAFSSolver
SCCDetect	svf/include/WPA/WPASolver.h	/^    virtual inline NodeStack& SCCDetect()$/;"	f	class:SVF::WPASolver
SCCDetect	svf/include/WPA/WPASolver.h	/^    virtual inline NodeStack& SCCDetect(NodeSet& candidates)$/;"	f	class:SVF::WPASolver
SCCDetect	svf/lib/WPA/Andersen.cpp	/^NodeStack& Andersen::SCCDetect()$/;"	f	class:Andersen
SCCDetect	svf/lib/WPA/AndersenSCD.cpp	/^NodeStack& AndersenSCD::SCCDetect()$/;"	f	class:AndersenSCD
SCCDetect	svf/lib/WPA/FlowSensitive.cpp	/^NodeStack& FlowSensitive::SCCDetect()$/;"	f	class:FlowSensitive
SCCDetection	svf/include/Graphs/SCC.h	/^    SCCDetection(const GraphType &GT)$/;"	f	class:SVF::SCCDetection
SCCDetection	svf/include/Graphs/SCC.h	/^class SCCDetection$/;"	c	namespace:SVF
SCC_H_	svf/include/Graphs/SCC.h	41;"	d
SCEV	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SCEV SCEV;$/;"	t	namespace:SVF
SCEVAddRecExpr	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SCEVAddRecExpr SCEVAddRecExpr;$/;"	t	namespace:SVF
SCEVConstant	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SCEVConstant SCEVConstant;$/;"	t	namespace:SVF
SEQ	svf/include/Util/NodeIDAllocator.h	/^        SEQ,$/;"	e	enum:SVF::NodeIDAllocator::Strategy
SEXT	svf/include/SVFIR/SVFStatements.h	/^        SEXT,       \/\/ Sign extend integers$/;"	e	enum:SVF::CopyStmt::CopyKind
SFRTrait	svf/include/WPA/AndersenPWC.h	/^    typedef Map<NodeID, std::pair<NodeID, NodeSet>> SFRTrait;$/;"	t	class:SVF::AndersenSFR
SHELL	Release-build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/AE/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/CFL/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/DDA/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/Example/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/LLVM2SVF/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/MTA/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/SABER/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf-llvm/tools/WPA/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Release-build/svf/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	319;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	367;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	307;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	355;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
SIMULATE_ID	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	355;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	368;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	61;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	314;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	356;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
SIMULATE_VERSION_MAJOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	327;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	356;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	344;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
SIMULATE_VERSION_MINOR	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
SIMULATE_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
SIMULATE_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	371;"	d	file:
SIMULATE_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
SIMULATE_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	359;"	d	file:
SIMULATE_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	61;"	d	file:
SIMULATE_VERSION_PATCH	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
SITOFP	svf/include/SVFIR/SVFStatements.h	/^        SITOFP,     \/\/ SInt -> floating point$/;"	e	enum:SVF::CopyStmt::CopyKind
SMDiagnostic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SMDiagnostic SMDiagnostic;$/;"	t	namespace:SVF
SPARSEBITVECTOR_H	svf/include/Util/SparseBitVector.h	9;"	d
SRCSNKANALYSIS_H_	svf/include/SABER/SrcSnkDDA.h	38;"	d
SRem	z3.obj/bin/python/z3/z3.py	/^def SRem(a, b):$/;"	f
SSACHI	svf/include/MSSA/MSSAMuChi.h	/^        SSACHI,$/;"	e	enum:SVF::MSSADEF::DEFTYPE
SSAPHI	svf/include/MSSA/MSSAMuChi.h	/^        SSAPHI$/;"	e	enum:SVF::MSSADEF::DEFTYPE
SSARename	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::SSARename(const FunObjVar& fun)$/;"	f	class:MemSSA
SSARenameBB	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::SSARenameBB(const SVFBasicBlock& bb)$/;"	f	class:MemSSA
SSE_FUNC_PROCESS	svf/lib/AE/Svfexe/AbsExtAPI.cpp	40;"	d	file:
STACK_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        STACK_OBJ = 0x8,  \/\/ object is a stack variable$/;"	e	enum:SVF::ObjTypeInfo::__anon18
STATIC_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        STATIC_OBJ = 0x4,  \/\/ object is a static variable allocated before main$/;"	e	enum:SVF::ObjTypeInfo::__anon18
STD_DEF	svf-llvm/include/SVF-LLVM/DCHG.h	/^        STD_DEF       \/\/ Edges defined by the standard like (int -std-> char)$/;"	e	enum:SVF::DCHEdge::__anon11
STORECHI	svf/include/Graphs/SVFG.h	/^    typedef MemSSA::STORECHI STORECHI;$/;"	t	class:SVF::SVFG
STORECHI	svf/include/MSSA/MemSSA.h	/^    typedef StoreCHI<Condition> STORECHI;$/;"	t	class:SVF::MemSSA
STRCAT	svf/include/AE/Svfexe/AbsExtAPI.h	/^    enum ExtAPIType { UNCLASSIFIED, MEMCPY, MEMSET, STRCPY, STRCAT };$/;"	e	enum:SVF::AbsExtAPI::ExtAPIType
STRCPY	svf/include/AE/Svfexe/AbsExtAPI.h	/^    enum ExtAPIType { UNCLASSIFIED, MEMCPY, MEMSET, STRCPY, STRCAT };$/;"	e	enum:SVF::AbsExtAPI::ExtAPIType
STRINGIFY	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	469;"	d	file:
STRINGIFY	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	448;"	d	file:
STRINGIFY_HELPER	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	468;"	d	file:
STRINGIFY_HELPER	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	447;"	d	file:
SVF	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/CHGBuilder.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/CppUtil.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/DCHG.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/LLVMLoopAnalysis.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^namespace SVF$/;"	n
SVF	svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h	/^namespace SVF$/;"	n
SVF	svf-llvm/lib/LLVMUtil.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/include/AE/Core/AbstractState.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/AbstractValue.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/AddressValue.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/ICFGWTO.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/IntervalValue.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/NumericValue.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/RelExeState.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Core/RelationSolver.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Svfexe/AEDetector.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Svfexe/AbsExtAPI.h	/^namespace SVF$/;"	n
SVF	svf/include/AE/Svfexe/AbstractInterpretation.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFGNormalizer.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFGrammar.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLAlias.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLBase.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLGramGraphChecker.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLGraphBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLSVFGBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLSolver.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLStat.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/CFLVF.h	/^namespace SVF$/;"	n
SVF	svf/include/CFL/GrammarBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/DDA/ContextDDA.h	/^namespace SVF$/;"	n
SVF	svf/include/DDA/DDAClient.h	/^namespace SVF$/;"	n
SVF	svf/include/DDA/DDAPass.h	/^namespace SVF$/;"	n
SVF	svf/include/DDA/DDAStat.h	/^namespace SVF$/;"	n
SVF	svf/include/DDA/DDAVFSolver.h	/^namespace SVF$/;"	n
SVF	svf/include/DDA/FlowDDA.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/BasicBlockG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/CDG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/CFLGraph.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/CHG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/CallGraph.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ConsG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ConsGEdge.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ConsGNode.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/DOTGraphTraits.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/GenericGraph.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/GraphPrinter.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/GraphTraits.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/GraphWriter.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ICFG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ICFGEdge.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ICFGNode.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ICFGStat.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/IRGraph.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/SCC.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/SVFG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/SVFGEdge.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/SVFGNode.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/SVFGOPT.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/SVFGStat.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/ThreadCallGraph.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/VFG.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/VFGEdge.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/VFGNode.h	/^namespace SVF$/;"	n
SVF	svf/include/Graphs/WTO.h	/^namespace SVF$/;"	n
SVF	svf/include/MSSA/MSSAMuChi.h	/^namespace SVF$/;"	n
SVF	svf/include/MSSA/MemPartition.h	/^namespace SVF$/;"	n
SVF	svf/include/MSSA/MemRegion.h	/^namespace SVF$/;"	n
SVF	svf/include/MSSA/MemSSA.h	/^namespace SVF$/;"	n
SVF	svf/include/MSSA/SVFGBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/MTA/LockAnalysis.h	/^namespace SVF$/;"	n
SVF	svf/include/MTA/MHP.h	/^namespace SVF$/;"	n
SVF	svf/include/MTA/MTA.h	/^namespace SVF$/;"	n
SVF	svf/include/MTA/MTAStat.h	/^namespace SVF$/;"	n
SVF	svf/include/MTA/TCT.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/AbstractPointsToDS.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/AccessPath.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/ConditionalPT.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/MutablePointsToDS.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/PersistentPointsToCache.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/PersistentPointsToDS.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/PointerAnalysis.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/PointerAnalysisImpl.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/PointsTo.h	/^namespace SVF$/;"	n
SVF	svf/include/MemoryModel/SVFLoop.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/DoubleFreeChecker.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/FileChecker.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/LeakChecker.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/ProgSlice.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/SaberCheckerAPI.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/SaberCondAllocator.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/SaberSVFGBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/SrcSnkDDA.h	/^namespace SVF$/;"	n
SVF	svf/include/SABER/SrcSnkSolver.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/ObjTypeInfo.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/PAGBuilderFromFile.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/SVFIR.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/SVFStatements.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/SVFType.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/SVFValue.h	/^namespace SVF$/;"	n
SVF	svf/include/SVFIR/SVFVariables.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/Annotator.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/BitVector.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/CDGBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/CallGraphBuilder.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/Casting.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/CoreBitVector.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/CxtStmt.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/DPItem.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/ExtAPI.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/GeneralType.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/GraphReachSolver.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/NodeIDAllocator.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/Options.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/PTAStat.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/SVFBugReport.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/SVFLoopAndDomInfo.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/SVFStat.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/SVFUtil.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/SparseBitVector.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/ThreadAPI.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/WorkList.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/Z3Expr.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/iterator.h	/^namespace SVF$/;"	n
SVF	svf/include/Util/iterator_range.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/Andersen.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/AndersenPWC.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/CSC.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/FlowSensitive.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/Steensgaard.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/TypeAnalysis.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/VersionedFlowSensitive.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/WPAFSSolver.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/WPAPass.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/WPASolver.h	/^namespace SVF$/;"	n
SVF	svf/include/WPA/WPAStat.h	/^namespace SVF$/;"	n
SVF	svf/lib/CFL/CFLBase.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/CFL/CFLGraphBuilder.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/CFL/GrammarBuilder.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/CFLGraph.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/CHG.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/CallGraph.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/ConsG.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/ICFG.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/IRGraph.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/SVFG.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Graphs/VFG.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/MTA/TCT.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/MemoryModel/PointsTo.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/SVFIR/SVFType.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Util/BitVector.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Util/CoreBitVector.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Util/NodeIDAllocator.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Util/Options.cpp	/^namespace SVF$/;"	n	file:
SVF	svf/lib/Util/Z3Expr.cpp	/^namespace SVF$/;"	n	file:
SVFArrayTy	svf/include/SVFIR/SVFType.h	/^        SVFArrayTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFArrayType	svf/include/SVFIR/SVFType.h	/^    SVFArrayType(u32_t byteSize = 1)$/;"	f	class:SVF::SVFArrayType
SVFArrayType	svf/include/SVFIR/SVFType.h	/^class SVFArrayType : public SVFType$/;"	c	namespace:SVF
SVFBaseNode2LLVMValue	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    SVFBaseNode2LLVMValueMap SVFBaseNode2LLVMValue;$/;"	m	class:SVF::LLVMModuleSet
SVFBaseNode2LLVMValueMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const SVFValue*, const Value*> SVFBaseNode2LLVMValueMap;$/;"	t	class:SVF::LLVMModuleSet
SVFBasicBlock	svf/include/Graphs/BasicBlockG.h	/^    SVFBasicBlock(NodeID id, const FunObjVar* f): GenericBasicBlockNodeTy(id, BasicBlockKd), fun(f)$/;"	f	class:SVF::SVFBasicBlock
SVFBasicBlock	svf/include/Graphs/BasicBlockG.h	/^class SVFBasicBlock : public GenericBasicBlockNodeTy$/;"	c	namespace:SVF
SVFBugEvent	svf/include/Util/SVFBugReport.h	/^    SVFBugEvent(u32_t typeAndInfoFlag, const ICFGNode *eventInst): typeAndInfoFlag(typeAndInfoFlag), eventInst(eventInst) { };$/;"	f	class:SVF::SVFBugEvent
SVFBugEvent	svf/include/Util/SVFBugReport.h	/^class SVFBugEvent$/;"	c	namespace:SVF
SVFBugReport	svf/include/Util/SVFBugReport.h	/^class SVFBugReport$/;"	c	namespace:SVF
SVFFunctionTy	svf/include/SVFIR/SVFType.h	/^        SVFFunctionTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFFunctionType	svf/include/SVFIR/SVFType.h	/^    SVFFunctionType(const SVFType* rt, const std::vector<const SVFType*>& p, bool isvararg)$/;"	f	class:SVF::SVFFunctionType
SVFFunctionType	svf/include/SVFIR/SVFType.h	/^class SVFFunctionType : public SVFType$/;"	c	namespace:SVF
SVFG	svf/include/Graphs/SVFG.h	/^class SVFG : public VFG$/;"	c	namespace:SVF
SVFG	svf/lib/Graphs/SVFG.cpp	/^SVFG::SVFG(std::unique_ptr<MemSSA> mssa, VFGK k): VFG(mssa->getPTA()->getCallGraph(),k),mssa(std::move(mssa)), pta(this->mssa->getPTA())$/;"	f	class:SVFG
SVFGBuilder	svf/include/MSSA/SVFGBuilder.h	/^    explicit SVFGBuilder(bool _SVFGWithIndCall = false): svfg(nullptr), SVFGWithIndCall(_SVFGWithIndCall) {}$/;"	f	class:SVF::SVFGBuilder
SVFGBuilder	svf/include/MSSA/SVFGBuilder.h	/^class SVFGBuilder$/;"	c	namespace:SVF
SVFGEdge	svf/include/Graphs/SVFG.h	/^typedef VFGEdge SVFGEdge;$/;"	t	namespace:SVF
SVFGEdgeK	svf/include/Graphs/ICFGEdge.h	/^    typedef ICFGEdgeK SVFGEdgeK;$/;"	t	class:SVF::ICFGEdge
SVFGEdgeK	svf/include/Graphs/VFGEdge.h	/^    typedef VFGEdgeK SVFGEdgeK;$/;"	t	class:SVF::VFGEdge
SVFGEdgeSet	svf/include/DDA/DDAPass.h	/^    typedef OrderedSet<const SVFGEdge*> SVFGEdgeSet;$/;"	t	class:SVF::DDAPass
SVFGEdgeSet	svf/include/DDA/DDAVFSolver.h	/^    typedef SVFGEdge::SVFGEdgeSetTy SVFGEdgeSet;$/;"	t	class:SVF::DDAVFSolver
SVFGEdgeSet	svf/include/Graphs/SVFGStat.h	/^    typedef OrderedSet<const SVFGEdge*> SVFGEdgeSet;$/;"	t	class:SVF::SVFGStat
SVFGEdgeSet	svf/include/MSSA/SVFGBuilder.h	/^    typedef SVFG::SVFGEdgeSetTy SVFGEdgeSet;$/;"	t	class:SVF::SVFGBuilder
SVFGEdgeSetTy	svf/include/Graphs/CDG.h	/^    typedef CDGEdgeSetTy SVFGEdgeSetTy;$/;"	t	class:SVF::CDGEdge
SVFGEdgeSetTy	svf/include/Graphs/ICFGEdge.h	/^    typedef ICFGEdgeSetTy SVFGEdgeSetTy;$/;"	t	class:SVF::ICFGEdge
SVFGEdgeSetTy	svf/include/Graphs/VFG.h	/^    typedef VFGEdge::SVFGEdgeSetTy SVFGEdgeSetTy;$/;"	t	class:SVF::VFG
SVFGEdgeSetTy	svf/include/Graphs/VFGEdge.h	/^    typedef VFGEdgeSetTy SVFGEdgeSetTy;$/;"	t	class:SVF::VFGEdge
SVFGEdgeSetTy	svf/include/WPA/FlowSensitive.h	/^    typedef SVFG::SVFGEdgeSetTy SVFGEdgeSetTy;$/;"	t	class:SVF::FlowSensitive
SVFGNode	svf/include/Graphs/SVFG.h	/^typedef VFGNode SVFGNode;$/;"	t	namespace:SVF
SVFGNodeBS	svf/include/SABER/LeakChecker.h	/^    typedef NodeBS SVFGNodeBS;$/;"	t	class:SVF::LeakChecker
SVFGNodeBS	svf/include/SABER/SrcSnkDDA.h	/^    typedef NodeBS SVFGNodeBS;$/;"	t	class:SVF::SrcSnkDDA
SVFGNodeIDToNodeMapTy	svf/include/Graphs/SVFG.h	/^    typedef VFGNodeIDToNodeMapTy SVFGNodeIDToNodeMapTy;$/;"	t	class:SVF::SVFG
SVFGNodeSet	svf/include/CFL/CFLSVFGBuilder.h	/^    typedef Set<const SVFGNode*> SVFGNodeSet;$/;"	t	class:SVF::CFLSVFGBuilder
SVFGNodeSet	svf/include/Graphs/SVFGOPT.h	/^    typedef Set<SVFGNode*> SVFGNodeSet;$/;"	t	class:SVF::SVFGOPT
SVFGNodeSet	svf/include/Graphs/SVFGStat.h	/^    typedef Set<const SVFGNode*> SVFGNodeSet;$/;"	t	class:SVF::SVFGStat
SVFGNodeSet	svf/include/SABER/ProgSlice.h	/^    typedef Set<const SVFGNode*> SVFGNodeSet;$/;"	t	class:SVF::ProgSlice
SVFGNodeSet	svf/include/SABER/SaberSVFGBuilder.h	/^    typedef Set<const SVFGNode*> SVFGNodeSet;$/;"	t	class:SVF::SaberSVFGBuilder
SVFGNodeSet	svf/include/SABER/SrcSnkDDA.h	/^    typedef ProgSlice::SVFGNodeSet SVFGNodeSet;$/;"	t	class:SVF::SrcSnkDDA
SVFGNodeSetIter	svf/include/SABER/ProgSlice.h	/^    typedef SVFGNodeSet::const_iterator SVFGNodeSetIter;$/;"	t	class:SVF::ProgSlice
SVFGNodeSetIter	svf/include/SABER/SrcSnkDDA.h	/^    typedef SVFGNodeSet::const_iterator SVFGNodeSetIter;$/;"	t	class:SVF::SrcSnkDDA
SVFGNodeToCSIDMap	svf/include/SABER/LeakChecker.h	/^    typedef Map<const SVFGNode*,const CallICFGNode*> SVFGNodeToCSIDMap;$/;"	t	class:SVF::LeakChecker
SVFGNodeToCondMap	svf/include/SABER/ProgSlice.h	/^    typedef Map<const SVFGNode*, Condition> SVFGNodeToCondMap; 	\/\/\/< map a SVFGNode to its condition during value-flow guard computation$/;"	t	class:SVF::ProgSlice
SVFGNodeToDPItemsMap	svf/include/SABER/SrcSnkDDA.h	/^    typedef Map<const SVFGNode*, DPImSet> SVFGNodeToDPItemsMap; 	\/\/\/< map a SVFGNode to its visited dpitems$/;"	t	class:SVF::SrcSnkDDA
SVFGNodeToSVFGNodeSetMap	svf/include/SABER/ProgSlice.h	/^    typedef SaberCondAllocator::SVFGNodeToSVFGNodeSetMap SVFGNodeToSVFGNodeSetMap;$/;"	t	class:SVF::ProgSlice
SVFGNodeToSVFGNodeSetMap	svf/include/SABER/SaberCondAllocator.h	/^    typedef Map<const SVFGNode*, Set<const SVFGNode*>> SVFGNodeToSVFGNodeSetMap;$/;"	t	class:SVF::SaberCondAllocator
SVFGNodeToSliceMap	svf/include/SABER/SrcSnkDDA.h	/^    typedef Map<const SVFGNode*,ProgSlice*> SVFGNodeToSliceMap;$/;"	t	class:SVF::SrcSnkDDA
SVFGOPT	svf/include/Graphs/SVFGOPT.h	/^    SVFGOPT(std::unique_ptr<MemSSA> mssa, VFGK kind) : SVFG(std::move(mssa), kind)$/;"	f	class:SVF::SVFGOPT
SVFGOPT	svf/include/Graphs/SVFGOPT.h	/^class SVFGOPT : public SVFG$/;"	c	namespace:SVF
SVFGOPT_H_	svf/include/Graphs/SVFGOPT.h	37;"	d
SVFGSCC	svf/include/DDA/DDAPass.h	/^    typedef SCCDetection<SVFG*> SVFGSCC;$/;"	t	class:SVF::DDAPass
SVFGSCC	svf/include/DDA/DDAVFSolver.h	/^    typedef SCCDetection<SVFG*> SVFGSCC;$/;"	t	class:SVF::DDAVFSolver
SVFGSCC	svf/include/Graphs/SVFGStat.h	/^    typedef SCCDetection<SVFG*> SVFGSCC;$/;"	t	class:SVF::SVFGStat
SVFGSCCDetection	svf/include/DDA/DDAVFSolver.h	/^    inline void SVFGSCCDetection()$/;"	f	class:SVF::DDAVFSolver
SVFGSTAT_H_	svf/include/Graphs/SVFGStat.h	37;"	d
SVFGStat	svf/include/Graphs/SVFGStat.h	/^class SVFGStat : public PTAStat$/;"	c	namespace:SVF
SVFGStat	svf/lib/Graphs/SVFGStat.cpp	/^SVFGStat::SVFGStat(SVFG* g) : PTAStat(nullptr)$/;"	f	class:SVFGStat
SVFGWithIndCall	svf/include/MSSA/SVFGBuilder.h	/^    bool SVFGWithIndCall;$/;"	m	class:SVF::SVFGBuilder
SVFGWithIndirectCall	svf/include/Util/Options.h	/^    static const Option<bool> SVFGWithIndirectCall;$/;"	m	class:SVF::Options
SVFG_H_	svf/include/Graphs/SVFG.h	31;"	d
SVFIR	svf/include/SVFIR/SVFIR.h	/^class SVFIR : public IRGraph$/;"	c	namespace:SVF
SVFIR	svf/lib/SVFIR/SVFIR.cpp	/^SVFIR::SVFIR(bool buildFromFile) : IRGraph(buildFromFile), icfg(nullptr), chgraph(nullptr)$/;"	f	class:SVFIR
SVFIRBuilder	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    SVFIRBuilder(): pag(SVFIR::getPAG()), curBB(nullptr),curVal(nullptr)$/;"	f	class:SVF::SVFIRBuilder
SVFIRBuilder	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^class SVFIRBuilder: public llvm::InstVisitor<SVFIRBuilder>$/;"	c	namespace:SVF
SVFIntegerTy	svf/include/SVFIR/SVFType.h	/^        SVFIntegerTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFIntegerType	svf/include/SVFIR/SVFType.h	/^    SVFIntegerType(u32_t byteSize = 1) : SVFType(true, SVFIntegerTy, byteSize) {}$/;"	f	class:SVF::SVFIntegerType
SVFIntegerType	svf/include/SVFIR/SVFType.h	/^class SVFIntegerType : public SVFType$/;"	c	namespace:SVF
SVFLOOPANDDOMINFO_H	svf/include/Util/SVFLoopAndDomInfo.h	32;"	d
SVFLoop	svf/include/MemoryModel/SVFLoop.h	/^    SVFLoop(const ICFGNodeSet &_nodes, u32_t _bound) :$/;"	f	class:SVF::SVFLoop
SVFLoop	svf/include/MemoryModel/SVFLoop.h	/^class SVFLoop$/;"	c	namespace:SVF
SVFLoopAndDomInfo	svf/include/Util/SVFLoopAndDomInfo.h	/^    SVFLoopAndDomInfo()$/;"	f	class:SVF::SVFLoopAndDomInfo
SVFLoopAndDomInfo	svf/include/Util/SVFLoopAndDomInfo.h	/^class SVFLoopAndDomInfo$/;"	c	namespace:SVF
SVFLoopVec	svf/include/Graphs/ICFG.h	/^    typedef std::vector<const SVFLoop *> SVFLoopVec;$/;"	t	class:SVF::ICFG
SVFMain	svf/include/Util/Options.h	/^    static const Option<bool> SVFMain;$/;"	m	class:SVF::Options
SVFOtherTy	svf/include/SVFIR/SVFType.h	/^        SVFOtherTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFOtherType	svf/include/SVFIR/SVFType.h	/^    SVFOtherType(bool isSingleValueTy, u32_t byteSize = 1) : SVFType(isSingleValueTy, SVFOtherTy, byteSize) {}$/;"	f	class:SVF::SVFOtherType
SVFOtherType	svf/include/SVFIR/SVFType.h	/^class SVFOtherType : public SVFType$/;"	c	namespace:SVF
SVFPointerTy	svf/include/SVFIR/SVFType.h	/^        SVFPointerTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFPointerType	svf/include/SVFIR/SVFType.h	/^    SVFPointerType(u32_t byteSize = 1)$/;"	f	class:SVF::SVFPointerType
SVFPointerType	svf/include/SVFIR/SVFType.h	/^class SVFPointerType : public SVFType$/;"	c	namespace:SVF
SVFStat	svf/include/Util/SVFStat.h	/^class SVFStat$/;"	c	namespace:SVF
SVFStat	svf/lib/Util/SVFStat.cpp	/^SVFStat::SVFStat() : startTime(0), endTime(0)$/;"	f	class:SVFStat
SVFStmt	svf/include/SVFIR/SVFStatements.h	/^    SVFStmt(GEdgeFlag k)$/;"	f	class:SVF::SVFStmt
SVFStmt	svf/include/SVFIR/SVFStatements.h	/^class SVFStmt : public GenericPAGEdgeTy$/;"	c	namespace:SVF
SVFStmt	svf/lib/SVFIR/SVFStatements.cpp	/^SVFStmt::SVFStmt(SVFVar* s, SVFVar* d, GEdgeFlag k, bool real) :$/;"	f	class:SVFStmt
SVFStmtList	svf/include/Graphs/ICFGNode.h	/^    typedef std::list<const SVFStmt*> SVFStmtList;$/;"	t	class:SVF::ICFGNode
SVFStmtList	svf/include/MSSA/MemRegion.h	/^    typedef SVFIR::SVFStmtList SVFStmtList;$/;"	t	class:SVF::MRGenerator
SVFStmtList	svf/include/MSSA/MemSSA.h	/^    typedef SVFIR::SVFStmtList SVFStmtList;$/;"	t	class:SVF::MemSSA
SVFStmtList	svf/include/SVFIR/SVFIR.h	/^    typedef std::vector<const SVFStmt*> SVFStmtList;$/;"	t	class:SVF::SVFIR
SVFStmtSet	svf/include/Graphs/IRGraph.h	/^    typedef Set<const SVFStmt*> SVFStmtSet;$/;"	t	class:SVF::IRGraph
SVFStmtSet	svf/include/Graphs/VFG.h	/^    typedef SVFIR::SVFStmtSet SVFStmtSet;$/;"	t	class:SVF::VFG
SVFStmtSetTy	svf/include/SVFIR/SVFStatements.h	/^    typedef GenericNode<SVFVar,SVFStmt>::GEdgeSetTy SVFStmtSetTy;$/;"	t	class:SVF::SVFStmt
SVFStructTy	svf/include/SVFIR/SVFType.h	/^        SVFStructTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFStructType	svf/include/SVFIR/SVFType.h	/^    SVFStructType(u32_t byteSize = 1) : SVFType(false, SVFStructTy, byteSize) {}$/;"	f	class:SVF::SVFStructType
SVFStructType	svf/include/SVFIR/SVFType.h	/^class SVFStructType : public SVFType$/;"	c	namespace:SVF
SVFTy	svf/include/SVFIR/SVFType.h	/^        SVFTy,$/;"	e	enum:SVF::SVFType::SVFTyKind
SVFTyKind	svf/include/SVFIR/SVFType.h	/^    enum SVFTyKind$/;"	g	class:SVF::SVFType
SVFType	svf/include/SVFIR/SVFType.h	/^    SVFType(bool svt, SVFTyKind k, u32_t Sz = 1)$/;"	f	class:SVF::SVFType
SVFType	svf/include/SVFIR/SVFType.h	/^class SVFType$/;"	c	namespace:SVF
SVFTypeLocSetsPair	svf/include/SVFIR/SVFIR.h	/^    typedef std::pair<const SVFType*, std::vector<AccessPath>> SVFTypeLocSetsPair;$/;"	t	class:SVF::SVFIR
SVFTypeSet	svf/include/Graphs/IRGraph.h	/^    typedef Set<const SVFType*> SVFTypeSet;$/;"	t	class:SVF::IRGraph
SVFUtil	svf/include/Util/Casting.h	/^namespace SVFUtil$/;"	n	namespace:SVF
SVFUtil	svf/include/Util/SVFUtil.h	/^namespace SVFUtil$/;"	n	namespace:SVF
SVFValue	svf/include/SVFIR/SVFValue.h	/^    SVFValue(NodeID i, GNodeK k, const SVFType* ty = nullptr): id(i),nodeKind(k), type(ty)$/;"	f	class:SVF::SVFValue
SVFValue	svf/include/SVFIR/SVFValue.h	/^class SVFValue$/;"	c	namespace:SVF
SVFVar	svf/include/SVFIR/SVFVariables.h	/^    SVFVar(NodeID i, PNODEK k) : GenericPAGNodeTy(i, k) {}$/;"	f	class:SVF::SVFVar
SVFVar	svf/include/SVFIR/SVFVariables.h	/^class SVFVar : public GenericPAGNodeTy$/;"	c	namespace:SVF
SVFVar	svf/lib/SVFIR/SVFVariables.cpp	/^SVFVar::SVFVar(NodeID i, const SVFType* svfType, PNODEK k) :$/;"	f	class:SVFVar
SVFVarList	svf/include/SVFIR/SVFIR.h	/^    typedef std::vector<const SVFVar*> SVFVarList;$/;"	t	class:SVF::SVFIR
SVF_BIN_DIR	Release-build/include/Util/config.h	8;"	d
SVF_BUGRECODER_H	svf/include/Util/SVFBugReport.h	28;"	d
SVF_BUILD_DIR	Release-build/include/Util/config.h	6;"	d
SVF_BUILD_TYPE	Release-build/include/Util/config.h	15;"	d
SVF_CDGBUILDER_H	svf/include/Util/CDGBuilder.h	30;"	d
SVF_CFLSVFGBUILDER_H	svf/include/CFL/CFLSVFGBuilder.h	28;"	d
SVF_CONTROLDG_H	svf/include/Graphs/CDG.h	31;"	d
SVF_DEBUG_WITH_TYPE	svf/include/SVFIR/SVFType.h	485;"	d
SVF_DEBUG_WITH_TYPE	svf/include/SVFIR/SVFType.h	491;"	d
SVF_ENABLE_ASSERTIONS	Release-build/include/Util/config.h	24;"	d
SVF_EXTAPI_BC	Release-build/include/Util/config.h	12;"	d
SVF_EXTAPI_DIR	Release-build/include/Util/config.h	11;"	d
SVF_FE_BASIC_TYPES_H	svf-llvm/include/SVF-LLVM/BasicTypes.h	24;"	d
SVF_GEPTYPEBRIDGEITERATOR_H	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	5;"	d
SVF_GLOBAL_CTORS	svf-llvm/lib/LLVMModule.cpp	73;"	d	file:
SVF_GLOBAL_DTORS	svf-llvm/lib/LLVMModule.cpp	74;"	d	file:
SVF_ICFGWTO_H	svf/include/AE/Core/ICFGWTO.h	35;"	d
SVF_INCLUDE_DIR	Release-build/include/Util/config.h	10;"	d
SVF_INSTALL_DIR	Release-build/include/Util/config.h	7;"	d
SVF_LIB_DIR	Release-build/include/Util/config.h	9;"	d
SVF_LLVMLOOPANALYSIS_H	svf-llvm/include/SVF-LLVM/LLVMLoopAnalysis.h	31;"	d
SVF_MAIN_FUNC_NAME	svf-llvm/lib/LLVMModule.cpp	72;"	d	file:
SVF_NUMERICVALUE_H	svf/include/AE/Core/NumericValue.h	34;"	d
SVF_OBJTYPEINFERENCE_H	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	31;"	d
SVF_ROOT	Release-build/include/Util/config.h	5;"	d
SVF_SVFLOOP_H	svf/include/MemoryModel/SVFLoop.h	31;"	d
SVF_SVFSTAT_H	svf/include/Util/SVFStat.h	31;"	d
SVF_WARN_AS_ERROR	Release-build/include/Util/config.h	22;"	d
SYMTYPE	svf/include/Graphs/IRGraph.h	/^    enum SYMTYPE$/;"	g	class:SVF::IRGraph
SaberCheckerAPI	svf/include/SABER/SaberCheckerAPI.h	/^    SaberCheckerAPI ()$/;"	f	class:SVF::SaberCheckerAPI
SaberCheckerAPI	svf/include/SABER/SaberCheckerAPI.h	/^class SaberCheckerAPI$/;"	c	namespace:SVF
SaberCondAllocator	svf/include/SABER/SaberCondAllocator.h	/^class SaberCondAllocator$/;"	c	namespace:SVF
SaberCondAllocator	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::SaberCondAllocator()$/;"	f	class:SaberCondAllocator
SaberSVFGBuilder	svf/include/SABER/SaberSVFGBuilder.h	/^    SaberSVFGBuilder(): SVFGBuilder(true) {}$/;"	f	class:SVF::SaberSVFGBuilder
SaberSVFGBuilder	svf/include/SABER/SaberSVFGBuilder.h	/^class SaberSVFGBuilder : public SVFGBuilder$/;"	c	namespace:SVF
Same	svf/include/MemoryModel/AccessPath.h	/^        NonOverlap, Overlap, Subset, Superset, Same$/;"	e	enum:SVF::AccessPath::LSRelation
SaturatingInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SaturatingInst SaturatingInst;$/;"	t	namespace:SVF
ScalarEvolution	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ScalarEvolution ScalarEvolution;$/;"	t	namespace:SVF
ScalarEvolutionWrapperPass	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ScalarEvolutionWrapperPass ScalarEvolutionWrapperPass;$/;"	t	namespace:SVF
ScopedConstructor	z3.obj/bin/python/z3/z3.py	/^class ScopedConstructor:$/;"	c
ScopedConstructorList	z3.obj/bin/python/z3/z3.py	/^class ScopedConstructorList:$/;"	c
Select	svf/include/SVFIR/SVFStatements.h	/^        Select,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Select	z3.obj/bin/python/z3/z3.py	/^def Select(a, i):$/;"	f
SelectInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SelectInst SelectInst;$/;"	t	namespace:SVF
SelectStmt	svf/include/SVFIR/SVFStatements.h	/^    SelectStmt() : MultiOpndStmt(SVFStmt::Select), condition{} {}$/;"	f	class:SVF::SelectStmt
SelectStmt	svf/include/SVFIR/SVFStatements.h	/^class SelectStmt: public MultiOpndStmt$/;"	c	namespace:SVF
SelectStmt	svf/lib/SVFIR/SVFStatements.cpp	/^SelectStmt::SelectStmt(SVFVar* s, const OPVars& opnds, const SVFVar* cond)$/;"	f	class:SelectStmt
SelfCycle	svf/include/Util/Options.h	/^    static const Option<std::string> SelfCycle;$/;"	m	class:SVF::Options
SeqRef	z3.obj/bin/python/z3/z3.py	/^class SeqRef(ExprRef):$/;"	c
SeqSort	z3.obj/bin/python/z3/z3.py	/^def SeqSort(s):$/;"	f
SeqSortRef	z3.obj/bin/python/z3/z3.py	/^class SeqSortRef(SortRef):$/;"	c
SetAdd	z3.obj/bin/python/z3/z3.py	/^def SetAdd(s, e):$/;"	f
SetComplement	z3.obj/bin/python/z3/z3.py	/^def SetComplement(s):$/;"	f
SetDel	z3.obj/bin/python/z3/z3.py	/^def SetDel(s, e):$/;"	f
SetDifference	z3.obj/bin/python/z3/z3.py	/^def SetDifference(a, b):$/;"	f
SetHasSize	z3.obj/bin/python/z3/z3.py	/^def SetHasSize(a, k):$/;"	f
SetIntersect	z3.obj/bin/python/z3/z3.py	/^def SetIntersect(*args):$/;"	f
SetSort	z3.obj/bin/python/z3/z3.py	/^def SetSort(s):$/;"	f
SetUnion	z3.obj/bin/python/z3/z3.py	/^def SetUnion(*args):$/;"	f
ShowHiddenNode	svf/include/Util/Options.h	/^    static const Option<bool> ShowHiddenNode;$/;"	m	class:SVF::Options
ShowSVFIRValue	svf/include/Util/Options.h	/^    static const Option<bool> ShowSVFIRValue;$/;"	m	class:SVF::Options
ShuffleVectorInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::ShuffleVectorInst ShuffleVectorInst;$/;"	t	namespace:SVF
SignExt	z3.obj/bin/python/z3/z3.py	/^def SignExt(n, a):$/;"	f
SimpleSolver	z3.obj/bin/python/z3/z3.py	/^def SimpleSolver(ctx=None, logFile=None):$/;"	f
SingleCondVar	svf/include/MemoryModel/ConditionalPT.h	/^    typedef CondVar<Cond> SingleCondVar;$/;"	t	class:SVF::CondPointsToSet
SkipRecursiveCall	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::SkipRecursiveCall(const CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
Solver	z3.obj/bin/python/z3/z3.py	/^class Solver(Z3PPObject):$/;"	c
SolverFor	z3.obj/bin/python/z3/z3.py	/^def SolverFor(logic, ctx=None, logFile=None):$/;"	f
SolverObj	z3.obj/bin/python/z3/z3types.py	/^class SolverObj(ctypes.c_void_p):$/;"	c
Sort	z3.obj/bin/python/z3/z3types.py	/^class Sort(ctypes.c_void_p):$/;"	c
SortRef	z3.obj/bin/python/z3/z3.py	/^class SortRef(AstRef):$/;"	c
SourceInst	svf/include/Util/SVFBugReport.h	/^        SourceInst = 0x5$/;"	e	enum:SVF::SVFBugEvent::EventType
SparseBitVector	svf/include/Util/SparseBitVector.h	/^    SparseBitVector() : Elements(), CurrElementIter(Elements.begin()) {}$/;"	f	class:SVF::SparseBitVector
SparseBitVector	svf/include/Util/SparseBitVector.h	/^    SparseBitVector(const SparseBitVector &RHS)$/;"	f	class:SVF::SparseBitVector
SparseBitVector	svf/include/Util/SparseBitVector.h	/^class SparseBitVector$/;"	c	namespace:SVF
SparseBitVectorElement	svf/include/Util/SparseBitVector.h	/^    explicit SparseBitVectorElement(unsigned Idx) :  ElementIndex(Idx) {}$/;"	f	struct:SVF::SparseBitVectorElement
SparseBitVectorElement	svf/include/Util/SparseBitVector.h	/^template <unsigned ElementSize = 128> struct SparseBitVectorElement$/;"	s	namespace:SVF
SparseBitVectorIterator	svf/include/Util/SparseBitVector.h	/^        SparseBitVectorIterator(const SparseBitVector<ElementSize> *RHS,$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
SparseBitVectorIterator	svf/include/Util/SparseBitVector.h	/^    class SparseBitVectorIterator$/;"	c	class:SVF::SparseBitVector
Sqrt	z3.obj/bin/python/z3/z3.py	/^def Sqrt(a, ctx=None):$/;"	f
SrcSnkDDA	svf/include/SABER/SrcSnkDDA.h	/^    SrcSnkDDA() : _curSlice(nullptr), svfg(nullptr), callgraph(nullptr)$/;"	f	class:SVF::SrcSnkDDA
SrcSnkDDA	svf/include/SABER/SrcSnkDDA.h	/^class SrcSnkDDA : public CFLSrcSnkSolver$/;"	c	namespace:SVF
SrcSnkSolver	svf/include/SABER/SrcSnkSolver.h	/^    SrcSnkSolver(): _graph(nullptr)$/;"	f	class:SVF::SrcSnkSolver
SrcSnkSolver	svf/include/SABER/SrcSnkSolver.h	/^class SrcSnkSolver$/;"	c	namespace:SVF
StInfo	svf/include/SVFIR/SVFType.h	/^    explicit StInfo(u32_t s)$/;"	f	class:SVF::StInfo
StInfo	svf/include/SVFIR/SVFType.h	/^class StInfo$/;"	c	namespace:SVF
Stack	svf/include/Graphs/WTO.h	/^    typedef std::vector<const NodeT*> Stack;$/;"	t	class:SVF::WTO
StackObjNode	svf/include/SVFIR/SVFValue.h	/^        StackObjNode,            \/\/ │   ├── Represents a stack object$/;"	e	enum:SVF::SVFValue::GNodeK
StackObjVar	svf/include/SVFIR/SVFVariables.h	/^    StackObjVar(NodeID i, ObjTypeInfo* ti, const SVFType* svfType, const ICFGNode* node):$/;"	f	class:SVF::StackObjVar
StackObjVar	svf/include/SVFIR/SVFVariables.h	/^    StackObjVar(NodeID i, const ICFGNode* node) : BaseObjVar(i, node, StackObjNode) {}$/;"	f	class:SVF::StackObjVar
StackObjVar	svf/include/SVFIR/SVFVariables.h	/^class StackObjVar: public BaseObjVar$/;"	c	namespace:SVF
Standard	svf/include/Graphs/CHG.h	/^        Standard,$/;"	e	enum:SVF::CommonCHGraph::CHGKind
Star	z3.obj/bin/python/z3/z3.py	/^def Star(re):$/;"	f
StatBudget	svf/include/Util/Options.h	/^    static const Option<u32_t> StatBudget;$/;"	m	class:SVF::Options
Statistics	z3.obj/bin/python/z3/z3.py	/^class Statistics:$/;"	c
StatsObj	z3.obj/bin/python/z3/z3types.py	/^class StatsObj(ctypes.c_void_p):$/;"	c
Steensgaard	svf/include/WPA/Steensgaard.h	/^    Steensgaard(SVFIR* _pag) : AndersenBase(_pag, Steensgaard_WPA, true) {}$/;"	f	class:SVF::Steensgaard
Steensgaard	svf/include/WPA/Steensgaard.h	/^class Steensgaard : public AndersenBase$/;"	c	namespace:SVF
Steensgaard_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        Steensgaard_WPA,      \/\/\/< Steensgaard PTA$/;"	e	enum:SVF::PointerAnalysis::PTATY
StmtDPItem	svf/include/Util/DPItem.h	/^    StmtDPItem(NodeID c, const LocCond* locCond) : DPItem(c), curloc(locCond)$/;"	f	class:SVF::StmtDPItem
StmtDPItem	svf/include/Util/DPItem.h	/^    StmtDPItem(const StmtDPItem& dps) :$/;"	f	class:SVF::StmtDPItem
StmtDPItem	svf/include/Util/DPItem.h	/^class StmtDPItem : public DPItem$/;"	c	namespace:SVF
StmtSVFGNode	svf/include/Graphs/SVFG.h	/^typedef StmtVFGNode StmtSVFGNode;$/;"	t	namespace:SVF
StmtVFGNode	svf/include/Graphs/VFGNode.h	/^    StmtVFGNode(NodeID id, const PAGEdge* e, VFGNodeK k): VFGNode(id,k), pagEdge(e)$/;"	f	class:SVF::StmtVFGNode
StmtVFGNode	svf/include/Graphs/VFGNode.h	/^class StmtVFGNode : public VFGNode$/;"	c	namespace:SVF
StopPPException	z3.obj/bin/python/z3/z3printer.py	/^class StopPPException(Exception):$/;"	c
Store	svf/include/Graphs/ConsGEdge.h	/^        Addr, Copy, Store, Load, NormalGep, VariantGep$/;"	e	enum:SVF::ConstraintEdge::ConstraintEdgeK
Store	svf/include/SVFIR/SVFStatements.h	/^        Store,$/;"	e	enum:SVF::SVFStmt::PEDGEK
Store	svf/include/SVFIR/SVFValue.h	/^        Store,            \/\/ │   ├── Represents a store operation$/;"	e	enum:SVF::SVFValue::GNodeK
Store	z3.obj/bin/python/z3/z3.py	/^def Store(a, i, v):$/;"	f
StoreCGEdge	svf/include/Graphs/ConsGEdge.h	/^    StoreCGEdge(ConstraintNode* s, ConstraintNode* d, EdgeID id) : ConstraintEdge(s,d,Store,id)$/;"	f	class:SVF::StoreCGEdge
StoreCGEdge	svf/include/Graphs/ConsGEdge.h	/^class StoreCGEdge: public ConstraintEdge$/;"	c	namespace:SVF
StoreCGEdgeSet	svf/include/Graphs/ConsG.h	/^    ConstraintEdge::ConstraintEdgeSetTy StoreCGEdgeSet;$/;"	m	class:SVF::ConstraintGraph
StoreCHI	svf/include/MSSA/MSSAMuChi.h	/^    StoreCHI(const SVFBasicBlock* b, const StoreStmt* i, const MemRegion* m, Cond c = true) :$/;"	f	class:SVF::StoreCHI
StoreCHI	svf/include/MSSA/MSSAMuChi.h	/^class StoreCHI : public MSSACHI<Cond>$/;"	c	namespace:SVF
StoreInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::StoreInst StoreInst;$/;"	t	namespace:SVF
StoreMSSACHI	svf/include/MSSA/MSSAMuChi.h	/^        StoreMSSACHI,$/;"	e	enum:SVF::MSSADEF::DEFTYPE
StoreSVFGNode	svf/include/Graphs/SVFG.h	/^typedef StoreVFGNode StoreSVFGNode;$/;"	t	namespace:SVF
StoreStmt	svf/include/SVFIR/SVFStatements.h	/^    StoreStmt() : AssignStmt(SVFStmt::Store) {}$/;"	f	class:SVF::StoreStmt
StoreStmt	svf/include/SVFIR/SVFStatements.h	/^class StoreStmt: public AssignStmt$/;"	c	namespace:SVF
StoreStmt	svf/lib/SVFIR/SVFStatements.cpp	/^StoreStmt::StoreStmt(SVFVar* s, SVFVar* d, const ICFGNode* st)$/;"	f	class:StoreStmt
StoreToChiSetMap	svf/include/MSSA/MemSSA.h	/^    typedef Map<const StoreStmt*, CHISet> StoreToChiSetMap;$/;"	t	class:SVF::MemSSA
StoreToPMSetMap	svf/include/DDA/DDAVFSolver.h	/^    typedef OrderedMap<const SVFGNode*, DPTItemSet> StoreToPMSetMap;$/;"	t	class:SVF::DDAVFSolver
StoreVFGNode	svf/include/Graphs/VFGNode.h	/^    StoreVFGNode(NodeID id,const StoreStmt* edge): StmtVFGNode(id,edge,Store)$/;"	f	class:SVF::StoreVFGNode
StoreVFGNode	svf/include/Graphs/VFGNode.h	/^class StoreVFGNode: public StmtVFGNode$/;"	c	namespace:SVF
StoresToMRsMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const StoreStmt*, MRSet> StoresToMRsMap;$/;"	t	class:SVF::MRGenerator
StoresToPointsToMap	svf/include/MSSA/MemRegion.h	/^    typedef Map<const StoreStmt*, NodeBS> StoresToPointsToMap;$/;"	t	class:SVF::MRGenerator
StrToInt	z3.obj/bin/python/z3/z3.py	/^def StrToInt(s):$/;"	f
Strategy	svf/include/Util/NodeIDAllocator.h	/^    enum Strategy$/;"	g	class:SVF::NodeIDAllocator
String	z3.obj/bin/python/z3/z3.py	/^def String(name, ctx=None):$/;"	f
StringFormatObject	z3.obj/bin/python/z3/z3printer.py	/^class StringFormatObject(FormatObject):$/;"	c
StringSort	z3.obj/bin/python/z3/z3.py	/^def StringSort(ctx=None):$/;"	f
StringVal	z3.obj/bin/python/z3/z3.py	/^def StringVal(s, ctx=None):$/;"	f
Strings	z3.obj/bin/python/z3/z3.py	/^def Strings(names, ctx=None):$/;"	f
StructLayout	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::StructLayout StructLayout;$/;"	t	namespace:SVF
StructType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::StructType StructType;$/;"	t	namespace:SVF
SubSeq	z3.obj/bin/python/z3/z3.py	/^def SubSeq(s, offset, length):$/;"	f
SubString	z3.obj/bin/python/z3/z3.py	/^def SubString(s, offset, length):$/;"	f
Subset	svf/include/MemoryModel/AccessPath.h	/^        NonOverlap, Overlap, Subset, Superset, Same$/;"	e	enum:SVF::AccessPath::LSRelation
SuccAndCondPairVec	svf/include/SVFIR/SVFStatements.h	/^    typedef std::vector<std::pair<const ICFGNode*, s32_t>> SuccAndCondPairVec;$/;"	t	class:SVF::BranchStmt
SuccBBAndCondValPair	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef std::pair<const BasicBlock*, const ConstantInt*> SuccBBAndCondValPair;$/;"	t	namespace:SVF
SuccBBAndCondValPairVec	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef std::vector<SuccBBAndCondValPair> SuccBBAndCondValPairVec;$/;"	t	namespace:SVF
SuffixOf	z3.obj/bin/python/z3/z3.py	/^def SuffixOf(a, b):$/;"	f
Sum	z3.obj/bin/python/z3/z3.py	/^def Sum(*args):$/;"	f
Superset	svf/include/MemoryModel/AccessPath.h	/^        NonOverlap, Overlap, Subset, Superset, Same$/;"	e	enum:SVF::AccessPath::LSRelation
SwitchInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::SwitchInst SwitchInst;$/;"	t	namespace:SVF
SyGetmem	svf-llvm/lib/extapi.c	/^void *SyGetmem(unsigned long size)$/;"	f
SymTabPrint	svf/include/Util/Options.h	/^    static const Option<bool> SymTabPrint;$/;"	m	class:SVF::Options
SymblicAbstractionTest	svf-llvm/tools/AE/ae.cpp	/^class SymblicAbstractionTest$/;"	c	file:
Symbol	svf/include/CFL/CFGrammar.h	/^        Symbol() : kind(0), attribute(0), variableAttribute(0) {}$/;"	f	struct:SVF::GrammarBase::Symbol
Symbol	svf/include/CFL/CFGrammar.h	/^        Symbol(const u32_t& num) : kind(num & 0xFF), attribute((num >> 8 ) & 0xFFFF), variableAttribute((num >> 24)) {}$/;"	f	struct:SVF::GrammarBase::Symbol
Symbol	svf/include/CFL/CFGrammar.h	/^    typedef struct Symbol$/;"	s	class:SVF::GrammarBase
Symbol	svf/include/CFL/CFGrammar.h	/^    } Symbol;$/;"	t	class:SVF::GrammarBase	typeref:struct:SVF::GrammarBase::Symbol
Symbol	svf/include/CFL/CFLGraphBuilder.h	/^    typedef CFGrammar::Symbol Symbol;$/;"	t	class:SVF::CFLGraphBuilder
Symbol	svf/include/CFL/CFLSolver.h	/^    typedef CFGrammar::Symbol Symbol;$/;"	t	class:SVF::CFLSolver
Symbol	svf/include/Graphs/CFLGraph.h	/^    typedef CFGrammar::Symbol Symbol;$/;"	t	class:SVF::CFLGraph
Symbol	z3.obj/bin/python/z3/z3types.py	/^class Symbol(ctypes.c_void_p):$/;"	c
SymbolHash	svf/include/CFL/CFGrammar.h	/^    class SymbolHash$/;"	c	class:SVF::GrammarBase
SymbolTableBuilder	svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h	/^    SymbolTableBuilder(SVFIR* ir): svfir(ir)$/;"	f	class:SVF::SymbolTableBuilder
SymbolTableBuilder	svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h	/^class SymbolTableBuilder$/;"	c	namespace:SVF
SymbolTableBuilder_H_	svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h	31;"	d
SymbolVectorHash	svf/include/CFL/CFGrammar.h	/^    struct SymbolVectorHash$/;"	s	class:SVF::GrammarBase
TCT	svf/include/MTA/TCT.h	/^    TCT(PointerAnalysis* p) :pta(p),TCTNodeNum(0),TCTEdgeNum(0),MaxCxtSize(0)$/;"	f	class:SVF::TCT
TCT	svf/include/MTA/TCT.h	/^class TCT: public GenericThreadCreateTreeTy$/;"	c	namespace:SVF
TCTDotGraph	svf/include/Util/Options.h	/^    static const Option<bool> TCTDotGraph;$/;"	m	class:SVF::Options
TCTEdge	svf/include/MTA/TCT.h	/^    TCTEdge(TCTNode* s, TCTNode* d, CEDGEK kind) :$/;"	f	class:SVF::TCTEdge
TCTEdge	svf/include/MTA/TCT.h	/^class TCTEdge: public GenericTCTEdgeTy$/;"	c	namespace:SVF
TCTEdgeNum	svf/include/MTA/TCT.h	/^    u32_t TCTEdgeNum;$/;"	m	class:SVF::TCT
TCTNode	svf/include/MTA/TCT.h	/^    TCTNode(NodeID i, const CxtThread& cctx) :$/;"	f	class:SVF::TCTNode
TCTNode	svf/include/MTA/TCT.h	/^class TCTNode: public GenericTCTNodeTy$/;"	c	namespace:SVF
TCTNodeDetector_H_	svf/include/MTA/TCT.h	31;"	d
TCTNodeIter	svf/include/MTA/TCT.h	/^    typedef ThreadCreateEdgeSet::iterator TCTNodeIter;$/;"	t	class:SVF::TCT
TCTNodeKd	svf/include/SVFIR/SVFValue.h	/^        TCTNodeKd,        \/\/ Thread creation tree node$/;"	e	enum:SVF::SVFValue::GNodeK
TCTNodeNum	svf/include/MTA/TCT.h	/^    u32_t TCTNodeNum;$/;"	m	class:SVF::TCT
TCTTime	svf/include/MTA/MTAStat.h	/^    double TCTTime;$/;"	m	class:SVF::MTAStat
TDAPIMap	svf/include/SABER/SaberCheckerAPI.h	/^    typedef Map<std::string, CHECKER_TYPE> TDAPIMap;$/;"	t	class:SVF::SaberCheckerAPI
TDAPIMap	svf/include/Util/ThreadAPI.h	/^    typedef Map<std::string, TD_TYPE> TDAPIMap;$/;"	t	class:SVF::ThreadAPI
TDAlive	svf/include/MTA/MHP.h	/^        TDAlive,  \/\/ thread is alive$/;"	e	enum:SVF::ForkJoinAnalysis::ValDomain
TDDead	svf/include/MTA/MHP.h	/^        TDDead,  \/\/  thread is dead$/;"	e	enum:SVF::ForkJoinAnalysis::ValDomain
TDForkEdge	svf/include/Graphs/CallGraph.h	/^        CallRetEdge,TDForkEdge,TDJoinEdge,HareParForEdge$/;"	e	enum:SVF::CallGraphEdge::CEDGEK
TDForkPE	svf/include/SVFIR/SVFStatements.h	/^    TDForkPE() : CallPE(SVFStmt::ThreadFork) {}$/;"	f	class:SVF::TDForkPE
TDForkPE	svf/include/SVFIR/SVFStatements.h	/^    TDForkPE(SVFVar* s, SVFVar* d, const CallICFGNode* i,$/;"	f	class:SVF::TDForkPE
TDForkPE	svf/include/SVFIR/SVFStatements.h	/^class TDForkPE: public CallPE$/;"	c	namespace:SVF
TDJoinEdge	svf/include/Graphs/CallGraph.h	/^        CallRetEdge,TDForkEdge,TDJoinEdge,HareParForEdge$/;"	e	enum:SVF::CallGraphEdge::CEDGEK
TDJoinPE	svf/include/SVFIR/SVFStatements.h	/^    TDJoinPE() : RetPE(SVFStmt::ThreadJoin) {}$/;"	f	class:SVF::TDJoinPE
TDJoinPE	svf/include/SVFIR/SVFStatements.h	/^    TDJoinPE(SVFVar* s, SVFVar* d, const CallICFGNode* i,$/;"	f	class:SVF::TDJoinPE
TDJoinPE	svf/include/SVFIR/SVFStatements.h	/^class TDJoinPE: public RetPE$/;"	c	namespace:SVF
TDLocked	svf/include/MTA/LockAnalysis.h	/^        TDLocked,  \/\/ stmt is locked$/;"	e	enum:SVF::LockAnalysis::ValDomain
TDUnlocked	svf/include/MTA/LockAnalysis.h	/^        TDUnlocked,  \/\/  stmt is unlocked$/;"	e	enum:SVF::LockAnalysis::ValDomain
TD_ACQUIRE	svf/include/Util/ThreadAPI.h	/^        TD_ACQUIRE,     \/\/\/ acquire a lock$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_BAR_INIT	svf/include/Util/ThreadAPI.h	/^        TD_BAR_INIT,        \/\/\/ Barrier init$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_BAR_WAIT	svf/include/Util/ThreadAPI.h	/^        TD_BAR_WAIT,        \/\/\/ Barrier wait$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_CANCEL	svf/include/Util/ThreadAPI.h	/^        TD_CANCEL,      \/\/\/ cancel a thread by another$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_CONDVAR_DESTROY	svf/include/Util/ThreadAPI.h	/^        TD_CONDVAR_DESTROY, \/\/\/ initial a mutex variable$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_CONDVAR_INI	svf/include/Util/ThreadAPI.h	/^        TD_CONDVAR_INI,     \/\/\/ initial a mutex variable$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_COND_BROADCAST	svf/include/Util/ThreadAPI.h	/^        TD_COND_BROADCAST,  \/\/\/ broadcast a condition$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_COND_SIGNAL	svf/include/Util/ThreadAPI.h	/^        TD_COND_SIGNAL, \/\/\/ signal a condition$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_COND_WAIT	svf/include/Util/ThreadAPI.h	/^        TD_COND_WAIT,   \/\/\/ wait a condition$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_DETACH	svf/include/Util/ThreadAPI.h	/^        TD_DETACH,      \/\/\/ detach a thread directly instead wait for it to join$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_DUMMY	svf/include/Util/ThreadAPI.h	/^        TD_DUMMY = 0,   \/\/\/ dummy type$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_EXIT	svf/include/Util/ThreadAPI.h	/^        TD_EXIT,        \/\/\/ exit\/kill a thread$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_FORK	svf/include/Util/ThreadAPI.h	/^        TD_FORK,        \/\/\/ create a new thread$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_JOIN	svf/include/Util/ThreadAPI.h	/^        TD_JOIN,        \/\/\/ wait for a thread to join$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_MUTEX_DESTROY	svf/include/Util/ThreadAPI.h	/^        TD_MUTEX_DESTROY,   \/\/\/ initial a mutex variable$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_MUTEX_INI	svf/include/Util/ThreadAPI.h	/^        TD_MUTEX_INI,       \/\/\/ initial a mutex variable$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_RELEASE	svf/include/Util/ThreadAPI.h	/^        TD_RELEASE,     \/\/\/ release a lock$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_TRY_ACQUIRE	svf/include/Util/ThreadAPI.h	/^        TD_TRY_ACQUIRE, \/\/\/ try to acquire a lock$/;"	e	enum:SVF::ThreadAPI::TD_TYPE
TD_TYPE	svf/include/Util/ThreadAPI.h	/^    enum TD_TYPE$/;"	g	class:SVF::ThreadAPI
TEMPLATE	svf-llvm/include/SVF-LLVM/DCHG.h	/^        TEMPLATE = 0x04,         \/\/ template class$/;"	e	enum:SVF::DCHNode::__anon12
TEMPLATE	svf/include/Graphs/CHG.h	/^        TEMPLATE = 0x04 \/\/ template class$/;"	e	enum:SVF::CHNode::__anon22
THREADAPI_CPP_	svf/lib/Util/ThreadAPI.cpp	31;"	d	file:
THREADAPI_H_	svf/include/Util/ThreadAPI.h	31;"	d
TIMEINTERVAL	svf/include/SVFIR/SVFType.h	526;"	d
TIMEStatMap	svf/include/Util/SVFStat.h	/^    typedef OrderedMap<std::string, double> TIMEStatMap;$/;"	t	class:SVF::SVFStat
TInterPhi	svf/include/SVFIR/SVFValue.h	/^        TInterPhi,        \/\/ │   └── Represents an inter-procedural PHI node$/;"	e	enum:SVF::SVFValue::GNodeK
TIntraPhi	svf/include/SVFIR/SVFValue.h	/^        TIntraPhi,        \/\/ │   ├── Represents an intra-procedural PHI node$/;"	e	enum:SVF::SVFValue::GNodeK
TLVFNodeEnd	svf/include/Graphs/SVFGStat.h	/^    void TLVFNodeEnd()$/;"	f	class:SVF::SVFGStat
TLVFNodeStart	svf/include/Graphs/SVFGStat.h	/^    void TLVFNodeStart()$/;"	f	class:SVF::SVFGStat
TPhi	svf/include/SVFIR/SVFValue.h	/^        TPhi,             \/\/ │   ├── Represents a type-based PHI node$/;"	e	enum:SVF::SVFValue::GNodeK
TRUNC	svf/include/SVFIR/SVFStatements.h	/^        TRUNC,      \/\/ Truncate integers$/;"	e	enum:SVF::CopyStmt::CopyKind
TWOPI	svf/include/Graphs/GraphWriter.h	/^    TWOPI,$/;"	e	enum:SVF::GraphProgram::Name
TYPEMALLOC	svf-llvm/lib/ObjTypeInference.cpp	/^const std::string TYPEMALLOC = "TYPE_MALLOC";$/;"	v
TYPE_DEBUG	svf-llvm/lib/ObjTypeInference.cpp	37;"	d	file:
Tactic	z3.obj/bin/python/z3/z3.py	/^class Tactic:$/;"	c
TacticObj	z3.obj/bin/python/z3/z3types.py	/^class TacticObj(ctypes.c_void_p):$/;"	c
ThdCallGraph	svf/include/Graphs/CallGraph.h	/^        NormCallGraph, ThdCallGraph$/;"	e	enum:SVF::CallGraph::CGEK
TheadMHPIndirectVF	svf/include/Graphs/VFGEdge.h	/^        TheadMHPIndirectVF$/;"	e	enum:SVF::VFGEdge::VFGEdgeK
Then	z3.obj/bin/python/z3/z3.py	/^def Then(*ts, **ks):$/;"	f
TheoreticalNumWords	svf/include/Util/NodeIDAllocator.h	/^        static const std::string TheoreticalNumWords;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
TheoreticalNumWords	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::TheoreticalNumWords = "TheoreticalWords";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
ThreadAPI	svf/include/Util/ThreadAPI.h	/^    ThreadAPI ()$/;"	f	class:SVF::ThreadAPI
ThreadAPI	svf/include/Util/ThreadAPI.h	/^class ThreadAPI$/;"	c	namespace:SVF
ThreadCallGraph	svf/include/Graphs/ThreadCallGraph.h	/^class ThreadCallGraph: public CallGraph$/;"	c	namespace:SVF
ThreadCallGraph	svf/lib/Graphs/ThreadCallGraph.cpp	/^ThreadCallGraph::ThreadCallGraph(const CallGraph& cg) :$/;"	f	class:ThreadCallGraph
ThreadCallGraphSCC	svf/include/MTA/TCT.h	/^    typedef SCCDetection<CallGraph*> ThreadCallGraphSCC;$/;"	t	class:SVF::TCT
ThreadCreateEdge	svf/include/MTA/TCT.h	/^        ThreadCreateEdge$/;"	e	enum:SVF::TCTEdge::CEDGEK
ThreadCreateEdgeSet	svf/include/MTA/TCT.h	/^    typedef GenericNode<TCTNode, TCTEdge>::GEdgeSetTy ThreadCreateEdgeSet;$/;"	t	class:SVF::TCTEdge
ThreadCreateEdgeSet	svf/include/MTA/TCT.h	/^    typedef TCTEdge::ThreadCreateEdgeSet ThreadCreateEdgeSet;$/;"	t	class:SVF::TCT
ThreadFork	svf/include/SVFIR/SVFStatements.h	/^        ThreadFork,$/;"	e	enum:SVF::SVFStmt::PEDGEK
ThreadForkEdge	svf/include/Graphs/ThreadCallGraph.h	/^    ThreadForkEdge(CallGraphNode* s, CallGraphNode* d, CallSiteID csId) :$/;"	f	class:SVF::ThreadForkEdge
ThreadForkEdge	svf/include/Graphs/ThreadCallGraph.h	/^class ThreadForkEdge: public CallGraphEdge$/;"	c	namespace:SVF
ThreadID	svf/include/Util/GeneralType.h	/^typedef unsigned ThreadID;$/;"	t	namespace:SVF
ThreadJoin	svf/include/SVFIR/SVFStatements.h	/^        ThreadJoin$/;"	e	enum:SVF::SVFStmt::PEDGEK
ThreadJoinEdge	svf/include/Graphs/ThreadCallGraph.h	/^    ThreadJoinEdge(CallGraphNode* s, CallGraphNode* d, CallSiteID csId) :$/;"	f	class:SVF::ThreadJoinEdge
ThreadJoinEdge	svf/include/Graphs/ThreadCallGraph.h	/^class ThreadJoinEdge: public CallGraphEdge$/;"	c	namespace:SVF
ThreadMHPIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^    ThreadMHPIndSVFGEdge(VFGNode* s, VFGNode* d): IndirectSVFGEdge(s,d,TheadMHPIndirectVF)$/;"	f	class:SVF::ThreadMHPIndSVFGEdge
ThreadMHPIndSVFGEdge	svf/include/Graphs/SVFGEdge.h	/^class ThreadMHPIndSVFGEdge : public IndirectSVFGEdge$/;"	c	namespace:SVF
ThreadPairSet	svf/include/MTA/MHP.h	/^    typedef Set<NodePair> ThreadPairSet;$/;"	t	class:SVF::ForkJoinAnalysis
ThreadStmtToThreadInterleav	svf/include/MTA/MHP.h	/^    typedef Map<CxtThreadStmt,NodeBS> ThreadStmtToThreadInterleav;$/;"	t	class:SVF::MHP
TimeOfCreateMUCHI	svf/include/Graphs/SVFGStat.h	/^    static const char* TimeOfCreateMUCHI;	\/\/\/< Time for generating mu\/chi for load\/store\/calls$/;"	m	class:SVF::MemSSAStat
TimeOfCreateMUCHI	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::TimeOfCreateMUCHI  = "GenMUCHITime";	\/\/\/< Time for generating mu\/chi for load\/store\/calls$/;"	m	class:MemSSAStat	file:
TimeOfGeneratingMemRegions	svf/include/Graphs/SVFGStat.h	/^    static const char* TimeOfGeneratingMemRegions;	\/\/\/< Time for allocating regions$/;"	m	class:SVF::MemSSAStat
TimeOfGeneratingMemRegions	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::TimeOfGeneratingMemRegions  = "GenRegionTime";	\/\/\/< Time for allocating regions$/;"	m	class:MemSSAStat	file:
TimeOfInsertingPHI	svf/include/Graphs/SVFGStat.h	/^    static const char* TimeOfInsertingPHI;	\/\/\/< Time for inserting phis$/;"	m	class:SVF::MemSSAStat
TimeOfInsertingPHI	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::TimeOfInsertingPHI = "InsertPHITime";	\/\/\/< Time for inserting phis$/;"	m	class:MemSSAStat	file:
TimeOfSSARenaming	svf/include/Graphs/SVFGStat.h	/^    static const char* TimeOfSSARenaming;	\/\/\/< Time for SSA rename$/;"	m	class:SVF::MemSSAStat
TimeOfSSARenaming	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::TimeOfSSARenaming = "SSARenameTime";	\/\/\/< Time for SSA rename$/;"	m	class:MemSSAStat	file:
Timeout	svf/include/Util/Options.h	/^    static const Option<u32_t> Timeout;$/;"	m	class:SVF::Options
ToInt	z3.obj/bin/python/z3/z3.py	/^def ToInt(a):$/;"	f
ToReal	z3.obj/bin/python/z3/z3.py	/^def ToReal(a):$/;"	f
TotalTime	svf/include/Util/NodeIDAllocator.h	/^        static const std::string TotalTime;$/;"	m	class:SVF::NodeIDAllocator::Clusterer
TotalTime	svf/lib/Util/NodeIDAllocator.cpp	/^const std::string NodeIDAllocator::Clusterer::TotalTime = "TotalTime";$/;"	m	class:SVF::NodeIDAllocator::Clusterer	file:
TotalTimeOfConstructMemSSA	svf/include/Graphs/SVFGStat.h	/^    static const char* TotalTimeOfConstructMemSSA;	\/\/\/< Total time for constructing memory SSA$/;"	m	class:SVF::MemSSAStat
TotalTimeOfConstructMemSSA	svf/lib/Graphs/SVFGStat.cpp	/^const char* MemSSAStat::TotalTimeOfConstructMemSSA = "TotalMSSATime";	\/\/\/< Total time for constructing memory SSA$/;"	m	class:MemSSAStat	file:
TrailingZerosCounter	svf/include/Util/SparseBitVector.h	/^template <typename T, std::size_t SizeOfT> struct TrailingZerosCounter$/;"	s	namespace:SVF
TrailingZerosCounter	svf/include/Util/SparseBitVector.h	/^template <typename T> struct TrailingZerosCounter<T, 4>$/;"	s	namespace:SVF
TrailingZerosCounter	svf/include/Util/SparseBitVector.h	/^template <typename T> struct TrailingZerosCounter<T, 8>$/;"	s	namespace:SVF
TransitiveClosure	z3.obj/bin/python/z3/z3.py	/^def TransitiveClosure(f):$/;"	f
TreeNode	svf/include/CFL/CFLSolver.h	/^        TreeNode(NodeID nId) : id(nId)$/;"	f	struct:SVF::POCRHybridSolver::TreeNode
TreeNode	svf/include/CFL/CFLSolver.h	/^    struct TreeNode$/;"	s	class:SVF::POCRHybridSolver
TreeOrder	z3.obj/bin/python/z3/z3.py	/^def TreeOrder(a, index):$/;"	f
TryFor	z3.obj/bin/python/z3/z3.py	/^def TryFor(t, ms, ctx=None):$/;"	f
TupleSort	z3.obj/bin/python/z3/z3.py	/^def TupleSort(name, sorts, ctx = None):$/;"	f
Type	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Type Type;$/;"	t	namespace:SVF
Type	svf/include/MemoryModel/PointsTo.h	/^    enum Type$/;"	g	class:SVF::PointsTo
Type2TypeInfo	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Type2TypeInfoMap Type2TypeInfo;$/;"	m	class:SVF::LLVMModuleSet
Type2TypeInfoMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef Map<const Type*, StInfo*> Type2TypeInfoMap;$/;"	t	class:SVF::LLVMModuleSet
TypeAnalysis	svf/include/WPA/TypeAnalysis.h	/^    TypeAnalysis(SVFIR* pag)$/;"	f	class:SVF::TypeAnalysis
TypeAnalysis	svf/include/WPA/TypeAnalysis.h	/^class TypeAnalysis:  public AndersenBase$/;"	c	namespace:SVF
TypeCPP_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        TypeCPP_WPA, \/\/\/<  Type-based analysis for C++$/;"	e	enum:SVF::PointerAnalysis::PTATY
TypeLocSetsMap	svf/include/SVFIR/SVFIR.h	/^    typedef Map<NodeID, SVFTypeLocSetsPair> TypeLocSetsMap;$/;"	t	class:SVF::SVFIR
TypeMap	svf/include/CFL/CFLSolver.h	/^    typedef std::map<const Label, NodeBS> TypeMap;                  \/\/ Label with SparseBitVector of NodeID$/;"	t	class:SVF::POCRSolver
TypePrint	svf/include/Util/Options.h	/^    static const Option<bool> TypePrint;$/;"	m	class:SVF::Options
UDiv	z3.obj/bin/python/z3/z3.py	/^def UDiv(a, b):$/;"	f
UGE	z3.obj/bin/python/z3/z3.py	/^def UGE(a, b):$/;"	f
UGT	z3.obj/bin/python/z3/z3.py	/^def UGT(a, b):$/;"	f
UITOFP	svf/include/SVFIR/SVFStatements.h	/^        UITOFP,     \/\/ UInt -> floating point$/;"	e	enum:SVF::CopyStmt::CopyKind
ULE	z3.obj/bin/python/z3/z3.py	/^def ULE(a, b):$/;"	f
ULT	z3.obj/bin/python/z3/z3.py	/^def ULT(a, b):$/;"	f
UNCLASSIFIED	svf/include/AE/Svfexe/AbsExtAPI.h	/^    enum ExtAPIType { UNCLASSIFIED, MEMCPY, MEMSET, STRCPY, STRCAT };$/;"	e	enum:SVF::AbsExtAPI::ExtAPIType
UNKNOWN	svf/include/AE/Svfexe/AEDetector.h	/^        UNKNOWN,    \/\/\/< Default type if the kind is not specified.$/;"	e	enum:SVF::AEDetector::DetectorKind
URem	z3.obj/bin/python/z3/z3.py	/^def URem(a, b):$/;"	f
UTIL_ITERATOR_H	svf/include/Util/iterator.h	10;"	d
UTIL_ITERATOR_RANGE_H	svf/include/Util/iterator_range.h	19;"	d
UnaryOPStmt	svf/include/SVFIR/SVFStatements.h	/^    UnaryOPStmt() : SVFStmt(SVFStmt::UnaryOp) {}$/;"	f	class:SVF::UnaryOPStmt
UnaryOPStmt	svf/include/SVFIR/SVFStatements.h	/^    UnaryOPStmt(SVFVar* s, SVFVar* d, u32_t oc)$/;"	f	class:SVF::UnaryOPStmt
UnaryOPStmt	svf/include/SVFIR/SVFStatements.h	/^class UnaryOPStmt: public SVFStmt$/;"	c	namespace:SVF
UnaryOPVFGNode	svf/include/Graphs/VFGNode.h	/^    UnaryOPVFGNode(NodeID id, const PAGNode *r) : VFGNode(id, UnaryOp), res(r) { }$/;"	f	class:SVF::UnaryOPVFGNode
UnaryOPVFGNode	svf/include/Graphs/VFGNode.h	/^class UnaryOPVFGNode: public VFGNode$/;"	c	namespace:SVF
UnaryOp	svf/include/SVFIR/SVFStatements.h	/^        UnaryOp,$/;"	e	enum:SVF::SVFStmt::PEDGEK
UnaryOp	svf/include/SVFIR/SVFValue.h	/^        UnaryOp,          \/\/ ├── Represents a unary operation$/;"	e	enum:SVF::SVFValue::GNodeK
UnaryOperator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::UnaryOperator UnaryOperator;$/;"	t	namespace:SVF
UndefValue	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::UndefValue UndefValue;$/;"	t	namespace:SVF
UnifyFunctionExit	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    inline void UnifyFunctionExit(Module& module)$/;"	f	class:SVF::MergeFunctionRets
UnifyFunctionExitNodes	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::UnifyFunctionExitNodes UnifyFunctionExitNodes;$/;"	t	namespace:SVF
UnifyFunctionExitNodes	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::UnifyFunctionExitNodesLegacyPass UnifyFunctionExitNodes;$/;"	t	namespace:SVF
UnifyFunctionExitNodes	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::UnifyFunctionExitNodesPass UnifyFunctionExitNodes;$/;"	t	namespace:SVF
Union	z3.obj/bin/python/z3/z3.py	/^def Union(*args):$/;"	f
Unit	z3.obj/bin/python/z3/z3.py	/^def Unit(a):$/;"	f
UnreachableInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::UnreachableInst UnreachableInst;$/;"	t	namespace:SVF
Update	z3.obj/bin/python/z3/z3.py	/^def Update(a, i, v):$/;"	f
UpdatedVarMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef Map<LocID, DataSet> UpdatedVarMap;	\/\/\/< for propagating only newly added variable in IN\/OUT set$/;"	t	class:SVF::MutableIncDFPTData
UpdatedVarMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef Map<LocID, KeySet> UpdatedVarMap;$/;"	t	class:SVF::PersistentIncDFPTData
UpdatedVarMapIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename UpdatedVarMap::iterator UpdatedVarMapIter;$/;"	t	class:SVF::MutableIncDFPTData
UpdatedVarconstIter	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename UpdatedVarMap::const_iterator UpdatedVarconstIter;$/;"	t	class:SVF::MutableIncDFPTData
Use	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Use Use;$/;"	t	namespace:SVF
UsePreCompFieldSensitive	svf/include/Util/Options.h	/^    static Option<bool> UsePreCompFieldSensitive;$/;"	m	class:SVF::Options
User	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::User User;$/;"	t	namespace:SVF
UserInputQuery	svf/include/Util/Options.h	/^    static const Option<std::string> UserInputQuery;$/;"	m	class:SVF::Options
VAArgInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::VAArgInst VAArgInst;$/;"	t	namespace:SVF
VACopyInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::VACopyInst VACopyInst;$/;"	t	namespace:SVF
VAEndInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::VAEndInst VAEndInst;$/;"	t	namespace:SVF
VALUEFLOWDDA_H_	svf/include/DDA/DDAVFSolver.h	31;"	d
VAR_ARRAY_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        VAR_ARRAY_OBJ = 0x40,  \/\/ object contains array$/;"	e	enum:SVF::ObjTypeInfo::__anon18
VAR_STRUCT_OBJ	svf/include/SVFIR/ObjTypeInfo.h	/^        VAR_STRUCT_OBJ = 0x20,  \/\/ object contains struct$/;"	e	enum:SVF::ObjTypeInfo::__anon18
VAStartInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::VAStartInst VAStartInst;$/;"	t	namespace:SVF
VCallInCtorOrDtor	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::VCallInCtorOrDtor(const CallBase* cs)$/;"	f	class:cppUtil
VFCFLGraphBuilder	svf/include/CFL/CFLGraphBuilder.h	/^class VFCFLGraphBuilder : public CFLGraphBuilder$/;"	c	namespace:SVF
VFG	svf/include/Graphs/VFG.h	/^class VFG : public GenericVFGTy$/;"	c	namespace:SVF
VFG	svf/lib/Graphs/VFG.cpp	/^VFG::VFG(CallGraph* cg, VFGK k): totalVFGNode(0), callgraph(cg), pag(SVFIR::getPAG()), kind(k)$/;"	f	class:VFG
VFGEdge	svf/include/Graphs/VFGEdge.h	/^    VFGEdge(VFGNode* s, VFGNode* d, GEdgeFlag k) : GenericVFGEdgeTy(s,d,k)$/;"	f	class:SVF::VFGEdge
VFGEdge	svf/include/Graphs/VFGEdge.h	/^class VFGEdge : public GenericVFGEdgeTy$/;"	c	namespace:SVF
VFGEdgeK	svf/include/Graphs/VFGEdge.h	/^    enum VFGEdgeK$/;"	g	class:SVF::VFGEdge
VFGEdgeSetTy	svf/include/Graphs/VFG.h	/^    typedef VFGEdge::VFGEdgeSetTy VFGEdgeSetTy;$/;"	t	class:SVF::VFG
VFGEdgeSetTy	svf/include/Graphs/VFGEdge.h	/^    typedef GenericNode<VFGNode,VFGEdge>::GEdgeSetTy VFGEdgeSetTy;$/;"	t	class:SVF::VFGEdge
VFGK	svf/include/Graphs/VFG.h	/^    enum VFGK$/;"	g	class:SVF::VFG
VFGNode	svf/include/Graphs/VFGNode.h	/^    VFGNode(NodeID i, VFGNodeK k): GenericVFGNodeTy(i,k), icfgNode(nullptr)$/;"	f	class:SVF::VFGNode
VFGNode	svf/include/Graphs/VFGNode.h	/^class VFGNode : public GenericVFGNodeTy$/;"	c	namespace:SVF
VFGNodeIDToNodeMapTy	svf/include/Graphs/VFG.h	/^    typedef OrderedMap<NodeID, VFGNode *> VFGNodeIDToNodeMapTy;$/;"	t	class:SVF::VFG
VFGNodeIter	svf/include/Graphs/VFG.h	/^    typedef VFGEdge::VFGEdgeSetTy::iterator VFGNodeIter;$/;"	t	class:SVF::VFG
VFGNodeK	svf/include/Graphs/VFGNode.h	/^    typedef GNodeK VFGNodeK;$/;"	t	class:SVF::VFGNode
VFGNodeList	svf/include/Graphs/ICFGNode.h	/^    typedef std::list<const VFGNode*> VFGNodeList;$/;"	t	class:SVF::ICFGNode
VFGNodeSet	svf/include/Graphs/VFG.h	/^    typedef Set<VFGNode*> VFGNodeSet;$/;"	t	class:SVF::VFG
VFGNodes	svf/include/Graphs/ICFGNode.h	/^    VFGNodeList VFGNodes; \/\/< a list of VFGNodes$/;"	m	class:SVF::ICFGNode
VFGNodes	svf/include/Graphs/VFG.h	/^    inline bool VFGNodes(const FunObjVar *fun) const$/;"	f	class:SVF::VFG
VFS_H_	svf/include/WPA/VersionedFlowSensitive.h	15;"	d
VFS_WPA	svf/include/MemoryModel/PointerAnalysis.h	/^        VFS_WPA,		\/\/\/< Versioned sparse flow-sensitive WPA$/;"	e	enum:SVF::PointerAnalysis::PTATY
VFWorkList	svf/include/SABER/ProgSlice.h	/^    typedef FIFOWorkList<const SVFGNode*> VFWorkList;		    \/\/\/< worklist for value-flow guard computation$/;"	t	class:SVF::ProgSlice
VFunSet	svf/include/Graphs/CHG.h	/^typedef Set<const FunObjVar*> VFunSet;$/;"	t	namespace:SVF
VFunSet	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef Set<const FunObjVar*> VFunSet;$/;"	t	class:SVF::PointerAnalysis
VPIntrinsic	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::VPIntrinsic VPIntrinsic;$/;"	t	namespace:SVF
VTablePtrToCallSiteMap	svf/include/DDA/DDAClient.h	/^    typedef OrderedMap<NodeID,const CallICFGNode*> VTablePtrToCallSiteMap;$/;"	t	class:SVF::AliasDDAClient
VTablePtrToCallSiteMap	svf/include/DDA/DDAClient.h	/^    typedef OrderedMap<NodeID,const CallICFGNode*> VTablePtrToCallSiteMap;$/;"	t	class:SVF::FunptrDDAClient
VTableSet	svf/include/Graphs/CHG.h	/^typedef Set<const GlobalObjVar*> VTableSet;$/;"	t	namespace:SVF
VTableSet	svf/include/MemoryModel/PointerAnalysis.h	/^    typedef Set<const GlobalObjVar*> VTableSet;$/;"	t	class:SVF::PointerAnalysis
VThunkFuncLabel	svf-llvm/lib/CppUtil.cpp	/^const std::string VThunkFuncLabel = "virtual thunk to ";$/;"	v
ValDomain	svf/include/MTA/LockAnalysis.h	/^    enum ValDomain$/;"	g	class:SVF::LockAnalysis
ValDomain	svf/include/MTA/MHP.h	/^    enum ValDomain$/;"	g	class:SVF::ForkJoinAnalysis
ValNode	svf/include/SVFIR/SVFValue.h	/^        ValNode,                 \/\/ ├── Represents a standard value variable$/;"	e	enum:SVF::SVFValue::GNodeK
ValSymbol	svf/include/Graphs/IRGraph.h	/^        ValSymbol,$/;"	e	enum:SVF::IRGraph::SYMTYPE
ValVar	svf/include/SVFIR/SVFVariables.h	/^    ValVar(NodeID i, PNODEK ty = ValNode) : SVFVar(i, ty), icfgNode(nullptr) {}$/;"	f	class:SVF::ValVar
ValVar	svf/include/SVFIR/SVFVariables.h	/^    ValVar(NodeID i, const SVFType* svfType, const ICFGNode* node, PNODEK ty = ValNode)$/;"	f	class:SVF::ValVar
ValVar	svf/include/SVFIR/SVFVariables.h	/^class ValVar: public SVFVar$/;"	c	namespace:SVF
ValidateTests	svf/include/Util/Options.h	/^    static const Option<bool> ValidateTests;$/;"	m	class:SVF::Options
Value	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::Value Value;$/;"	t	namespace:SVF
ValueBoolPair	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef std::pair<const Value *, bool> ValueBoolPair;$/;"	t	class:SVF::ObjTypeInference
ValueSet	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef Set<const Value *> ValueSet;$/;"	t	class:SVF::ObjTypeInference
ValueToClassNames	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef Map<const Value *, Set<std::string>> ValueToClassNames;$/;"	t	class:SVF::ObjTypeInference
ValueToIDMapTy	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    typedef OrderedMap<const Value*, NodeID> ValueToIDMapTy;$/;"	t	class:SVF::LLVMModuleSet
ValueToInferSites	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef ValueToValueSet ValueToInferSites;$/;"	t	class:SVF::ObjTypeInference
ValueToSources	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef ValueToValueSet ValueToSources;$/;"	t	class:SVF::ObjTypeInference
ValueToType	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef Map<const Value *, const Type *> ValueToType;$/;"	t	class:SVF::ObjTypeInference
ValueToValueSet	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    typedef Map<const Value *, ValueSet> ValueToValueSet;$/;"	t	class:SVF::ObjTypeInference
Var	z3.obj/bin/python/z3/z3.py	/^def Var(idx, s):$/;"	f
Var2LabelMap	svf/include/SVFIR/SVFStatements.h	/^    typedef Map<const SVFVar*, u32_t> Var2LabelMap;$/;"	t	class:SVF::SVFStmt
VarArgValPN	svf/include/SVFIR/SVFVariables.h	/^    VarArgValPN(NodeID i) : ValVar(i, VarargValNode) {}$/;"	f	class:SVF::VarArgValPN
VarArgValPN	svf/include/SVFIR/SVFVariables.h	/^    VarArgValPN(NodeID i, const FunObjVar* node, const SVFType* svfType, const ICFGNode* icn)$/;"	f	class:SVF::VarArgValPN
VarArgValPN	svf/include/SVFIR/SVFVariables.h	/^class VarArgValPN : public ValVar$/;"	c	namespace:SVF
VarToAbsValMap	svf/include/AE/Core/AbstractState.h	/^    typedef Map<u32_t, AbstractValue> VarToAbsValMap;$/;"	t	class:SVF::AbstractState
VarToPropNodeMap	svf/include/WPA/VersionedFlowSensitive.h	/^    typedef Map<VersionedVar, const DummyVersionPropSVFGNode *> VarToPropNodeMap;$/;"	t	class:SVF::VersionedFlowSensitive
VarToValMap	svf/include/AE/Core/RelExeState.h	/^    typedef Map<u32_t, Z3Expr> VarToValMap;$/;"	t	class:SVF::RelExeState
VarargSymbol	svf/include/Graphs/IRGraph.h	/^        VarargSymbol$/;"	e	enum:SVF::IRGraph::SYMTYPE
VarargValNode	svf/include/SVFIR/SVFValue.h	/^        VarargValNode,           \/\/ ├── Represents a variadic argument node$/;"	e	enum:SVF::SVFValue::GNodeK
VariableAttribute	svf/include/CFL/CFGrammar.h	/^    typedef u32_t VariableAttribute;$/;"	t	class:SVF::GrammarBase
VariantGep	svf/include/Graphs/ConsGEdge.h	/^        Addr, Copy, Store, Load, NormalGep, VariantGep$/;"	e	enum:SVF::ConstraintEdge::ConstraintEdgeK
VariantGepCGEdge	svf/include/Graphs/ConsGEdge.h	/^    VariantGepCGEdge(ConstraintNode* s, ConstraintNode* d, EdgeID id)$/;"	f	class:SVF::VariantGepCGEdge
VariantGepCGEdge	svf/include/Graphs/ConsGEdge.h	/^class VariantGepCGEdge : public GepCGEdge$/;"	c	namespace:SVF
VectorType	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::VectorType VectorType;$/;"	t	namespace:SVF
Version	svf/include/Util/GeneralType.h	/^                    typedef unsigned Version;$/;"	t	namespace:SVF
VersionRelianceMap	svf/include/WPA/VersionedFlowSensitive.h	/^    typedef Map<NodeID, Map<Version, std::vector<Version>>> VersionRelianceMap;$/;"	t	class:SVF::VersionedFlowSensitive
VersionSet	svf/include/Util/GeneralType.h	/^                    typedef Set<Version> VersionSet;$/;"	t	namespace:SVF
Versioned	svf/include/MemoryModel/AbstractPointsToDS.h	/^        Versioned,$/;"	e	enum:SVF::PTData::PTDataTy
VersionedFlowSensitive	svf/include/WPA/VersionedFlowSensitive.h	/^class VersionedFlowSensitive : public FlowSensitive$/;"	c	namespace:SVF
VersionedFlowSensitive	svf/lib/WPA/VersionedFlowSensitive.cpp	/^VersionedFlowSensitive::VersionedFlowSensitive(SVFIR *_pag, PTATY type)$/;"	f	class:VersionedFlowSensitive
VersionedFlowSensitiveStat	svf/include/WPA/WPAStat.h	/^    VersionedFlowSensitiveStat(VersionedFlowSensitive* pta): PTAStat(pta)$/;"	f	class:SVF::VersionedFlowSensitiveStat
VersionedFlowSensitiveStat	svf/include/WPA/WPAStat.h	/^class VersionedFlowSensitiveStat : public PTAStat$/;"	c	namespace:SVF
VersionedKeyToIDMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    typedef typename PersistentPTData<VersionedKey, VersionedKeySet, Data, DataSet>::KeyToIDMap VersionedKeyToIDMap;$/;"	t	class:SVF::PersistentVersionedPTData
VersionedPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    VersionedPTData(bool reversePT = true, PTDataTy ty = PTDataTy::Versioned) : BasePTData(reversePT, ty) { }$/;"	f	class:SVF::VersionedPTData
VersionedPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^class VersionedPTData : public PTData<Key, KeySet, Data, DataSet>$/;"	c	namespace:SVF
VersionedPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    typedef VersionedPTData<NodeID, NodeSet, NodeID, PointsTo, VersionedVar, Set<VersionedVar>> VersionedPTDataTy;$/;"	t	class:SVF::BVDataPTAImpl
VersionedVar	svf/include/Util/GeneralType.h	/^                    typedef std::pair<NodeID, Version> VersionedVar;$/;"	t	namespace:SVF
VersionedVarSet	svf/include/Util/GeneralType.h	/^                    typedef Set<VersionedVar> VersionedVarSet;$/;"	t	namespace:SVF
VersioningThreads	svf/include/Util/Options.h	/^    static const Option<u32_t> VersioningThreads;$/;"	m	class:SVF::Options
Veto	svf/include/WPA/WPAPass.h	/^        Veto,			\/\/\/< return NoAlias if any pta says no alias$/;"	e	enum:SVF::WPAPass::AliasCheckRule
ViewGraph	svf/include/Graphs/GraphWriter.h	/^void ViewGraph(const GraphType &G,const std::string& name,$/;"	f	namespace:SVF
VtableInSVFIR	svf/include/Util/Options.h	/^    static const Option<bool> VtableInSVFIR;$/;"	m	class:SVF::Options
WARN_IFNOT	svf-llvm/lib/ObjTypeInference.cpp	64;"	d	file:
WARN_IFNOT	svf-llvm/lib/ObjTypeInference.cpp	72;"	d	file:
WARN_MSG	svf-llvm/lib/ObjTypeInference.cpp	58;"	d	file:
WARN_MSG	svf-llvm/lib/ObjTypeInference.cpp	71;"	d	file:
WORKLIST_H_	svf/include/Util/WorkList.h	37;"	d
WPAConstraintSolver	svf/include/WPA/Andersen.h	/^typedef WPASolver<ConstraintGraph*> WPAConstraintSolver;$/;"	t	namespace:SVF
WPAConstraintSolver	svf/include/WPA/Steensgaard.h	/^typedef WPASolver<ConstraintGraph*> WPAConstraintSolver;$/;"	t	namespace:SVF
WPAFSSOLVER_H_	svf/include/WPA/WPAFSSolver.h	37;"	d
WPAFSSolver	svf/include/WPA/WPAFSSolver.h	/^    WPAFSSolver() : WPASolver<GraphType>()$/;"	f	class:SVF::WPAFSSolver
WPAFSSolver	svf/include/WPA/WPAFSSolver.h	/^class WPAFSSolver : public WPASolver<GraphType>$/;"	c	namespace:SVF
WPAMinimumSolver	svf/include/WPA/WPAFSSolver.h	/^    WPAMinimumSolver() : WPASCCSolver<GraphType>() {}$/;"	f	class:SVF::WPAMinimumSolver
WPAMinimumSolver	svf/include/WPA/WPAFSSolver.h	/^class WPAMinimumSolver : public WPASCCSolver<GraphType>$/;"	c	namespace:SVF
WPANum	svf/include/Util/Options.h	/^    static const Option<bool> WPANum;$/;"	m	class:SVF::Options
WPAPass	svf/include/WPA/WPAPass.h	/^    WPAPass()$/;"	f	class:SVF::WPAPass
WPAPass	svf/include/WPA/WPAPass.h	/^class WPAPass$/;"	c	namespace:SVF
WPASCCSolver	svf/include/WPA/WPAFSSolver.h	/^    WPASCCSolver() : WPAFSSolver<GraphType>() {}$/;"	f	class:SVF::WPASCCSolver
WPASCCSolver	svf/include/WPA/WPAFSSolver.h	/^class WPASCCSolver : public WPAFSSolver<GraphType>$/;"	c	namespace:SVF
WPASVFGFSSolver	svf/include/WPA/FlowSensitive.h	/^typedef WPAFSSolver<SVFG*> WPASVFGFSSolver;$/;"	t	namespace:SVF
WPASolver	svf/include/WPA/WPASolver.h	/^    WPASolver(): reanalyze(false), iterationForPrintStat(1000), _graph(nullptr), numOfIteration(0)$/;"	f	class:SVF::WPASolver
WPASolver	svf/include/WPA/WPASolver.h	/^class WPASolver$/;"	c	namespace:SVF
WPA_H_	svf/include/WPA/WPAPass.h	38;"	d
WTO	svf/include/Graphs/WTO.h	/^    explicit WTO(GraphT* graph, const NodeT* entry) : _num(0), _graph(graph), _entry(entry)$/;"	f	class:SVF::WTO
WTO	svf/include/Graphs/WTO.h	/^template <typename GraphT> class WTO$/;"	c	namespace:SVF
WTOCT	svf/include/Graphs/WTO.h	/^    enum WTOCT$/;"	g	class:SVF::WTOComponent
WTOComponent	svf/include/Graphs/WTO.h	/^    explicit WTOComponent(WTOCT k) : _type(k) {};$/;"	f	class:SVF::WTOComponent
WTOComponent	svf/include/Graphs/WTO.h	/^template <typename GraphT> class WTOComponent$/;"	c	namespace:SVF
WTOComponentPtr	svf/include/Graphs/WTO.h	/^    typedef const WTOComponentT* WTOComponentPtr;$/;"	t	class:SVF::WTO
WTOComponentPtr	svf/include/Graphs/WTO.h	/^    typedef const WTOComponentT* WTOComponentPtr;$/;"	t	class:SVF::final
WTOComponentRefList	svf/include/Graphs/WTO.h	/^    typedef std::list<WTOComponentPtr> WTOComponentRefList;$/;"	t	class:SVF::WTO
WTOComponentRefList	svf/include/Graphs/WTO.h	/^    typedef std::list<WTOComponentPtr> WTOComponentRefList;$/;"	t	class:SVF::final
WTOComponentRefSet	svf/include/Graphs/WTO.h	/^    typedef Set<WTOComponentPtr> WTOComponentRefSet;$/;"	t	class:SVF::WTO
WTOComponentT	svf/include/Graphs/WTO.h	/^    typedef WTOComponent<GraphT> WTOComponentT;$/;"	t	class:SVF::WTO
WTOComponentT	svf/include/Graphs/WTO.h	/^    typedef WTOComponent<GraphT> WTOComponentT;$/;"	t	class:SVF::final
WTOComponentVisitor	svf/include/Graphs/WTO.h	/^template <typename GraphT> class WTOComponentVisitor$/;"	c	namespace:SVF
WTOCycle	svf/include/Graphs/WTO.h	/^    WTOCycle(const WTONode<GraphT>* head, WTOComponentRefList components)$/;"	f	class:SVF::final
WTOCycleDepth	svf/include/Graphs/WTO.h	/^template <typename GraphT> class WTOCycleDepth$/;"	c	namespace:SVF
WTOCycleDepthBuilder	svf/include/Graphs/WTO.h	/^        explicit WTOCycleDepthBuilder($/;"	f	class:SVF::WTO::final
WTOCycleDepthPtr	svf/include/Graphs/WTO.h	/^    typedef std::shared_ptr<GraphTWTOCycleDepth> WTOCycleDepthPtr;$/;"	t	class:SVF::WTO
WTOCycleT	svf/include/Graphs/WTO.h	/^    typedef WTOCycle<GraphT> WTOCycleT;$/;"	t	class:SVF::WTO
WTOCycleT	svf/include/Graphs/WTO.h	/^    typedef WTOCycle<GraphT> WTOCycleT;$/;"	t	class:SVF::WTOComponentVisitor
WTONode	svf/include/Graphs/WTO.h	/^    explicit WTONode(const NodeT* node)$/;"	f	class:SVF::final
WTONodeT	svf/include/Graphs/WTO.h	/^    typedef WTONode<GraphT> WTONodeT;$/;"	t	class:SVF::WTO
WTONodeT	svf/include/Graphs/WTO.h	/^    typedef WTONode<GraphT> WTONodeT;$/;"	t	class:SVF::WTOComponentVisitor
WTO_H_	svf/include/Graphs/WTO.h	35;"	d
Wall	svf/include/Util/SVFStat.h	/^        Wall,$/;"	e	enum:SVF::SVFStat::ClockType
When	z3.obj/bin/python/z3/z3.py	/^def When(p, t, ctx=None):$/;"	f
WidenDelay	svf/include/Util/Options.h	/^    static const Option<u32_t> WidenDelay;$/;"	m	class:SVF::Options
With	z3.obj/bin/python/z3/z3.py	/^def With(t, *args, **keys):$/;"	f
WithOverflowInst	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::WithOverflowInst WithOverflowInst;$/;"	t	namespace:SVF
WithParams	z3.obj/bin/python/z3/z3.py	/^def WithParams(t, p):$/;"	f
Word	svf/include/Util/CoreBitVector.h	/^    typedef unsigned long long Word;$/;"	t	class:SVF::CoreBitVector
WordNumber	svf/include/Util/SparseBitVector.h	/^        unsigned WordNumber;$/;"	m	class:SVF::SparseBitVector::SparseBitVectorIterator
WordSize	svf/include/Util/CoreBitVector.h	/^    static const size_t WordSize;$/;"	m	class:SVF::CoreBitVector
WordSize	svf/lib/Util/CoreBitVector.cpp	/^const size_t CoreBitVector::WordSize = sizeof(Word) * CHAR_BIT;$/;"	m	class:SVF::CoreBitVector	file:
WorkList	svf-llvm/include/SVF-LLVM/CHGBuilder.h	/^    typedef CHGraph::WorkList WorkList;$/;"	t	class:SVF::CHGBuilder
WorkList	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    typedef FIFOWorkList<const Instruction*> WorkList;$/;"	t	class:SVF::ICFGBuilder
WorkList	svf/include/CFL/CFLSVFGBuilder.h	/^    typedef FIFOWorkList<NodeID> WorkList;$/;"	t	class:SVF::CFLSVFGBuilder
WorkList	svf/include/CFL/CFLSolver.h	/^    typedef FIFOWorkList<const CFLEdge*> WorkList;$/;"	t	class:SVF::CFLSolver
WorkList	svf/include/Graphs/CHG.h	/^    typedef FIFOWorkList<const CHNode*> WorkList;$/;"	t	class:SVF::CHGraph
WorkList	svf/include/Graphs/ConsG.h	/^    typedef FIFOWorkList<NodeID> WorkList;$/;"	t	class:SVF::ConstraintGraph
WorkList	svf/include/Graphs/SVFGOPT.h	/^    typedef FIFOWorkList<const MSSAPHISVFGNode*> WorkList;$/;"	t	class:SVF::SVFGOPT
WorkList	svf/include/MSSA/MemRegion.h	/^    typedef FIFOWorkList<NodeID> WorkList;$/;"	t	class:SVF::MRGenerator
WorkList	svf/include/SABER/LeakChecker.h	/^    typedef ProgSlice::VFWorkList WorkList;$/;"	t	class:SVF::LeakChecker
WorkList	svf/include/SABER/SaberSVFGBuilder.h	/^    typedef FIFOWorkList<NodeID> WorkList;$/;"	t	class:SVF::SaberSVFGBuilder
WorkList	svf/include/SABER/SrcSnkDDA.h	/^    typedef ProgSlice::VFWorkList WorkList;$/;"	t	class:SVF::SrcSnkDDA
WorkList	svf/include/SABER/SrcSnkSolver.h	/^    typedef FIFOWorkList<DPIm> WorkList;$/;"	t	class:SVF::SrcSnkSolver
WorkList	svf/include/Util/GraphReachSolver.h	/^    typedef FIFOWorkList<DPIm> WorkList;$/;"	t	class:SVF::GraphReachSolver
WorkList	svf/include/WPA/WPASolver.h	/^    typedef FIFOWorkList<NodeID> WorkList;$/;"	t	class:SVF::WPASolver
WorkStack	svf/include/WPA/CSC.h	/^    typedef FILOWorkList<NodeID> WorkStack;$/;"	t	class:SVF::CSC
WriteAnder	svf/include/Util/Options.h	/^    static const Option<std::string> WriteAnder;$/;"	m	class:SVF::Options
WriteGraph	svf/include/Graphs/GraphWriter.h	/^std::ofstream &WriteGraph(std::ofstream &O, const GraphType &G,$/;"	f	namespace:SVF
WriteGraph	svf/include/Graphs/GraphWriter.h	/^std::string WriteGraph(const GraphType &G,$/;"	f	namespace:SVF
WriteGraphToFile	svf/include/Graphs/GraphPrinter.h	/^    static void WriteGraphToFile(SVF::OutStream &O,$/;"	f	class:SVF::GraphPrinter
WriteSVFG	svf/include/Util/Options.h	/^    static const Option<std::string> WriteSVFG;$/;"	m	class:SVF::Options
XSetLocaleModifiers	svf-llvm/lib/extapi.c	/^char *XSetLocaleModifiers(char *a)$/;"	f
XmbTextPropertyToTextList	svf-llvm/lib/extapi.c	/^int XmbTextPropertyToTextList(void *a, void *b, char ***c, int *d)$/;"	f
Xor	z3.obj/bin/python/z3/z3.py	/^def Xor(a, b, ctx=None):$/;"	f
Z3Exception	z3.obj/bin/python/z3/z3types.py	/^class Z3Exception(Exception):$/;"	c
Z3Expr	svf/include/Util/Z3Expr.h	/^    Z3Expr() : e(nullExpr())$/;"	f	class:SVF::Z3Expr
Z3Expr	svf/include/Util/Z3Expr.h	/^    Z3Expr(const Z3Expr &z3Expr) : e(z3Expr.getExpr())$/;"	f	class:SVF::Z3Expr
Z3Expr	svf/include/Util/Z3Expr.h	/^    Z3Expr(const z3::expr &_e) : e(_e)$/;"	f	class:SVF::Z3Expr
Z3Expr	svf/include/Util/Z3Expr.h	/^    Z3Expr(double f): e(getContext().real_val(std::to_string(f).c_str()))$/;"	f	class:SVF::Z3Expr
Z3Expr	svf/include/Util/Z3Expr.h	/^    Z3Expr(float f) : Z3Expr((double) f)$/;"	f	class:SVF::Z3Expr
Z3Expr	svf/include/Util/Z3Expr.h	/^    Z3Expr(int i) : e(getContext().int_val(i))$/;"	f	class:SVF::Z3Expr
Z3Expr	svf/include/Util/Z3Expr.h	/^class Z3Expr$/;"	c	namespace:SVF
Z3PPObject	z3.obj/bin/python/z3/z3.py	/^class Z3PPObject:$/;"	c
Z3PP_H_	z3.obj/include/z3++.h	22;"	d
Z3_ALGEBRAIC_H_	z3.obj/include/z3_algebraic.h	22;"	d
Z3_API	z3.obj/include/z3_macros.h	13;"	d
Z3_API	z3.obj/include/z3_macros.h	15;"	d
Z3_API_H_	z3.obj/include/z3_api.h	6;"	d
Z3_APP_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_APP_AST = 1$/;"	v
Z3_APP_AST	z3.obj/include/z3_api.h	/^    Z3_APP_AST,$/;"	e	enum:__anon5
Z3_ARRAY_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_ARRAY_SORT = 5$/;"	v
Z3_ARRAY_SORT	z3.obj/include/z3_api.h	/^    Z3_ARRAY_SORT,$/;"	e	enum:__anon4
Z3_ARRAY_TYPE	z3.obj/include/z3_v1.h	36;"	d
Z3_AST_CONTAINERS_H_	z3.obj/include/z3_ast_containers.h	20;"	d
Z3_BOOL_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_BOOL_SORT = 1$/;"	v
Z3_BOOL_SORT	z3.obj/include/z3_api.h	/^    Z3_BOOL_SORT,$/;"	e	enum:__anon4
Z3_BOOL_TYPE	z3.obj/include/z3_v1.h	32;"	d
Z3_BUILD_NUMBER	z3.obj/include/z3_version.h	4;"	d
Z3_BV_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_BV_SORT = 4$/;"	v
Z3_BV_SORT	z3.obj/include/z3_api.h	/^    Z3_BV_SORT,$/;"	e	enum:__anon4
Z3_BV_TYPE	z3.obj/include/z3_v1.h	35;"	d
Z3_CONST_DECL_AST	z3.obj/include/z3_v1.h	39;"	d
Z3_DATATYPE_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_DATATYPE_SORT = 6$/;"	v
Z3_DATATYPE_SORT	z3.obj/include/z3_api.h	/^    Z3_DATATYPE_SORT,$/;"	e	enum:__anon4
Z3_DEBUG	z3.obj/bin/python/z3/z3.py	/^Z3_DEBUG = __debug__$/;"	v
Z3_DEC_REF_ERROR	z3.obj/bin/python/z3/z3consts.py	/^Z3_DEC_REF_ERROR = 11$/;"	v
Z3_DEC_REF_ERROR	z3.obj/include/z3_api.h	/^    Z3_DEC_REF_ERROR,$/;"	e	enum:__anon9
Z3_EXAMPLE_ADDRESSVALUE_H	svf/include/AE/Core/AddressValue.h	31;"	d
Z3_EXAMPLE_INTERVAL_DOMAIN_H	svf/include/AE/Core/AbstractState.h	47;"	d
Z3_EXAMPLE_IntervalValue_H	svf/include/AE/Core/IntervalValue.h	34;"	d
Z3_EXAMPLE_RELATIONSOLVER_H	svf/include/AE/Core/RelationSolver.h	31;"	d
Z3_EXAMPLE_RELEXESTATE_H	svf/include/AE/Core/RelExeState.h	31;"	d
Z3_EXAMPLE_Z3EXPR_H	svf/include/Util/Z3Expr.h	30;"	d
Z3_EXCEPTION	z3.obj/bin/python/z3/z3consts.py	/^Z3_EXCEPTION = 12$/;"	v
Z3_EXCEPTION	z3.obj/include/z3_api.h	/^    Z3_EXCEPTION$/;"	e	enum:__anon9
Z3_FALSE	z3.obj/include/z3_api.h	94;"	d
Z3_FILE_ACCESS_ERROR	z3.obj/bin/python/z3/z3consts.py	/^Z3_FILE_ACCESS_ERROR = 8$/;"	v
Z3_FILE_ACCESS_ERROR	z3.obj/include/z3_api.h	/^    Z3_FILE_ACCESS_ERROR,$/;"	e	enum:__anon9
Z3_FINITE_DOMAIN_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_FINITE_DOMAIN_SORT = 8$/;"	v
Z3_FINITE_DOMAIN_SORT	z3.obj/include/z3_api.h	/^    Z3_FINITE_DOMAIN_SORT,$/;"	e	enum:__anon4
Z3_FIXEDPOINT_H_	z3.obj/include/z3_fixedpoint.h	20;"	d
Z3_FLOATING_POINT_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_FLOATING_POINT_SORT = 9$/;"	v
Z3_FLOATING_POINT_SORT	z3.obj/include/z3_api.h	/^    Z3_FLOATING_POINT_SORT,$/;"	e	enum:__anon4
Z3_FPA_H_	z3.obj/include/z3_fpa.h	20;"	d
Z3_FULL_VERSION	z3.obj/include/z3_version.h	7;"	d
Z3_FUNC_DECL_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_FUNC_DECL_AST = 5$/;"	v
Z3_FUNC_DECL_AST	z3.obj/include/z3_api.h	/^    Z3_FUNC_DECL_AST,$/;"	e	enum:__anon5
Z3_GOAL_OVER	z3.obj/bin/python/z3/z3consts.py	/^Z3_GOAL_OVER = 2$/;"	v
Z3_GOAL_OVER	z3.obj/include/z3_api.h	/^    Z3_GOAL_OVER,$/;"	e	enum:__anon10
Z3_GOAL_PRECISE	z3.obj/bin/python/z3/z3consts.py	/^Z3_GOAL_PRECISE = 0$/;"	v
Z3_GOAL_PRECISE	z3.obj/include/z3_api.h	/^    Z3_GOAL_PRECISE,$/;"	e	enum:__anon10
Z3_GOAL_UNDER	z3.obj/bin/python/z3/z3consts.py	/^Z3_GOAL_UNDER = 1$/;"	v
Z3_GOAL_UNDER	z3.obj/include/z3_api.h	/^    Z3_GOAL_UNDER,$/;"	e	enum:__anon10
Z3_GOAL_UNDER_OVER	z3.obj/bin/python/z3/z3consts.py	/^Z3_GOAL_UNDER_OVER = 3$/;"	v
Z3_GOAL_UNDER_OVER	z3.obj/include/z3_api.h	/^    Z3_GOAL_UNDER_OVER$/;"	e	enum:__anon10
Z3_H_	z3.obj/include/z3.h	22;"	d
Z3_INTERNAL_FATAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_INTERNAL_FATAL = 9$/;"	v
Z3_INTERNAL_FATAL	z3.obj/include/z3_api.h	/^    Z3_INTERNAL_FATAL,$/;"	e	enum:__anon9
Z3_INT_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_INT_SORT = 2$/;"	v
Z3_INT_SORT	z3.obj/include/z3_api.h	/^    Z3_INT_SORT,$/;"	e	enum:__anon4
Z3_INT_SYMBOL	z3.obj/bin/python/z3/z3consts.py	/^Z3_INT_SYMBOL = 0$/;"	v
Z3_INT_SYMBOL	z3.obj/include/z3_api.h	/^    Z3_INT_SYMBOL,$/;"	e	enum:__anon2
Z3_INT_TYPE	z3.obj/include/z3_v1.h	33;"	d
Z3_INVALID_ARG	z3.obj/bin/python/z3/z3consts.py	/^Z3_INVALID_ARG = 3$/;"	v
Z3_INVALID_ARG	z3.obj/include/z3_api.h	/^    Z3_INVALID_ARG,$/;"	e	enum:__anon9
Z3_INVALID_PATTERN	z3.obj/bin/python/z3/z3consts.py	/^Z3_INVALID_PATTERN = 6$/;"	v
Z3_INVALID_PATTERN	z3.obj/include/z3_api.h	/^    Z3_INVALID_PATTERN,$/;"	e	enum:__anon9
Z3_INVALID_USAGE	z3.obj/bin/python/z3/z3consts.py	/^Z3_INVALID_USAGE = 10$/;"	v
Z3_INVALID_USAGE	z3.obj/include/z3_api.h	/^    Z3_INVALID_USAGE,$/;"	e	enum:__anon9
Z3_IOB	z3.obj/bin/python/z3/z3consts.py	/^Z3_IOB = 2$/;"	v
Z3_IOB	z3.obj/include/z3_api.h	/^    Z3_IOB,$/;"	e	enum:__anon9
Z3_L_FALSE	z3.obj/bin/python/z3/z3consts.py	/^Z3_L_FALSE = -1$/;"	v
Z3_L_FALSE	z3.obj/include/z3_api.h	/^    Z3_L_FALSE = -1,$/;"	e	enum:__anon1
Z3_L_TRUE	z3.obj/bin/python/z3/z3consts.py	/^Z3_L_TRUE = 1$/;"	v
Z3_L_TRUE	z3.obj/include/z3_api.h	/^    Z3_L_TRUE$/;"	e	enum:__anon1
Z3_L_UNDEF	z3.obj/bin/python/z3/z3consts.py	/^Z3_L_UNDEF = 0$/;"	v
Z3_L_UNDEF	z3.obj/include/z3_api.h	/^    Z3_L_UNDEF,$/;"	e	enum:__anon1
Z3_MAJOR_VERSION	z3.obj/include/z3_version.h	2;"	d
Z3_MEMOUT_FAIL	z3.obj/bin/python/z3/z3consts.py	/^Z3_MEMOUT_FAIL = 7$/;"	v
Z3_MEMOUT_FAIL	z3.obj/include/z3_api.h	/^    Z3_MEMOUT_FAIL,$/;"	e	enum:__anon9
Z3_MINOR_VERSION	z3.obj/include/z3_version.h	3;"	d
Z3_NO_PARSER	z3.obj/bin/python/z3/z3consts.py	/^Z3_NO_PARSER = 5$/;"	v
Z3_NO_PARSER	z3.obj/include/z3_api.h	/^    Z3_NO_PARSER,$/;"	e	enum:__anon9
Z3_NUMERAL_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_NUMERAL_AST = 0$/;"	v
Z3_NUMERAL_AST	z3.obj/include/z3_api.h	/^    Z3_NUMERAL_AST,$/;"	e	enum:__anon5
Z3_OK	z3.obj/bin/python/z3/z3consts.py	/^Z3_OK = 0$/;"	v
Z3_OK	z3.obj/include/z3_api.h	/^    Z3_OK,$/;"	e	enum:__anon9
Z3_OPTIMIZATION_H_	z3.obj/include/z3_optimization.h	20;"	d
Z3_OP_ADD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ADD = 518$/;"	v
Z3_OP_ADD	z3.obj/include/z3_api.h	/^    Z3_OP_ADD,$/;"	e	enum:__anon6
Z3_OP_AGNUM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_AGNUM = 513$/;"	v
Z3_OP_AGNUM	z3.obj/include/z3_api.h	/^    Z3_OP_AGNUM,$/;"	e	enum:__anon6
Z3_OP_AND	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_AND = 261$/;"	v
Z3_OP_AND	z3.obj/include/z3_api.h	/^    Z3_OP_AND,$/;"	e	enum:__anon6
Z3_OP_ANUM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ANUM = 512$/;"	v
Z3_OP_ANUM	z3.obj/include/z3_api.h	/^    Z3_OP_ANUM = 0x200,$/;"	e	enum:__anon6
Z3_OP_ARRAY_DEFAULT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ARRAY_DEFAULT = 772$/;"	v
Z3_OP_ARRAY_DEFAULT	z3.obj/include/z3_api.h	/^    Z3_OP_ARRAY_DEFAULT,$/;"	e	enum:__anon6
Z3_OP_ARRAY_EXT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ARRAY_EXT = 779$/;"	v
Z3_OP_ARRAY_EXT	z3.obj/include/z3_api.h	/^    Z3_OP_ARRAY_EXT,$/;"	e	enum:__anon6
Z3_OP_ARRAY_MAP	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ARRAY_MAP = 771$/;"	v
Z3_OP_ARRAY_MAP	z3.obj/include/z3_api.h	/^    Z3_OP_ARRAY_MAP,$/;"	e	enum:__anon6
Z3_OP_AS_ARRAY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_AS_ARRAY = 778$/;"	v
Z3_OP_AS_ARRAY	z3.obj/include/z3_api.h	/^    Z3_OP_AS_ARRAY,$/;"	e	enum:__anon6
Z3_OP_BADD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BADD = 1028$/;"	v
Z3_OP_BADD	z3.obj/include/z3_api.h	/^    Z3_OP_BADD,$/;"	e	enum:__anon6
Z3_OP_BAND	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BAND = 1049$/;"	v
Z3_OP_BAND	z3.obj/include/z3_api.h	/^    Z3_OP_BAND,$/;"	e	enum:__anon6
Z3_OP_BASHR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BASHR = 1066$/;"	v
Z3_OP_BASHR	z3.obj/include/z3_api.h	/^    Z3_OP_BASHR,$/;"	e	enum:__anon6
Z3_OP_BCOMP	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BCOMP = 1063$/;"	v
Z3_OP_BCOMP	z3.obj/include/z3_api.h	/^    Z3_OP_BCOMP,$/;"	e	enum:__anon6
Z3_OP_BIT0	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BIT0 = 1026$/;"	v
Z3_OP_BIT0	z3.obj/include/z3_api.h	/^    Z3_OP_BIT0,$/;"	e	enum:__anon6
Z3_OP_BIT1	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BIT1 = 1025$/;"	v
Z3_OP_BIT1	z3.obj/include/z3_api.h	/^    Z3_OP_BIT1,$/;"	e	enum:__anon6
Z3_OP_BIT2BOOL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BIT2BOOL = 1071$/;"	v
Z3_OP_BIT2BOOL	z3.obj/include/z3_api.h	/^    Z3_OP_BIT2BOOL,$/;"	e	enum:__anon6
Z3_OP_BLSHR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BLSHR = 1065$/;"	v
Z3_OP_BLSHR	z3.obj/include/z3_api.h	/^    Z3_OP_BLSHR,$/;"	e	enum:__anon6
Z3_OP_BMUL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BMUL = 1030$/;"	v
Z3_OP_BMUL	z3.obj/include/z3_api.h	/^    Z3_OP_BMUL,$/;"	e	enum:__anon6
Z3_OP_BNAND	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BNAND = 1053$/;"	v
Z3_OP_BNAND	z3.obj/include/z3_api.h	/^    Z3_OP_BNAND,$/;"	e	enum:__anon6
Z3_OP_BNEG	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BNEG = 1027$/;"	v
Z3_OP_BNEG	z3.obj/include/z3_api.h	/^    Z3_OP_BNEG,$/;"	e	enum:__anon6
Z3_OP_BNOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BNOR = 1054$/;"	v
Z3_OP_BNOR	z3.obj/include/z3_api.h	/^    Z3_OP_BNOR,$/;"	e	enum:__anon6
Z3_OP_BNOT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BNOT = 1051$/;"	v
Z3_OP_BNOT	z3.obj/include/z3_api.h	/^    Z3_OP_BNOT,$/;"	e	enum:__anon6
Z3_OP_BNUM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BNUM = 1024$/;"	v
Z3_OP_BNUM	z3.obj/include/z3_api.h	/^    Z3_OP_BNUM = 0x400,$/;"	e	enum:__anon6
Z3_OP_BOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BOR = 1050$/;"	v
Z3_OP_BOR	z3.obj/include/z3_api.h	/^    Z3_OP_BOR,$/;"	e	enum:__anon6
Z3_OP_BREDAND	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BREDAND = 1062$/;"	v
Z3_OP_BREDAND	z3.obj/include/z3_api.h	/^    Z3_OP_BREDAND,$/;"	e	enum:__anon6
Z3_OP_BREDOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BREDOR = 1061$/;"	v
Z3_OP_BREDOR	z3.obj/include/z3_api.h	/^    Z3_OP_BREDOR,$/;"	e	enum:__anon6
Z3_OP_BSDIV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSDIV = 1031$/;"	v
Z3_OP_BSDIV	z3.obj/include/z3_api.h	/^    Z3_OP_BSDIV,$/;"	e	enum:__anon6
Z3_OP_BSDIV0	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSDIV0 = 1036$/;"	v
Z3_OP_BSDIV0	z3.obj/include/z3_api.h	/^    Z3_OP_BSDIV0,$/;"	e	enum:__anon6
Z3_OP_BSDIV_I	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSDIV_I = 1079$/;"	v
Z3_OP_BSDIV_I	z3.obj/include/z3_api.h	/^    Z3_OP_BSDIV_I,$/;"	e	enum:__anon6
Z3_OP_BSHL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSHL = 1064$/;"	v
Z3_OP_BSHL	z3.obj/include/z3_api.h	/^    Z3_OP_BSHL,$/;"	e	enum:__anon6
Z3_OP_BSMOD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSMOD = 1035$/;"	v
Z3_OP_BSMOD	z3.obj/include/z3_api.h	/^    Z3_OP_BSMOD,$/;"	e	enum:__anon6
Z3_OP_BSMOD0	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSMOD0 = 1040$/;"	v
Z3_OP_BSMOD0	z3.obj/include/z3_api.h	/^    Z3_OP_BSMOD0,$/;"	e	enum:__anon6
Z3_OP_BSMOD_I	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSMOD_I = 1083$/;"	v
Z3_OP_BSMOD_I	z3.obj/include/z3_api.h	/^    Z3_OP_BSMOD_I,$/;"	e	enum:__anon6
Z3_OP_BSMUL_NO_OVFL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSMUL_NO_OVFL = 1076$/;"	v
Z3_OP_BSMUL_NO_OVFL	z3.obj/include/z3_api.h	/^    Z3_OP_BSMUL_NO_OVFL,$/;"	e	enum:__anon6
Z3_OP_BSMUL_NO_UDFL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSMUL_NO_UDFL = 1078$/;"	v
Z3_OP_BSMUL_NO_UDFL	z3.obj/include/z3_api.h	/^    Z3_OP_BSMUL_NO_UDFL,$/;"	e	enum:__anon6
Z3_OP_BSREM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSREM = 1033$/;"	v
Z3_OP_BSREM	z3.obj/include/z3_api.h	/^    Z3_OP_BSREM,$/;"	e	enum:__anon6
Z3_OP_BSREM0	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSREM0 = 1038$/;"	v
Z3_OP_BSREM0	z3.obj/include/z3_api.h	/^    Z3_OP_BSREM0,$/;"	e	enum:__anon6
Z3_OP_BSREM_I	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSREM_I = 1081$/;"	v
Z3_OP_BSREM_I	z3.obj/include/z3_api.h	/^    Z3_OP_BSREM_I,$/;"	e	enum:__anon6
Z3_OP_BSUB	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BSUB = 1029$/;"	v
Z3_OP_BSUB	z3.obj/include/z3_api.h	/^    Z3_OP_BSUB,$/;"	e	enum:__anon6
Z3_OP_BUDIV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUDIV = 1032$/;"	v
Z3_OP_BUDIV	z3.obj/include/z3_api.h	/^    Z3_OP_BUDIV,$/;"	e	enum:__anon6
Z3_OP_BUDIV0	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUDIV0 = 1037$/;"	v
Z3_OP_BUDIV0	z3.obj/include/z3_api.h	/^    Z3_OP_BUDIV0,$/;"	e	enum:__anon6
Z3_OP_BUDIV_I	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUDIV_I = 1080$/;"	v
Z3_OP_BUDIV_I	z3.obj/include/z3_api.h	/^    Z3_OP_BUDIV_I,$/;"	e	enum:__anon6
Z3_OP_BUMUL_NO_OVFL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUMUL_NO_OVFL = 1077$/;"	v
Z3_OP_BUMUL_NO_OVFL	z3.obj/include/z3_api.h	/^    Z3_OP_BUMUL_NO_OVFL,$/;"	e	enum:__anon6
Z3_OP_BUREM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUREM = 1034$/;"	v
Z3_OP_BUREM	z3.obj/include/z3_api.h	/^    Z3_OP_BUREM,$/;"	e	enum:__anon6
Z3_OP_BUREM0	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUREM0 = 1039$/;"	v
Z3_OP_BUREM0	z3.obj/include/z3_api.h	/^    Z3_OP_BUREM0,$/;"	e	enum:__anon6
Z3_OP_BUREM_I	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BUREM_I = 1082$/;"	v
Z3_OP_BUREM_I	z3.obj/include/z3_api.h	/^    Z3_OP_BUREM_I,$/;"	e	enum:__anon6
Z3_OP_BV2INT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BV2INT = 1073$/;"	v
Z3_OP_BV2INT	z3.obj/include/z3_api.h	/^    Z3_OP_BV2INT,$/;"	e	enum:__anon6
Z3_OP_BXNOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BXNOR = 1055$/;"	v
Z3_OP_BXNOR	z3.obj/include/z3_api.h	/^    Z3_OP_BXNOR,$/;"	e	enum:__anon6
Z3_OP_BXOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_BXOR = 1052$/;"	v
Z3_OP_BXOR	z3.obj/include/z3_api.h	/^    Z3_OP_BXOR,$/;"	e	enum:__anon6
Z3_OP_CARRY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_CARRY = 1074$/;"	v
Z3_OP_CARRY	z3.obj/include/z3_api.h	/^    Z3_OP_CARRY,$/;"	e	enum:__anon6
Z3_OP_CONCAT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_CONCAT = 1056$/;"	v
Z3_OP_CONCAT	z3.obj/include/z3_api.h	/^    Z3_OP_CONCAT,$/;"	e	enum:__anon6
Z3_OP_CONST_ARRAY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_CONST_ARRAY = 770$/;"	v
Z3_OP_CONST_ARRAY	z3.obj/include/z3_api.h	/^    Z3_OP_CONST_ARRAY,$/;"	e	enum:__anon6
Z3_OP_DISTINCT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DISTINCT = 259$/;"	v
Z3_OP_DISTINCT	z3.obj/include/z3_api.h	/^    Z3_OP_DISTINCT,$/;"	e	enum:__anon6
Z3_OP_DIV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DIV = 522$/;"	v
Z3_OP_DIV	z3.obj/include/z3_api.h	/^    Z3_OP_DIV,$/;"	e	enum:__anon6
Z3_OP_DT_ACCESSOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DT_ACCESSOR = 2051$/;"	v
Z3_OP_DT_ACCESSOR	z3.obj/include/z3_api.h	/^    Z3_OP_DT_ACCESSOR,$/;"	e	enum:__anon6
Z3_OP_DT_CONSTRUCTOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DT_CONSTRUCTOR = 2048$/;"	v
Z3_OP_DT_CONSTRUCTOR	z3.obj/include/z3_api.h	/^    Z3_OP_DT_CONSTRUCTOR=0x800,$/;"	e	enum:__anon6
Z3_OP_DT_IS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DT_IS = 2050$/;"	v
Z3_OP_DT_IS	z3.obj/include/z3_api.h	/^    Z3_OP_DT_IS,$/;"	e	enum:__anon6
Z3_OP_DT_RECOGNISER	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DT_RECOGNISER = 2049$/;"	v
Z3_OP_DT_RECOGNISER	z3.obj/include/z3_api.h	/^    Z3_OP_DT_RECOGNISER,$/;"	e	enum:__anon6
Z3_OP_DT_UPDATE_FIELD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_DT_UPDATE_FIELD = 2052$/;"	v
Z3_OP_DT_UPDATE_FIELD	z3.obj/include/z3_api.h	/^    Z3_OP_DT_UPDATE_FIELD,$/;"	e	enum:__anon6
Z3_OP_EQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_EQ = 258$/;"	v
Z3_OP_EQ	z3.obj/include/z3_api.h	/^    Z3_OP_EQ,$/;"	e	enum:__anon6
Z3_OP_EXTRACT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_EXTRACT = 1059$/;"	v
Z3_OP_EXTRACT	z3.obj/include/z3_api.h	/^    Z3_OP_EXTRACT,$/;"	e	enum:__anon6
Z3_OP_EXT_ROTATE_LEFT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_EXT_ROTATE_LEFT = 1069$/;"	v
Z3_OP_EXT_ROTATE_LEFT	z3.obj/include/z3_api.h	/^    Z3_OP_EXT_ROTATE_LEFT,$/;"	e	enum:__anon6
Z3_OP_EXT_ROTATE_RIGHT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_EXT_ROTATE_RIGHT = 1070$/;"	v
Z3_OP_EXT_ROTATE_RIGHT	z3.obj/include/z3_api.h	/^    Z3_OP_EXT_ROTATE_RIGHT,$/;"	e	enum:__anon6
Z3_OP_FALSE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FALSE = 257$/;"	v
Z3_OP_FALSE	z3.obj/include/z3_api.h	/^    Z3_OP_FALSE,$/;"	e	enum:__anon6
Z3_OP_FD_CONSTANT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FD_CONSTANT = 1549$/;"	v
Z3_OP_FD_CONSTANT	z3.obj/include/z3_api.h	/^    Z3_OP_FD_CONSTANT,$/;"	e	enum:__anon6
Z3_OP_FD_LT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FD_LT = 1550$/;"	v
Z3_OP_FD_LT	z3.obj/include/z3_api.h	/^    Z3_OP_FD_LT,$/;"	e	enum:__anon6
Z3_OP_FPA_ABS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_ABS = 45073$/;"	v
Z3_OP_FPA_ABS	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_ABS,$/;"	e	enum:__anon6
Z3_OP_FPA_ADD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_ADD = 45067$/;"	v
Z3_OP_FPA_ADD	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_ADD,$/;"	e	enum:__anon6
Z3_OP_FPA_BV2RM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_BV2RM = 45099$/;"	v
Z3_OP_FPA_BV2RM	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_BV2RM,$/;"	e	enum:__anon6
Z3_OP_FPA_BVWRAP	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_BVWRAP = 45098$/;"	v
Z3_OP_FPA_BVWRAP	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_BVWRAP,$/;"	e	enum:__anon6
Z3_OP_FPA_DIV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_DIV = 45071$/;"	v
Z3_OP_FPA_DIV	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_DIV,$/;"	e	enum:__anon6
Z3_OP_FPA_EQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_EQ = 45079$/;"	v
Z3_OP_FPA_EQ	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_EQ,$/;"	e	enum:__anon6
Z3_OP_FPA_FMA	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_FMA = 45076$/;"	v
Z3_OP_FPA_FMA	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_FMA,$/;"	e	enum:__anon6
Z3_OP_FPA_FP	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_FP = 45091$/;"	v
Z3_OP_FPA_FP	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_FP,$/;"	e	enum:__anon6
Z3_OP_FPA_GE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_GE = 45083$/;"	v
Z3_OP_FPA_GE	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_GE,$/;"	e	enum:__anon6
Z3_OP_FPA_GT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_GT = 45081$/;"	v
Z3_OP_FPA_GT	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_GT,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_INF	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_INF = 45085$/;"	v
Z3_OP_FPA_IS_INF	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_INF,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_NAN	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_NAN = 45084$/;"	v
Z3_OP_FPA_IS_NAN	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_NAN,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_NEGATIVE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_NEGATIVE = 45089$/;"	v
Z3_OP_FPA_IS_NEGATIVE	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_NEGATIVE,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_NORMAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_NORMAL = 45087$/;"	v
Z3_OP_FPA_IS_NORMAL	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_NORMAL,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_POSITIVE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_POSITIVE = 45090$/;"	v
Z3_OP_FPA_IS_POSITIVE	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_POSITIVE,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_SUBNORMAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_SUBNORMAL = 45088$/;"	v
Z3_OP_FPA_IS_SUBNORMAL	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_SUBNORMAL,$/;"	e	enum:__anon6
Z3_OP_FPA_IS_ZERO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_IS_ZERO = 45086$/;"	v
Z3_OP_FPA_IS_ZERO	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_IS_ZERO,$/;"	e	enum:__anon6
Z3_OP_FPA_LE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_LE = 45082$/;"	v
Z3_OP_FPA_LE	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_LE,$/;"	e	enum:__anon6
Z3_OP_FPA_LT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_LT = 45080$/;"	v
Z3_OP_FPA_LT	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_LT,$/;"	e	enum:__anon6
Z3_OP_FPA_MAX	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_MAX = 45075$/;"	v
Z3_OP_FPA_MAX	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_MAX,$/;"	e	enum:__anon6
Z3_OP_FPA_MIN	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_MIN = 45074$/;"	v
Z3_OP_FPA_MIN	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_MIN,$/;"	e	enum:__anon6
Z3_OP_FPA_MINUS_INF	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_MINUS_INF = 45063$/;"	v
Z3_OP_FPA_MINUS_INF	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_MINUS_INF,$/;"	e	enum:__anon6
Z3_OP_FPA_MINUS_ZERO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_MINUS_ZERO = 45066$/;"	v
Z3_OP_FPA_MINUS_ZERO	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_MINUS_ZERO,$/;"	e	enum:__anon6
Z3_OP_FPA_MUL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_MUL = 45070$/;"	v
Z3_OP_FPA_MUL	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_MUL,$/;"	e	enum:__anon6
Z3_OP_FPA_NAN	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_NAN = 45064$/;"	v
Z3_OP_FPA_NAN	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_NAN,$/;"	e	enum:__anon6
Z3_OP_FPA_NEG	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_NEG = 45069$/;"	v
Z3_OP_FPA_NEG	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_NEG,$/;"	e	enum:__anon6
Z3_OP_FPA_NUM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_NUM = 45061$/;"	v
Z3_OP_FPA_NUM	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_NUM,$/;"	e	enum:__anon6
Z3_OP_FPA_PLUS_INF	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_PLUS_INF = 45062$/;"	v
Z3_OP_FPA_PLUS_INF	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_PLUS_INF,$/;"	e	enum:__anon6
Z3_OP_FPA_PLUS_ZERO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_PLUS_ZERO = 45065$/;"	v
Z3_OP_FPA_PLUS_ZERO	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_PLUS_ZERO,$/;"	e	enum:__anon6
Z3_OP_FPA_REM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_REM = 45072$/;"	v
Z3_OP_FPA_REM	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_REM,$/;"	e	enum:__anon6
Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY = 45057$/;"	v
Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY,$/;"	e	enum:__anon6
Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN = 45056$/;"	v
Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN = 0xb000,$/;"	e	enum:__anon6
Z3_OP_FPA_RM_TOWARD_NEGATIVE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_RM_TOWARD_NEGATIVE = 45059$/;"	v
Z3_OP_FPA_RM_TOWARD_NEGATIVE	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_RM_TOWARD_NEGATIVE,$/;"	e	enum:__anon6
Z3_OP_FPA_RM_TOWARD_POSITIVE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_RM_TOWARD_POSITIVE = 45058$/;"	v
Z3_OP_FPA_RM_TOWARD_POSITIVE	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_RM_TOWARD_POSITIVE,$/;"	e	enum:__anon6
Z3_OP_FPA_RM_TOWARD_ZERO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_RM_TOWARD_ZERO = 45060$/;"	v
Z3_OP_FPA_RM_TOWARD_ZERO	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_RM_TOWARD_ZERO,$/;"	e	enum:__anon6
Z3_OP_FPA_ROUND_TO_INTEGRAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_ROUND_TO_INTEGRAL = 45078$/;"	v
Z3_OP_FPA_ROUND_TO_INTEGRAL	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_ROUND_TO_INTEGRAL,$/;"	e	enum:__anon6
Z3_OP_FPA_SQRT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_SQRT = 45077$/;"	v
Z3_OP_FPA_SQRT	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_SQRT,$/;"	e	enum:__anon6
Z3_OP_FPA_SUB	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_SUB = 45068$/;"	v
Z3_OP_FPA_SUB	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_SUB,$/;"	e	enum:__anon6
Z3_OP_FPA_TO_FP	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_TO_FP = 45092$/;"	v
Z3_OP_FPA_TO_FP	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_TO_FP,$/;"	e	enum:__anon6
Z3_OP_FPA_TO_FP_UNSIGNED	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_TO_FP_UNSIGNED = 45093$/;"	v
Z3_OP_FPA_TO_FP_UNSIGNED	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_TO_FP_UNSIGNED,$/;"	e	enum:__anon6
Z3_OP_FPA_TO_IEEE_BV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_TO_IEEE_BV = 45097$/;"	v
Z3_OP_FPA_TO_IEEE_BV	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_TO_IEEE_BV,$/;"	e	enum:__anon6
Z3_OP_FPA_TO_REAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_TO_REAL = 45096$/;"	v
Z3_OP_FPA_TO_REAL	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_TO_REAL,$/;"	e	enum:__anon6
Z3_OP_FPA_TO_SBV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_TO_SBV = 45095$/;"	v
Z3_OP_FPA_TO_SBV	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_TO_SBV,$/;"	e	enum:__anon6
Z3_OP_FPA_TO_UBV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_FPA_TO_UBV = 45094$/;"	v
Z3_OP_FPA_TO_UBV	z3.obj/include/z3_api.h	/^    Z3_OP_FPA_TO_UBV,$/;"	e	enum:__anon6
Z3_OP_GE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_GE = 515$/;"	v
Z3_OP_GE	z3.obj/include/z3_api.h	/^    Z3_OP_GE,$/;"	e	enum:__anon6
Z3_OP_GT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_GT = 517$/;"	v
Z3_OP_GT	z3.obj/include/z3_api.h	/^    Z3_OP_GT,$/;"	e	enum:__anon6
Z3_OP_IDIV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_IDIV = 523$/;"	v
Z3_OP_IDIV	z3.obj/include/z3_api.h	/^    Z3_OP_IDIV,$/;"	e	enum:__anon6
Z3_OP_IFF	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_IFF = 263$/;"	v
Z3_OP_IFF	z3.obj/include/z3_api.h	/^    Z3_OP_IFF,$/;"	e	enum:__anon6
Z3_OP_IMPLIES	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_IMPLIES = 266$/;"	v
Z3_OP_IMPLIES	z3.obj/include/z3_api.h	/^    Z3_OP_IMPLIES,$/;"	e	enum:__anon6
Z3_OP_INT2BV	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_INT2BV = 1072$/;"	v
Z3_OP_INT2BV	z3.obj/include/z3_api.h	/^    Z3_OP_INT2BV,$/;"	e	enum:__anon6
Z3_OP_INTERNAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_INTERNAL = 45100$/;"	v
Z3_OP_INTERNAL	z3.obj/include/z3_api.h	/^    Z3_OP_INTERNAL,$/;"	e	enum:__anon6
Z3_OP_INT_TO_STR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_INT_TO_STR = 1567$/;"	v
Z3_OP_INT_TO_STR	z3.obj/include/z3_api.h	/^    Z3_OP_INT_TO_STR,$/;"	e	enum:__anon6
Z3_OP_IS_INT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_IS_INT = 528$/;"	v
Z3_OP_IS_INT	z3.obj/include/z3_api.h	/^    Z3_OP_IS_INT,$/;"	e	enum:__anon6
Z3_OP_ITE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ITE = 260$/;"	v
Z3_OP_ITE	z3.obj/include/z3_api.h	/^    Z3_OP_ITE,$/;"	e	enum:__anon6
Z3_OP_LABEL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_LABEL = 1792$/;"	v
Z3_OP_LABEL	z3.obj/include/z3_api.h	/^    Z3_OP_LABEL = 0x700,$/;"	e	enum:__anon6
Z3_OP_LABEL_LIT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_LABEL_LIT = 1793$/;"	v
Z3_OP_LABEL_LIT	z3.obj/include/z3_api.h	/^    Z3_OP_LABEL_LIT,$/;"	e	enum:__anon6
Z3_OP_LE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_LE = 514$/;"	v
Z3_OP_LE	z3.obj/include/z3_api.h	/^    Z3_OP_LE,$/;"	e	enum:__anon6
Z3_OP_LT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_LT = 516$/;"	v
Z3_OP_LT	z3.obj/include/z3_api.h	/^    Z3_OP_LT,$/;"	e	enum:__anon6
Z3_OP_MOD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_MOD = 525$/;"	v
Z3_OP_MOD	z3.obj/include/z3_api.h	/^    Z3_OP_MOD,$/;"	e	enum:__anon6
Z3_OP_MUL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_MUL = 521$/;"	v
Z3_OP_MUL	z3.obj/include/z3_api.h	/^    Z3_OP_MUL,$/;"	e	enum:__anon6
Z3_OP_NOT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_NOT = 265$/;"	v
Z3_OP_NOT	z3.obj/include/z3_api.h	/^    Z3_OP_NOT,$/;"	e	enum:__anon6
Z3_OP_OEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_OEQ = 267$/;"	v
Z3_OP_OEQ	z3.obj/include/z3_api.h	/^    Z3_OP_OEQ,$/;"	e	enum:__anon6
Z3_OP_OR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_OR = 262$/;"	v
Z3_OP_OR	z3.obj/include/z3_api.h	/^    Z3_OP_OR,$/;"	e	enum:__anon6
Z3_OP_PB_AT_LEAST	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PB_AT_LEAST = 2305$/;"	v
Z3_OP_PB_AT_LEAST	z3.obj/include/z3_api.h	/^    Z3_OP_PB_AT_LEAST,$/;"	e	enum:__anon6
Z3_OP_PB_AT_MOST	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PB_AT_MOST = 2304$/;"	v
Z3_OP_PB_AT_MOST	z3.obj/include/z3_api.h	/^    Z3_OP_PB_AT_MOST=0x900,$/;"	e	enum:__anon6
Z3_OP_PB_EQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PB_EQ = 2308$/;"	v
Z3_OP_PB_EQ	z3.obj/include/z3_api.h	/^    Z3_OP_PB_EQ,$/;"	e	enum:__anon6
Z3_OP_PB_GE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PB_GE = 2307$/;"	v
Z3_OP_PB_GE	z3.obj/include/z3_api.h	/^    Z3_OP_PB_GE,$/;"	e	enum:__anon6
Z3_OP_PB_LE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PB_LE = 2306$/;"	v
Z3_OP_PB_LE	z3.obj/include/z3_api.h	/^    Z3_OP_PB_LE,$/;"	e	enum:__anon6
Z3_OP_POWER	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_POWER = 529$/;"	v
Z3_OP_POWER	z3.obj/include/z3_api.h	/^    Z3_OP_POWER,$/;"	e	enum:__anon6
Z3_OP_PR_AND_ELIM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_AND_ELIM = 1293$/;"	v
Z3_OP_PR_AND_ELIM	z3.obj/include/z3_api.h	/^    Z3_OP_PR_AND_ELIM,$/;"	e	enum:__anon6
Z3_OP_PR_APPLY_DEF	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_APPLY_DEF = 1314$/;"	v
Z3_OP_PR_APPLY_DEF	z3.obj/include/z3_api.h	/^    Z3_OP_PR_APPLY_DEF,$/;"	e	enum:__anon6
Z3_OP_PR_ASSERTED	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_ASSERTED = 1282$/;"	v
Z3_OP_PR_ASSERTED	z3.obj/include/z3_api.h	/^    Z3_OP_PR_ASSERTED,$/;"	e	enum:__anon6
Z3_OP_PR_ASSUMPTION_ADD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_ASSUMPTION_ADD = 1309$/;"	v
Z3_OP_PR_ASSUMPTION_ADD	z3.obj/include/z3_api.h	/^    Z3_OP_PR_ASSUMPTION_ADD, $/;"	e	enum:__anon6
Z3_OP_PR_BIND	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_BIND = 1291$/;"	v
Z3_OP_PR_BIND	z3.obj/include/z3_api.h	/^    Z3_OP_PR_BIND,$/;"	e	enum:__anon6
Z3_OP_PR_CLAUSE_TRAIL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_CLAUSE_TRAIL = 1312$/;"	v
Z3_OP_PR_CLAUSE_TRAIL	z3.obj/include/z3_api.h	/^    Z3_OP_PR_CLAUSE_TRAIL,$/;"	e	enum:__anon6
Z3_OP_PR_COMMUTATIVITY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_COMMUTATIVITY = 1307$/;"	v
Z3_OP_PR_COMMUTATIVITY	z3.obj/include/z3_api.h	/^    Z3_OP_PR_COMMUTATIVITY,$/;"	e	enum:__anon6
Z3_OP_PR_DEF_AXIOM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_DEF_AXIOM = 1308$/;"	v
Z3_OP_PR_DEF_AXIOM	z3.obj/include/z3_api.h	/^    Z3_OP_PR_DEF_AXIOM,$/;"	e	enum:__anon6
Z3_OP_PR_DEF_INTRO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_DEF_INTRO = 1313$/;"	v
Z3_OP_PR_DEF_INTRO	z3.obj/include/z3_api.h	/^    Z3_OP_PR_DEF_INTRO,$/;"	e	enum:__anon6
Z3_OP_PR_DER	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_DER = 1300$/;"	v
Z3_OP_PR_DER	z3.obj/include/z3_api.h	/^    Z3_OP_PR_DER,$/;"	e	enum:__anon6
Z3_OP_PR_DISTRIBUTIVITY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_DISTRIBUTIVITY = 1292$/;"	v
Z3_OP_PR_DISTRIBUTIVITY	z3.obj/include/z3_api.h	/^    Z3_OP_PR_DISTRIBUTIVITY,$/;"	e	enum:__anon6
Z3_OP_PR_ELIM_UNUSED_VARS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_ELIM_UNUSED_VARS = 1299$/;"	v
Z3_OP_PR_ELIM_UNUSED_VARS	z3.obj/include/z3_api.h	/^    Z3_OP_PR_ELIM_UNUSED_VARS,$/;"	e	enum:__anon6
Z3_OP_PR_GOAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_GOAL = 1283$/;"	v
Z3_OP_PR_GOAL	z3.obj/include/z3_api.h	/^    Z3_OP_PR_GOAL,$/;"	e	enum:__anon6
Z3_OP_PR_HYPER_RESOLVE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_HYPER_RESOLVE = 1321$/;"	v
Z3_OP_PR_HYPER_RESOLVE	z3.obj/include/z3_api.h	/^    Z3_OP_PR_HYPER_RESOLVE,$/;"	e	enum:__anon6
Z3_OP_PR_HYPOTHESIS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_HYPOTHESIS = 1302$/;"	v
Z3_OP_PR_HYPOTHESIS	z3.obj/include/z3_api.h	/^    Z3_OP_PR_HYPOTHESIS,$/;"	e	enum:__anon6
Z3_OP_PR_IFF_FALSE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_IFF_FALSE = 1306$/;"	v
Z3_OP_PR_IFF_FALSE	z3.obj/include/z3_api.h	/^    Z3_OP_PR_IFF_FALSE,$/;"	e	enum:__anon6
Z3_OP_PR_IFF_OEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_IFF_OEQ = 1315$/;"	v
Z3_OP_PR_IFF_OEQ	z3.obj/include/z3_api.h	/^    Z3_OP_PR_IFF_OEQ,$/;"	e	enum:__anon6
Z3_OP_PR_IFF_TRUE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_IFF_TRUE = 1305$/;"	v
Z3_OP_PR_IFF_TRUE	z3.obj/include/z3_api.h	/^    Z3_OP_PR_IFF_TRUE,$/;"	e	enum:__anon6
Z3_OP_PR_LEMMA	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_LEMMA = 1303$/;"	v
Z3_OP_PR_LEMMA	z3.obj/include/z3_api.h	/^    Z3_OP_PR_LEMMA,$/;"	e	enum:__anon6
Z3_OP_PR_LEMMA_ADD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_LEMMA_ADD = 1310$/;"	v
Z3_OP_PR_LEMMA_ADD	z3.obj/include/z3_api.h	/^    Z3_OP_PR_LEMMA_ADD, $/;"	e	enum:__anon6
Z3_OP_PR_MODUS_PONENS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_MODUS_PONENS = 1284$/;"	v
Z3_OP_PR_MODUS_PONENS	z3.obj/include/z3_api.h	/^    Z3_OP_PR_MODUS_PONENS,$/;"	e	enum:__anon6
Z3_OP_PR_MODUS_PONENS_OEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_MODUS_PONENS_OEQ = 1319$/;"	v
Z3_OP_PR_MODUS_PONENS_OEQ	z3.obj/include/z3_api.h	/^    Z3_OP_PR_MODUS_PONENS_OEQ,$/;"	e	enum:__anon6
Z3_OP_PR_MONOTONICITY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_MONOTONICITY = 1289$/;"	v
Z3_OP_PR_MONOTONICITY	z3.obj/include/z3_api.h	/^    Z3_OP_PR_MONOTONICITY,$/;"	e	enum:__anon6
Z3_OP_PR_NNF_NEG	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_NNF_NEG = 1317$/;"	v
Z3_OP_PR_NNF_NEG	z3.obj/include/z3_api.h	/^    Z3_OP_PR_NNF_NEG,$/;"	e	enum:__anon6
Z3_OP_PR_NNF_POS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_NNF_POS = 1316$/;"	v
Z3_OP_PR_NNF_POS	z3.obj/include/z3_api.h	/^    Z3_OP_PR_NNF_POS,$/;"	e	enum:__anon6
Z3_OP_PR_NOT_OR_ELIM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_NOT_OR_ELIM = 1294$/;"	v
Z3_OP_PR_NOT_OR_ELIM	z3.obj/include/z3_api.h	/^    Z3_OP_PR_NOT_OR_ELIM,$/;"	e	enum:__anon6
Z3_OP_PR_PULL_QUANT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_PULL_QUANT = 1297$/;"	v
Z3_OP_PR_PULL_QUANT	z3.obj/include/z3_api.h	/^    Z3_OP_PR_PULL_QUANT,$/;"	e	enum:__anon6
Z3_OP_PR_PUSH_QUANT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_PUSH_QUANT = 1298$/;"	v
Z3_OP_PR_PUSH_QUANT	z3.obj/include/z3_api.h	/^    Z3_OP_PR_PUSH_QUANT,$/;"	e	enum:__anon6
Z3_OP_PR_QUANT_INST	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_QUANT_INST = 1301$/;"	v
Z3_OP_PR_QUANT_INST	z3.obj/include/z3_api.h	/^    Z3_OP_PR_QUANT_INST,$/;"	e	enum:__anon6
Z3_OP_PR_QUANT_INTRO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_QUANT_INTRO = 1290$/;"	v
Z3_OP_PR_QUANT_INTRO	z3.obj/include/z3_api.h	/^    Z3_OP_PR_QUANT_INTRO,$/;"	e	enum:__anon6
Z3_OP_PR_REDUNDANT_DEL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_REDUNDANT_DEL = 1311$/;"	v
Z3_OP_PR_REDUNDANT_DEL	z3.obj/include/z3_api.h	/^    Z3_OP_PR_REDUNDANT_DEL, $/;"	e	enum:__anon6
Z3_OP_PR_REFLEXIVITY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_REFLEXIVITY = 1285$/;"	v
Z3_OP_PR_REFLEXIVITY	z3.obj/include/z3_api.h	/^    Z3_OP_PR_REFLEXIVITY,$/;"	e	enum:__anon6
Z3_OP_PR_REWRITE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_REWRITE = 1295$/;"	v
Z3_OP_PR_REWRITE	z3.obj/include/z3_api.h	/^    Z3_OP_PR_REWRITE,$/;"	e	enum:__anon6
Z3_OP_PR_REWRITE_STAR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_REWRITE_STAR = 1296$/;"	v
Z3_OP_PR_REWRITE_STAR	z3.obj/include/z3_api.h	/^    Z3_OP_PR_REWRITE_STAR,$/;"	e	enum:__anon6
Z3_OP_PR_SKOLEMIZE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_SKOLEMIZE = 1318$/;"	v
Z3_OP_PR_SKOLEMIZE	z3.obj/include/z3_api.h	/^    Z3_OP_PR_SKOLEMIZE,$/;"	e	enum:__anon6
Z3_OP_PR_SYMMETRY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_SYMMETRY = 1286$/;"	v
Z3_OP_PR_SYMMETRY	z3.obj/include/z3_api.h	/^    Z3_OP_PR_SYMMETRY,$/;"	e	enum:__anon6
Z3_OP_PR_TH_LEMMA	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_TH_LEMMA = 1320$/;"	v
Z3_OP_PR_TH_LEMMA	z3.obj/include/z3_api.h	/^    Z3_OP_PR_TH_LEMMA,$/;"	e	enum:__anon6
Z3_OP_PR_TRANSITIVITY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_TRANSITIVITY = 1287$/;"	v
Z3_OP_PR_TRANSITIVITY	z3.obj/include/z3_api.h	/^    Z3_OP_PR_TRANSITIVITY,$/;"	e	enum:__anon6
Z3_OP_PR_TRANSITIVITY_STAR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_TRANSITIVITY_STAR = 1288$/;"	v
Z3_OP_PR_TRANSITIVITY_STAR	z3.obj/include/z3_api.h	/^    Z3_OP_PR_TRANSITIVITY_STAR,$/;"	e	enum:__anon6
Z3_OP_PR_TRUE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_TRUE = 1281$/;"	v
Z3_OP_PR_TRUE	z3.obj/include/z3_api.h	/^    Z3_OP_PR_TRUE,$/;"	e	enum:__anon6
Z3_OP_PR_UNDEF	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_UNDEF = 1280$/;"	v
Z3_OP_PR_UNDEF	z3.obj/include/z3_api.h	/^    Z3_OP_PR_UNDEF = 0x500,$/;"	e	enum:__anon6
Z3_OP_PR_UNIT_RESOLUTION	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_PR_UNIT_RESOLUTION = 1304$/;"	v
Z3_OP_PR_UNIT_RESOLUTION	z3.obj/include/z3_api.h	/^    Z3_OP_PR_UNIT_RESOLUTION,$/;"	e	enum:__anon6
Z3_OP_RA_CLONE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_CLONE = 1548$/;"	v
Z3_OP_RA_CLONE	z3.obj/include/z3_api.h	/^    Z3_OP_RA_CLONE,$/;"	e	enum:__anon6
Z3_OP_RA_COMPLEMENT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_COMPLEMENT = 1546$/;"	v
Z3_OP_RA_COMPLEMENT	z3.obj/include/z3_api.h	/^    Z3_OP_RA_COMPLEMENT,$/;"	e	enum:__anon6
Z3_OP_RA_EMPTY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_EMPTY = 1537$/;"	v
Z3_OP_RA_EMPTY	z3.obj/include/z3_api.h	/^    Z3_OP_RA_EMPTY,$/;"	e	enum:__anon6
Z3_OP_RA_FILTER	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_FILTER = 1543$/;"	v
Z3_OP_RA_FILTER	z3.obj/include/z3_api.h	/^    Z3_OP_RA_FILTER,$/;"	e	enum:__anon6
Z3_OP_RA_IS_EMPTY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_IS_EMPTY = 1538$/;"	v
Z3_OP_RA_IS_EMPTY	z3.obj/include/z3_api.h	/^    Z3_OP_RA_IS_EMPTY,$/;"	e	enum:__anon6
Z3_OP_RA_JOIN	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_JOIN = 1539$/;"	v
Z3_OP_RA_JOIN	z3.obj/include/z3_api.h	/^    Z3_OP_RA_JOIN,$/;"	e	enum:__anon6
Z3_OP_RA_NEGATION_FILTER	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_NEGATION_FILTER = 1544$/;"	v
Z3_OP_RA_NEGATION_FILTER	z3.obj/include/z3_api.h	/^    Z3_OP_RA_NEGATION_FILTER,$/;"	e	enum:__anon6
Z3_OP_RA_PROJECT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_PROJECT = 1542$/;"	v
Z3_OP_RA_PROJECT	z3.obj/include/z3_api.h	/^    Z3_OP_RA_PROJECT,$/;"	e	enum:__anon6
Z3_OP_RA_RENAME	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_RENAME = 1545$/;"	v
Z3_OP_RA_RENAME	z3.obj/include/z3_api.h	/^    Z3_OP_RA_RENAME,$/;"	e	enum:__anon6
Z3_OP_RA_SELECT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_SELECT = 1547$/;"	v
Z3_OP_RA_SELECT	z3.obj/include/z3_api.h	/^    Z3_OP_RA_SELECT,$/;"	e	enum:__anon6
Z3_OP_RA_STORE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_STORE = 1536$/;"	v
Z3_OP_RA_STORE	z3.obj/include/z3_api.h	/^    Z3_OP_RA_STORE = 0x600,$/;"	e	enum:__anon6
Z3_OP_RA_UNION	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_UNION = 1540$/;"	v
Z3_OP_RA_UNION	z3.obj/include/z3_api.h	/^    Z3_OP_RA_UNION,$/;"	e	enum:__anon6
Z3_OP_RA_WIDEN	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RA_WIDEN = 1541$/;"	v
Z3_OP_RA_WIDEN	z3.obj/include/z3_api.h	/^    Z3_OP_RA_WIDEN,$/;"	e	enum:__anon6
Z3_OP_REM	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_REM = 524$/;"	v
Z3_OP_REM	z3.obj/include/z3_api.h	/^    Z3_OP_REM,$/;"	e	enum:__anon6
Z3_OP_REPEAT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_REPEAT = 1060$/;"	v
Z3_OP_REPEAT	z3.obj/include/z3_api.h	/^    Z3_OP_REPEAT,$/;"	e	enum:__anon6
Z3_OP_RE_COMPLEMENT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_COMPLEMENT = 1578$/;"	v
Z3_OP_RE_COMPLEMENT	z3.obj/include/z3_api.h	/^    Z3_OP_RE_COMPLEMENT,$/;"	e	enum:__anon6
Z3_OP_RE_CONCAT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_CONCAT = 1571$/;"	v
Z3_OP_RE_CONCAT	z3.obj/include/z3_api.h	/^    Z3_OP_RE_CONCAT,$/;"	e	enum:__anon6
Z3_OP_RE_EMPTY_SET	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_EMPTY_SET = 1576$/;"	v
Z3_OP_RE_EMPTY_SET	z3.obj/include/z3_api.h	/^    Z3_OP_RE_EMPTY_SET,$/;"	e	enum:__anon6
Z3_OP_RE_FULL_SET	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_FULL_SET = 1577$/;"	v
Z3_OP_RE_FULL_SET	z3.obj/include/z3_api.h	/^    Z3_OP_RE_FULL_SET,$/;"	e	enum:__anon6
Z3_OP_RE_INTERSECT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_INTERSECT = 1575$/;"	v
Z3_OP_RE_INTERSECT	z3.obj/include/z3_api.h	/^    Z3_OP_RE_INTERSECT,$/;"	e	enum:__anon6
Z3_OP_RE_LOOP	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_LOOP = 1574$/;"	v
Z3_OP_RE_LOOP	z3.obj/include/z3_api.h	/^    Z3_OP_RE_LOOP,$/;"	e	enum:__anon6
Z3_OP_RE_OPTION	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_OPTION = 1570$/;"	v
Z3_OP_RE_OPTION	z3.obj/include/z3_api.h	/^    Z3_OP_RE_OPTION,$/;"	e	enum:__anon6
Z3_OP_RE_PLUS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_PLUS = 1568$/;"	v
Z3_OP_RE_PLUS	z3.obj/include/z3_api.h	/^    Z3_OP_RE_PLUS,$/;"	e	enum:__anon6
Z3_OP_RE_RANGE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_RANGE = 1573$/;"	v
Z3_OP_RE_RANGE	z3.obj/include/z3_api.h	/^    Z3_OP_RE_RANGE,$/;"	e	enum:__anon6
Z3_OP_RE_STAR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_STAR = 1569$/;"	v
Z3_OP_RE_STAR	z3.obj/include/z3_api.h	/^    Z3_OP_RE_STAR,$/;"	e	enum:__anon6
Z3_OP_RE_UNION	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_RE_UNION = 1572$/;"	v
Z3_OP_RE_UNION	z3.obj/include/z3_api.h	/^    Z3_OP_RE_UNION,$/;"	e	enum:__anon6
Z3_OP_ROTATE_LEFT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ROTATE_LEFT = 1067$/;"	v
Z3_OP_ROTATE_LEFT	z3.obj/include/z3_api.h	/^    Z3_OP_ROTATE_LEFT,$/;"	e	enum:__anon6
Z3_OP_ROTATE_RIGHT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ROTATE_RIGHT = 1068$/;"	v
Z3_OP_ROTATE_RIGHT	z3.obj/include/z3_api.h	/^    Z3_OP_ROTATE_RIGHT,$/;"	e	enum:__anon6
Z3_OP_SELECT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SELECT = 769$/;"	v
Z3_OP_SELECT	z3.obj/include/z3_api.h	/^    Z3_OP_SELECT,$/;"	e	enum:__anon6
Z3_OP_SEQ_AT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_AT = 1559$/;"	v
Z3_OP_SEQ_AT	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_AT,$/;"	e	enum:__anon6
Z3_OP_SEQ_CONCAT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_CONCAT = 1553$/;"	v
Z3_OP_SEQ_CONCAT	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_CONCAT,$/;"	e	enum:__anon6
Z3_OP_SEQ_CONTAINS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_CONTAINS = 1556$/;"	v
Z3_OP_SEQ_CONTAINS	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_CONTAINS,$/;"	e	enum:__anon6
Z3_OP_SEQ_EMPTY	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_EMPTY = 1552$/;"	v
Z3_OP_SEQ_EMPTY	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_EMPTY,$/;"	e	enum:__anon6
Z3_OP_SEQ_EXTRACT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_EXTRACT = 1557$/;"	v
Z3_OP_SEQ_EXTRACT	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_EXTRACT,$/;"	e	enum:__anon6
Z3_OP_SEQ_INDEX	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_INDEX = 1562$/;"	v
Z3_OP_SEQ_INDEX	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_INDEX,$/;"	e	enum:__anon6
Z3_OP_SEQ_IN_RE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_IN_RE = 1565$/;"	v
Z3_OP_SEQ_IN_RE	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_IN_RE,$/;"	e	enum:__anon6
Z3_OP_SEQ_LAST_INDEX	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_LAST_INDEX = 1563$/;"	v
Z3_OP_SEQ_LAST_INDEX	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_LAST_INDEX,$/;"	e	enum:__anon6
Z3_OP_SEQ_LENGTH	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_LENGTH = 1561$/;"	v
Z3_OP_SEQ_LENGTH	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_LENGTH,$/;"	e	enum:__anon6
Z3_OP_SEQ_NTH	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_NTH = 1560$/;"	v
Z3_OP_SEQ_NTH	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_NTH,$/;"	e	enum:__anon6
Z3_OP_SEQ_PREFIX	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_PREFIX = 1554$/;"	v
Z3_OP_SEQ_PREFIX	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_PREFIX,$/;"	e	enum:__anon6
Z3_OP_SEQ_REPLACE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_REPLACE = 1558$/;"	v
Z3_OP_SEQ_REPLACE	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_REPLACE,$/;"	e	enum:__anon6
Z3_OP_SEQ_SUFFIX	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_SUFFIX = 1555$/;"	v
Z3_OP_SEQ_SUFFIX	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_SUFFIX,$/;"	e	enum:__anon6
Z3_OP_SEQ_TO_RE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_TO_RE = 1564$/;"	v
Z3_OP_SEQ_TO_RE	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_TO_RE,$/;"	e	enum:__anon6
Z3_OP_SEQ_UNIT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SEQ_UNIT = 1551$/;"	v
Z3_OP_SEQ_UNIT	z3.obj/include/z3_api.h	/^    Z3_OP_SEQ_UNIT,$/;"	e	enum:__anon6
Z3_OP_SET_CARD	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_CARD = 781$/;"	v
Z3_OP_SET_CARD	z3.obj/include/z3_api.h	/^    Z3_OP_SET_CARD,$/;"	e	enum:__anon6
Z3_OP_SET_COMPLEMENT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_COMPLEMENT = 776$/;"	v
Z3_OP_SET_COMPLEMENT	z3.obj/include/z3_api.h	/^    Z3_OP_SET_COMPLEMENT,$/;"	e	enum:__anon6
Z3_OP_SET_DIFFERENCE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_DIFFERENCE = 775$/;"	v
Z3_OP_SET_DIFFERENCE	z3.obj/include/z3_api.h	/^    Z3_OP_SET_DIFFERENCE,$/;"	e	enum:__anon6
Z3_OP_SET_HAS_SIZE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_HAS_SIZE = 780$/;"	v
Z3_OP_SET_HAS_SIZE	z3.obj/include/z3_api.h	/^    Z3_OP_SET_HAS_SIZE,$/;"	e	enum:__anon6
Z3_OP_SET_INTERSECT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_INTERSECT = 774$/;"	v
Z3_OP_SET_INTERSECT	z3.obj/include/z3_api.h	/^    Z3_OP_SET_INTERSECT,$/;"	e	enum:__anon6
Z3_OP_SET_SUBSET	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_SUBSET = 777$/;"	v
Z3_OP_SET_SUBSET	z3.obj/include/z3_api.h	/^    Z3_OP_SET_SUBSET,$/;"	e	enum:__anon6
Z3_OP_SET_UNION	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SET_UNION = 773$/;"	v
Z3_OP_SET_UNION	z3.obj/include/z3_api.h	/^    Z3_OP_SET_UNION,$/;"	e	enum:__anon6
Z3_OP_SGEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SGEQ = 1044$/;"	v
Z3_OP_SGEQ	z3.obj/include/z3_api.h	/^    Z3_OP_SGEQ,$/;"	e	enum:__anon6
Z3_OP_SGT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SGT = 1048$/;"	v
Z3_OP_SGT	z3.obj/include/z3_api.h	/^    Z3_OP_SGT,$/;"	e	enum:__anon6
Z3_OP_SIGN_EXT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SIGN_EXT = 1057$/;"	v
Z3_OP_SIGN_EXT	z3.obj/include/z3_api.h	/^    Z3_OP_SIGN_EXT,$/;"	e	enum:__anon6
Z3_OP_SLEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SLEQ = 1042$/;"	v
Z3_OP_SLEQ	z3.obj/include/z3_api.h	/^    Z3_OP_SLEQ,$/;"	e	enum:__anon6
Z3_OP_SLT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SLT = 1046$/;"	v
Z3_OP_SLT	z3.obj/include/z3_api.h	/^    Z3_OP_SLT,$/;"	e	enum:__anon6
Z3_OP_SPECIAL_RELATION_LO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SPECIAL_RELATION_LO = 40960$/;"	v
Z3_OP_SPECIAL_RELATION_LO	z3.obj/include/z3_api.h	/^    Z3_OP_SPECIAL_RELATION_LO = 0xa000,$/;"	e	enum:__anon6
Z3_OP_SPECIAL_RELATION_PLO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SPECIAL_RELATION_PLO = 40962$/;"	v
Z3_OP_SPECIAL_RELATION_PLO	z3.obj/include/z3_api.h	/^    Z3_OP_SPECIAL_RELATION_PLO,$/;"	e	enum:__anon6
Z3_OP_SPECIAL_RELATION_PO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SPECIAL_RELATION_PO = 40961$/;"	v
Z3_OP_SPECIAL_RELATION_PO	z3.obj/include/z3_api.h	/^    Z3_OP_SPECIAL_RELATION_PO,$/;"	e	enum:__anon6
Z3_OP_SPECIAL_RELATION_TC	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SPECIAL_RELATION_TC = 40964$/;"	v
Z3_OP_SPECIAL_RELATION_TC	z3.obj/include/z3_api.h	/^    Z3_OP_SPECIAL_RELATION_TC,$/;"	e	enum:__anon6
Z3_OP_SPECIAL_RELATION_TO	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SPECIAL_RELATION_TO = 40963$/;"	v
Z3_OP_SPECIAL_RELATION_TO	z3.obj/include/z3_api.h	/^    Z3_OP_SPECIAL_RELATION_TO,$/;"	e	enum:__anon6
Z3_OP_SPECIAL_RELATION_TRC	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SPECIAL_RELATION_TRC = 40965$/;"	v
Z3_OP_SPECIAL_RELATION_TRC	z3.obj/include/z3_api.h	/^    Z3_OP_SPECIAL_RELATION_TRC,$/;"	e	enum:__anon6
Z3_OP_STORE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_STORE = 768$/;"	v
Z3_OP_STORE	z3.obj/include/z3_api.h	/^    Z3_OP_STORE = 0x300,$/;"	e	enum:__anon6
Z3_OP_STR_TO_INT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_STR_TO_INT = 1566$/;"	v
Z3_OP_STR_TO_INT	z3.obj/include/z3_api.h	/^    Z3_OP_STR_TO_INT,$/;"	e	enum:__anon6
Z3_OP_SUB	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_SUB = 519$/;"	v
Z3_OP_SUB	z3.obj/include/z3_api.h	/^    Z3_OP_SUB,$/;"	e	enum:__anon6
Z3_OP_TO_INT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_TO_INT = 527$/;"	v
Z3_OP_TO_INT	z3.obj/include/z3_api.h	/^    Z3_OP_TO_INT,$/;"	e	enum:__anon6
Z3_OP_TO_REAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_TO_REAL = 526$/;"	v
Z3_OP_TO_REAL	z3.obj/include/z3_api.h	/^    Z3_OP_TO_REAL,$/;"	e	enum:__anon6
Z3_OP_TRUE	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_TRUE = 256$/;"	v
Z3_OP_TRUE	z3.obj/include/z3_api.h	/^    Z3_OP_TRUE = 0x100,$/;"	e	enum:__anon6
Z3_OP_UGEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_UGEQ = 1043$/;"	v
Z3_OP_UGEQ	z3.obj/include/z3_api.h	/^    Z3_OP_UGEQ,$/;"	e	enum:__anon6
Z3_OP_UGT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_UGT = 1047$/;"	v
Z3_OP_UGT	z3.obj/include/z3_api.h	/^    Z3_OP_UGT,$/;"	e	enum:__anon6
Z3_OP_ULEQ	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ULEQ = 1041$/;"	v
Z3_OP_ULEQ	z3.obj/include/z3_api.h	/^    Z3_OP_ULEQ,$/;"	e	enum:__anon6
Z3_OP_ULT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ULT = 1045$/;"	v
Z3_OP_ULT	z3.obj/include/z3_api.h	/^    Z3_OP_ULT,$/;"	e	enum:__anon6
Z3_OP_UMINUS	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_UMINUS = 520$/;"	v
Z3_OP_UMINUS	z3.obj/include/z3_api.h	/^    Z3_OP_UMINUS,$/;"	e	enum:__anon6
Z3_OP_UNINTERPRETED	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_UNINTERPRETED = 45101$/;"	v
Z3_OP_UNINTERPRETED	z3.obj/include/z3_api.h	/^    Z3_OP_UNINTERPRETED$/;"	e	enum:__anon6
Z3_OP_XOR	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_XOR = 264$/;"	v
Z3_OP_XOR	z3.obj/include/z3_api.h	/^    Z3_OP_XOR,$/;"	e	enum:__anon6
Z3_OP_XOR3	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_XOR3 = 1075$/;"	v
Z3_OP_XOR3	z3.obj/include/z3_api.h	/^    Z3_OP_XOR3,$/;"	e	enum:__anon6
Z3_OP_ZERO_EXT	z3.obj/bin/python/z3/z3consts.py	/^Z3_OP_ZERO_EXT = 1058$/;"	v
Z3_OP_ZERO_EXT	z3.obj/include/z3_api.h	/^    Z3_OP_ZERO_EXT,$/;"	e	enum:__anon6
Z3_PARAMETER_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_AST = 5$/;"	v
Z3_PARAMETER_AST	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_AST,$/;"	e	enum:__anon3
Z3_PARAMETER_DOUBLE	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_DOUBLE = 1$/;"	v
Z3_PARAMETER_DOUBLE	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_DOUBLE,$/;"	e	enum:__anon3
Z3_PARAMETER_FUNC_DECL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_FUNC_DECL = 6$/;"	v
Z3_PARAMETER_FUNC_DECL	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_FUNC_DECL$/;"	e	enum:__anon3
Z3_PARAMETER_INT	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_INT = 0$/;"	v
Z3_PARAMETER_INT	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_INT,$/;"	e	enum:__anon3
Z3_PARAMETER_RATIONAL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_RATIONAL = 2$/;"	v
Z3_PARAMETER_RATIONAL	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_RATIONAL,$/;"	e	enum:__anon3
Z3_PARAMETER_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_SORT = 4$/;"	v
Z3_PARAMETER_SORT	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_SORT,$/;"	e	enum:__anon3
Z3_PARAMETER_SYMBOL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARAMETER_SYMBOL = 3$/;"	v
Z3_PARAMETER_SYMBOL	z3.obj/include/z3_api.h	/^    Z3_PARAMETER_SYMBOL,$/;"	e	enum:__anon3
Z3_PARSER_ERROR	z3.obj/bin/python/z3/z3consts.py	/^Z3_PARSER_ERROR = 4$/;"	v
Z3_PARSER_ERROR	z3.obj/include/z3_api.h	/^    Z3_PARSER_ERROR,$/;"	e	enum:__anon9
Z3_PK_BOOL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_BOOL = 1$/;"	v
Z3_PK_BOOL	z3.obj/include/z3_api.h	/^    Z3_PK_BOOL,$/;"	e	enum:__anon7
Z3_PK_DOUBLE	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_DOUBLE = 2$/;"	v
Z3_PK_DOUBLE	z3.obj/include/z3_api.h	/^    Z3_PK_DOUBLE,$/;"	e	enum:__anon7
Z3_PK_INVALID	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_INVALID = 6$/;"	v
Z3_PK_INVALID	z3.obj/include/z3_api.h	/^    Z3_PK_INVALID$/;"	e	enum:__anon7
Z3_PK_OTHER	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_OTHER = 5$/;"	v
Z3_PK_OTHER	z3.obj/include/z3_api.h	/^    Z3_PK_OTHER,$/;"	e	enum:__anon7
Z3_PK_STRING	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_STRING = 4$/;"	v
Z3_PK_STRING	z3.obj/include/z3_api.h	/^    Z3_PK_STRING,$/;"	e	enum:__anon7
Z3_PK_SYMBOL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_SYMBOL = 3$/;"	v
Z3_PK_SYMBOL	z3.obj/include/z3_api.h	/^    Z3_PK_SYMBOL,$/;"	e	enum:__anon7
Z3_PK_UINT	z3.obj/bin/python/z3/z3consts.py	/^Z3_PK_UINT = 0$/;"	v
Z3_PK_UINT	z3.obj/include/z3_api.h	/^    Z3_PK_UINT,$/;"	e	enum:__anon7
Z3_POLYNOMIAL_H_	z3.obj/include/z3_polynomial.h	21;"	d
Z3_PRINT_LOW_LEVEL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PRINT_LOW_LEVEL = 1$/;"	v
Z3_PRINT_LOW_LEVEL	z3.obj/include/z3_api.h	/^    Z3_PRINT_LOW_LEVEL,$/;"	e	enum:__anon8
Z3_PRINT_SMTLIB2_COMPLIANT	z3.obj/bin/python/z3/z3consts.py	/^Z3_PRINT_SMTLIB2_COMPLIANT = 2$/;"	v
Z3_PRINT_SMTLIB2_COMPLIANT	z3.obj/include/z3_api.h	/^    Z3_PRINT_SMTLIB2_COMPLIANT$/;"	e	enum:__anon8
Z3_PRINT_SMTLIB_FULL	z3.obj/bin/python/z3/z3consts.py	/^Z3_PRINT_SMTLIB_FULL = 0$/;"	v
Z3_PRINT_SMTLIB_FULL	z3.obj/include/z3_api.h	/^    Z3_PRINT_SMTLIB_FULL,$/;"	e	enum:__anon8
Z3_QUANTIFIER_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_QUANTIFIER_AST = 3$/;"	v
Z3_QUANTIFIER_AST	z3.obj/include/z3_api.h	/^    Z3_QUANTIFIER_AST,$/;"	e	enum:__anon5
Z3_RCF_H_	z3.obj/include/z3_rcf.h	23;"	d
Z3_REAL_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_REAL_SORT = 3$/;"	v
Z3_REAL_SORT	z3.obj/include/z3_api.h	/^    Z3_REAL_SORT,$/;"	e	enum:__anon4
Z3_REAL_TYPE	z3.obj/include/z3_v1.h	34;"	d
Z3_RELATION_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_RELATION_SORT = 7$/;"	v
Z3_RELATION_SORT	z3.obj/include/z3_api.h	/^    Z3_RELATION_SORT,$/;"	e	enum:__anon4
Z3_REVISION_NUMBER	z3.obj/include/z3_version.h	5;"	d
Z3_RE_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_RE_SORT = 12$/;"	v
Z3_RE_SORT	z3.obj/include/z3_api.h	/^    Z3_RE_SORT,$/;"	e	enum:__anon4
Z3_ROUNDING_MODE_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_ROUNDING_MODE_SORT = 10$/;"	v
Z3_ROUNDING_MODE_SORT	z3.obj/include/z3_api.h	/^    Z3_ROUNDING_MODE_SORT,$/;"	e	enum:__anon4
Z3_SEQ_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_SEQ_SORT = 11$/;"	v
Z3_SEQ_SORT	z3.obj/include/z3_api.h	/^    Z3_SEQ_SORT,$/;"	e	enum:__anon4
Z3_SORT_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_SORT_AST = 4$/;"	v
Z3_SORT_AST	z3.obj/include/z3_api.h	/^    Z3_SORT_AST,$/;"	e	enum:__anon5
Z3_SORT_ERROR	z3.obj/bin/python/z3/z3consts.py	/^Z3_SORT_ERROR = 1$/;"	v
Z3_SORT_ERROR	z3.obj/include/z3_api.h	/^    Z3_SORT_ERROR,$/;"	e	enum:__anon9
Z3_SORT_ERROR	z3.obj/include/z3_v1.h	41;"	d
Z3_SPACER_H_	z3.obj/include/z3_spacer.h	20;"	d
Z3_STRING_SYMBOL	z3.obj/bin/python/z3/z3consts.py	/^Z3_STRING_SYMBOL = 1$/;"	v
Z3_STRING_SYMBOL	z3.obj/include/z3_api.h	/^    Z3_STRING_SYMBOL$/;"	e	enum:__anon2
Z3_THROW	z3.obj/include/z3++.h	3574;"	d
Z3_THROW	z3.obj/include/z3++.h	97;"	d
Z3_THROW	z3.obj/include/z3++.h	99;"	d
Z3_TRUE	z3.obj/include/z3_api.h	89;"	d
Z3_TUPLE_TYPE	z3.obj/include/z3_v1.h	37;"	d
Z3_TYPE_AST	z3.obj/include/z3_v1.h	40;"	d
Z3_UNINTERPRETED_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_UNINTERPRETED_SORT = 0$/;"	v
Z3_UNINTERPRETED_SORT	z3.obj/include/z3_api.h	/^    Z3_UNINTERPRETED_SORT,$/;"	e	enum:__anon4
Z3_UNINTERPRETED_TYPE	z3.obj/include/z3_v1.h	31;"	d
Z3_UNKNOWN_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_UNKNOWN_AST = 1000$/;"	v
Z3_UNKNOWN_AST	z3.obj/include/z3_api.h	/^    Z3_UNKNOWN_AST = 1000$/;"	e	enum:__anon5
Z3_UNKNOWN_SORT	z3.obj/bin/python/z3/z3consts.py	/^Z3_UNKNOWN_SORT = 1000$/;"	v
Z3_UNKNOWN_SORT	z3.obj/include/z3_api.h	/^    Z3_UNKNOWN_SORT = 1000$/;"	e	enum:__anon4
Z3_UNKNOWN_TYPE	z3.obj/include/z3_v1.h	38;"	d
Z3_V1_H_	z3.obj/include/z3_v1.h	22;"	d
Z3_VAR_AST	z3.obj/bin/python/z3/z3consts.py	/^Z3_VAR_AST = 2$/;"	v
Z3_VAR_AST	z3.obj/include/z3_api.h	/^    Z3_VAR_AST,$/;"	e	enum:__anon5
Z3_add_const_interp	z3.obj/bin/python/z3/z3core.py	/^def Z3_add_const_interp(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_add_const_interp)):$/;"	f
Z3_add_func_interp	z3.obj/bin/python/z3/z3core.py	/^def Z3_add_func_interp(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_add_func_interp)):$/;"	f
Z3_add_rec_def	z3.obj/bin/python/z3/z3core.py	/^def Z3_add_rec_def(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_add_rec_def)):$/;"	f
Z3_algebraic_add	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_add(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_add)):$/;"	f
Z3_algebraic_div	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_div(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_div)):$/;"	f
Z3_algebraic_eq	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_eq(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_eq)):$/;"	f
Z3_algebraic_eval	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_eval(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_algebraic_eval)):$/;"	f
Z3_algebraic_ge	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_ge(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_ge)):$/;"	f
Z3_algebraic_get_i	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_get_i(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_get_i)):$/;"	f
Z3_algebraic_get_poly	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_get_poly(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_get_poly)):$/;"	f
Z3_algebraic_gt	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_gt(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_gt)):$/;"	f
Z3_algebraic_is_neg	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_is_neg(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_is_neg)):$/;"	f
Z3_algebraic_is_pos	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_is_pos(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_is_pos)):$/;"	f
Z3_algebraic_is_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_is_value(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_is_value)):$/;"	f
Z3_algebraic_is_zero	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_is_zero(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_is_zero)):$/;"	f
Z3_algebraic_le	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_le(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_le)):$/;"	f
Z3_algebraic_lt	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_lt(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_lt)):$/;"	f
Z3_algebraic_mul	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_mul(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_mul)):$/;"	f
Z3_algebraic_neq	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_neq(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_neq)):$/;"	f
Z3_algebraic_power	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_power(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_power)):$/;"	f
Z3_algebraic_root	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_root(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_root)):$/;"	f
Z3_algebraic_roots	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_roots(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_algebraic_roots)):$/;"	f
Z3_algebraic_sign	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_sign(a0, a1, _elems=Elementaries(_lib.Z3_algebraic_sign)):$/;"	f
Z3_algebraic_sub	z3.obj/bin/python/z3/z3core.py	/^def Z3_algebraic_sub(a0, a1, a2, _elems=Elementaries(_lib.Z3_algebraic_sub)):$/;"	f
Z3_app	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_app);$/;"	v
Z3_app_to_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_app_to_ast(a0, a1, _elems=Elementaries(_lib.Z3_app_to_ast)):$/;"	f
Z3_append_log	z3.obj/bin/python/z3/z3core.py	/^def Z3_append_log(a0, _elems=Elementaries(_lib.Z3_append_log)):$/;"	f
Z3_apply_result	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_apply_result);$/;"	v
Z3_apply_result_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_apply_result_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_apply_result_dec_ref)):$/;"	f
Z3_apply_result_get_num_subgoals	z3.obj/bin/python/z3/z3core.py	/^def Z3_apply_result_get_num_subgoals(a0, a1, _elems=Elementaries(_lib.Z3_apply_result_get_num_subgoals)):$/;"	f
Z3_apply_result_get_subgoal	z3.obj/bin/python/z3/z3core.py	/^def Z3_apply_result_get_subgoal(a0, a1, a2, _elems=Elementaries(_lib.Z3_apply_result_get_subgoal)):$/;"	f
Z3_apply_result_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_apply_result_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_apply_result_inc_ref)):$/;"	f
Z3_apply_result_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_apply_result_to_string(a0, a1, _elems=Elementaries(_lib.Z3_apply_result_to_string)):$/;"	f
Z3_apply_result_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_apply_result_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_apply_result_to_string)):$/;"	f
Z3_ast	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_ast);$/;"	v
Z3_ast_kind	z3.obj/include/z3_api.h	/^} Z3_ast_kind;$/;"	t	typeref:enum:__anon5
Z3_ast_map	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_ast_map);$/;"	v
Z3_ast_map_contains	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_contains(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_map_contains)):$/;"	f
Z3_ast_map_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_dec_ref)):$/;"	f
Z3_ast_map_erase	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_erase(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_map_erase)):$/;"	f
Z3_ast_map_find	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_find(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_map_find)):$/;"	f
Z3_ast_map_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_inc_ref)):$/;"	f
Z3_ast_map_insert	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_insert(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_ast_map_insert)):$/;"	f
Z3_ast_map_keys	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_keys(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_keys)):$/;"	f
Z3_ast_map_reset	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_reset(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_reset)):$/;"	f
Z3_ast_map_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_size(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_size)):$/;"	f
Z3_ast_map_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_to_string(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_to_string)):$/;"	f
Z3_ast_map_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_map_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_ast_map_to_string)):$/;"	f
Z3_ast_opt	z3.obj/include/z3_api.h	16;"	d
Z3_ast_print_mode	z3.obj/include/z3_api.h	/^} Z3_ast_print_mode;$/;"	t	typeref:enum:__anon8
Z3_ast_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_to_string(a0, a1, _elems=Elementaries(_lib.Z3_ast_to_string)):$/;"	f
Z3_ast_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_ast_to_string)):$/;"	f
Z3_ast_vector	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_ast_vector);$/;"	v
Z3_ast_vector_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_ast_vector_dec_ref)):$/;"	f
Z3_ast_vector_get	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_get(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_vector_get)):$/;"	f
Z3_ast_vector_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_ast_vector_inc_ref)):$/;"	f
Z3_ast_vector_push	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_push(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_vector_push)):$/;"	f
Z3_ast_vector_resize	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_resize(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_vector_resize)):$/;"	f
Z3_ast_vector_set	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_set(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_ast_vector_set)):$/;"	f
Z3_ast_vector_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_size(a0, a1, _elems=Elementaries(_lib.Z3_ast_vector_size)):$/;"	f
Z3_ast_vector_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_to_string(a0, a1, _elems=Elementaries(_lib.Z3_ast_vector_to_string)):$/;"	f
Z3_ast_vector_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_ast_vector_to_string)):$/;"	f
Z3_ast_vector_translate	z3.obj/bin/python/z3/z3core.py	/^def Z3_ast_vector_translate(a0, a1, a2, _elems=Elementaries(_lib.Z3_ast_vector_translate)):$/;"	f
Z3_benchmark_to_smtlib_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_benchmark_to_smtlib_string(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_benchmark_to_smtlib_string)):$/;"	f
Z3_benchmark_to_smtlib_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_benchmark_to_smtlib_string_bytes(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_benchmark_to_smtlib_string)):$/;"	f
Z3_bool	z3.obj/include/z3_api.h	/^typedef bool Z3_bool;$/;"	t
Z3_bool_opt	z3.obj/include/z3_macros.h	8;"	d
Z3_char_ptr	z3.obj/include/z3_api.h	/^typedef char const*  Z3_char_ptr;$/;"	t
Z3_close_log	z3.obj/bin/python/z3/z3core.py	/^def Z3_close_log(_elems=Elementaries(_lib.Z3_close_log)):$/;"	f
Z3_config	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_config);$/;"	v
Z3_const	z3.obj/include/z3_v1.h	29;"	d
Z3_const_decl_ast	z3.obj/include/z3_v1.h	28;"	d
Z3_constructor	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_constructor);$/;"	v
Z3_constructor_list	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_constructor_list);$/;"	v
Z3_context	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_context);$/;"	v
Z3_datatype_update_field	z3.obj/bin/python/z3/z3core.py	/^def Z3_datatype_update_field(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_datatype_update_field)):$/;"	f
Z3_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_dec_ref)):$/;"	f
Z3_decl_kind	z3.obj/include/z3_api.h	/^} Z3_decl_kind;$/;"	t	typeref:enum:__anon6
Z3_del_config	z3.obj/bin/python/z3/z3core.py	/^def Z3_del_config(a0, _elems=Elementaries(_lib.Z3_del_config)):$/;"	f
Z3_del_constructor	z3.obj/bin/python/z3/z3core.py	/^def Z3_del_constructor(a0, a1, _elems=Elementaries(_lib.Z3_del_constructor)):$/;"	f
Z3_del_constructor_list	z3.obj/bin/python/z3/z3core.py	/^def Z3_del_constructor_list(a0, a1, _elems=Elementaries(_lib.Z3_del_constructor_list)):$/;"	f
Z3_del_context	z3.obj/bin/python/z3/z3core.py	/^def Z3_del_context(a0, _elems=Elementaries(_lib.Z3_del_context)):$/;"	f
Z3_disable_trace	z3.obj/bin/python/z3/z3core.py	/^def Z3_disable_trace(a0, _elems=Elementaries(_lib.Z3_disable_trace)):$/;"	f
Z3_enable_trace	z3.obj/bin/python/z3/z3core.py	/^def Z3_enable_trace(a0, _elems=Elementaries(_lib.Z3_enable_trace)):$/;"	f
Z3_error_code	z3.obj/include/z3_api.h	/^} Z3_error_code;$/;"	t	typeref:enum:__anon9
Z3_error_handler	z3.obj/include/z3_api.h	/^typedef void Z3_error_handler(Z3_context c, Z3_error_code e);$/;"	t
Z3_eval_smtlib2_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_eval_smtlib2_string(a0, a1, _elems=Elementaries(_lib.Z3_eval_smtlib2_string)):$/;"	f
Z3_eval_smtlib2_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_eval_smtlib2_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_eval_smtlib2_string)):$/;"	f
Z3_finalize_memory	z3.obj/bin/python/z3/z3core.py	/^def Z3_finalize_memory(_elems=Elementaries(_lib.Z3_finalize_memory)):$/;"	f
Z3_fixedpoint	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_fixedpoint);$/;"	v
Z3_fixedpoint_add_cover	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_add_cover(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_fixedpoint_add_cover)):$/;"	f
Z3_fixedpoint_add_fact	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_add_fact(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_fixedpoint_add_fact)):$/;"	f
Z3_fixedpoint_add_invariant	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_add_invariant(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_add_invariant)):$/;"	f
Z3_fixedpoint_add_rule	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_add_rule(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_add_rule)):$/;"	f
Z3_fixedpoint_assert	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_assert(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_assert)):$/;"	f
Z3_fixedpoint_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_dec_ref)):$/;"	f
Z3_fixedpoint_from_file	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_from_file(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_from_file)):$/;"	f
Z3_fixedpoint_from_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_from_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_from_string)):$/;"	f
Z3_fixedpoint_get_answer	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_answer(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_answer)):$/;"	f
Z3_fixedpoint_get_assertions	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_assertions(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_assertions)):$/;"	f
Z3_fixedpoint_get_cover_delta	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_cover_delta(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_get_cover_delta)):$/;"	f
Z3_fixedpoint_get_ground_sat_answer	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_ground_sat_answer(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_ground_sat_answer)):$/;"	f
Z3_fixedpoint_get_help	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_help(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_help)):$/;"	f
Z3_fixedpoint_get_help_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_help_bytes(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_help)):$/;"	f
Z3_fixedpoint_get_num_levels	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_num_levels(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_get_num_levels)):$/;"	f
Z3_fixedpoint_get_param_descrs	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_param_descrs(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_param_descrs)):$/;"	f
Z3_fixedpoint_get_reachable	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_reachable(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_get_reachable)):$/;"	f
Z3_fixedpoint_get_reason_unknown	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_reason_unknown(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_reason_unknown)):$/;"	f
Z3_fixedpoint_get_reason_unknown_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_reason_unknown_bytes(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_reason_unknown)):$/;"	f
Z3_fixedpoint_get_rule_names_along_trace	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_rule_names_along_trace(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_rule_names_along_trace)):$/;"	f
Z3_fixedpoint_get_rules	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_rules(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_rules)):$/;"	f
Z3_fixedpoint_get_rules_along_trace	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_rules_along_trace(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_rules_along_trace)):$/;"	f
Z3_fixedpoint_get_statistics	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_get_statistics(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_get_statistics)):$/;"	f
Z3_fixedpoint_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_fixedpoint_inc_ref)):$/;"	f
Z3_fixedpoint_new_lemma_eh	z3.obj/include/z3_fixedpoint.h	/^    typedef void (*Z3_fixedpoint_new_lemma_eh)(void *state, Z3_ast lemma, unsigned level);$/;"	t
Z3_fixedpoint_predecessor_eh	z3.obj/include/z3_fixedpoint.h	/^    typedef void (*Z3_fixedpoint_predecessor_eh)(void *state);$/;"	t
Z3_fixedpoint_query	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_query(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_query)):$/;"	f
Z3_fixedpoint_query_from_lvl	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_query_from_lvl(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_query_from_lvl)):$/;"	f
Z3_fixedpoint_query_relations	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_query_relations(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_query_relations)):$/;"	f
Z3_fixedpoint_reduce_app_callback_fptr	z3.obj/include/z3_fixedpoint.h	/^    typedef void Z3_fixedpoint_reduce_app_callback_fptr($/;"	t
Z3_fixedpoint_reduce_assign_callback_fptr	z3.obj/include/z3_fixedpoint.h	/^    typedef void Z3_fixedpoint_reduce_assign_callback_fptr($/;"	t
Z3_fixedpoint_register_relation	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_register_relation(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_register_relation)):$/;"	f
Z3_fixedpoint_set_params	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_set_params(a0, a1, a2, _elems=Elementaries(_lib.Z3_fixedpoint_set_params)):$/;"	f
Z3_fixedpoint_set_predicate_representation	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_set_predicate_representation(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_fixedpoint_set_predicate_representation)):$/;"	f
Z3_fixedpoint_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_to_string(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_to_string)):$/;"	f
Z3_fixedpoint_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_to_string_bytes(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_to_string)):$/;"	f
Z3_fixedpoint_unfold_eh	z3.obj/include/z3_fixedpoint.h	/^    typedef void (*Z3_fixedpoint_unfold_eh)(void *state);$/;"	t
Z3_fixedpoint_update_rule	z3.obj/bin/python/z3/z3core.py	/^def Z3_fixedpoint_update_rule(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fixedpoint_update_rule)):$/;"	f
Z3_fpa_get_ebits	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_ebits(a0, a1, _elems=Elementaries(_lib.Z3_fpa_get_ebits)):$/;"	f
Z3_fpa_get_numeral_exponent_bv	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_exponent_bv(a0, a1, a2, _elems=Elementaries(_lib.Z3_fpa_get_numeral_exponent_bv)):$/;"	f
Z3_fpa_get_numeral_exponent_int64	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_exponent_int64(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_fpa_get_numeral_exponent_int64)):$/;"	f
Z3_fpa_get_numeral_exponent_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_exponent_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_fpa_get_numeral_exponent_string)):$/;"	f
Z3_fpa_get_numeral_exponent_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_exponent_string_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_fpa_get_numeral_exponent_string)):$/;"	f
Z3_fpa_get_numeral_sign	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_sign(a0, a1, a2, _elems=Elementaries(_lib.Z3_fpa_get_numeral_sign)):$/;"	f
Z3_fpa_get_numeral_sign_bv	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_sign_bv(a0, a1, _elems=Elementaries(_lib.Z3_fpa_get_numeral_sign_bv)):$/;"	f
Z3_fpa_get_numeral_significand_bv	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_significand_bv(a0, a1, _elems=Elementaries(_lib.Z3_fpa_get_numeral_significand_bv)):$/;"	f
Z3_fpa_get_numeral_significand_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_significand_string(a0, a1, _elems=Elementaries(_lib.Z3_fpa_get_numeral_significand_string)):$/;"	f
Z3_fpa_get_numeral_significand_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_significand_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_fpa_get_numeral_significand_string)):$/;"	f
Z3_fpa_get_numeral_significand_uint64	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_numeral_significand_uint64(a0, a1, a2, _elems=Elementaries(_lib.Z3_fpa_get_numeral_significand_uint64)):$/;"	f
Z3_fpa_get_sbits	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_get_sbits(a0, a1, _elems=Elementaries(_lib.Z3_fpa_get_sbits)):$/;"	f
Z3_fpa_is_numeral_inf	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_inf(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_inf)):$/;"	f
Z3_fpa_is_numeral_nan	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_nan(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_nan)):$/;"	f
Z3_fpa_is_numeral_negative	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_negative(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_negative)):$/;"	f
Z3_fpa_is_numeral_normal	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_normal(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_normal)):$/;"	f
Z3_fpa_is_numeral_positive	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_positive(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_positive)):$/;"	f
Z3_fpa_is_numeral_subnormal	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_subnormal(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_subnormal)):$/;"	f
Z3_fpa_is_numeral_zero	z3.obj/bin/python/z3/z3core.py	/^def Z3_fpa_is_numeral_zero(a0, a1, _elems=Elementaries(_lib.Z3_fpa_is_numeral_zero)):$/;"	f
Z3_func_decl	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_func_decl);$/;"	v
Z3_func_decl_to_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_decl_to_ast(a0, a1, _elems=Elementaries(_lib.Z3_func_decl_to_ast)):$/;"	f
Z3_func_decl_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_decl_to_string(a0, a1, _elems=Elementaries(_lib.Z3_func_decl_to_string)):$/;"	f
Z3_func_decl_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_decl_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_func_decl_to_string)):$/;"	f
Z3_func_entry	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_func_entry);$/;"	v
Z3_func_entry_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_entry_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_func_entry_dec_ref)):$/;"	f
Z3_func_entry_get_arg	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_entry_get_arg(a0, a1, a2, _elems=Elementaries(_lib.Z3_func_entry_get_arg)):$/;"	f
Z3_func_entry_get_num_args	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_entry_get_num_args(a0, a1, _elems=Elementaries(_lib.Z3_func_entry_get_num_args)):$/;"	f
Z3_func_entry_get_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_entry_get_value(a0, a1, _elems=Elementaries(_lib.Z3_func_entry_get_value)):$/;"	f
Z3_func_entry_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_entry_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_func_entry_inc_ref)):$/;"	f
Z3_func_interp	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_func_interp);$/;"	v
Z3_func_interp_add_entry	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_add_entry(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_func_interp_add_entry)):$/;"	f
Z3_func_interp_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_func_interp_dec_ref)):$/;"	f
Z3_func_interp_get_arity	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_get_arity(a0, a1, _elems=Elementaries(_lib.Z3_func_interp_get_arity)):$/;"	f
Z3_func_interp_get_else	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_get_else(a0, a1, _elems=Elementaries(_lib.Z3_func_interp_get_else)):$/;"	f
Z3_func_interp_get_entry	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_get_entry(a0, a1, a2, _elems=Elementaries(_lib.Z3_func_interp_get_entry)):$/;"	f
Z3_func_interp_get_num_entries	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_get_num_entries(a0, a1, _elems=Elementaries(_lib.Z3_func_interp_get_num_entries)):$/;"	f
Z3_func_interp_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_func_interp_inc_ref)):$/;"	f
Z3_func_interp_opt	z3.obj/include/z3_api.h	33;"	d
Z3_func_interp_set_else	z3.obj/bin/python/z3/z3core.py	/^def Z3_func_interp_set_else(a0, a1, a2, _elems=Elementaries(_lib.Z3_func_interp_set_else)):$/;"	f
Z3_get_algebraic_number_lower	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_algebraic_number_lower(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_algebraic_number_lower)):$/;"	f
Z3_get_algebraic_number_upper	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_algebraic_number_upper(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_algebraic_number_upper)):$/;"	f
Z3_get_app_arg	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_app_arg(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_app_arg)):$/;"	f
Z3_get_app_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_app_decl(a0, a1, _elems=Elementaries(_lib.Z3_get_app_decl)):$/;"	f
Z3_get_app_num_args	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_app_num_args(a0, a1, _elems=Elementaries(_lib.Z3_get_app_num_args)):$/;"	f
Z3_get_arity	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_arity(a0, a1, _elems=Elementaries(_lib.Z3_get_arity)):$/;"	f
Z3_get_array_sort_domain	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_array_sort_domain(a0, a1, _elems=Elementaries(_lib.Z3_get_array_sort_domain)):$/;"	f
Z3_get_array_sort_range	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_array_sort_range(a0, a1, _elems=Elementaries(_lib.Z3_get_array_sort_range)):$/;"	f
Z3_get_array_type_domain	z3.obj/include/z3_v1.h	54;"	d
Z3_get_array_type_range	z3.obj/include/z3_v1.h	55;"	d
Z3_get_as_array_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_as_array_func_decl(a0, a1, _elems=Elementaries(_lib.Z3_get_as_array_func_decl)):$/;"	f
Z3_get_ast_hash	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_ast_hash(a0, a1, _elems=Elementaries(_lib.Z3_get_ast_hash)):$/;"	f
Z3_get_ast_id	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_ast_id(a0, a1, _elems=Elementaries(_lib.Z3_get_ast_id)):$/;"	f
Z3_get_ast_kind	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_ast_kind(a0, a1, _elems=Elementaries(_lib.Z3_get_ast_kind)):$/;"	f
Z3_get_bool_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_bool_value(a0, a1, _elems=Elementaries(_lib.Z3_get_bool_value)):$/;"	f
Z3_get_bv_sort_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_bv_sort_size(a0, a1, _elems=Elementaries(_lib.Z3_get_bv_sort_size)):$/;"	f
Z3_get_bv_type_size	z3.obj/include/z3_v1.h	53;"	d
Z3_get_const_ast_decl	z3.obj/include/z3_v1.h	61;"	d
Z3_get_datatype_sort_constructor	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_datatype_sort_constructor(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_datatype_sort_constructor)):$/;"	f
Z3_get_datatype_sort_constructor_accessor	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_datatype_sort_constructor_accessor(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_get_datatype_sort_constructor_accessor)):$/;"	f
Z3_get_datatype_sort_num_constructors	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_datatype_sort_num_constructors(a0, a1, _elems=Elementaries(_lib.Z3_get_datatype_sort_num_constructors)):$/;"	f
Z3_get_datatype_sort_recognizer	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_datatype_sort_recognizer(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_datatype_sort_recognizer)):$/;"	f
Z3_get_decl_ast_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_ast_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_ast_parameter)):$/;"	f
Z3_get_decl_double_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_double_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_double_parameter)):$/;"	f
Z3_get_decl_func_decl_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_func_decl_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_func_decl_parameter)):$/;"	f
Z3_get_decl_int_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_int_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_int_parameter)):$/;"	f
Z3_get_decl_kind	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_kind(a0, a1, _elems=Elementaries(_lib.Z3_get_decl_kind)):$/;"	f
Z3_get_decl_name	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_name(a0, a1, _elems=Elementaries(_lib.Z3_get_decl_name)):$/;"	f
Z3_get_decl_num_parameters	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_num_parameters(a0, a1, _elems=Elementaries(_lib.Z3_get_decl_num_parameters)):$/;"	f
Z3_get_decl_parameter_kind	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_parameter_kind(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_parameter_kind)):$/;"	f
Z3_get_decl_rational_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_rational_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_rational_parameter)):$/;"	f
Z3_get_decl_rational_parameter_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_rational_parameter_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_rational_parameter)):$/;"	f
Z3_get_decl_sort_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_sort_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_sort_parameter)):$/;"	f
Z3_get_decl_symbol_parameter	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_decl_symbol_parameter(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_decl_symbol_parameter)):$/;"	f
Z3_get_denominator	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_denominator(a0, a1, _elems=Elementaries(_lib.Z3_get_denominator)):$/;"	f
Z3_get_domain	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_domain(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_domain)):$/;"	f
Z3_get_domain_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_domain_size(a0, a1, _elems=Elementaries(_lib.Z3_get_domain_size)):$/;"	f
Z3_get_error_code	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_error_code(a0, _elems=Elementaries(_lib.Z3_get_error_code)):$/;"	f
Z3_get_error_msg	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_error_msg(a0, a1, _elems=Elementaries(_lib.Z3_get_error_msg)):$/;"	f
Z3_get_error_msg_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_error_msg_bytes(a0, a1, _elems=Elementaries(_lib.Z3_get_error_msg)):$/;"	f
Z3_get_estimated_alloc_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_estimated_alloc_size(_elems=Elementaries(_lib.Z3_get_estimated_alloc_size)):$/;"	f
Z3_get_finite_domain_sort_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_finite_domain_sort_size(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_finite_domain_sort_size)):$/;"	f
Z3_get_full_version	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_full_version(_elems=Elementaries(_lib.Z3_get_full_version)):$/;"	f
Z3_get_full_version_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_full_version_bytes(_elems=Elementaries(_lib.Z3_get_full_version)):$/;"	f
Z3_get_func_decl_id	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_func_decl_id(a0, a1, _elems=Elementaries(_lib.Z3_get_func_decl_id)):$/;"	f
Z3_get_implied_equalities	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_implied_equalities(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_get_implied_equalities)):$/;"	f
Z3_get_index_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_index_value(a0, a1, _elems=Elementaries(_lib.Z3_get_index_value)):$/;"	f
Z3_get_lstring	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_lstring(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_lstring)):$/;"	f
Z3_get_num_probes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_num_probes(a0, _elems=Elementaries(_lib.Z3_get_num_probes)):$/;"	f
Z3_get_num_tactics	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_num_tactics(a0, _elems=Elementaries(_lib.Z3_get_num_tactics)):$/;"	f
Z3_get_numeral_decimal_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_decimal_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_numeral_decimal_string)):$/;"	f
Z3_get_numeral_decimal_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_decimal_string_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_numeral_decimal_string)):$/;"	f
Z3_get_numeral_double	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_double(a0, a1, _elems=Elementaries(_lib.Z3_get_numeral_double)):$/;"	f
Z3_get_numeral_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_int(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_numeral_int)):$/;"	f
Z3_get_numeral_int64	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_int64(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_numeral_int64)):$/;"	f
Z3_get_numeral_rational_int64	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_rational_int64(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_get_numeral_rational_int64)):$/;"	f
Z3_get_numeral_small	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_small(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_get_numeral_small)):$/;"	f
Z3_get_numeral_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_string(a0, a1, _elems=Elementaries(_lib.Z3_get_numeral_string)):$/;"	f
Z3_get_numeral_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_get_numeral_string)):$/;"	f
Z3_get_numeral_uint	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_uint(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_numeral_uint)):$/;"	f
Z3_get_numeral_uint64	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numeral_uint64(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_numeral_uint64)):$/;"	f
Z3_get_numeral_value_string	z3.obj/include/z3_v1.h	60;"	d
Z3_get_numerator	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_numerator(a0, a1, _elems=Elementaries(_lib.Z3_get_numerator)):$/;"	f
Z3_get_pattern	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_pattern(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_pattern)):$/;"	f
Z3_get_pattern_ast	z3.obj/include/z3_v1.h	50;"	d
Z3_get_pattern_num_terms	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_pattern_num_terms(a0, a1, _elems=Elementaries(_lib.Z3_get_pattern_num_terms)):$/;"	f
Z3_get_probe_name	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_probe_name(a0, a1, _elems=Elementaries(_lib.Z3_get_probe_name)):$/;"	f
Z3_get_probe_name_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_probe_name_bytes(a0, a1, _elems=Elementaries(_lib.Z3_get_probe_name)):$/;"	f
Z3_get_quantifier_body	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_body(a0, a1, _elems=Elementaries(_lib.Z3_get_quantifier_body)):$/;"	f
Z3_get_quantifier_bound_name	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_bound_name(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_quantifier_bound_name)):$/;"	f
Z3_get_quantifier_bound_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_bound_sort(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_quantifier_bound_sort)):$/;"	f
Z3_get_quantifier_no_pattern_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_no_pattern_ast(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_quantifier_no_pattern_ast)):$/;"	f
Z3_get_quantifier_num_bound	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_num_bound(a0, a1, _elems=Elementaries(_lib.Z3_get_quantifier_num_bound)):$/;"	f
Z3_get_quantifier_num_no_patterns	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_num_no_patterns(a0, a1, _elems=Elementaries(_lib.Z3_get_quantifier_num_no_patterns)):$/;"	f
Z3_get_quantifier_num_patterns	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_num_patterns(a0, a1, _elems=Elementaries(_lib.Z3_get_quantifier_num_patterns)):$/;"	f
Z3_get_quantifier_pattern_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_pattern_ast(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_quantifier_pattern_ast)):$/;"	f
Z3_get_quantifier_weight	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_quantifier_weight(a0, a1, _elems=Elementaries(_lib.Z3_get_quantifier_weight)):$/;"	f
Z3_get_range	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_range(a0, a1, _elems=Elementaries(_lib.Z3_get_range)):$/;"	f
Z3_get_re_sort_basis	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_re_sort_basis(a0, a1, _elems=Elementaries(_lib.Z3_get_re_sort_basis)):$/;"	f
Z3_get_relation_arity	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_relation_arity(a0, a1, _elems=Elementaries(_lib.Z3_get_relation_arity)):$/;"	f
Z3_get_relation_column	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_relation_column(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_relation_column)):$/;"	f
Z3_get_seq_sort_basis	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_seq_sort_basis(a0, a1, _elems=Elementaries(_lib.Z3_get_seq_sort_basis)):$/;"	f
Z3_get_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_sort(a0, a1, _elems=Elementaries(_lib.Z3_get_sort)):$/;"	f
Z3_get_sort_id	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_sort_id(a0, a1, _elems=Elementaries(_lib.Z3_get_sort_id)):$/;"	f
Z3_get_sort_kind	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_sort_kind(a0, a1, _elems=Elementaries(_lib.Z3_get_sort_kind)):$/;"	f
Z3_get_sort_name	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_sort_name(a0, a1, _elems=Elementaries(_lib.Z3_get_sort_name)):$/;"	f
Z3_get_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_string(a0, a1, _elems=Elementaries(_lib.Z3_get_string)):$/;"	f
Z3_get_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_get_string)):$/;"	f
Z3_get_symbol_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_symbol_int(a0, a1, _elems=Elementaries(_lib.Z3_get_symbol_int)):$/;"	f
Z3_get_symbol_kind	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_symbol_kind(a0, a1, _elems=Elementaries(_lib.Z3_get_symbol_kind)):$/;"	f
Z3_get_symbol_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_symbol_string(a0, a1, _elems=Elementaries(_lib.Z3_get_symbol_string)):$/;"	f
Z3_get_symbol_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_symbol_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_get_symbol_string)):$/;"	f
Z3_get_tactic_name	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_tactic_name(a0, a1, _elems=Elementaries(_lib.Z3_get_tactic_name)):$/;"	f
Z3_get_tactic_name_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_tactic_name_bytes(a0, a1, _elems=Elementaries(_lib.Z3_get_tactic_name)):$/;"	f
Z3_get_tuple_sort_field_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_tuple_sort_field_decl(a0, a1, a2, _elems=Elementaries(_lib.Z3_get_tuple_sort_field_decl)):$/;"	f
Z3_get_tuple_sort_mk_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_tuple_sort_mk_decl(a0, a1, _elems=Elementaries(_lib.Z3_get_tuple_sort_mk_decl)):$/;"	f
Z3_get_tuple_sort_num_fields	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_tuple_sort_num_fields(a0, a1, _elems=Elementaries(_lib.Z3_get_tuple_sort_num_fields)):$/;"	f
Z3_get_tuple_type_field_decl	z3.obj/include/z3_v1.h	57;"	d
Z3_get_tuple_type_mk_decl	z3.obj/include/z3_v1.h	58;"	d
Z3_get_tuple_type_num_fields	z3.obj/include/z3_v1.h	56;"	d
Z3_get_type	z3.obj/include/z3_v1.h	49;"	d
Z3_get_type_kind	z3.obj/include/z3_v1.h	51;"	d
Z3_get_type_name	z3.obj/include/z3_v1.h	52;"	d
Z3_get_value	z3.obj/include/z3_v1.h	62;"	d
Z3_get_version	z3.obj/bin/python/z3/z3core.py	/^def Z3_get_version(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_get_version)):$/;"	f
Z3_global_param_get	z3.obj/bin/python/z3/z3core.py	/^def Z3_global_param_get(a0, a1, _elems=Elementaries(_lib.Z3_global_param_get)):$/;"	f
Z3_global_param_reset_all	z3.obj/bin/python/z3/z3core.py	/^def Z3_global_param_reset_all(_elems=Elementaries(_lib.Z3_global_param_reset_all)):$/;"	f
Z3_global_param_set	z3.obj/bin/python/z3/z3core.py	/^def Z3_global_param_set(a0, a1, _elems=Elementaries(_lib.Z3_global_param_set)):$/;"	f
Z3_goal	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_goal);$/;"	v
Z3_goal_assert	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_assert(a0, a1, a2, _elems=Elementaries(_lib.Z3_goal_assert)):$/;"	f
Z3_goal_convert_model	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_convert_model(a0, a1, a2, _elems=Elementaries(_lib.Z3_goal_convert_model)):$/;"	f
Z3_goal_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_goal_dec_ref)):$/;"	f
Z3_goal_depth	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_depth(a0, a1, _elems=Elementaries(_lib.Z3_goal_depth)):$/;"	f
Z3_goal_formula	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_formula(a0, a1, a2, _elems=Elementaries(_lib.Z3_goal_formula)):$/;"	f
Z3_goal_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_goal_inc_ref)):$/;"	f
Z3_goal_inconsistent	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_inconsistent(a0, a1, _elems=Elementaries(_lib.Z3_goal_inconsistent)):$/;"	f
Z3_goal_is_decided_sat	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_is_decided_sat(a0, a1, _elems=Elementaries(_lib.Z3_goal_is_decided_sat)):$/;"	f
Z3_goal_is_decided_unsat	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_is_decided_unsat(a0, a1, _elems=Elementaries(_lib.Z3_goal_is_decided_unsat)):$/;"	f
Z3_goal_num_exprs	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_num_exprs(a0, a1, _elems=Elementaries(_lib.Z3_goal_num_exprs)):$/;"	f
Z3_goal_prec	z3.obj/include/z3_api.h	/^} Z3_goal_prec;$/;"	t	typeref:enum:__anon10
Z3_goal_precision	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_precision(a0, a1, _elems=Elementaries(_lib.Z3_goal_precision)):$/;"	f
Z3_goal_reset	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_reset(a0, a1, _elems=Elementaries(_lib.Z3_goal_reset)):$/;"	f
Z3_goal_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_size(a0, a1, _elems=Elementaries(_lib.Z3_goal_size)):$/;"	f
Z3_goal_to_dimacs_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_to_dimacs_string(a0, a1, _elems=Elementaries(_lib.Z3_goal_to_dimacs_string)):$/;"	f
Z3_goal_to_dimacs_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_to_dimacs_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_goal_to_dimacs_string)):$/;"	f
Z3_goal_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_to_string(a0, a1, _elems=Elementaries(_lib.Z3_goal_to_string)):$/;"	f
Z3_goal_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_goal_to_string)):$/;"	f
Z3_goal_translate	z3.obj/bin/python/z3/z3core.py	/^def Z3_goal_translate(a0, a1, a2, _elems=Elementaries(_lib.Z3_goal_translate)):$/;"	f
Z3_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_inc_ref)):$/;"	f
Z3_interrupt	z3.obj/bin/python/z3/z3core.py	/^def Z3_interrupt(a0, _elems=Elementaries(_lib.Z3_interrupt)):$/;"	f
Z3_is_algebraic_number	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_algebraic_number(a0, a1, _elems=Elementaries(_lib.Z3_is_algebraic_number)):$/;"	f
Z3_is_app	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_app(a0, a1, _elems=Elementaries(_lib.Z3_is_app)):$/;"	f
Z3_is_as_array	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_as_array(a0, a1, _elems=Elementaries(_lib.Z3_is_as_array)):$/;"	f
Z3_is_eq_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_eq_ast(a0, a1, a2, _elems=Elementaries(_lib.Z3_is_eq_ast)):$/;"	f
Z3_is_eq_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_eq_func_decl(a0, a1, a2, _elems=Elementaries(_lib.Z3_is_eq_func_decl)):$/;"	f
Z3_is_eq_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_eq_sort(a0, a1, a2, _elems=Elementaries(_lib.Z3_is_eq_sort)):$/;"	f
Z3_is_lambda	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_lambda(a0, a1, _elems=Elementaries(_lib.Z3_is_lambda)):$/;"	f
Z3_is_numeral_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_numeral_ast(a0, a1, _elems=Elementaries(_lib.Z3_is_numeral_ast)):$/;"	f
Z3_is_quantifier_exists	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_quantifier_exists(a0, a1, _elems=Elementaries(_lib.Z3_is_quantifier_exists)):$/;"	f
Z3_is_quantifier_forall	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_quantifier_forall(a0, a1, _elems=Elementaries(_lib.Z3_is_quantifier_forall)):$/;"	f
Z3_is_re_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_re_sort(a0, a1, _elems=Elementaries(_lib.Z3_is_re_sort)):$/;"	f
Z3_is_seq_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_seq_sort(a0, a1, _elems=Elementaries(_lib.Z3_is_seq_sort)):$/;"	f
Z3_is_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_string(a0, a1, _elems=Elementaries(_lib.Z3_is_string)):$/;"	f
Z3_is_string_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_string_sort(a0, a1, _elems=Elementaries(_lib.Z3_is_string_sort)):$/;"	f
Z3_is_well_sorted	z3.obj/bin/python/z3/z3core.py	/^def Z3_is_well_sorted(a0, a1, _elems=Elementaries(_lib.Z3_is_well_sorted)):$/;"	f
Z3_lbool	z3.obj/include/z3_api.h	/^} Z3_lbool;$/;"	t	typeref:enum:__anon1
Z3_literals	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_literals);$/;"	v
Z3_mk_add	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_add(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_add)):$/;"	f
Z3_mk_and	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_and(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_and)):$/;"	f
Z3_mk_app	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_app(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_app)):$/;"	f
Z3_mk_array_default	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_array_default(a0, a1, _elems=Elementaries(_lib.Z3_mk_array_default)):$/;"	f
Z3_mk_array_ext	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_array_ext(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_array_ext)):$/;"	f
Z3_mk_array_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_array_sort(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_array_sort)):$/;"	f
Z3_mk_array_sort_n	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_array_sort_n(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_array_sort_n)):$/;"	f
Z3_mk_array_type	z3.obj/include/z3_v1.h	47;"	d
Z3_mk_as_array	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_as_array(a0, a1, _elems=Elementaries(_lib.Z3_mk_as_array)):$/;"	f
Z3_mk_ast_map	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_ast_map(a0, _elems=Elementaries(_lib.Z3_mk_ast_map)):$/;"	f
Z3_mk_ast_vector	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_ast_vector(a0, _elems=Elementaries(_lib.Z3_mk_ast_vector)):$/;"	f
Z3_mk_atleast	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_atleast(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_atleast)):$/;"	f
Z3_mk_atmost	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_atmost(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_atmost)):$/;"	f
Z3_mk_bool_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bool_sort(a0, _elems=Elementaries(_lib.Z3_mk_bool_sort)):$/;"	f
Z3_mk_bool_type	z3.obj/include/z3_v1.h	43;"	d
Z3_mk_bound	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bound(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bound)):$/;"	f
Z3_mk_bv2int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bv2int(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bv2int)):$/;"	f
Z3_mk_bv_numeral	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bv_numeral(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bv_numeral)):$/;"	f
Z3_mk_bv_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bv_sort(a0, a1, _elems=Elementaries(_lib.Z3_mk_bv_sort)):$/;"	f
Z3_mk_bv_type	z3.obj/include/z3_v1.h	46;"	d
Z3_mk_bvadd	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvadd(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvadd)):$/;"	f
Z3_mk_bvadd_no_overflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvadd_no_overflow(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_bvadd_no_overflow)):$/;"	f
Z3_mk_bvadd_no_underflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvadd_no_underflow(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvadd_no_underflow)):$/;"	f
Z3_mk_bvand	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvand(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvand)):$/;"	f
Z3_mk_bvashr	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvashr(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvashr)):$/;"	f
Z3_mk_bvlshr	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvlshr(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvlshr)):$/;"	f
Z3_mk_bvmul	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvmul(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvmul)):$/;"	f
Z3_mk_bvmul_no_overflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvmul_no_overflow(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_bvmul_no_overflow)):$/;"	f
Z3_mk_bvmul_no_underflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvmul_no_underflow(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvmul_no_underflow)):$/;"	f
Z3_mk_bvnand	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvnand(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvnand)):$/;"	f
Z3_mk_bvneg	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvneg(a0, a1, _elems=Elementaries(_lib.Z3_mk_bvneg)):$/;"	f
Z3_mk_bvneg_no_overflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvneg_no_overflow(a0, a1, _elems=Elementaries(_lib.Z3_mk_bvneg_no_overflow)):$/;"	f
Z3_mk_bvnor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvnor(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvnor)):$/;"	f
Z3_mk_bvnot	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvnot(a0, a1, _elems=Elementaries(_lib.Z3_mk_bvnot)):$/;"	f
Z3_mk_bvor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvor(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvor)):$/;"	f
Z3_mk_bvredand	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvredand(a0, a1, _elems=Elementaries(_lib.Z3_mk_bvredand)):$/;"	f
Z3_mk_bvredor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvredor(a0, a1, _elems=Elementaries(_lib.Z3_mk_bvredor)):$/;"	f
Z3_mk_bvsdiv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsdiv(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsdiv)):$/;"	f
Z3_mk_bvsdiv_no_overflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsdiv_no_overflow(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsdiv_no_overflow)):$/;"	f
Z3_mk_bvsge	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsge(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsge)):$/;"	f
Z3_mk_bvsgt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsgt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsgt)):$/;"	f
Z3_mk_bvshl	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvshl(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvshl)):$/;"	f
Z3_mk_bvsle	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsle(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsle)):$/;"	f
Z3_mk_bvslt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvslt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvslt)):$/;"	f
Z3_mk_bvsmod	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsmod(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsmod)):$/;"	f
Z3_mk_bvsrem	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsrem(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsrem)):$/;"	f
Z3_mk_bvsub	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsub(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsub)):$/;"	f
Z3_mk_bvsub_no_overflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsub_no_overflow(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvsub_no_overflow)):$/;"	f
Z3_mk_bvsub_no_underflow	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvsub_no_underflow(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_bvsub_no_underflow)):$/;"	f
Z3_mk_bvudiv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvudiv(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvudiv)):$/;"	f
Z3_mk_bvuge	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvuge(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvuge)):$/;"	f
Z3_mk_bvugt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvugt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvugt)):$/;"	f
Z3_mk_bvule	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvule(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvule)):$/;"	f
Z3_mk_bvult	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvult(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvult)):$/;"	f
Z3_mk_bvurem	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvurem(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvurem)):$/;"	f
Z3_mk_bvxnor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvxnor(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvxnor)):$/;"	f
Z3_mk_bvxor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_bvxor(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_bvxor)):$/;"	f
Z3_mk_concat	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_concat(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_concat)):$/;"	f
Z3_mk_config	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_config(_elems=Elementaries(_lib.Z3_mk_config)):$/;"	f
Z3_mk_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_const(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_const)):$/;"	f
Z3_mk_const_array	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_const_array(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_const_array)):$/;"	f
Z3_mk_constructor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_constructor(a0, a1, a2, a3, a4, a5, a6, _elems=Elementaries(_lib.Z3_mk_constructor)):$/;"	f
Z3_mk_constructor_list	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_constructor_list(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_constructor_list)):$/;"	f
Z3_mk_context	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_context(a0, _elems=Elementaries(_lib.Z3_mk_context)):$/;"	f
Z3_mk_context_rc	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_context_rc(a0, _elems=Elementaries(_lib.Z3_mk_context_rc)):$/;"	f
Z3_mk_datatype	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_datatype(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_datatype)):$/;"	f
Z3_mk_datatypes	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_datatypes(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_datatypes)):$/;"	f
Z3_mk_distinct	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_distinct(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_distinct)):$/;"	f
Z3_mk_div	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_div(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_div)):$/;"	f
Z3_mk_divides	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_divides(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_divides)):$/;"	f
Z3_mk_empty_set	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_empty_set(a0, a1, _elems=Elementaries(_lib.Z3_mk_empty_set)):$/;"	f
Z3_mk_enumeration_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_enumeration_sort(a0, a1, a2, a3, a4, a5, _elems=Elementaries(_lib.Z3_mk_enumeration_sort)):$/;"	f
Z3_mk_eq	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_eq(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_eq)):$/;"	f
Z3_mk_exists	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_exists(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_mk_exists)):$/;"	f
Z3_mk_exists_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_exists_const(a0, a1, a2, a3, a4, a5, a6, _elems=Elementaries(_lib.Z3_mk_exists_const)):$/;"	f
Z3_mk_ext_rotate_left	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_ext_rotate_left(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_ext_rotate_left)):$/;"	f
Z3_mk_ext_rotate_right	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_ext_rotate_right(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_ext_rotate_right)):$/;"	f
Z3_mk_extract	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_extract(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_extract)):$/;"	f
Z3_mk_false	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_false(a0, _elems=Elementaries(_lib.Z3_mk_false)):$/;"	f
Z3_mk_finite_domain_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_finite_domain_sort(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_finite_domain_sort)):$/;"	f
Z3_mk_fixedpoint	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fixedpoint(a0, _elems=Elementaries(_lib.Z3_mk_fixedpoint)):$/;"	f
Z3_mk_forall	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_forall(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_mk_forall)):$/;"	f
Z3_mk_forall_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_forall_const(a0, a1, a2, a3, a4, a5, a6, _elems=Elementaries(_lib.Z3_mk_forall_const)):$/;"	f
Z3_mk_fpa_abs	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_abs(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_abs)):$/;"	f
Z3_mk_fpa_add	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_add(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_add)):$/;"	f
Z3_mk_fpa_div	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_div(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_div)):$/;"	f
Z3_mk_fpa_eq	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_eq(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_eq)):$/;"	f
Z3_mk_fpa_fma	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_fma(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_fpa_fma)):$/;"	f
Z3_mk_fpa_fp	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_fp(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_fp)):$/;"	f
Z3_mk_fpa_geq	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_geq(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_geq)):$/;"	f
Z3_mk_fpa_gt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_gt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_gt)):$/;"	f
Z3_mk_fpa_inf	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_inf(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_inf)):$/;"	f
Z3_mk_fpa_is_infinite	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_infinite(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_infinite)):$/;"	f
Z3_mk_fpa_is_nan	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_nan(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_nan)):$/;"	f
Z3_mk_fpa_is_negative	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_negative(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_negative)):$/;"	f
Z3_mk_fpa_is_normal	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_normal(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_normal)):$/;"	f
Z3_mk_fpa_is_positive	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_positive(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_positive)):$/;"	f
Z3_mk_fpa_is_subnormal	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_subnormal(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_subnormal)):$/;"	f
Z3_mk_fpa_is_zero	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_is_zero(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_is_zero)):$/;"	f
Z3_mk_fpa_leq	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_leq(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_leq)):$/;"	f
Z3_mk_fpa_lt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_lt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_lt)):$/;"	f
Z3_mk_fpa_max	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_max(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_max)):$/;"	f
Z3_mk_fpa_min	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_min(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_min)):$/;"	f
Z3_mk_fpa_mul	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_mul(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_mul)):$/;"	f
Z3_mk_fpa_nan	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_nan(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_nan)):$/;"	f
Z3_mk_fpa_neg	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_neg(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_neg)):$/;"	f
Z3_mk_fpa_numeral_double	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_numeral_double(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_numeral_double)):$/;"	f
Z3_mk_fpa_numeral_float	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_numeral_float(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_numeral_float)):$/;"	f
Z3_mk_fpa_numeral_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_numeral_int(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_numeral_int)):$/;"	f
Z3_mk_fpa_numeral_int64_uint64	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_numeral_int64_uint64(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_fpa_numeral_int64_uint64)):$/;"	f
Z3_mk_fpa_numeral_int_uint	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_numeral_int_uint(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_fpa_numeral_int_uint)):$/;"	f
Z3_mk_fpa_rem	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rem(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_rem)):$/;"	f
Z3_mk_fpa_rna	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rna(a0, _elems=Elementaries(_lib.Z3_mk_fpa_rna)):$/;"	f
Z3_mk_fpa_rne	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rne(a0, _elems=Elementaries(_lib.Z3_mk_fpa_rne)):$/;"	f
Z3_mk_fpa_round_nearest_ties_to_away	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_round_nearest_ties_to_away(a0, _elems=Elementaries(_lib.Z3_mk_fpa_round_nearest_ties_to_away)):$/;"	f
Z3_mk_fpa_round_nearest_ties_to_even	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_round_nearest_ties_to_even(a0, _elems=Elementaries(_lib.Z3_mk_fpa_round_nearest_ties_to_even)):$/;"	f
Z3_mk_fpa_round_to_integral	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_round_to_integral(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_round_to_integral)):$/;"	f
Z3_mk_fpa_round_toward_negative	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_round_toward_negative(a0, _elems=Elementaries(_lib.Z3_mk_fpa_round_toward_negative)):$/;"	f
Z3_mk_fpa_round_toward_positive	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_round_toward_positive(a0, _elems=Elementaries(_lib.Z3_mk_fpa_round_toward_positive)):$/;"	f
Z3_mk_fpa_round_toward_zero	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_round_toward_zero(a0, _elems=Elementaries(_lib.Z3_mk_fpa_round_toward_zero)):$/;"	f
Z3_mk_fpa_rounding_mode_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rounding_mode_sort(a0, _elems=Elementaries(_lib.Z3_mk_fpa_rounding_mode_sort)):$/;"	f
Z3_mk_fpa_rtn	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rtn(a0, _elems=Elementaries(_lib.Z3_mk_fpa_rtn)):$/;"	f
Z3_mk_fpa_rtp	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rtp(a0, _elems=Elementaries(_lib.Z3_mk_fpa_rtp)):$/;"	f
Z3_mk_fpa_rtz	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_rtz(a0, _elems=Elementaries(_lib.Z3_mk_fpa_rtz)):$/;"	f
Z3_mk_fpa_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_sort)):$/;"	f
Z3_mk_fpa_sort_128	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_128(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_128)):$/;"	f
Z3_mk_fpa_sort_16	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_16(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_16)):$/;"	f
Z3_mk_fpa_sort_32	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_32(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_32)):$/;"	f
Z3_mk_fpa_sort_64	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_64(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_64)):$/;"	f
Z3_mk_fpa_sort_double	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_double(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_double)):$/;"	f
Z3_mk_fpa_sort_half	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_half(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_half)):$/;"	f
Z3_mk_fpa_sort_quadruple	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_quadruple(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_quadruple)):$/;"	f
Z3_mk_fpa_sort_single	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sort_single(a0, _elems=Elementaries(_lib.Z3_mk_fpa_sort_single)):$/;"	f
Z3_mk_fpa_sqrt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sqrt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_sqrt)):$/;"	f
Z3_mk_fpa_sub	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_sub(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_sub)):$/;"	f
Z3_mk_fpa_to_fp_bv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_fp_bv(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_to_fp_bv)):$/;"	f
Z3_mk_fpa_to_fp_float	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_fp_float(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_to_fp_float)):$/;"	f
Z3_mk_fpa_to_fp_int_real	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_fp_int_real(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_fpa_to_fp_int_real)):$/;"	f
Z3_mk_fpa_to_fp_real	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_fp_real(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_to_fp_real)):$/;"	f
Z3_mk_fpa_to_fp_signed	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_fp_signed(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_to_fp_signed)):$/;"	f
Z3_mk_fpa_to_fp_unsigned	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_fp_unsigned(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_to_fp_unsigned)):$/;"	f
Z3_mk_fpa_to_ieee_bv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_ieee_bv(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_to_ieee_bv)):$/;"	f
Z3_mk_fpa_to_real	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_real(a0, a1, _elems=Elementaries(_lib.Z3_mk_fpa_to_real)):$/;"	f
Z3_mk_fpa_to_sbv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_sbv(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_to_sbv)):$/;"	f
Z3_mk_fpa_to_ubv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_to_ubv(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_fpa_to_ubv)):$/;"	f
Z3_mk_fpa_zero	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fpa_zero(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fpa_zero)):$/;"	f
Z3_mk_fresh_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fresh_const(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_fresh_const)):$/;"	f
Z3_mk_fresh_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_fresh_func_decl(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_fresh_func_decl)):$/;"	f
Z3_mk_full_set	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_full_set(a0, a1, _elems=Elementaries(_lib.Z3_mk_full_set)):$/;"	f
Z3_mk_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_func_decl(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_func_decl)):$/;"	f
Z3_mk_ge	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_ge(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_ge)):$/;"	f
Z3_mk_goal	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_goal(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_goal)):$/;"	f
Z3_mk_gt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_gt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_gt)):$/;"	f
Z3_mk_iff	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_iff(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_iff)):$/;"	f
Z3_mk_implies	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_implies(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_implies)):$/;"	f
Z3_mk_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_int)):$/;"	f
Z3_mk_int2bv	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int2bv(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_int2bv)):$/;"	f
Z3_mk_int2real	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int2real(a0, a1, _elems=Elementaries(_lib.Z3_mk_int2real)):$/;"	f
Z3_mk_int64	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int64(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_int64)):$/;"	f
Z3_mk_int_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int_sort(a0, _elems=Elementaries(_lib.Z3_mk_int_sort)):$/;"	f
Z3_mk_int_symbol	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int_symbol(a0, a1, _elems=Elementaries(_lib.Z3_mk_int_symbol)):$/;"	f
Z3_mk_int_to_str	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_int_to_str(a0, a1, _elems=Elementaries(_lib.Z3_mk_int_to_str)):$/;"	f
Z3_mk_int_type	z3.obj/include/z3_v1.h	44;"	d
Z3_mk_is_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_is_int(a0, a1, _elems=Elementaries(_lib.Z3_mk_is_int)):$/;"	f
Z3_mk_ite	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_ite(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_ite)):$/;"	f
Z3_mk_lambda	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_lambda(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_lambda)):$/;"	f
Z3_mk_lambda_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_lambda_const(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_lambda_const)):$/;"	f
Z3_mk_le	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_le(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_le)):$/;"	f
Z3_mk_linear_order	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_linear_order(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_linear_order)):$/;"	f
Z3_mk_list_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_list_sort(a0, a1, a2, a3, a4, a5, a6, a7, a8, _elems=Elementaries(_lib.Z3_mk_list_sort)):$/;"	f
Z3_mk_lstring	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_lstring(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_lstring)):$/;"	f
Z3_mk_lt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_lt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_lt)):$/;"	f
Z3_mk_map	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_map(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_map)):$/;"	f
Z3_mk_mod	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_mod(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_mod)):$/;"	f
Z3_mk_model	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_model(a0, _elems=Elementaries(_lib.Z3_mk_model)):$/;"	f
Z3_mk_mul	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_mul(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_mul)):$/;"	f
Z3_mk_not	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_not(a0, a1, _elems=Elementaries(_lib.Z3_mk_not)):$/;"	f
Z3_mk_numeral	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_numeral(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_numeral)):$/;"	f
Z3_mk_optimize	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_optimize(a0, _elems=Elementaries(_lib.Z3_mk_optimize)):$/;"	f
Z3_mk_or	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_or(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_or)):$/;"	f
Z3_mk_params	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_params(a0, _elems=Elementaries(_lib.Z3_mk_params)):$/;"	f
Z3_mk_partial_order	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_partial_order(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_partial_order)):$/;"	f
Z3_mk_pattern	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_pattern(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_pattern)):$/;"	f
Z3_mk_pbeq	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_pbeq(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_pbeq)):$/;"	f
Z3_mk_pbge	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_pbge(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_pbge)):$/;"	f
Z3_mk_pble	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_pble(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_pble)):$/;"	f
Z3_mk_piecewise_linear_order	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_piecewise_linear_order(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_piecewise_linear_order)):$/;"	f
Z3_mk_power	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_power(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_power)):$/;"	f
Z3_mk_probe	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_probe(a0, a1, _elems=Elementaries(_lib.Z3_mk_probe)):$/;"	f
Z3_mk_quantifier	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_quantifier(a0, a1, a2, a3, a4, a5, a6, a7, a8, _elems=Elementaries(_lib.Z3_mk_quantifier)):$/;"	f
Z3_mk_quantifier_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_quantifier_const(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_mk_quantifier_const)):$/;"	f
Z3_mk_quantifier_const_ex	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_quantifier_const_ex(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, _elems=Elementaries(_lib.Z3_mk_quantifier_const_ex)):$/;"	f
Z3_mk_quantifier_ex	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_quantifier_ex(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, _elems=Elementaries(_lib.Z3_mk_quantifier_ex)):$/;"	f
Z3_mk_re_complement	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_complement(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_complement)):$/;"	f
Z3_mk_re_concat	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_concat(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_re_concat)):$/;"	f
Z3_mk_re_empty	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_empty(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_empty)):$/;"	f
Z3_mk_re_full	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_full(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_full)):$/;"	f
Z3_mk_re_intersect	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_intersect(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_re_intersect)):$/;"	f
Z3_mk_re_loop	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_loop(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_re_loop)):$/;"	f
Z3_mk_re_option	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_option(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_option)):$/;"	f
Z3_mk_re_plus	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_plus(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_plus)):$/;"	f
Z3_mk_re_range	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_range(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_re_range)):$/;"	f
Z3_mk_re_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_sort(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_sort)):$/;"	f
Z3_mk_re_star	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_star(a0, a1, _elems=Elementaries(_lib.Z3_mk_re_star)):$/;"	f
Z3_mk_re_union	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_re_union(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_re_union)):$/;"	f
Z3_mk_real	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_real(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_real)):$/;"	f
Z3_mk_real2int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_real2int(a0, a1, _elems=Elementaries(_lib.Z3_mk_real2int)):$/;"	f
Z3_mk_real_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_real_sort(a0, _elems=Elementaries(_lib.Z3_mk_real_sort)):$/;"	f
Z3_mk_real_type	z3.obj/include/z3_v1.h	45;"	d
Z3_mk_rec_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_rec_func_decl(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_rec_func_decl)):$/;"	f
Z3_mk_rem	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_rem(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_rem)):$/;"	f
Z3_mk_repeat	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_repeat(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_repeat)):$/;"	f
Z3_mk_rotate_left	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_rotate_left(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_rotate_left)):$/;"	f
Z3_mk_rotate_right	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_rotate_right(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_rotate_right)):$/;"	f
Z3_mk_select	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_select(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_select)):$/;"	f
Z3_mk_select_n	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_select_n(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_select_n)):$/;"	f
Z3_mk_seq_at	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_at(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_at)):$/;"	f
Z3_mk_seq_concat	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_concat(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_concat)):$/;"	f
Z3_mk_seq_contains	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_contains(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_contains)):$/;"	f
Z3_mk_seq_empty	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_empty(a0, a1, _elems=Elementaries(_lib.Z3_mk_seq_empty)):$/;"	f
Z3_mk_seq_extract	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_extract(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_seq_extract)):$/;"	f
Z3_mk_seq_in_re	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_in_re(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_in_re)):$/;"	f
Z3_mk_seq_index	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_index(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_seq_index)):$/;"	f
Z3_mk_seq_last_index	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_last_index(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_last_index)):$/;"	f
Z3_mk_seq_length	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_length(a0, a1, _elems=Elementaries(_lib.Z3_mk_seq_length)):$/;"	f
Z3_mk_seq_nth	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_nth(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_nth)):$/;"	f
Z3_mk_seq_prefix	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_prefix(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_prefix)):$/;"	f
Z3_mk_seq_replace	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_replace(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_seq_replace)):$/;"	f
Z3_mk_seq_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_sort(a0, a1, _elems=Elementaries(_lib.Z3_mk_seq_sort)):$/;"	f
Z3_mk_seq_suffix	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_suffix(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_seq_suffix)):$/;"	f
Z3_mk_seq_to_re	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_to_re(a0, a1, _elems=Elementaries(_lib.Z3_mk_seq_to_re)):$/;"	f
Z3_mk_seq_unit	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_seq_unit(a0, a1, _elems=Elementaries(_lib.Z3_mk_seq_unit)):$/;"	f
Z3_mk_set_add	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_add(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_add)):$/;"	f
Z3_mk_set_complement	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_complement(a0, a1, _elems=Elementaries(_lib.Z3_mk_set_complement)):$/;"	f
Z3_mk_set_del	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_del(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_del)):$/;"	f
Z3_mk_set_difference	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_difference(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_difference)):$/;"	f
Z3_mk_set_has_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_has_size(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_has_size)):$/;"	f
Z3_mk_set_intersect	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_intersect(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_intersect)):$/;"	f
Z3_mk_set_member	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_member(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_member)):$/;"	f
Z3_mk_set_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_sort(a0, a1, _elems=Elementaries(_lib.Z3_mk_set_sort)):$/;"	f
Z3_mk_set_subset	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_subset(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_subset)):$/;"	f
Z3_mk_set_union	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_set_union(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_set_union)):$/;"	f
Z3_mk_sign_ext	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_sign_ext(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_sign_ext)):$/;"	f
Z3_mk_simple_solver	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_simple_solver(a0, _elems=Elementaries(_lib.Z3_mk_simple_solver)):$/;"	f
Z3_mk_solver	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_solver(a0, _elems=Elementaries(_lib.Z3_mk_solver)):$/;"	f
Z3_mk_solver_for_logic	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_solver_for_logic(a0, a1, _elems=Elementaries(_lib.Z3_mk_solver_for_logic)):$/;"	f
Z3_mk_solver_from_tactic	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_solver_from_tactic(a0, a1, _elems=Elementaries(_lib.Z3_mk_solver_from_tactic)):$/;"	f
Z3_mk_store	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_store(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_mk_store)):$/;"	f
Z3_mk_store_n	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_store_n(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_mk_store_n)):$/;"	f
Z3_mk_str_le	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_str_le(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_str_le)):$/;"	f
Z3_mk_str_lt	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_str_lt(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_str_lt)):$/;"	f
Z3_mk_str_to_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_str_to_int(a0, a1, _elems=Elementaries(_lib.Z3_mk_str_to_int)):$/;"	f
Z3_mk_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_string(a0, a1, _elems=Elementaries(_lib.Z3_mk_string)):$/;"	f
Z3_mk_string_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_string_sort(a0, _elems=Elementaries(_lib.Z3_mk_string_sort)):$/;"	f
Z3_mk_string_symbol	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_string_symbol(a0, a1, _elems=Elementaries(_lib.Z3_mk_string_symbol)):$/;"	f
Z3_mk_sub	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_sub(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_sub)):$/;"	f
Z3_mk_tactic	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_tactic(a0, a1, _elems=Elementaries(_lib.Z3_mk_tactic)):$/;"	f
Z3_mk_transitive_closure	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_transitive_closure(a0, a1, _elems=Elementaries(_lib.Z3_mk_transitive_closure)):$/;"	f
Z3_mk_tree_order	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_tree_order(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_tree_order)):$/;"	f
Z3_mk_true	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_true(a0, _elems=Elementaries(_lib.Z3_mk_true)):$/;"	f
Z3_mk_tuple_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_tuple_sort(a0, a1, a2, a3, a4, a5, a6, _elems=Elementaries(_lib.Z3_mk_tuple_sort)):$/;"	f
Z3_mk_tuple_type	z3.obj/include/z3_v1.h	48;"	d
Z3_mk_unary_minus	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_unary_minus(a0, a1, _elems=Elementaries(_lib.Z3_mk_unary_minus)):$/;"	f
Z3_mk_uninterpreted_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_uninterpreted_sort(a0, a1, _elems=Elementaries(_lib.Z3_mk_uninterpreted_sort)):$/;"	f
Z3_mk_uninterpreted_type	z3.obj/include/z3_v1.h	42;"	d
Z3_mk_unsigned_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_unsigned_int(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_unsigned_int)):$/;"	f
Z3_mk_unsigned_int64	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_unsigned_int64(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_unsigned_int64)):$/;"	f
Z3_mk_xor	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_xor(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_xor)):$/;"	f
Z3_mk_zero_ext	z3.obj/bin/python/z3/z3core.py	/^def Z3_mk_zero_ext(a0, a1, a2, _elems=Elementaries(_lib.Z3_mk_zero_ext)):$/;"	f
Z3_model	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_model);$/;"	v
Z3_model_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_model_dec_ref)):$/;"	f
Z3_model_eval	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_eval(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_model_eval)):$/;"	f
Z3_model_extrapolate	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_extrapolate(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_extrapolate)):$/;"	f
Z3_model_get_const_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_const_decl(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_get_const_decl)):$/;"	f
Z3_model_get_const_interp	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_const_interp(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_get_const_interp)):$/;"	f
Z3_model_get_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_func_decl(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_get_func_decl)):$/;"	f
Z3_model_get_func_interp	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_func_interp(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_get_func_interp)):$/;"	f
Z3_model_get_num_consts	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_num_consts(a0, a1, _elems=Elementaries(_lib.Z3_model_get_num_consts)):$/;"	f
Z3_model_get_num_funcs	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_num_funcs(a0, a1, _elems=Elementaries(_lib.Z3_model_get_num_funcs)):$/;"	f
Z3_model_get_num_sorts	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_num_sorts(a0, a1, _elems=Elementaries(_lib.Z3_model_get_num_sorts)):$/;"	f
Z3_model_get_sort	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_sort(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_get_sort)):$/;"	f
Z3_model_get_sort_universe	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_get_sort_universe(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_get_sort_universe)):$/;"	f
Z3_model_has_interp	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_has_interp(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_has_interp)):$/;"	f
Z3_model_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_model_inc_ref)):$/;"	f
Z3_model_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_to_string(a0, a1, _elems=Elementaries(_lib.Z3_model_to_string)):$/;"	f
Z3_model_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_model_to_string)):$/;"	f
Z3_model_translate	z3.obj/bin/python/z3/z3core.py	/^def Z3_model_translate(a0, a1, a2, _elems=Elementaries(_lib.Z3_model_translate)):$/;"	f
Z3_open_log	z3.obj/bin/python/z3/z3core.py	/^def Z3_open_log(a0, _elems=Elementaries(_lib.Z3_open_log)):$/;"	f
Z3_optimize	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_optimize);$/;"	v
Z3_optimize_assert	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_assert(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_assert)):$/;"	f
Z3_optimize_assert_and_track	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_assert_and_track(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_optimize_assert_and_track)):$/;"	f
Z3_optimize_assert_soft	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_assert_soft(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_optimize_assert_soft)):$/;"	f
Z3_optimize_check	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_check(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_optimize_check)):$/;"	f
Z3_optimize_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_optimize_dec_ref)):$/;"	f
Z3_optimize_from_file	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_from_file(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_from_file)):$/;"	f
Z3_optimize_from_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_from_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_from_string)):$/;"	f
Z3_optimize_get_assertions	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_assertions(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_assertions)):$/;"	f
Z3_optimize_get_help	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_help(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_help)):$/;"	f
Z3_optimize_get_help_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_help_bytes(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_help)):$/;"	f
Z3_optimize_get_lower	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_lower(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_get_lower)):$/;"	f
Z3_optimize_get_lower_as_vector	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_lower_as_vector(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_get_lower_as_vector)):$/;"	f
Z3_optimize_get_model	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_model(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_model)):$/;"	f
Z3_optimize_get_objectives	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_objectives(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_objectives)):$/;"	f
Z3_optimize_get_param_descrs	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_param_descrs(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_param_descrs)):$/;"	f
Z3_optimize_get_reason_unknown	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_reason_unknown(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_reason_unknown)):$/;"	f
Z3_optimize_get_reason_unknown_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_reason_unknown_bytes(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_reason_unknown)):$/;"	f
Z3_optimize_get_statistics	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_statistics(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_statistics)):$/;"	f
Z3_optimize_get_unsat_core	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_unsat_core(a0, a1, _elems=Elementaries(_lib.Z3_optimize_get_unsat_core)):$/;"	f
Z3_optimize_get_upper	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_upper(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_get_upper)):$/;"	f
Z3_optimize_get_upper_as_vector	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_get_upper_as_vector(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_get_upper_as_vector)):$/;"	f
Z3_optimize_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_optimize_inc_ref)):$/;"	f
Z3_optimize_maximize	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_maximize(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_maximize)):$/;"	f
Z3_optimize_minimize	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_minimize(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_minimize)):$/;"	f
Z3_optimize_pop	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_pop(a0, a1, _elems=Elementaries(_lib.Z3_optimize_pop)):$/;"	f
Z3_optimize_push	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_push(a0, a1, _elems=Elementaries(_lib.Z3_optimize_push)):$/;"	f
Z3_optimize_set_params	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_set_params(a0, a1, a2, _elems=Elementaries(_lib.Z3_optimize_set_params)):$/;"	f
Z3_optimize_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_to_string(a0, a1, _elems=Elementaries(_lib.Z3_optimize_to_string)):$/;"	f
Z3_optimize_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_optimize_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_optimize_to_string)):$/;"	f
Z3_param_descrs	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_param_descrs);$/;"	v
Z3_param_descrs_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_param_descrs_dec_ref)):$/;"	f
Z3_param_descrs_get_documentation	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_get_documentation(a0, a1, a2, _elems=Elementaries(_lib.Z3_param_descrs_get_documentation)):$/;"	f
Z3_param_descrs_get_documentation_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_get_documentation_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_param_descrs_get_documentation)):$/;"	f
Z3_param_descrs_get_kind	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_get_kind(a0, a1, a2, _elems=Elementaries(_lib.Z3_param_descrs_get_kind)):$/;"	f
Z3_param_descrs_get_name	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_get_name(a0, a1, a2, _elems=Elementaries(_lib.Z3_param_descrs_get_name)):$/;"	f
Z3_param_descrs_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_param_descrs_inc_ref)):$/;"	f
Z3_param_descrs_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_size(a0, a1, _elems=Elementaries(_lib.Z3_param_descrs_size)):$/;"	f
Z3_param_descrs_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_to_string(a0, a1, _elems=Elementaries(_lib.Z3_param_descrs_to_string)):$/;"	f
Z3_param_descrs_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_param_descrs_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_param_descrs_to_string)):$/;"	f
Z3_param_kind	z3.obj/include/z3_api.h	/^} Z3_param_kind;$/;"	t	typeref:enum:__anon7
Z3_parameter_kind	z3.obj/include/z3_api.h	/^} Z3_parameter_kind;$/;"	t	typeref:enum:__anon3
Z3_params	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_params);$/;"	v
Z3_params_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_params_dec_ref)):$/;"	f
Z3_params_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_params_inc_ref)):$/;"	f
Z3_params_set_bool	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_set_bool(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_params_set_bool)):$/;"	f
Z3_params_set_double	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_set_double(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_params_set_double)):$/;"	f
Z3_params_set_symbol	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_set_symbol(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_params_set_symbol)):$/;"	f
Z3_params_set_uint	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_set_uint(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_params_set_uint)):$/;"	f
Z3_params_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_to_string(a0, a1, _elems=Elementaries(_lib.Z3_params_to_string)):$/;"	f
Z3_params_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_params_to_string)):$/;"	f
Z3_params_validate	z3.obj/bin/python/z3/z3core.py	/^def Z3_params_validate(a0, a1, a2, _elems=Elementaries(_lib.Z3_params_validate)):$/;"	f
Z3_parse_smtlib2_file	z3.obj/bin/python/z3/z3core.py	/^def Z3_parse_smtlib2_file(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_parse_smtlib2_file)):$/;"	f
Z3_parse_smtlib2_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_parse_smtlib2_string(a0, a1, a2, a3, a4, a5, a6, a7, _elems=Elementaries(_lib.Z3_parse_smtlib2_string)):$/;"	f
Z3_pattern	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_pattern);$/;"	v
Z3_pattern_ast	z3.obj/include/z3_v1.h	30;"	d
Z3_pattern_to_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_pattern_to_ast(a0, a1, _elems=Elementaries(_lib.Z3_pattern_to_ast)):$/;"	f
Z3_pattern_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_pattern_to_string(a0, a1, _elems=Elementaries(_lib.Z3_pattern_to_string)):$/;"	f
Z3_pattern_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_pattern_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_pattern_to_string)):$/;"	f
Z3_polynomial_subresultants	z3.obj/bin/python/z3/z3core.py	/^def Z3_polynomial_subresultants(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_polynomial_subresultants)):$/;"	f
Z3_probe	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_probe);$/;"	v
Z3_probe_and	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_and(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_and)):$/;"	f
Z3_probe_apply	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_apply(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_apply)):$/;"	f
Z3_probe_const	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_const(a0, a1, _elems=Elementaries(_lib.Z3_probe_const)):$/;"	f
Z3_probe_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_probe_dec_ref)):$/;"	f
Z3_probe_eq	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_eq(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_eq)):$/;"	f
Z3_probe_ge	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_ge(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_ge)):$/;"	f
Z3_probe_get_descr	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_get_descr(a0, a1, _elems=Elementaries(_lib.Z3_probe_get_descr)):$/;"	f
Z3_probe_get_descr_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_get_descr_bytes(a0, a1, _elems=Elementaries(_lib.Z3_probe_get_descr)):$/;"	f
Z3_probe_gt	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_gt(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_gt)):$/;"	f
Z3_probe_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_probe_inc_ref)):$/;"	f
Z3_probe_le	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_le(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_le)):$/;"	f
Z3_probe_lt	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_lt(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_lt)):$/;"	f
Z3_probe_not	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_not(a0, a1, _elems=Elementaries(_lib.Z3_probe_not)):$/;"	f
Z3_probe_or	z3.obj/bin/python/z3/z3core.py	/^def Z3_probe_or(a0, a1, a2, _elems=Elementaries(_lib.Z3_probe_or)):$/;"	f
Z3_qe_lite	z3.obj/bin/python/z3/z3core.py	/^def Z3_qe_lite(a0, a1, a2, _elems=Elementaries(_lib.Z3_qe_lite)):$/;"	f
Z3_qe_model_project	z3.obj/bin/python/z3/z3core.py	/^def Z3_qe_model_project(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_qe_model_project)):$/;"	f
Z3_qe_model_project_skolem	z3.obj/bin/python/z3/z3core.py	/^def Z3_qe_model_project_skolem(a0, a1, a2, a3, a4, a5, _elems=Elementaries(_lib.Z3_qe_model_project_skolem)):$/;"	f
Z3_query_constructor	z3.obj/bin/python/z3/z3core.py	/^def Z3_query_constructor(a0, a1, a2, a3, a4, a5, _elems=Elementaries(_lib.Z3_query_constructor)):$/;"	f
Z3_rcf_add	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_add(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_add)):$/;"	f
Z3_rcf_del	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_del(a0, a1, _elems=Elementaries(_lib.Z3_rcf_del)):$/;"	f
Z3_rcf_div	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_div(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_div)):$/;"	f
Z3_rcf_eq	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_eq(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_eq)):$/;"	f
Z3_rcf_ge	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_ge(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_ge)):$/;"	f
Z3_rcf_get_numerator_denominator	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_get_numerator_denominator(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_rcf_get_numerator_denominator)):$/;"	f
Z3_rcf_gt	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_gt(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_gt)):$/;"	f
Z3_rcf_inv	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_inv(a0, a1, _elems=Elementaries(_lib.Z3_rcf_inv)):$/;"	f
Z3_rcf_le	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_le(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_le)):$/;"	f
Z3_rcf_lt	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_lt(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_lt)):$/;"	f
Z3_rcf_mk_e	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mk_e(a0, _elems=Elementaries(_lib.Z3_rcf_mk_e)):$/;"	f
Z3_rcf_mk_infinitesimal	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mk_infinitesimal(a0, _elems=Elementaries(_lib.Z3_rcf_mk_infinitesimal)):$/;"	f
Z3_rcf_mk_pi	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mk_pi(a0, _elems=Elementaries(_lib.Z3_rcf_mk_pi)):$/;"	f
Z3_rcf_mk_rational	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mk_rational(a0, a1, _elems=Elementaries(_lib.Z3_rcf_mk_rational)):$/;"	f
Z3_rcf_mk_roots	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mk_roots(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_rcf_mk_roots)):$/;"	f
Z3_rcf_mk_small_int	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mk_small_int(a0, a1, _elems=Elementaries(_lib.Z3_rcf_mk_small_int)):$/;"	f
Z3_rcf_mul	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_mul(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_mul)):$/;"	f
Z3_rcf_neg	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_neg(a0, a1, _elems=Elementaries(_lib.Z3_rcf_neg)):$/;"	f
Z3_rcf_neq	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_neq(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_neq)):$/;"	f
Z3_rcf_num	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_rcf_num);$/;"	v
Z3_rcf_num_to_decimal_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_num_to_decimal_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_num_to_decimal_string)):$/;"	f
Z3_rcf_num_to_decimal_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_num_to_decimal_string_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_num_to_decimal_string)):$/;"	f
Z3_rcf_num_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_num_to_string(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_rcf_num_to_string)):$/;"	f
Z3_rcf_num_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_num_to_string_bytes(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_rcf_num_to_string)):$/;"	f
Z3_rcf_power	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_power(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_power)):$/;"	f
Z3_rcf_sub	z3.obj/bin/python/z3/z3core.py	/^def Z3_rcf_sub(a0, a1, a2, _elems=Elementaries(_lib.Z3_rcf_sub)):$/;"	f
Z3_reset_memory	z3.obj/bin/python/z3/z3core.py	/^def Z3_reset_memory(_elems=Elementaries(_lib.Z3_reset_memory)):$/;"	f
Z3_set_ast_print_mode	z3.obj/bin/python/z3/z3core.py	/^def Z3_set_ast_print_mode(a0, a1, _elems=Elementaries(_lib.Z3_set_ast_print_mode)):$/;"	f
Z3_set_error	z3.obj/bin/python/z3/z3core.py	/^def Z3_set_error(a0, a1, _elems=Elementaries(_lib.Z3_set_error)):$/;"	f
Z3_set_error_handler	z3.obj/bin/python/z3/z3core.py	/^def Z3_set_error_handler(ctx, hndlr, _elems=Elementaries(_lib.Z3_set_error_handler)):$/;"	f
Z3_set_param_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_set_param_value(a0, a1, a2, _elems=Elementaries(_lib.Z3_set_param_value)):$/;"	f
Z3_simplify	z3.obj/bin/python/z3/z3core.py	/^def Z3_simplify(a0, a1, _elems=Elementaries(_lib.Z3_simplify)):$/;"	f
Z3_simplify_ex	z3.obj/bin/python/z3/z3core.py	/^def Z3_simplify_ex(a0, a1, a2, _elems=Elementaries(_lib.Z3_simplify_ex)):$/;"	f
Z3_simplify_get_help	z3.obj/bin/python/z3/z3core.py	/^def Z3_simplify_get_help(a0, _elems=Elementaries(_lib.Z3_simplify_get_help)):$/;"	f
Z3_simplify_get_help_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_simplify_get_help_bytes(a0, _elems=Elementaries(_lib.Z3_simplify_get_help)):$/;"	f
Z3_simplify_get_param_descrs	z3.obj/bin/python/z3/z3core.py	/^def Z3_simplify_get_param_descrs(a0, _elems=Elementaries(_lib.Z3_simplify_get_param_descrs)):$/;"	f
Z3_solver	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_solver);$/;"	v
Z3_solver_assert	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_assert(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_assert)):$/;"	f
Z3_solver_assert_and_track	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_assert_and_track(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_solver_assert_and_track)):$/;"	f
Z3_solver_check	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_check(a0, a1, _elems=Elementaries(_lib.Z3_solver_check)):$/;"	f
Z3_solver_check_assumptions	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_check_assumptions(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_solver_check_assumptions)):$/;"	f
Z3_solver_cube	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_cube(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_solver_cube)):$/;"	f
Z3_solver_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_solver_dec_ref)):$/;"	f
Z3_solver_from_file	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_from_file(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_from_file)):$/;"	f
Z3_solver_from_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_from_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_from_string)):$/;"	f
Z3_solver_get_assertions	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_assertions(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_assertions)):$/;"	f
Z3_solver_get_consequences	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_consequences(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_solver_get_consequences)):$/;"	f
Z3_solver_get_help	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_help(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_help)):$/;"	f
Z3_solver_get_help_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_help_bytes(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_help)):$/;"	f
Z3_solver_get_levels	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_levels(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_solver_get_levels)):$/;"	f
Z3_solver_get_model	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_model(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_model)):$/;"	f
Z3_solver_get_non_units	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_non_units(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_non_units)):$/;"	f
Z3_solver_get_num_scopes	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_num_scopes(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_num_scopes)):$/;"	f
Z3_solver_get_param_descrs	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_param_descrs(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_param_descrs)):$/;"	f
Z3_solver_get_proof	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_proof(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_proof)):$/;"	f
Z3_solver_get_reason_unknown	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_reason_unknown(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_reason_unknown)):$/;"	f
Z3_solver_get_reason_unknown_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_reason_unknown_bytes(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_reason_unknown)):$/;"	f
Z3_solver_get_statistics	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_statistics(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_statistics)):$/;"	f
Z3_solver_get_trail	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_trail(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_trail)):$/;"	f
Z3_solver_get_units	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_units(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_units)):$/;"	f
Z3_solver_get_unsat_core	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_get_unsat_core(a0, a1, _elems=Elementaries(_lib.Z3_solver_get_unsat_core)):$/;"	f
Z3_solver_import_model_converter	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_import_model_converter(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_import_model_converter)):$/;"	f
Z3_solver_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_solver_inc_ref)):$/;"	f
Z3_solver_interrupt	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_interrupt(a0, a1, _elems=Elementaries(_lib.Z3_solver_interrupt)):$/;"	f
Z3_solver_pop	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_pop(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_pop)):$/;"	f
Z3_solver_push	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_push(a0, a1, _elems=Elementaries(_lib.Z3_solver_push)):$/;"	f
Z3_solver_reset	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_reset(a0, a1, _elems=Elementaries(_lib.Z3_solver_reset)):$/;"	f
Z3_solver_set_params	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_set_params(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_set_params)):$/;"	f
Z3_solver_to_dimacs_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_to_dimacs_string(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_to_dimacs_string)):$/;"	f
Z3_solver_to_dimacs_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_to_dimacs_string_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_to_dimacs_string)):$/;"	f
Z3_solver_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_to_string(a0, a1, _elems=Elementaries(_lib.Z3_solver_to_string)):$/;"	f
Z3_solver_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_solver_to_string)):$/;"	f
Z3_solver_translate	z3.obj/bin/python/z3/z3core.py	/^def Z3_solver_translate(a0, a1, a2, _elems=Elementaries(_lib.Z3_solver_translate)):$/;"	f
Z3_sort	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_sort);$/;"	v
Z3_sort_kind	z3.obj/include/z3_api.h	/^} Z3_sort_kind;$/;"	t	typeref:enum:__anon4
Z3_sort_opt	z3.obj/include/z3_api.h	13;"	d
Z3_sort_to_ast	z3.obj/bin/python/z3/z3core.py	/^def Z3_sort_to_ast(a0, a1, _elems=Elementaries(_lib.Z3_sort_to_ast)):$/;"	f
Z3_sort_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_sort_to_string(a0, a1, _elems=Elementaries(_lib.Z3_sort_to_string)):$/;"	f
Z3_sort_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_sort_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_sort_to_string)):$/;"	f
Z3_stats	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_stats);$/;"	v
Z3_stats_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_stats_dec_ref)):$/;"	f
Z3_stats_get_double_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_get_double_value(a0, a1, a2, _elems=Elementaries(_lib.Z3_stats_get_double_value)):$/;"	f
Z3_stats_get_key	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_get_key(a0, a1, a2, _elems=Elementaries(_lib.Z3_stats_get_key)):$/;"	f
Z3_stats_get_key_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_get_key_bytes(a0, a1, a2, _elems=Elementaries(_lib.Z3_stats_get_key)):$/;"	f
Z3_stats_get_uint_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_get_uint_value(a0, a1, a2, _elems=Elementaries(_lib.Z3_stats_get_uint_value)):$/;"	f
Z3_stats_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_stats_inc_ref)):$/;"	f
Z3_stats_is_double	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_is_double(a0, a1, a2, _elems=Elementaries(_lib.Z3_stats_is_double)):$/;"	f
Z3_stats_is_uint	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_is_uint(a0, a1, a2, _elems=Elementaries(_lib.Z3_stats_is_uint)):$/;"	f
Z3_stats_size	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_size(a0, a1, _elems=Elementaries(_lib.Z3_stats_size)):$/;"	f
Z3_stats_to_string	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_to_string(a0, a1, _elems=Elementaries(_lib.Z3_stats_to_string)):$/;"	f
Z3_stats_to_string_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_stats_to_string_bytes(a0, a1, _elems=Elementaries(_lib.Z3_stats_to_string)):$/;"	f
Z3_string	z3.obj/include/z3_api.h	/^typedef const char * Z3_string;$/;"	t
Z3_string_ptr	z3.obj/include/z3_api.h	/^typedef Z3_string * Z3_string_ptr;$/;"	t
Z3_substitute	z3.obj/bin/python/z3/z3core.py	/^def Z3_substitute(a0, a1, a2, a3, a4, _elems=Elementaries(_lib.Z3_substitute)):$/;"	f
Z3_substitute_vars	z3.obj/bin/python/z3/z3core.py	/^def Z3_substitute_vars(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_substitute_vars)):$/;"	f
Z3_symbol	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_symbol);$/;"	v
Z3_symbol_kind	z3.obj/include/z3_api.h	/^} Z3_symbol_kind;$/;"	t	typeref:enum:__anon2
Z3_tactic	z3.obj/include/z3_api.h	/^DEFINE_TYPE(Z3_tactic);$/;"	v
Z3_tactic_and_then	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_and_then(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_and_then)):$/;"	f
Z3_tactic_apply	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_apply(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_apply)):$/;"	f
Z3_tactic_apply_ex	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_apply_ex(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_tactic_apply_ex)):$/;"	f
Z3_tactic_cond	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_cond(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_tactic_cond)):$/;"	f
Z3_tactic_dec_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_dec_ref(a0, a1, _elems=Elementaries(_lib.Z3_tactic_dec_ref)):$/;"	f
Z3_tactic_fail	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_fail(a0, _elems=Elementaries(_lib.Z3_tactic_fail)):$/;"	f
Z3_tactic_fail_if	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_fail_if(a0, a1, _elems=Elementaries(_lib.Z3_tactic_fail_if)):$/;"	f
Z3_tactic_fail_if_not_decided	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_fail_if_not_decided(a0, _elems=Elementaries(_lib.Z3_tactic_fail_if_not_decided)):$/;"	f
Z3_tactic_get_descr	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_get_descr(a0, a1, _elems=Elementaries(_lib.Z3_tactic_get_descr)):$/;"	f
Z3_tactic_get_descr_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_get_descr_bytes(a0, a1, _elems=Elementaries(_lib.Z3_tactic_get_descr)):$/;"	f
Z3_tactic_get_help	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_get_help(a0, a1, _elems=Elementaries(_lib.Z3_tactic_get_help)):$/;"	f
Z3_tactic_get_help_bytes	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_get_help_bytes(a0, a1, _elems=Elementaries(_lib.Z3_tactic_get_help)):$/;"	f
Z3_tactic_get_param_descrs	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_get_param_descrs(a0, a1, _elems=Elementaries(_lib.Z3_tactic_get_param_descrs)):$/;"	f
Z3_tactic_inc_ref	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_inc_ref(a0, a1, _elems=Elementaries(_lib.Z3_tactic_inc_ref)):$/;"	f
Z3_tactic_or_else	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_or_else(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_or_else)):$/;"	f
Z3_tactic_par_and_then	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_par_and_then(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_par_and_then)):$/;"	f
Z3_tactic_par_or	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_par_or(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_par_or)):$/;"	f
Z3_tactic_repeat	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_repeat(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_repeat)):$/;"	f
Z3_tactic_skip	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_skip(a0, _elems=Elementaries(_lib.Z3_tactic_skip)):$/;"	f
Z3_tactic_try_for	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_try_for(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_try_for)):$/;"	f
Z3_tactic_using_params	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_using_params(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_using_params)):$/;"	f
Z3_tactic_when	z3.obj/bin/python/z3/z3core.py	/^def Z3_tactic_when(a0, a1, a2, _elems=Elementaries(_lib.Z3_tactic_when)):$/;"	f
Z3_to_app	z3.obj/bin/python/z3/z3core.py	/^def Z3_to_app(a0, a1, _elems=Elementaries(_lib.Z3_to_app)):$/;"	f
Z3_to_const_ast	z3.obj/include/z3_v1.h	59;"	d
Z3_to_func_decl	z3.obj/bin/python/z3/z3core.py	/^def Z3_to_func_decl(a0, a1, _elems=Elementaries(_lib.Z3_to_func_decl)):$/;"	f
Z3_toggle_warning_messages	z3.obj/bin/python/z3/z3core.py	/^def Z3_toggle_warning_messages(a0, _elems=Elementaries(_lib.Z3_toggle_warning_messages)):$/;"	f
Z3_translate	z3.obj/bin/python/z3/z3core.py	/^def Z3_translate(a0, a1, a2, _elems=Elementaries(_lib.Z3_translate)):$/;"	f
Z3_type_ast	z3.obj/include/z3_v1.h	27;"	d
Z3_update_param_value	z3.obj/bin/python/z3/z3core.py	/^def Z3_update_param_value(a0, a1, a2, _elems=Elementaries(_lib.Z3_update_param_value)):$/;"	f
Z3_update_term	z3.obj/bin/python/z3/z3core.py	/^def Z3_update_term(a0, a1, a2, a3, _elems=Elementaries(_lib.Z3_update_term)):$/;"	f
ZB_Max	svf/include/Util/SparseBitVector.h	/^    ZB_Max,$/;"	e	enum:SVF::ZeroBehavior
ZB_Undefined	svf/include/Util/SparseBitVector.h	/^    ZB_Undefined,$/;"	e	enum:SVF::ZeroBehavior
ZB_Width	svf/include/Util/SparseBitVector.h	/^    ZB_Width$/;"	e	enum:SVF::ZeroBehavior
ZEXT	svf/include/SVFIR/SVFStatements.h	/^        ZEXT,       \/\/ Zero extend integers$/;"	e	enum:SVF::CopyStmt::CopyKind
ZeroBehavior	svf/include/Util/SparseBitVector.h	/^enum ZeroBehavior$/;"	g	namespace:SVF
ZeroExt	z3.obj/bin/python/z3/z3.py	/^def ZeroExt(n, a):$/;"	f
_AnaTimeCyclePerQuery	svf/include/DDA/DDAStat.h	/^    double _AnaTimeCyclePerQuery;$/;"	m	class:SVF::DDAStat
_AnaTimePerQuery	svf/include/DDA/DDAStat.h	/^    double _AnaTimePerQuery;$/;"	m	class:SVF::DDAStat
_AvgAddrTakenVarPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgAddrTakenVarPtsSize;	\/\/\/< average points-to set size of addr-taken variables.$/;"	m	class:SVF::FlowSensitiveStat
_AvgInOutPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgInOutPtsSize[2];	\/\/\/< average points-to set size in IN set.$/;"	m	class:SVF::FlowSensitiveStat
_AvgNumOfDPMAtSVFGNode	svf/include/DDA/DDAStat.h	/^    double _AvgNumOfDPMAtSVFGNode;$/;"	m	class:SVF::DDAStat
_AvgPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgPtsSize;	\/\/\/< average points-to set size.$/;"	m	class:SVF::FlowSensitiveStat
_AvgPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_AvgTopLvlPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgTopLvlPtsSize;	\/\/\/< average points-to set size in top-level pointers.$/;"	m	class:SVF::FlowSensitiveStat
_AvgTopLvlPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgTopLvlPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_AvgVersionPtsSize	svf/include/WPA/WPAStat.h	/^    double _AvgVersionPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_CRT_SECURE_NO_DEPRECATE	svf/lib/Util/cJSON.cpp	28;"	d	file:
_D	svf/include/Graphs/SCC.h	/^    NodeToNodeMap            _D;$/;"	m	class:SVF::SCCDetection
_D	svf/include/WPA/CSC.h	/^    IdToIdMap _D;       \/\/ the sum of weight of a path relevant to a certain node, while accessing the node via DFS$/;"	m	class:SVF::CSC
_Formatter	z3.obj/bin/python/z3/z3printer.py	/^_Formatter = Formatter()$/;"	v
_I	svf/include/Graphs/SCC.h	/^    NodeID                   _I;$/;"	m	class:SVF::SCCDetection
_I	svf/include/WPA/CSC.h	/^    NodeID _I;$/;"	m	class:SVF::CSC
_MaxAddrTakenVarPts	svf/include/WPA/WPAStat.h	/^    u32_t _MaxAddrTakenVarPts;	\/\/\/< max points-to set size of addr-taken variables.$/;"	m	class:SVF::FlowSensitiveStat
_MaxCPtsSize	svf/include/DDA/DDAStat.h	/^    u32_t _MaxCPtsSize;$/;"	m	class:SVF::DDAStat
_MaxInOutPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _MaxInOutPtsSize[2];	\/\/\/< max points-to set size in IN\/OUT set.$/;"	m	class:SVF::FlowSensitiveStat
_MaxNumOfDPMAtSVFGNode	svf/include/DDA/DDAStat.h	/^    u32_t _MaxNumOfDPMAtSVFGNode;$/;"	m	class:SVF::DDAStat
_MaxNumOfNodesInSCC	svf/include/WPA/WPAStat.h	/^    static u32_t _MaxNumOfNodesInSCC;$/;"	m	class:SVF::AndersenStat
_MaxNumOfNodesInSCC	svf/lib/WPA/AndersenStat.cpp	/^u32_t AndersenStat::_MaxNumOfNodesInSCC = 0;$/;"	m	class:AndersenStat	file:
_MaxPtsSize	svf/include/DDA/DDAStat.h	/^    u32_t _MaxPtsSize;$/;"	m	class:SVF::DDAStat
_MaxPtsSize	svf/include/WPA/WPAStat.h	/^    static u32_t _MaxPtsSize;$/;"	m	class:SVF::AndersenStat
_MaxPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _MaxPtsSize;	\/\/\/< max points-to set size.$/;"	m	class:SVF::FlowSensitiveStat
_MaxPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _MaxPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_MaxTopLvlPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _MaxTopLvlPtsSize;	\/\/\/< max points-to set size in top-level pointers.$/;"	m	class:SVF::FlowSensitiveStat
_MaxTopLvlPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _MaxTopLvlPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_MaxVersionPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _MaxVersionPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_MaxVersions	svf/include/WPA/WPAStat.h	/^    u32_t _MaxVersions;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_NodeSCCAuxInfo	svf/include/Graphs/SCC.h	/^    GNODESCCInfoMap  _NodeSCCAuxInfo;$/;"	m	class:SVF::SCCDetection
_NumEmptyVersions	svf/include/WPA/WPAStat.h	/^    u32_t _NumEmptyVersions;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_NumNonEmptyVersions	svf/include/WPA/WPAStat.h	/^    u32_t _NumNonEmptyVersions;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_NumOfActualInSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfActualInSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfActualOutSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfActualOutSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfAddrTakeVar	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfAddrTakeVar;	\/\/\/< number of occurrences of addr-taken variables in load\/store.$/;"	m	class:SVF::FlowSensitiveStat
_NumOfBlackholePtr	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfBlackholePtr;$/;"	m	class:SVF::DDAStat
_NumOfBlackholePtr	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfBlackholePtr;$/;"	m	class:SVF::AndersenStat
_NumOfBlackholePtr	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfBlackholePtr;$/;"	m	class:SVF::FlowSensitiveStat
_NumOfConstantPtr	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfConstantPtr;$/;"	m	class:SVF::DDAStat
_NumOfConstantPtr	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfConstantPtr;$/;"	m	class:SVF::AndersenStat
_NumOfConstantPtr	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfConstantPtr;$/;"	m	class:SVF::FlowSensitiveStat
_NumOfCycles	svf/include/WPA/WPAStat.h	/^    static u32_t _NumOfCycles;$/;"	m	class:SVF::AndersenStat
_NumOfCycles	svf/lib/WPA/AndersenStat.cpp	/^u32_t AndersenStat::_NumOfCycles = 0;$/;"	m	class:AndersenStat	file:
_NumOfDPM	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfDPM;$/;"	m	class:SVF::DDAStat
_NumOfFormalInSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfFormalInSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfFormalOutSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfFormalOutSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfIndCallEdgeSolved	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfIndCallEdgeSolved;$/;"	m	class:SVF::DDAStat
_NumOfInfeasiblePath	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfInfeasiblePath;$/;"	m	class:SVF::DDAStat
_NumOfLoadSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfLoadSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfMSSAPhiSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfMSSAPhiSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfMustAliases	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfMustAliases;$/;"	m	class:SVF::DDAStat
_NumOfNodesInCycles	svf/include/WPA/WPAStat.h	/^    static u32_t _NumOfNodesInCycles;$/;"	m	class:SVF::AndersenStat
_NumOfNodesInCycles	svf/lib/WPA/AndersenStat.cpp	/^u32_t AndersenStat::_NumOfNodesInCycles = 0;$/;"	m	class:AndersenStat	file:
_NumOfNullPtr	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfNullPtr;$/;"	m	class:SVF::DDAStat
_NumOfNullPtr	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfNullPtr;$/;"	m	class:SVF::AndersenStat
_NumOfNullPtr	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfNullPtr;$/;"	m	class:SVF::FlowSensitiveStat
_NumOfPWCCycles	svf/include/WPA/WPAStat.h	/^    static u32_t _NumOfPWCCycles;$/;"	m	class:SVF::AndersenStat
_NumOfPWCCycles	svf/lib/WPA/AndersenStat.cpp	/^u32_t AndersenStat::_NumOfPWCCycles = 0;$/;"	m	class:AndersenStat	file:
_NumOfSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfStep	svf/include/DDA/DDAStat.h	/^    u64_t _NumOfStep;$/;"	m	class:SVF::DDAStat
_NumOfStepInCycle	svf/include/DDA/DDAStat.h	/^    u64_t _NumOfStepInCycle;$/;"	m	class:SVF::DDAStat
_NumOfStoreSVFGNodesHaveInOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfStoreSVFGNodesHaveInOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfStrongUpdates	svf/include/DDA/DDAStat.h	/^    u32_t _NumOfStrongUpdates;$/;"	m	class:SVF::DDAStat
_NumOfVarHaveEmptyINOUTPts	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveEmptyINOUTPts[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPts	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPts[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInActualIn	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInActualIn[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInActualOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInActualOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInFormalIn	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInFormalIn[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInFormalOut	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInFormalOut[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInLoad	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInLoad[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInMSSAPhi	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInMSSAPhi[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumOfVarHaveINOUTPtsInStore	svf/include/WPA/WPAStat.h	/^    u32_t _NumOfVarHaveINOUTPtsInStore[2];$/;"	m	class:SVF::FlowSensitiveStat
_NumSingleVersion	svf/include/WPA/WPAStat.h	/^    u32_t _NumSingleVersion;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_NumUsedVersions	svf/include/WPA/WPAStat.h	/^    u32_t _NumUsedVersions;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_NumVersions	svf/include/WPA/WPAStat.h	/^    u32_t _NumVersions;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_PP	z3.obj/bin/python/z3/z3printer.py	/^_PP        = PP()$/;"	v
_PotentialNumOfVarHaveINOUTPts	svf/include/WPA/WPAStat.h	/^    u32_t _PotentialNumOfVarHaveINOUTPts[2];$/;"	m	class:SVF::FlowSensitiveStat
_S	svf/include/WPA/CSC.h	/^    NodeStack _S;       \/\/ a stack holding a DFS branch$/;"	m	class:SVF::CSC
_SS	svf/include/Graphs/SCC.h	/^    GNodeStack             _SS;$/;"	m	class:SVF::SCCDetection
_StrongUpdateStores	svf/include/DDA/DDAStat.h	/^    NodeBS _StrongUpdateStores;$/;"	m	class:SVF::DDAStat
_T	svf/include/Graphs/SCC.h	/^    GNodeStack             _T;$/;"	m	class:SVF::SCCDetection
_TotalCPtsSize	svf/include/DDA/DDAStat.h	/^    u32_t _TotalCPtsSize;$/;"	m	class:SVF::DDAStat
_TotalNumOfDPM	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfDPM;$/;"	m	class:SVF::DDAStat
_TotalNumOfInfeasiblePath	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfInfeasiblePath;$/;"	m	class:SVF::DDAStat
_TotalNumOfMustAliases	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfMustAliases;$/;"	m	class:SVF::DDAStat
_TotalNumOfOutOfBudgetQuery	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfOutOfBudgetQuery;$/;"	m	class:SVF::DDAStat
_TotalNumOfQuery	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfQuery;$/;"	m	class:SVF::DDAStat
_TotalNumOfStep	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfStep;$/;"	m	class:SVF::DDAStat
_TotalNumOfStepInCycle	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfStepInCycle;$/;"	m	class:SVF::DDAStat
_TotalNumOfStrongUpdates	svf/include/DDA/DDAStat.h	/^    u32_t _TotalNumOfStrongUpdates;$/;"	m	class:SVF::DDAStat
_TotalPtsSize	svf/include/DDA/DDAStat.h	/^    u32_t _TotalPtsSize;$/;"	m	class:SVF::DDAStat
_TotalPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _TotalPtsSize;	\/\/\/< total points-to set size.$/;"	m	class:SVF::FlowSensitiveStat
_TotalPtsSize	svf/include/WPA/WPAStat.h	/^    u32_t _TotalPtsSize;$/;"	m	class:SVF::VersionedFlowSensitiveStat
_TotalTimeOfBKCondition	svf/include/DDA/DDAStat.h	/^    double _TotalTimeOfBKCondition;$/;"	m	class:SVF::DDAStat
_TotalTimeOfQueries	svf/include/DDA/DDAStat.h	/^    double _TotalTimeOfQueries;$/;"	m	class:SVF::DDAStat
_Z3_MK_BIN_	z3.obj/include/z3++.h	1370;"	d
_Z3_MK_BIN_	z3.obj/include/z3++.h	1415;"	d
_Z3_MK_UN_	z3.obj/include/z3++.h	1417;"	d
_Z3_MK_UN_	z3.obj/include/z3++.h	1427;"	d
_ZNSsC1EPKcRKSaIcE	svf-llvm/lib/extapi.c	/^void _ZNSsC1EPKcRKSaIcE(void **arg0, void *arg1)$/;"	f
_ZNSt5arrayIPK1ALm2EE4backEv	svf-llvm/lib/extapi.c	/^void* _ZNSt5arrayIPK1ALm2EE4backEv(void *arg)$/;"	f
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_	svf-llvm/lib/extapi.c	/^void _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_(void **arg0, void *arg1)$/;"	f
_ZNSt8__detail15_List_node_base7_M_hookEPS0_	svf-llvm/lib/extapi.c	/^void _ZNSt8__detail15_List_node_base7_M_hookEPS0_(void *arg0, void **arg1)$/;"	f
_Znaj	svf-llvm/lib/extapi.c	/^void *_Znaj(unsigned long size)$/;"	f
_Znam	svf-llvm/lib/extapi.c	/^void *_Znam(unsigned long size)$/;"	f
_ZnamRKSt9nothrow_t	svf-llvm/lib/extapi.c	/^void *_ZnamRKSt9nothrow_t(unsigned long size, void *)$/;"	f
_Znwj	svf-llvm/lib/extapi.c	/^void *_Znwj(unsigned long size)$/;"	f
_Znwm	svf-llvm/lib/extapi.c	/^void *_Znwm(unsigned long size)$/;"	f
_ZnwmRKSt9nothrow_t	svf-llvm/lib/extapi.c	/^void *_ZnwmRKSt9nothrow_t(unsigned long size, void *)$/;"	f
__ExtAPI_H	svf/include/Util/ExtAPI.h	31;"	d
__WINDOWS__	svf/include/Util/cJSON.h	32;"	d
__add__	z3.obj/bin/python/z3/z3.py	/^    def __add__(self, other):$/;"	m	class:ArithRef	file:
__add__	z3.obj/bin/python/z3/z3.py	/^    def __add__(self, other):$/;"	m	class:BitVecRef	file:
__add__	z3.obj/bin/python/z3/z3.py	/^    def __add__(self, other):$/;"	m	class:FPRef	file:
__add__	z3.obj/bin/python/z3/z3.py	/^    def __add__(self, other):$/;"	m	class:ReRef	file:
__add__	z3.obj/bin/python/z3/z3.py	/^    def __add__(self, other):$/;"	m	class:SeqRef	file:
__add__	z3.obj/bin/python/z3/z3num.py	/^    def __add__(self, other):$/;"	m	class:Numeral	file:
__add__	z3.obj/bin/python/z3/z3rcf.py	/^    def __add__(self, other):$/;"	m	class:RCFNum	file:
__and__	z3.obj/bin/python/z3/z3.py	/^    def __and__(self, other):$/;"	m	class:BitVecRef	file:
__bool__	z3.obj/bin/python/z3/z3.py	/^    def __bool__(self):$/;"	m	class:AstRef	file:
__call__	z3.obj/bin/python/z3/z3.py	/^    def __call__(self, *args):$/;"	m	class:FuncDeclRef	file:
__call__	z3.obj/bin/python/z3/z3.py	/^    def __call__(self, goal):$/;"	m	class:Probe	file:
__call__	z3.obj/bin/python/z3/z3.py	/^    def __call__(self, goal, *arguments, **keywords):$/;"	m	class:Tactic	file:
__call__	z3.obj/bin/python/z3/z3printer.py	/^    def __call__(self, a):$/;"	m	class:Formatter	file:
__call__	z3.obj/bin/python/z3/z3printer.py	/^    def __call__(self, out, f):$/;"	m	class:PP	file:
__contains__	z3.obj/bin/python/z3/z3.py	/^    def __contains__(self, item):$/;"	m	class:AstVector	file:
__contains__	z3.obj/bin/python/z3/z3.py	/^    def __contains__(self, key):$/;"	m	class:AstMap	file:
__copy__	z3.obj/bin/python/z3/z3.py	/^    def __copy__(self):$/;"	m	class:AstRef	file:
__copy__	z3.obj/bin/python/z3/z3.py	/^    def __copy__(self):$/;"	m	class:AstVector	file:
__copy__	z3.obj/bin/python/z3/z3.py	/^    def __copy__(self):$/;"	m	class:FuncInterp	file:
__copy__	z3.obj/bin/python/z3/z3.py	/^    def __copy__(self):$/;"	m	class:Goal	file:
__copy__	z3.obj/bin/python/z3/z3.py	/^    def __copy__(self):$/;"	m	class:ModelRef	file:
__copy__	z3.obj/bin/python/z3/z3.py	/^    def __copy__(self):$/;"	m	class:Solver	file:
__ctype_b_loc	svf-llvm/lib/extapi.c	/^const unsigned short **__ctype_b_loc(void)$/;"	f
__ctype_tolower_loc	svf-llvm/lib/extapi.c	/^int **__ctype_tolower_loc(void)$/;"	f
__ctype_toupper_loc	svf-llvm/lib/extapi.c	/^int **__ctype_toupper_loc(void)$/;"	f
__cxa_allocate_exception	svf-llvm/lib/extapi.c	/^void *__cxa_allocate_exception(unsigned long size)$/;"	f
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:ApplyResult	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:AstMap	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:AstRef	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:AstVector	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:CheckSatResult	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Datatype	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Fixedpoint	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:FuncEntry	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:FuncInterp	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Goal	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:ModelRef	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Optimize	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:ParamDescrsRef	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:ParamsRef	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Probe	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Solver	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Statistics	file:
__deepcopy__	z3.obj/bin/python/z3/z3.py	/^    def __deepcopy__(self, memo={}):$/;"	m	class:Tactic	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:ApplyResult	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:AstMap	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:AstRef	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:AstVector	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Context	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Fixedpoint	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:FuncEntry	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:FuncInterp	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Goal	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:ModelRef	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Optimize	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:ParamDescrsRef	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:ParamsRef	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Probe	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:ScopedConstructor	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:ScopedConstructorList	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Solver	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Statistics	file:
__del__	z3.obj/bin/python/z3/z3.py	/^    def __del__(self):$/;"	m	class:Tactic	file:
__del__	z3.obj/bin/python/z3/z3num.py	/^    def __del__(self):$/;"	m	class:Numeral	file:
__del__	z3.obj/bin/python/z3/z3rcf.py	/^    def __del__(self):$/;"	m	class:RCFNum	file:
__div__	z3.obj/bin/python/z3/z3.py	/^    def __div__(self, other):$/;"	m	class:ArithRef	file:
__div__	z3.obj/bin/python/z3/z3.py	/^    def __div__(self, other):$/;"	m	class:BitVecRef	file:
__div__	z3.obj/bin/python/z3/z3.py	/^    def __div__(self, other):$/;"	m	class:FPRef	file:
__div__	z3.obj/bin/python/z3/z3num.py	/^    def __div__(self, other):$/;"	m	class:Numeral	file:
__div__	z3.obj/bin/python/z3/z3rcf.py	/^    def __div__(self, other):$/;"	m	class:RCFNum	file:
__dynamic_cast	svf-llvm/lib/extapi.c	/^void* __dynamic_cast(void* source, const void* sourceTypeInfo, const void* targetTypeInfo, unsigned long castType)$/;"	f
__eq__	z3.obj/bin/python/z3/z3.py	/^    def __eq__(self, other):$/;"	m	class:AstRef	file:
__eq__	z3.obj/bin/python/z3/z3.py	/^    def __eq__(self, other):$/;"	m	class:CheckSatResult	file:
__eq__	z3.obj/bin/python/z3/z3.py	/^    def __eq__(self, other):$/;"	m	class:ExprRef	file:
__eq__	z3.obj/bin/python/z3/z3.py	/^    def __eq__(self, other):$/;"	m	class:Probe	file:
__eq__	z3.obj/bin/python/z3/z3.py	/^    def __eq__(self, other):$/;"	m	class:SortRef	file:
__eq__	z3.obj/bin/python/z3/z3num.py	/^    def __eq__(self, other):$/;"	m	class:Numeral	file:
__eq__	z3.obj/bin/python/z3/z3rcf.py	/^    def __eq__(self, other):$/;"	m	class:RCFNum	file:
__errno_location	svf-llvm/lib/extapi.c	/^int *__errno_location(void)$/;"	f
__ge__	z3.obj/bin/python/z3/z3.py	/^    def __ge__(self, other):$/;"	m	class:ArithRef	file:
__ge__	z3.obj/bin/python/z3/z3.py	/^    def __ge__(self, other):$/;"	m	class:BitVecRef	file:
__ge__	z3.obj/bin/python/z3/z3.py	/^    def __ge__(self, other):$/;"	m	class:FPRef	file:
__ge__	z3.obj/bin/python/z3/z3.py	/^    def __ge__(self, other):$/;"	m	class:Probe	file:
__ge__	z3.obj/bin/python/z3/z3.py	/^    def __ge__(self, other):$/;"	m	class:SeqRef	file:
__ge__	z3.obj/bin/python/z3/z3num.py	/^    def __ge__(self, other):$/;"	m	class:Numeral	file:
__ge__	z3.obj/bin/python/z3/z3rcf.py	/^    def __ge__(self, other):$/;"	m	class:RCFNum	file:
__getattr__	z3.obj/bin/python/z3/z3.py	/^    def __getattr__(self, name):$/;"	m	class:Statistics	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, arg):$/;"	m	class:ArrayRef	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, arg):$/;"	m	class:Goal	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, arg):$/;"	m	class:ParamDescrsRef	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, arg):$/;"	m	class:QuantifierRef	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, i):$/;"	m	class:AstVector	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, i):$/;"	m	class:SeqRef	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, idx):$/;"	m	class:ApplyResult	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, idx):$/;"	m	class:ModelRef	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, idx):$/;"	m	class:Statistics	file:
__getitem__	z3.obj/bin/python/z3/z3.py	/^    def __getitem__(self, key):$/;"	m	class:AstMap	file:
__gt__	z3.obj/bin/python/z3/z3.py	/^    def __gt__(self, other):$/;"	m	class:ArithRef	file:
__gt__	z3.obj/bin/python/z3/z3.py	/^    def __gt__(self, other):$/;"	m	class:BitVecRef	file:
__gt__	z3.obj/bin/python/z3/z3.py	/^    def __gt__(self, other):$/;"	m	class:FPRef	file:
__gt__	z3.obj/bin/python/z3/z3.py	/^    def __gt__(self, other):$/;"	m	class:Probe	file:
__gt__	z3.obj/bin/python/z3/z3.py	/^    def __gt__(self, other):$/;"	m	class:SeqRef	file:
__gt__	z3.obj/bin/python/z3/z3num.py	/^    def __gt__(self, other):$/;"	m	class:Numeral	file:
__gt__	z3.obj/bin/python/z3/z3rcf.py	/^    def __gt__(self, other):$/;"	m	class:RCFNum	file:
__h_errno_location	svf-llvm/lib/extapi.c	/^int * __h_errno_location(void)$/;"	f
__has_include	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	17;"	d	file:
__has_include	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	11;"	d	file:
__hash__	z3.obj/bin/python/z3/z3.py	/^    def __hash__(self):$/;"	m	class:AstRef	file:
__hash__	z3.obj/bin/python/z3/z3.py	/^    def __hash__(self):$/;"	m	class:ExprRef	file:
__hash__	z3.obj/bin/python/z3/z3.py	/^    def __hash__(self):$/;"	m	class:SortRef	file:
__iadd__	z3.obj/bin/python/z3/z3.py	/^    def __iadd__(self, fml):$/;"	m	class:Fixedpoint	file:
__iadd__	z3.obj/bin/python/z3/z3.py	/^    def __iadd__(self, fml):$/;"	m	class:Optimize	file:
__iadd__	z3.obj/bin/python/z3/z3.py	/^    def __iadd__(self, fml):$/;"	m	class:Solver	file:
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, *args, **kws):$/;"	m	class:Context
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, ast, ctx=None):$/;"	m	class:AstRef
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, c, ctx):$/;"	m	class:ScopedConstructor
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, c, ctx):$/;"	m	class:ScopedConstructorList
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, ctx=None):$/;"	m	class:Optimize
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, ctx=None, params=None):$/;"	m	class:ParamsRef
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, descr, ctx=None):$/;"	m	class:ParamDescrsRef
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, entry, ctx):$/;"	m	class:FuncEntry
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, f, ctx):$/;"	m	class:FuncInterp
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, fixedpoint=None, ctx=None):$/;"	m	class:Fixedpoint
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, m, ctx):$/;"	m	class:ModelRef
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, m=None, ctx=None):$/;"	m	class:AstMap
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, models=True, unsat_cores=False, proofs=False, ctx=None, goal=None):$/;"	m	class:Goal
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, name, ctx=None):$/;"	m	class:Datatype
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, opt, value, is_max):$/;"	m	class:OptimizeObjective
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, probe, ctx=None):$/;"	m	class:Probe
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, r):$/;"	m	class:CheckSatResult
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, result, ctx):$/;"	m	class:ApplyResult
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, solver=None, ctx=None, logFile=None):$/;"	m	class:Solver
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, stats, ctx):$/;"	m	class:Statistics
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, tactic, ctx=None):$/;"	m	class:Tactic
__init__	z3.obj/bin/python/z3/z3.py	/^    def __init__(self, v=None, ctx=None):$/;"	m	class:AstVector
__init__	z3.obj/bin/python/z3/z3core.py	/^  def __init__(self, f):$/;"	m	class:Elementaries
__init__	z3.obj/bin/python/z3/z3num.py	/^    def __init__(self, num, ctx=None):$/;"	m	class:Numeral
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self):$/;"	m	class:Formatter
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self):$/;"	m	class:HTMLFormatter
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self):$/;"	m	class:LineBreakFormatObject
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self):$/;"	m	class:PP
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self, fs):$/;"	m	class:NAryFormatObject
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self, indent, child):$/;"	m	class:IndentFormatObject
__init__	z3.obj/bin/python/z3/z3printer.py	/^    def __init__(self, string):$/;"	m	class:StringFormatObject
__init__	z3.obj/bin/python/z3/z3rcf.py	/^    def __init__(self, num, ctx=None):$/;"	m	class:RCFNum
__init__	z3.obj/bin/python/z3/z3types.py	/^    def __init__(self, value):$/;"	m	class:Z3Exception
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, ast): self._as_parameter_ = ast$/;"	m	class:Ast
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, ast_map): self._as_parameter_ = ast_map$/;"	m	class:AstMapObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, config): self._as_parameter_ = config$/;"	m	class:Config
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, constructor): self._as_parameter_ = constructor$/;"	m	class:Constructor
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, constructor_list): self._as_parameter_ = constructor_list$/;"	m	class:ConstructorList
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, context): self._as_parameter_ = context$/;"	m	class:ContextObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, decl): self._as_parameter_ = decl$/;"	m	class:FuncDecl
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, e): self._as_parameter_ = e$/;"	m	class:FuncEntryObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, e): self._as_parameter_ = e$/;"	m	class:RCFNumObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, f): self._as_parameter_ = f$/;"	m	class:FuncInterpObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, fixedpoint): self._as_parameter_ = fixedpoint$/;"	m	class:FixedpointObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, goal): self._as_parameter_ = goal$/;"	m	class:GoalObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, literals): self._as_parameter_ = literals$/;"	m	class:Literals
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, model): self._as_parameter_ = model$/;"	m	class:Model
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, model): self._as_parameter_ = model$/;"	m	class:ModelObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, obj): self._as_parameter_ = obj$/;"	m	class:ApplyResultObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, optimize): self._as_parameter_ = optimize$/;"	m	class:OptimizeObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, paramdescrs): self._as_parameter_ = paramdescrs$/;"	m	class:ParamDescrs
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, params): self._as_parameter_ = params$/;"	m	class:Params
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, pattern): self._as_parameter_ = pattern$/;"	m	class:Pattern
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, probe): self._as_parameter_ = probe$/;"	m	class:ProbeObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, solver): self._as_parameter_ = solver$/;"	m	class:SolverObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, sort): self._as_parameter_ = sort$/;"	m	class:Sort
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, statistics): self._as_parameter_ = statistics$/;"	m	class:StatsObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, symbol): self._as_parameter_ = symbol$/;"	m	class:Symbol
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, tactic): self._as_parameter_ = tactic$/;"	m	class:TacticObj
__init__	z3.obj/bin/python/z3/z3types.py	/^  def __init__(self, vector): self._as_parameter_ = vector$/;"	m	class:AstVectorObj
__invert__	z3.obj/bin/python/z3/z3.py	/^    def __invert__(self):$/;"	m	class:BitVecRef	file:
__le__	z3.obj/bin/python/z3/z3.py	/^    def __le__(self, other):$/;"	m	class:ArithRef	file:
__le__	z3.obj/bin/python/z3/z3.py	/^    def __le__(self, other):$/;"	m	class:BitVecRef	file:
__le__	z3.obj/bin/python/z3/z3.py	/^    def __le__(self, other):$/;"	m	class:FPRef	file:
__le__	z3.obj/bin/python/z3/z3.py	/^    def __le__(self, other):$/;"	m	class:Probe	file:
__le__	z3.obj/bin/python/z3/z3.py	/^    def __le__(self, other):$/;"	m	class:SeqRef	file:
__le__	z3.obj/bin/python/z3/z3num.py	/^    def __le__(self, other):$/;"	m	class:Numeral	file:
__le__	z3.obj/bin/python/z3/z3rcf.py	/^    def __le__(self, other):$/;"	m	class:RCFNum	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:ApplyResult	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:AstMap	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:AstVector	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:Goal	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:ModelRef	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:ParamDescrsRef	file:
__len__	z3.obj/bin/python/z3/z3.py	/^    def __len__(self):$/;"	m	class:Statistics	file:
__lshift__	z3.obj/bin/python/z3/z3.py	/^    def __lshift__(self, other):$/;"	m	class:BitVecRef	file:
__lt__	z3.obj/bin/python/z3/z3.py	/^    def __lt__(self, other):$/;"	m	class:ArithRef	file:
__lt__	z3.obj/bin/python/z3/z3.py	/^    def __lt__(self, other):$/;"	m	class:BitVecRef	file:
__lt__	z3.obj/bin/python/z3/z3.py	/^    def __lt__(self, other):$/;"	m	class:FPRef	file:
__lt__	z3.obj/bin/python/z3/z3.py	/^    def __lt__(self, other):$/;"	m	class:Probe	file:
__lt__	z3.obj/bin/python/z3/z3.py	/^    def __lt__(self, other):$/;"	m	class:SeqRef	file:
__lt__	z3.obj/bin/python/z3/z3num.py	/^    def __lt__(self, other):$/;"	m	class:Numeral	file:
__lt__	z3.obj/bin/python/z3/z3rcf.py	/^    def __lt__(self, other):$/;"	m	class:RCFNum	file:
__memcpy_chk	svf-llvm/lib/extapi.c	/^void __memcpy_chk(char* dst, char* src, int sz, int flag){}$/;"	f
__memmove_chk	svf-llvm/lib/extapi.c	/^void __memmove_chk(char* dst, char* src, int sz){}$/;"	f
__memset_chk	svf-llvm/lib/extapi.c	/^char *__memset_chk(char * dest, int c, unsigned long destlen, int flag)$/;"	f
__mod__	z3.obj/bin/python/z3/z3.py	/^    def __mod__(self, other):$/;"	m	class:ArithRef	file:
__mod__	z3.obj/bin/python/z3/z3.py	/^    def __mod__(self, other):$/;"	m	class:BitVecRef	file:
__mod__	z3.obj/bin/python/z3/z3.py	/^    def __mod__(self, other):$/;"	m	class:FPRef	file:
__mul__	z3.obj/bin/python/z3/z3.py	/^    def __mul__(self, other):$/;"	m	class:ArithRef	file:
__mul__	z3.obj/bin/python/z3/z3.py	/^    def __mul__(self, other):$/;"	m	class:BitVecRef	file:
__mul__	z3.obj/bin/python/z3/z3.py	/^    def __mul__(self, other):$/;"	m	class:BoolRef	file:
__mul__	z3.obj/bin/python/z3/z3.py	/^    def __mul__(self, other):$/;"	m	class:FPRef	file:
__mul__	z3.obj/bin/python/z3/z3num.py	/^    def __mul__(self, other):$/;"	m	class:Numeral	file:
__mul__	z3.obj/bin/python/z3/z3rcf.py	/^    def __mul__(self, other):$/;"	m	class:RCFNum	file:
__ne__	z3.obj/bin/python/z3/z3.py	/^    def __ne__(self, other):$/;"	m	class:CheckSatResult	file:
__ne__	z3.obj/bin/python/z3/z3.py	/^    def __ne__(self, other):$/;"	m	class:ExprRef	file:
__ne__	z3.obj/bin/python/z3/z3.py	/^    def __ne__(self, other):$/;"	m	class:Probe	file:
__ne__	z3.obj/bin/python/z3/z3.py	/^    def __ne__(self, other):$/;"	m	class:SortRef	file:
__ne__	z3.obj/bin/python/z3/z3num.py	/^    def __ne__(self, other):$/;"	m	class:Numeral	file:
__ne__	z3.obj/bin/python/z3/z3rcf.py	/^    def __ne__(self, other):$/;"	m	class:RCFNum	file:
__neg__	z3.obj/bin/python/z3/z3.py	/^    def __neg__(self):$/;"	m	class:ArithRef	file:
__neg__	z3.obj/bin/python/z3/z3.py	/^    def __neg__(self):$/;"	m	class:BitVecRef	file:
__neg__	z3.obj/bin/python/z3/z3.py	/^    def __neg__(self):$/;"	m	class:FPRef	file:
__neg__	z3.obj/bin/python/z3/z3rcf.py	/^    def __neg__(self):$/;"	m	class:RCFNum	file:
__nonzero__	z3.obj/bin/python/z3/z3.py	/^    def __nonzero__(self):$/;"	m	class:AstRef	file:
__or__	z3.obj/bin/python/z3/z3.py	/^    def __or__(self, other):$/;"	m	class:BitVecRef	file:
__pos__	z3.obj/bin/python/z3/z3.py	/^    def __pos__(self):$/;"	m	class:ArithRef	file:
__pos__	z3.obj/bin/python/z3/z3.py	/^    def __pos__(self):$/;"	m	class:BitVecRef	file:
__pos__	z3.obj/bin/python/z3/z3.py	/^    def __pos__(self):$/;"	m	class:FPRef	file:
__pow__	z3.obj/bin/python/z3/z3.py	/^    def __pow__(self, other):$/;"	m	class:ArithRef	file:
__pow__	z3.obj/bin/python/z3/z3num.py	/^    def __pow__(self, k):$/;"	m	class:Numeral	file:
__pow__	z3.obj/bin/python/z3/z3rcf.py	/^    def __pow__(self, k):$/;"	m	class:RCFNum	file:
__radd__	z3.obj/bin/python/z3/z3.py	/^    def __radd__(self, other):$/;"	m	class:ArithRef	file:
__radd__	z3.obj/bin/python/z3/z3.py	/^    def __radd__(self, other):$/;"	m	class:BitVecRef	file:
__radd__	z3.obj/bin/python/z3/z3.py	/^    def __radd__(self, other):$/;"	m	class:FPRef	file:
__radd__	z3.obj/bin/python/z3/z3.py	/^    def __radd__(self, other):$/;"	m	class:SeqRef	file:
__radd__	z3.obj/bin/python/z3/z3num.py	/^    def __radd__(self, other):$/;"	m	class:Numeral	file:
__radd__	z3.obj/bin/python/z3/z3rcf.py	/^    def __radd__(self, other):$/;"	m	class:RCFNum	file:
__rand__	z3.obj/bin/python/z3/z3.py	/^    def __rand__(self, other):$/;"	m	class:BitVecRef	file:
__rawmemchr	svf-llvm/lib/extapi.c	/^void * __rawmemchr(const void * s, int c)$/;"	f
__rdiv__	z3.obj/bin/python/z3/z3.py	/^    def __rdiv__(self, other):$/;"	m	class:ArithRef	file:
__rdiv__	z3.obj/bin/python/z3/z3.py	/^    def __rdiv__(self, other):$/;"	m	class:BitVecRef	file:
__rdiv__	z3.obj/bin/python/z3/z3.py	/^    def __rdiv__(self, other):$/;"	m	class:FPRef	file:
__rdiv__	z3.obj/bin/python/z3/z3num.py	/^    def __rdiv__(self, other):$/;"	m	class:Numeral	file:
__rdiv__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rdiv__(self, other):$/;"	m	class:RCFNum	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:ApplyResult	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:AstMap	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:AstRef	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:AstVector	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:CheckSatResult	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:Datatype	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:Fixedpoint	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:FuncEntry	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:FuncInterp	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:Goal	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:ModelRef	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:Optimize	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:ParamDescrsRef	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:ParamsRef	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:Solver	file:
__repr__	z3.obj/bin/python/z3/z3.py	/^    def __repr__(self):$/;"	m	class:Statistics	file:
__repr__	z3.obj/bin/python/z3/z3num.py	/^    def __repr__(self):$/;"	m	class:Numeral	file:
__repr__	z3.obj/bin/python/z3/z3rcf.py	/^    def __repr__(self):$/;"	m	class:RCFNum	file:
__res_state	svf-llvm/lib/extapi.c	/^void* __res_state(void)$/;"	f
__rge__	z3.obj/bin/python/z3/z3num.py	/^    def __rge__(self, other):$/;"	m	class:Numeral	file:
__rge__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rge__(self, other):$/;"	m	class:RCFNum	file:
__rgt__	z3.obj/bin/python/z3/z3num.py	/^    def __rgt__(self, other):$/;"	m	class:Numeral	file:
__rgt__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rgt__(self, other):$/;"	m	class:RCFNum	file:
__rle__	z3.obj/bin/python/z3/z3num.py	/^    def __rle__(self, other):$/;"	m	class:Numeral	file:
__rle__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rle__(self, other):$/;"	m	class:RCFNum	file:
__rlshift__	z3.obj/bin/python/z3/z3.py	/^    def __rlshift__(self, other):$/;"	m	class:BitVecRef	file:
__rlt__	z3.obj/bin/python/z3/z3num.py	/^    def __rlt__(self, other):$/;"	m	class:Numeral	file:
__rlt__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rlt__(self, other):$/;"	m	class:RCFNum	file:
__rmod__	z3.obj/bin/python/z3/z3.py	/^    def __rmod__(self, other):$/;"	m	class:ArithRef	file:
__rmod__	z3.obj/bin/python/z3/z3.py	/^    def __rmod__(self, other):$/;"	m	class:BitVecRef	file:
__rmod__	z3.obj/bin/python/z3/z3.py	/^    def __rmod__(self, other):$/;"	m	class:FPRef	file:
__rmul__	z3.obj/bin/python/z3/z3.py	/^    def __rmul__(self, other):$/;"	m	class:ArithRef	file:
__rmul__	z3.obj/bin/python/z3/z3.py	/^    def __rmul__(self, other):$/;"	m	class:BitVecRef	file:
__rmul__	z3.obj/bin/python/z3/z3.py	/^    def __rmul__(self, other):$/;"	m	class:BoolRef	file:
__rmul__	z3.obj/bin/python/z3/z3.py	/^    def __rmul__(self, other):$/;"	m	class:FPRef	file:
__rmul__	z3.obj/bin/python/z3/z3num.py	/^    def __rmul__(self, other):$/;"	m	class:Numeral	file:
__rmul__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rmul__(self, other):$/;"	m	class:RCFNum	file:
__ror__	z3.obj/bin/python/z3/z3.py	/^    def __ror__(self, other):$/;"	m	class:BitVecRef	file:
__rpow__	z3.obj/bin/python/z3/z3.py	/^    def __rpow__(self, other):$/;"	m	class:ArithRef	file:
__rrshift__	z3.obj/bin/python/z3/z3.py	/^    def __rrshift__(self, other):$/;"	m	class:BitVecRef	file:
__rshift__	z3.obj/bin/python/z3/z3.py	/^    def __rshift__(self, other):$/;"	m	class:BitVecRef	file:
__rsub__	z3.obj/bin/python/z3/z3.py	/^    def __rsub__(self, other):$/;"	m	class:ArithRef	file:
__rsub__	z3.obj/bin/python/z3/z3.py	/^    def __rsub__(self, other):$/;"	m	class:BitVecRef	file:
__rsub__	z3.obj/bin/python/z3/z3.py	/^    def __rsub__(self, other):$/;"	m	class:FPRef	file:
__rsub__	z3.obj/bin/python/z3/z3num.py	/^    def __rsub__(self, other):$/;"	m	class:Numeral	file:
__rsub__	z3.obj/bin/python/z3/z3rcf.py	/^    def __rsub__(self, other):$/;"	m	class:RCFNum	file:
__rtruediv__	z3.obj/bin/python/z3/z3.py	/^    def __rtruediv__(self, other):$/;"	m	class:ArithRef	file:
__rtruediv__	z3.obj/bin/python/z3/z3.py	/^    def __rtruediv__(self, other):$/;"	m	class:BitVecRef	file:
__rtruediv__	z3.obj/bin/python/z3/z3.py	/^    def __rtruediv__(self, other):$/;"	m	class:FPRef	file:
__rtruediv__	z3.obj/bin/python/z3/z3num.py	/^    def __rtruediv__(self, other):$/;"	m	class:Numeral	file:
__rxor__	z3.obj/bin/python/z3/z3.py	/^    def __rxor__(self, other):$/;"	m	class:BitVecRef	file:
__setitem__	z3.obj/bin/python/z3/z3.py	/^    def __setitem__(self, i, v):$/;"	m	class:AstVector	file:
__setitem__	z3.obj/bin/python/z3/z3.py	/^    def __setitem__(self, k, v):$/;"	m	class:AstMap	file:
__str__	z3.obj/bin/python/z3/z3.py	/^    def __str__(self):$/;"	m	class:AstRef	file:
__str__	z3.obj/bin/python/z3/z3.py	/^    def __str__(self):$/;"	m	class:OptimizeObjective	file:
__str__	z3.obj/bin/python/z3/z3num.py	/^    def __str__(self):$/;"	m	class:Numeral	file:
__str__	z3.obj/bin/python/z3/z3printer.py	/^    def __str__(self):$/;"	m	class:StopPPException	file:
__str__	z3.obj/bin/python/z3/z3types.py	/^    def __str__(self):$/;"	m	class:Z3Exception	file:
__strcat_chk	svf-llvm/lib/extapi.c	/^char *__strcat_chk(char * dest, const char * src, unsigned long destlen)$/;"	f
__strchrnull	svf-llvm/lib/extapi.c	/^char *__strchrnull(const char *s, int c)$/;"	f
__strcpy_chk	svf-llvm/lib/extapi.c	/^char * __strcpy_chk(char * dest, const char * src, unsigned long destlen)$/;"	f
__strdup	svf-llvm/lib/extapi.c	/^char * __strdup(const char * string)$/;"	f
__strncat_chk	svf-llvm/lib/extapi.c	/^char *__strncat_chk(char *dest, const char *src, unsigned long n)$/;"	f
__sub__	z3.obj/bin/python/z3/z3.py	/^    def __sub__(self, other):$/;"	m	class:ArithRef	file:
__sub__	z3.obj/bin/python/z3/z3.py	/^    def __sub__(self, other):$/;"	m	class:BitVecRef	file:
__sub__	z3.obj/bin/python/z3/z3.py	/^    def __sub__(self, other):$/;"	m	class:FPRef	file:
__sub__	z3.obj/bin/python/z3/z3num.py	/^    def __sub__(self, other):$/;"	m	class:Numeral	file:
__sub__	z3.obj/bin/python/z3/z3rcf.py	/^    def __sub__(self, other):$/;"	m	class:RCFNum	file:
__sysv_signal	svf-llvm/lib/extapi.c	/^void* __sysv_signal(int a, void *b)$/;"	f
__truediv__	z3.obj/bin/python/z3/z3.py	/^    def __truediv__(self, other):$/;"	m	class:ArithRef	file:
__truediv__	z3.obj/bin/python/z3/z3.py	/^    def __truediv__(self, other):$/;"	m	class:BitVecRef	file:
__truediv__	z3.obj/bin/python/z3/z3.py	/^    def __truediv__(self, other):$/;"	m	class:FPRef	file:
__truediv__	z3.obj/bin/python/z3/z3num.py	/^    def __truediv__(self, other):$/;"	m	class:Numeral	file:
__wcscat_chk	svf-llvm/lib/extapi.c	/^wchar_t* __wcscat_chk(wchar_t * dest, const wchar_t * src)$/;"	f
__wcsncat_chk	svf-llvm/lib/extapi.c	/^wchar_t* __wcsncat_chk(wchar_t * dest, const wchar_t * src, int n) {$/;"	f
__xor__	z3.obj/bin/python/z3/z3.py	/^    def __xor__(self, other):$/;"	m	class:BitVecRef	file:
_addrToAbsVal	svf/include/AE/Core/AbstractState.h	/^    _addrToAbsVal; \/\/\/< Map a memory address to its stored abstract value$/;"	m	class:SVF::AbstractState
_addrToVal	svf/include/AE/Core/RelExeState.h	/^    AddrToValMap _addrToVal;$/;"	m	class:SVF::RelExeState
_addrs	svf/include/AE/Core/AddressValue.h	/^    AddrSet _addrs;$/;"	m	class:SVF::AddressValue
_ae	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    AbstractInterpretation* _ae;$/;"	m	class:SVF::AEStat
_allComponents	svf/include/Graphs/WTO.h	/^    WTOComponentRefSet _allComponents;$/;"	m	class:SVF::WTO
_all_dirs	z3.obj/bin/python/z3/z3core.py	/^    _all_dirs = __builtin__.Z3_LIB_DIRS$/;"	v
_all_dirs	z3.obj/bin/python/z3/z3core.py	/^    _all_dirs = builtins.Z3_LIB_DIRS$/;"	v
_all_dirs	z3.obj/bin/python/z3/z3core.py	/^_all_dirs = []$/;"	v
_and_then	z3.obj/bin/python/z3/z3.py	/^def _and_then(t1, t2, ctx=None):$/;"	f
_ander	svf/include/DDA/DDAVFSolver.h	/^    AndersenWaveDiff* _ander;		\/\/\/< Andersen's analysis$/;"	m	class:SVF::DDAVFSolver
_ast_kind	z3.obj/bin/python/z3/z3.py	/^def _ast_kind(ctx, a):$/;"	f
_callGraph	svf/include/DDA/DDAVFSolver.h	/^    CallGraph* _callGraph;		\/\/\/< PTACallGraph$/;"	m	class:SVF::DDAVFSolver
_callGraphSCC	svf/include/DDA/DDAVFSolver.h	/^    CallGraphSCC* _callGraphSCC;	\/\/\/< SCC for PTACallGraph$/;"	m	class:SVF::DDAVFSolver
_check_bv_args	z3.obj/bin/python/z3/z3.py	/^def _check_bv_args(a, b):$/;"	f
_check_fp_args	z3.obj/bin/python/z3/z3.py	/^def _check_fp_args(a, b):$/;"	f
_client	svf/include/DDA/ContextDDA.h	/^    DDAClient* _client;			\/\/\/< DDA client$/;"	m	class:SVF::ContextDDA
_client	svf/include/DDA/DDAPass.h	/^    DDAClient* _client;		\/\/\/<  DDA client used$/;"	m	class:SVF::DDAPass
_client	svf/include/DDA/FlowDDA.h	/^    DDAClient* _client;				\/\/\/< DDA client$/;"	m	class:SVF::FlowDDA
_coerce_expr_list	z3.obj/bin/python/z3/z3.py	/^def _coerce_expr_list(alist, ctx=None):$/;"	f
_coerce_expr_merge	z3.obj/bin/python/z3/z3.py	/^def _coerce_expr_merge(s, a):$/;"	f
_coerce_exprs	z3.obj/bin/python/z3/z3.py	/^def _coerce_exprs(a, b, ctx=None):$/;"	f
_coerce_fp_expr_list	z3.obj/bin/python/z3/z3.py	/^def _coerce_fp_expr_list(alist, ctx):$/;"	f
_coerce_seq	z3.obj/bin/python/z3/z3.py	/^def _coerce_seq(s, ctx=None):$/;"	f
_components	svf/include/Graphs/WTO.h	/^    WTOComponentRefList _components;$/;"	m	class:SVF::WTO
_components	svf/include/Graphs/WTO.h	/^    WTOComponentRefList _components;$/;"	m	class:SVF::final
_condPts	svf/include/MemoryModel/ConditionalPT.h	/^    CondPts _condPts;$/;"	m	class:SVF::CondPointsToSet
_consG	svf/include/WPA/CSC.h	/^    ConstraintGraph* _consG;$/;"	m	class:SVF::CSC
_controlDG	svf/include/Util/CDGBuilder.h	/^    CDG *_controlDG;$/;"	m	class:SVF::CDGBuilder
_ctx_from_ast_arg_list	z3.obj/bin/python/z3/z3.py	/^def _ctx_from_ast_arg_list(args, default_ctx=None):$/;"	f
_ctx_from_ast_args	z3.obj/bin/python/z3/z3.py	/^def _ctx_from_ast_args(*args):$/;"	f
_curIter	svf/include/MemoryModel/ConditionalPT.h	/^        typename CondPointsToSet<Cond>::CondPtsIter _curIter;$/;"	m	class:SVF::CondPointsToSet::CondPtsSetIterator
_curSVFGNode	svf/include/SABER/ProgSlice.h	/^    const SVFGNode* _curSVFGNode;			\/\/\/<  current svfg node during guard computation$/;"	m	class:SVF::ProgSlice
_curSlice	svf/include/SABER/SrcSnkDDA.h	/^    ProgSlice* _curSlice;		\/\/\/ current program slice$/;"	m	class:SVF::SrcSnkDDA
_default_dirs	z3.obj/bin/python/z3/z3core.py	/^_default_dirs = ['.',$/;"	v
_dflt_fps	z3.obj/bin/python/z3/z3.py	/^def _dflt_fps(ctx=None):$/;"	f
_dflt_fpsort_ebits	z3.obj/bin/python/z3/z3.py	/^_dflt_fpsort_ebits = 11$/;"	v
_dflt_fpsort_sbits	z3.obj/bin/python/z3/z3.py	/^_dflt_fpsort_sbits = 53$/;"	v
_dflt_rm	z3.obj/bin/python/z3/z3.py	/^def _dflt_rm(ctx=None):$/;"	f
_dflt_rounding_mode	z3.obj/bin/python/z3/z3.py	/^_dflt_rounding_mode = Z3_OP_FPA_RM_TOWARD_ZERO$/;"	v
_dict2darray	z3.obj/bin/python/z3/z3.py	/^def _dict2darray(decls, ctx):$/;"	f
_dict2sarray	z3.obj/bin/python/z3/z3.py	/^def _dict2sarray(sorts, ctx):$/;"	f
_ellipses	z3.obj/bin/python/z3/z3printer.py	/^_ellipses = '...'$/;"	v
_endIter	svf/include/MemoryModel/ConditionalPT.h	/^        typename CondPointsToSet<Cond>::CondPtsIter _endIter;$/;"	m	class:SVF::CondPointsToSet::CondPtsSetIterator
_entry	svf/include/Graphs/WTO.h	/^    const NodeT* _entry;$/;"	m	class:SVF::WTO
_error_handler_type	z3.obj/bin/python/z3/z3core.py	/^_error_handler_type  = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_uint)$/;"	v
_ext	z3.obj/bin/python/z3/z3core.py	/^_ext = 'dll' if sys.platform in ('win32', 'cygwin') else 'dylib' if sys.platform == 'darwin' else 'so'$/;"	v
_f	z3.obj/bin/python/z3/z3util.py	/^            def _f():$/;"	f	function:prove
_fVal	svf/include/AE/Core/NumericValue.h	/^    double _fVal;$/;"	m	class:SVF::BoundedDouble
_failures	z3.obj/bin/python/z3/z3core.py	/^_failures = []$/;"	v
_get_args	z3.obj/bin/python/z3/z3.py	/^def _get_args(args):$/;"	f
_get_args_ast_list	z3.obj/bin/python/z3/z3.py	/^def _get_args_ast_list(args):$/;"	f
_get_ctx	z3.obj/bin/python/z3/z3.py	/^def _get_ctx(ctx):$/;"	f
_get_ctx2	z3.obj/bin/python/z3/z3.py	/^def _get_ctx2(a, b, ctx=None):$/;"	f
_get_html_precedence	z3.obj/bin/python/z3/z3printer.py	/^def _get_html_precedence(k):$/;"	f
_get_precedence	z3.obj/bin/python/z3/z3printer.py	/^def _get_precedence(k):$/;"	f
_graph	svf/include/Graphs/SCC.h	/^    const GraphType &           _graph;$/;"	m	class:SVF::SCCDetection
_graph	svf/include/Graphs/WTO.h	/^    GraphT* _graph;$/;"	m	class:SVF::WTO
_graph	svf/include/SABER/SrcSnkSolver.h	/^    GraphType _graph;$/;"	m	class:SVF::SrcSnkSolver
_graph	svf/include/Util/GraphReachSolver.h	/^    GraphType _graph;$/;"	m	class:SVF::GraphReachSolver
_graph	svf/include/WPA/WPASolver.h	/^    GraphType _graph;$/;"	m	class:SVF::WPASolver
_has_probe	z3.obj/bin/python/z3/z3.py	/^def _has_probe(args):$/;"	f
_head	svf/include/Graphs/WTO.h	/^    const WTONode<GraphT>* _head;$/;"	m	class:SVF::final
_heads	svf/include/Graphs/WTO.h	/^    NodeRefList _heads;$/;"	m	class:SVF::WTOCycleDepth
_html_ellipses	z3.obj/bin/python/z3/z3printer.py	/^_html_ellipses = '&hellip;'$/;"	v
_html_infix_map	z3.obj/bin/python/z3/z3printer.py	/^_html_infix_map = {}$/;"	v
_html_op_name	z3.obj/bin/python/z3/z3printer.py	/^def _html_op_name(a):$/;"	f
_html_out	z3.obj/bin/python/z3/z3printer.py	/^_html_out = None$/;"	v
_html_unary_map	z3.obj/bin/python/z3/z3printer.py	/^_html_unary_map = {}$/;"	v
_iVal	svf/include/AE/Core/NumericValue.h	/^    s64_t _iVal; \/\/ The 64-bit integer value.$/;"	m	class:SVF::BoundedInt
_icfgNode	svf/include/Graphs/CDG.h	/^    const ICFGNode *_icfgNode;$/;"	m	class:SVF::CDGNode
_inSCC	svf/include/Graphs/SCC.h	/^        bool     _inSCC;$/;"	m	class:SVF::SCCDetection::GNodeSCCInfo
_infix_compact_map	z3.obj/bin/python/z3/z3printer.py	/^_infix_compact_map = {}$/;"	v
_infix_map	z3.obj/bin/python/z3/z3printer.py	/^_infix_map = {}$/;"	v
_isInf	svf/include/AE/Core/NumericValue.h	/^    bool _isInf; \/\/ True if the value is infinite. If true, _iVal == 1$/;"	m	class:SVF::BoundedInt
_isPWCNode	svf/include/Graphs/ConsGNode.h	/^    bool _isPWCNode;$/;"	m	class:SVF::ConstraintNode
_is_add	z3.obj/bin/python/z3/z3printer.py	/^def _is_add(k):$/;"	f
_is_algebraic	z3.obj/bin/python/z3/z3.py	/^def _is_algebraic(ctx, a):$/;"	f
_is_assoc	z3.obj/bin/python/z3/z3printer.py	/^def _is_assoc(k):$/;"	f
_is_html_assoc	z3.obj/bin/python/z3/z3printer.py	/^def _is_html_assoc(k):$/;"	f
_is_html_infix	z3.obj/bin/python/z3/z3printer.py	/^def _is_html_infix(k):$/;"	f
_is_html_left_assoc	z3.obj/bin/python/z3/z3printer.py	/^def _is_html_left_assoc(k):$/;"	f
_is_html_unary	z3.obj/bin/python/z3/z3printer.py	/^def _is_html_unary(k):$/;"	f
_is_infix	z3.obj/bin/python/z3/z3printer.py	/^def _is_infix(k):$/;"	f
_is_infix_compact	z3.obj/bin/python/z3/z3printer.py	/^def _is_infix_compact(k):$/;"	f
_is_int	z3.obj/bin/python/z3/z3.py	/^    def _is_int(v):$/;"	f
_is_int	z3.obj/bin/python/z3/z3.py	/^    def _is_int(v):$/;"	f	function:z3_debug
_is_left_assoc	z3.obj/bin/python/z3/z3printer.py	/^def _is_left_assoc(k):$/;"	f
_is_numeral	z3.obj/bin/python/z3/z3.py	/^def _is_numeral(ctx, a):$/;"	f
_is_sub	z3.obj/bin/python/z3/z3printer.py	/^def _is_sub(k):$/;"	f
_is_unary	z3.obj/bin/python/z3/z3printer.py	/^def _is_unary(k):$/;"	f
_lb	svf/include/AE/Core/IntervalValue.h	/^    BoundedInt _lb;$/;"	m	class:SVF::IntervalValue
_len	z3.obj/bin/python/z3/z3printer.py	/^def _len(a):$/;"	f
_lib	z3.obj/bin/python/z3/z3core.py	/^        _lib = ctypes.CDLL(d)$/;"	v
_lib	z3.obj/bin/python/z3/z3core.py	/^    _lib = ctypes.CDLL('libz3.%s' % _ext)$/;"	v
_lib	z3.obj/bin/python/z3/z3core.py	/^_lib = None$/;"	v
_main_ctx	z3.obj/bin/python/z3/z3.py	/^_main_ctx = None$/;"	v
_mk_bin	z3.obj/bin/python/z3/z3.py	/^def _mk_bin(f, a, b):$/;"	f
_mk_fp_bin	z3.obj/bin/python/z3/z3.py	/^def _mk_fp_bin(f, rm, a, b, ctx):$/;"	f
_mk_fp_bin_norm	z3.obj/bin/python/z3/z3.py	/^def _mk_fp_bin_norm(f, a, b, ctx):$/;"	f
_mk_fp_bin_pred	z3.obj/bin/python/z3/z3.py	/^def _mk_fp_bin_pred(f, a, b, ctx):$/;"	f
_mk_fp_tern	z3.obj/bin/python/z3/z3.py	/^def _mk_fp_tern(f, rm, a, b, c, ctx):$/;"	f
_mk_fp_unary	z3.obj/bin/python/z3/z3.py	/^def _mk_fp_unary(f, rm, a, ctx):$/;"	f
_mk_fp_unary_pred	z3.obj/bin/python/z3/z3.py	/^def _mk_fp_unary_pred(f, a, ctx):$/;"	f
_mk_quantifier	z3.obj/bin/python/z3/z3.py	/^def _mk_quantifier(is_forall, vs, body, weight=1, qid="", skid="", patterns=[], no_patterns=[]):$/;"	f
_node	svf/include/Graphs/WTO.h	/^    const NodeT* _node;$/;"	m	class:SVF::final
_nodeControlMap	svf/include/Util/CDGBuilder.h	/^    Map<const ICFGNode *, Map<const ICFGNode *, Set<s32_t>>> _nodeControlMap; \/\/\/< map an ICFG node to its controlling ICFG nodes (position, set of Nodes)$/;"	m	class:SVF::CDGBuilder
_nodeDependentOnMap	svf/include/Util/CDGBuilder.h	/^    Map<const ICFGNode *, Map<const ICFGNode *, Set<s32_t>>> _nodeDependentOnMap; \/\/\/< map an ICFG node to its dependent on ICFG nodes (position, set of Nodes)$/;"	m	class:SVF::CDGBuilder
_nodeToCDN	svf/include/Graphs/WTO.h	/^    NodeRefToCycleDepthNumber _nodeToCDN;$/;"	m	class:SVF::WTO
_nodeToDepth	svf/include/Graphs/WTO.h	/^    NodeRefToWTOCycleDepthPtr _nodeToDepth;$/;"	m	class:SVF::WTO
_nodeToWTOCycleDepth	svf/include/Graphs/WTO.h	/^        NodeRefToWTOCycleDepthPtr& _nodeToWTOCycleDepth;$/;"	m	class:SVF::WTO::final
_num	svf/include/Graphs/WTO.h	/^    CycleDepthNumber _num;$/;"	m	class:SVF::WTO
_objToClsNameSources	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    ObjToClsNameSources _objToClsNameSources; \/\/ alloc clsname sources cache$/;"	m	class:SVF::ObjTypeInference
_op_name	z3.obj/bin/python/z3/z3printer.py	/^def _op_name(a):$/;"	f
_or_else	z3.obj/bin/python/z3/z3.py	/^def _or_else(t1, t2, ctx=None):$/;"	f
_pag	svf/include/DDA/DDAVFSolver.h	/^    SVFIR* _pag;						\/\/\/< SVFIR$/;"	m	class:SVF::DDAVFSolver
_pb_args_coeffs	z3.obj/bin/python/z3/z3.py	/^def _pb_args_coeffs(args, default_ctx = None):$/;"	f
_probe_and	z3.obj/bin/python/z3/z3.py	/^def _probe_and(args, ctx):$/;"	f
_probe_nary	z3.obj/bin/python/z3/z3.py	/^def _probe_nary(f, args, ctx):$/;"	f
_probe_or	z3.obj/bin/python/z3/z3.py	/^def _probe_or(args, ctx):$/;"	f
_prove_html	z3.obj/bin/python/z3/z3.py	/^def _prove_html(claim, **keywords):$/;"	f
_ptEndIter	svf/include/MemoryModel/ConditionalPT.h	/^        PointsTo::iterator _ptEndIter;$/;"	m	class:SVF::CondPointsToSet::CondPtsSetIterator
_ptIter	svf/include/MemoryModel/ConditionalPT.h	/^        PointsTo::iterator _ptIter;$/;"	m	class:SVF::CondPointsToSet::CondPtsSetIterator
_pta	svf/include/DDA/DDAPass.h	/^    std::unique_ptr<PointerAnalysis> _pta;	\/\/\/<  pointer analysis to be executed.$/;"	m	class:SVF::DDAPass
_pta	svf/include/WPA/WPAPass.h	/^    PointerAnalysis* _pta;	\/\/\/<  pointer analysis to be executed.$/;"	m	class:SVF::WPAPass
_py2expr	z3.obj/bin/python/z3/z3.py	/^def _py2expr(a, ctx=None):$/;"	f
_reduce	z3.obj/bin/python/z3/z3.py	/^def _reduce(f, l, a):$/;"	f
_reorder_pb_arg	z3.obj/bin/python/z3/z3.py	/^def _reorder_pb_arg(arg):$/;"	f
_rep	svf/include/Graphs/SCC.h	/^        NodeID  _rep;$/;"	m	class:SVF::SCCDetection::GNodeSCCInfo
_repNode	svf/include/Graphs/ICFG.h	/^    Map<const ICFGNode*, const ICFGNode*> _repNode; \/\/\/<map a subnode to its representative node(1st node of basicblock)$/;"	m	class:SVF::ICFG
_repr_html_	z3.obj/bin/python/z3/z3.py	/^    def _repr_html_(self):$/;"	m	class:CheckSatResult
_repr_html_	z3.obj/bin/python/z3/z3.py	/^    def _repr_html_(self):$/;"	m	class:Z3PPObject
_reverse_predicate	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Map<s32_t, s32_t> _reverse_predicate =$/;"	m	class:SVF::AbstractInterpretation
_scc	svf/include/WPA/CSC.h	/^    CGSCC* _scc;$/;"	m	class:SVF::CSC
_solve_html	z3.obj/bin/python/z3/z3.py	/^def _solve_html(*args, **keywords):$/;"	f
_solve_using_html	z3.obj/bin/python/z3/z3.py	/^def _solve_using_html(s, *args, **keywords):$/;"	f
_sort	z3.obj/bin/python/z3/z3.py	/^def _sort(ctx, a):$/;"	f
_sort_kind	z3.obj/bin/python/z3/z3.py	/^def _sort_kind(ctx, s):$/;"	f
_stack	svf/include/Graphs/WTO.h	/^    Stack _stack;$/;"	m	class:SVF::WTO
_str_to_bytes	z3.obj/bin/python/z3/z3core.py	/^def _str_to_bytes(s):$/;"	f
_subNodes	svf/include/Graphs/ICFG.h	/^    Map<const ICFGNode*, std::vector<const ICFGNode*>> _subNodes; \/\/\/<map a node(1st node of basicblock) to its subnodes$/;"	m	class:SVF::ICFG
_subNodes	svf/include/Graphs/SCC.h	/^        NodeBS _subNodes; \/\/\/ nodes in the scc represented by this node$/;"	m	class:SVF::SCCDetection::GNodeSCCInfo
_support_pp	z3.obj/bin/python/z3/z3printer.py	/^def _support_pp(a):$/;"	f
_svfcontrolMap	svf/include/Util/CDGBuilder.h	/^    Map<const SVFBasicBlock *, Map<const SVFBasicBlock *, Set<s32_t>>> _svfcontrolMap; \/\/\/< map a basicblock to its controlling BBs (position, set of BBs)$/;"	m	class:SVF::CDGBuilder
_svfdependentOnMap	svf/include/Util/CDGBuilder.h	/^    Map<const SVFBasicBlock *, Map<const SVFBasicBlock *, Set<s32_t>>> _svfdependentOnMap; \/\/\/< map a basicblock to its dependent on BBs (position, set of BBs)$/;"	m	class:SVF::CDGBuilder
_svfg	svf/include/DDA/DDAVFSolver.h	/^    SVFG* _svfg;					\/\/\/< SVFG$/;"	m	class:SVF::DDAVFSolver
_svfg	svf/include/WPA/WPAPass.h	/^    SVFG* _svfg;  \/\/\/< svfg generated through -ander pointer analysis$/;"	m	class:SVF::WPAPass
_svfgSCC	svf/include/DDA/DDAVFSolver.h	/^    SVFGSCC* _svfgSCC;				\/\/\/< SCC for SVFG$/;"	m	class:SVF::DDAVFSolver
_switch_lhsrhs_predicate	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Map<s32_t, s32_t> _switch_lhsrhs_predicate =$/;"	m	class:SVF::AbstractInterpretation
_symbol2py	z3.obj/bin/python/z3/z3.py	/^def _symbol2py(ctx, s):$/;"	f
_thisPtrClassNames	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    ValueToClassNames _thisPtrClassNames; \/\/ thisptr class name cache$/;"	m	class:SVF::ObjTypeInference
_to_ast_array	z3.obj/bin/python/z3/z3.py	/^def _to_ast_array(args):$/;"	f
_to_ast_ref	z3.obj/bin/python/z3/z3.py	/^def _to_ast_ref(a, ctx):$/;"	f
_to_expr_ref	z3.obj/bin/python/z3/z3.py	/^def _to_expr_ref(a, ctx):$/;"	f
_to_float_str	z3.obj/bin/python/z3/z3.py	/^def _to_float_str(val, exp=0):$/;"	f
_to_func_decl_array	z3.obj/bin/python/z3/z3.py	/^def _to_func_decl_array(args):$/;"	f
_to_func_decl_ref	z3.obj/bin/python/z3/z3.py	/^def _to_func_decl_ref(a, ctx):$/;"	f
_to_goal	z3.obj/bin/python/z3/z3.py	/^def _to_goal(a):$/;"	f
_to_int_str	z3.obj/bin/python/z3/z3.py	/^def _to_int_str(val):$/;"	f
_to_numeral	z3.obj/bin/python/z3/z3num.py	/^def _to_numeral(num, ctx=None):$/;"	f
_to_param_value	z3.obj/bin/python/z3/z3.py	/^def _to_param_value(val):$/;"	f
_to_pattern	z3.obj/bin/python/z3/z3.py	/^def _to_pattern(arg):$/;"	f
_to_probe	z3.obj/bin/python/z3/z3.py	/^def _to_probe(p, ctx=None):$/;"	f
_to_pystr	z3.obj/bin/python/z3/z3core.py	/^  def _to_pystr(s):$/;"	f
_to_pystr	z3.obj/bin/python/z3/z3core.py	/^  def _to_pystr(s):$/;"	f	function:_str_to_bytes
_to_rcfnum	z3.obj/bin/python/z3/z3rcf.py	/^def _to_rcfnum(num, ctx=None):$/;"	f
_to_ref_array	z3.obj/bin/python/z3/z3.py	/^def _to_ref_array(ref, args):$/;"	f
_to_sort_ref	z3.obj/bin/python/z3/z3.py	/^def _to_sort_ref(s, ctx):$/;"	f
_to_tactic	z3.obj/bin/python/z3/z3.py	/^def _to_tactic(t, ctx=None):$/;"	f
_type	svf/include/Graphs/WTO.h	/^    WTOCT _type;$/;"	m	class:SVF::WTOComponent
_ub	svf/include/AE/Core/IntervalValue.h	/^    BoundedInt _ub;$/;"	m	class:SVF::IntervalValue
_unary_map	z3.obj/bin/python/z3/z3printer.py	/^_unary_map = {}$/;"	v
_uniq_idfun	z3.obj/bin/python/z3/z3util.py	/^    def _uniq_idfun(seq,idfun):$/;"	f	function:vset
_uniq_normal	z3.obj/bin/python/z3/z3util.py	/^    def _uniq_normal(seq):$/;"	f	function:vset
_v	z3.obj/bin/python/z3/z3printer.py	/^    _v = _z3_pre_html_op_to_str[_k]$/;"	v
_v	z3.obj/bin/python/z3/z3printer.py	/^    _v = _z3_pre_html_precedence[_k]$/;"	v
_v	z3.obj/bin/python/z3/z3printer.py	/^    _v = _z3_precedence[_k]$/;"	v
_valid_accessor	z3.obj/bin/python/z3/z3.py	/^def _valid_accessor(acc):$/;"	f
_valueToAllocOrClsNameSources	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    ValueToSources _valueToAllocOrClsNameSources; \/\/ value alloc\/clsname sources cache$/;"	m	class:SVF::ObjTypeInference
_valueToAllocs	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    ValueToSources _valueToAllocs; \/\/ value allocations (stack, static, heap) cache$/;"	m	class:SVF::ObjTypeInference
_valueToInferSites	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    ValueToInferSites _valueToInferSites; \/\/ value inference site cache$/;"	m	class:SVF::ObjTypeInference
_valueToType	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    ValueToType _valueToType; \/\/ value type cache$/;"	m	class:SVF::ObjTypeInference
_varToAbsVal	svf/include/AE/Core/AbstractState.h	/^    VarToAbsValMap _varToAbsVal; \/\/\/< Map a variable (symbol) to its abstract value$/;"	m	class:SVF::AbstractState
_varToVal	svf/include/AE/Core/RelExeState.h	/^    VarToValMap _varToVal;$/;"	m	class:SVF::RelExeState
_visited	svf/include/Graphs/SCC.h	/^        bool     _visited;$/;"	m	class:SVF::SCCDetection::GNodeSCCInfo
_visited	svf/include/WPA/CSC.h	/^    NodeSet _visited;   \/\/ a set holding visited nodes$/;"	m	class:SVF::CSC
_vmrssUsageAfter	svf/include/Util/PTAStat.h	/^    u32_t _vmrssUsageAfter;$/;"	m	class:SVF::PTAStat
_vmrssUsageBefore	svf/include/Util/PTAStat.h	/^    u32_t _vmrssUsageBefore;$/;"	m	class:SVF::PTAStat
_vmsizeUsageAfter	svf/include/Util/PTAStat.h	/^    u32_t _vmsizeUsageAfter;$/;"	m	class:SVF::PTAStat
_vmsizeUsageBefore	svf/include/Util/PTAStat.h	/^    u32_t _vmsizeUsageBefore;$/;"	m	class:SVF::PTAStat
_wtoCycleDepth	svf/include/Graphs/WTO.h	/^        WTOCycleDepthPtr _wtoCycleDepth;$/;"	m	class:SVF::WTO::final
_z3_assert	z3.obj/bin/python/z3/z3.py	/^def _z3_assert(cond, msg):$/;"	f
_z3_assert	z3.obj/bin/python/z3/z3printer.py	/^def _z3_assert(cond, msg):$/;"	f
_z3_check_cint_overflow	z3.obj/bin/python/z3/z3.py	/^def _z3_check_cint_overflow(n, name):$/;"	f
_z3_fpa_infix	z3.obj/bin/python/z3/z3printer.py	/^_z3_fpa_infix = [$/;"	v
_z3_html_infix	z3.obj/bin/python/z3/z3printer.py	/^_z3_html_infix = [ Z3_OP_AND, Z3_OP_OR, Z3_OP_IMPLIES,$/;"	v
_z3_html_op_to_str	z3.obj/bin/python/z3/z3printer.py	/^_z3_html_op_to_str = {}$/;"	v
_z3_html_precedence	z3.obj/bin/python/z3/z3printer.py	/^_z3_html_precedence = {}$/;"	v
_z3_html_unary	z3.obj/bin/python/z3/z3printer.py	/^_z3_html_unary = [ Z3_OP_NOT ]$/;"	v
_z3_infix	z3.obj/bin/python/z3/z3printer.py	/^_z3_infix = [ $/;"	v
_z3_infix_compact	z3.obj/bin/python/z3/z3printer.py	/^_z3_infix_compact = [ Z3_OP_MUL, Z3_OP_BMUL, Z3_OP_POWER, Z3_OP_DIV, Z3_OP_IDIV, Z3_OP_MOD, Z3_OP_BSDIV, Z3_OP_BSMOD ]$/;"	v
_z3_op_to_fpa_normal_str	z3.obj/bin/python/z3/z3printer.py	/^_z3_op_to_fpa_normal_str = {$/;"	v
_z3_op_to_fpa_pretty_str	z3.obj/bin/python/z3/z3printer.py	/^_z3_op_to_fpa_pretty_str = {    $/;"	v
_z3_op_to_str	z3.obj/bin/python/z3/z3printer.py	/^_z3_op_to_str = {$/;"	v
_z3_pre_html_precedence	z3.obj/bin/python/z3/z3printer.py	/^_z3_pre_html_precedence = { Z3_OP_BUDIV : 2, Z3_OP_BUREM : 2,$/;"	v
_z3_precedence	z3.obj/bin/python/z3/z3printer.py	/^_z3_precedence = {$/;"	v
_z3_unary	z3.obj/bin/python/z3/z3printer.py	/^_z3_unary = [ Z3_OP_UMINUS, Z3_OP_BNOT, Z3_OP_BNEG ]$/;"	v
a	svf/include/AE/Core/IntervalValue.h	/^    IntervalValue &operator=(const IntervalValue &a) = default;$/;"	m	class:SVF::IntervalValue
abs	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble abs(const BoundedDouble& lhs)$/;"	f	class:SVF::BoundedDouble
abs	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt abs(const BoundedInt& lhs)$/;"	f	class:SVF::BoundedInt
abs	z3.obj/include/z3++.h	/^    inline expr abs(expr const & a) { $/;"	f	namespace:z3
abstract	z3.obj/bin/python/z3/z3.py	/^    def abstract(self, fml, is_forall=True):$/;"	m	class:Fixedpoint
abstractTrace	svf/include/AE/Svfexe/AbsExtAPI.h	/^    Map<const ICFGNode*, AbstractState>& abstractTrace; \/\/\/< Map of ICFG nodes to abstract states.$/;"	m	class:SVF::AbsExtAPI
abstractTrace	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Map<const ICFGNode*, AbstractState> abstractTrace; \/\/ abstract states immediately after nodes$/;"	m	class:SVF::AbstractInterpretation
abstract_consequence	svf/lib/AE/Core/RelationSolver.cpp	/^AbstractState RelationSolver::abstract_consequence($/;"	f	class:RelationSolver
accept	svf/include/Graphs/WTO.h	/^    void accept(WTOComponentVisitor<GraphT>& v)$/;"	f	class:SVF::WTO
accessGlobal	svf/lib/SABER/SaberSVFGBuilder.cpp	/^bool SaberSVFGBuilder::accessGlobal(BVDataPTAImpl* pta,const PAGNode* pagNode)$/;"	f	class:SaberSVFGBuilder
accessLowerBound	svf/include/Util/SVFBugReport.h	/^    s64_t allocLowerBound, allocUpperBound, accessLowerBound, accessUpperBound;$/;"	m	class:SVF::BufferOverflowBug
accessUpperBound	svf/include/Util/SVFBugReport.h	/^    s64_t allocLowerBound, allocUpperBound, accessLowerBound, accessUpperBound;$/;"	m	class:SVF::BufferOverflowBug
accessor	z3.obj/bin/python/z3/z3.py	/^    def accessor(self, i, j):$/;"	m	class:DatatypeSortRef
accumulateConstantByteOffset	svf/include/SVFIR/SVFStatements.h	/^    inline APOffset accumulateConstantByteOffset() const$/;"	f	class:SVF::GepStmt
accumulateConstantOffset	svf/include/SVFIR/SVFStatements.h	/^    inline APOffset accumulateConstantOffset() const$/;"	f	class:SVF::GepStmt
actualInOfIndCS	svf/include/Graphs/SVFGOPT.h	/^    inline bool actualInOfIndCS(const ActualINSVFGNode* ai) const$/;"	f	class:SVF::SVFGOPT
actualInToDefMap	svf/include/Graphs/SVFGOPT.h	/^    NodeIDToNodeIDMap actualInToDefMap;	\/\/\/< map actual-in to its def-site node$/;"	m	class:SVF::SVFGOPT
actualOutOfIndCS	svf/include/Graphs/SVFGOPT.h	/^    inline bool actualOutOfIndCS(const ActualOUTSVFGNode* ao) const$/;"	f	class:SVF::SVFGOPT
actualRet	svf/include/Graphs/ICFGNode.h	/^    const SVFVar *actualRet;$/;"	m	class:SVF::RetICFGNode
add	svf/include/Graphs/WTO.h	/^    void add(const NodeT* head)$/;"	f	class:SVF::WTOCycleDepth
add	z3.obj/bin/python/z3/z3.py	/^    def add(self, *args):$/;"	m	class:Fixedpoint
add	z3.obj/bin/python/z3/z3.py	/^    def add(self, *args):$/;"	m	class:Goal
add	z3.obj/bin/python/z3/z3.py	/^    def add(self, *args):$/;"	m	class:Optimize
add	z3.obj/bin/python/z3/z3.py	/^    def add(self, *args):$/;"	m	class:Solver
add	z3.obj/include/z3++.h	/^        handle add(expr const& e, char const* weight) {$/;"	f	class:z3::optimize
add	z3.obj/include/z3++.h	/^        handle add(expr const& e, unsigned weight) {$/;"	f	class:z3::optimize
add	z3.obj/include/z3++.h	/^        void add(expr const & e) { assert(e.is_bool()); Z3_solver_assert(ctx(), m_solver, e); check_error(); }$/;"	f	class:z3::solver
add	z3.obj/include/z3++.h	/^        void add(expr const & e, char const * p) {$/;"	f	class:z3::solver
add	z3.obj/include/z3++.h	/^        void add(expr const & e, expr const & p) {$/;"	f	class:z3::solver
add	z3.obj/include/z3++.h	/^        void add(expr const & f) { check_context(*this, f); Z3_goal_assert(ctx(), m_goal, f); check_error(); }$/;"	f	class:z3::goal
add	z3.obj/include/z3++.h	/^        void add(expr const& e) {$/;"	f	class:z3::optimize
add	z3.obj/include/z3++.h	/^        void add(expr const& e, expr const& t) {$/;"	f	class:z3::optimize
add	z3.obj/include/z3++.h	/^        void add(expr_vector const& es) {$/;"	f	class:z3::optimize
add	z3.obj/include/z3++.h	/^        void add(expr_vector const& v) { check_context(*this, v); for (unsigned i = 0; i < v.size(); ++i) add(v[i]); }$/;"	f	class:z3::goal
addAbsExecBug	svf/include/Util/SVFBugReport.h	/^    void addAbsExecBug(GenericBug::BugType bugType, const GenericBug::EventStack &eventStack,$/;"	f	class:SVF::SVFBugReport
addActualINSVFGNode	svf/include/Graphs/SVFG.h	/^    inline void addActualINSVFGNode(const CallICFGNode* callsite, const MRVer* ver, const NodeID nodeId)$/;"	f	class:SVF::SVFG
addActualOUTSVFGNode	svf/include/Graphs/SVFG.h	/^    inline void addActualOUTSVFGNode(const CallICFGNode* callsite, const MRVer* resVer, const NodeID nodeId)$/;"	f	class:SVF::SVFG
addActualParmVFGNode	svf/include/Graphs/VFG.h	/^    inline void addActualParmVFGNode(const PAGNode* aparm, const CallICFGNode* cs)$/;"	f	class:SVF::VFG
addActualParmVFGNode	svf/include/SABER/SaberSVFGBuilder.h	/^    inline void addActualParmVFGNode(const PAGNode* pagNode, const CallICFGNode* cs)$/;"	f	class:SVF::SaberSVFGBuilder
addActualParms	svf/include/Graphs/ICFGNode.h	/^    inline void addActualParms(const ValVar *ap)$/;"	f	class:SVF::CallICFGNode
addActualRet	svf/include/Graphs/ICFGNode.h	/^    inline void addActualRet(const SVFVar *ar)$/;"	f	class:SVF::RetICFGNode
addActualRetVFGNode	svf/include/Graphs/VFG.h	/^    inline void addActualRetVFGNode(const PAGNode* ret,const CallICFGNode* cs)$/;"	f	class:SVF::VFG
addAddrCGEdge	svf/lib/Graphs/ConsG.cpp	/^AddrCGEdge* ConstraintGraph::addAddrCGEdge(NodeID src, NodeID dst)$/;"	f	class:ConstraintGraph
addAddrEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline AddrStmt* addAddrEdge(NodeID src, NodeID dst)$/;"	f	class:SVF::SVFIRBuilder
addAddrStmt	svf/lib/SVFIR/SVFIR.cpp	/^AddrStmt* SVFIR::addAddrStmt(NodeID src, NodeID dst)$/;"	f	class:SVFIR
addAddrTakenNodeTimeEnd	svf/include/Graphs/SVFGStat.h	/^    double addAddrTakenNodeTimeEnd;$/;"	m	class:SVF::SVFGStat
addAddrTakenNodeTimeStart	svf/include/Graphs/SVFGStat.h	/^    double addAddrTakenNodeTimeStart;$/;"	m	class:SVF::SVFGStat
addAddrVFGNode	svf/include/Graphs/VFG.h	/^    inline void addAddrVFGNode(const AddrStmt* addr)$/;"	f	class:SVF::VFG
addAddrWithHeapSz	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline AddrStmt* addAddrWithHeapSz(NodeID src, NodeID dst, const CallBase* cs)$/;"	f	class:SVF::SVFIRBuilder
addAddrWithStackArraySz	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline AddrStmt* addAddrWithStackArraySz(NodeID src, NodeID dst, llvm::AllocaInst& inst)$/;"	f	class:SVF::SVFIRBuilder
addArc	svf/lib/CFL/CFLSolver.cpp	/^void POCRHybridSolver::addArc(NodeID src, NodeID dst)$/;"	f	class:POCRHybridSolver
addArc_h	svf/lib/CFL/CFLSolver.cpp	/^void POCRHybridSolver::addArc_h(NodeID src, NodeID dst)$/;"	f	class:POCRHybridSolver
addArgValNode	svf/include/SVFIR/SVFIR.h	/^    NodeID addArgValNode(NodeID i, u32_t argNo, const ICFGNode* icfgNode, const FunObjVar* callGraphNode, const SVFType* type)$/;"	f	class:SVF::SVFIR
addArgument	svf/include/SVFIR/SVFVariables.h	/^    inline void addArgument(const ArgValVar *arg)$/;"	f	class:SVF::FunObjVar
addArrSize	svf/include/SVFIR/SVFStatements.h	/^    inline void addArrSize(SVFVar* size)   \/\/TODO:addSizeVar$/;"	f	class:SVF::AddrStmt
addAttribute	svf/lib/CFL/CFLGraphBuilder.cpp	/^void CFLGraphBuilder::addAttribute(CFGrammar::Kind kind, CFGrammar::Attribute attribute)$/;"	f	class:SVF::CFLGraphBuilder
addBackICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline void addBackICFGEdge(const ICFGEdge *edge)$/;"	f	class:SVF::SVFLoop
addBackwardVisited	svf/include/SABER/SrcSnkDDA.h	/^    inline void addBackwardVisited(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
addBasicBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void addBasicBlock(FunObjVar* fun, const BasicBlock* bb)$/;"	f	class:SVF::LLVMModuleSet
addBasicBlock	svf/include/Graphs/BasicBlockG.h	/^    SVFBasicBlock* addBasicBlock(const std::string& bbname)$/;"	f	class:SVF::BasicBlockGraph
addBiCFLEdge	svf/lib/CFL/CFLGraphBuilder.cpp	/^void AliasCFLGraphBuilder::addBiCFLEdge(CFLGraph *cflGraph,  ConstraintNode* src, ConstraintNode* dst, CFGrammar::Kind kind)$/;"	f	class:SVF::AliasCFLGraphBuilder
addBiGepCFLEdge	svf/lib/CFL/CFLGraphBuilder.cpp	/^void AliasCFLGraphBuilder::addBiGepCFLEdge(CFLGraph *cflGraph,  ConstraintNode* src, ConstraintNode* dst, CFGrammar::Attribute attri)$/;"	f	class:SVF::AliasCFLGraphBuilder
addBinaryOPEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addBinaryOPEdge(NodeID op1, NodeID op2, NodeID dst, u32_t opcode)$/;"	f	class:SVF::SVFIRBuilder
addBinaryOPStmt	svf/lib/SVFIR/SVFIR.cpp	/^BinaryOPStmt* SVFIR::addBinaryOPStmt(NodeID op1, NodeID op2, NodeID dst, u32_t opcode)$/;"	f	class:SVFIR
addBinaryOPVFGNode	svf/include/Graphs/VFG.h	/^    inline void addBinaryOPVFGNode(const BinaryOPStmt* edge)$/;"	f	class:SVF::VFG
addBlackHoleAddrEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addBlackHoleAddrEdge(NodeID node)$/;"	f	class:SVF::SVFIRBuilder
addBlackHoleAddrStmt	svf/lib/SVFIR/SVFIR.cpp	/^SVFStmt* SVFIR::addBlackHoleAddrStmt(NodeID node)$/;"	f	class:SVFIR
addBlackholeObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addBlackholeObjNode()$/;"	f	class:SVF::SVFIR
addBlackholePtrNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addBlackholePtrNode()$/;"	f	class:SVF::SVFIR
addBlockICFGNode	svf-llvm/lib/ICFGBuilder.cpp	/^inline ICFGNode* ICFGBuilder::addBlockICFGNode(const Instruction* inst)$/;"	f	class:ICFGBuilder
addBranchStmt	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addBranchStmt(NodeID br, NodeID cond, const BranchStmt::SuccAndCondPairVec& succs)$/;"	f	class:SVF::SVFIRBuilder
addBranchStmt	svf/lib/SVFIR/SVFIR.cpp	/^BranchStmt* SVFIR::addBranchStmt(NodeID br, NodeID cond, const BranchStmt::SuccAndCondPairVec&  succs)$/;"	f	class:SVFIR
addBranchVFGNode	svf/include/Graphs/VFG.h	/^    inline void addBranchVFGNode(const BranchStmt* edge)$/;"	f	class:SVF::VFG
addBugToReporter	svf/include/AE/Svfexe/AEDetector.h	/^    void addBugToReporter(const AEException& e, const ICFGNode* node)$/;"	f	class:SVF::BufOverflowDetector
addCDGEdge	svf/include/Graphs/CDG.h	/^    inline bool addCDGEdge(CDGEdge *edge)$/;"	f	class:SVF::CDG
addCDGEdgeFromSrcDst	svf/lib/Graphs/CDG.cpp	/^void CDG::addCDGEdgeFromSrcDst(const ICFGNode *src, const ICFGNode *dst, const SVFVar *pNode, s32_t branchID)$/;"	f	class:CDG
addCDGNode	svf/include/Graphs/CDG.h	/^    virtual inline void addCDGNode(CDGNode *node)$/;"	f	class:SVF::CDG
addCDGNodesFromVector	svf/include/Graphs/CDG.h	/^    inline void addCDGNodesFromVector(ICFGNodeVector nodes)$/;"	f	class:SVF::CDG
addCFLEdge	svf/lib/Graphs/CFLGraph.cpp	/^const CFLEdge* CFLGraph::addCFLEdge(CFLNode* src, CFLNode* dst, CFLEdge::GEdgeFlag label)$/;"	f	class:CFLGraph
addCFLNode	svf/lib/Graphs/CFLGraph.cpp	/^void CFLGraph::addCFLNode(NodeID id, CFLNode* node)$/;"	f	class:CFLGraph
addCPtsToCallSiteMods	svf/include/MSSA/MemRegion.h	/^    inline void addCPtsToCallSiteMods(NodeBS& cpts, const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
addCPtsToCallSiteRefs	svf/include/MSSA/MemRegion.h	/^    inline void addCPtsToCallSiteRefs(NodeBS& cpts, const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
addCPtsToLoad	svf/include/MSSA/MemRegion.h	/^    inline void addCPtsToLoad(NodeBS& cpts, const LoadStmt *ld, const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
addCPtsToStore	svf/include/MSSA/MemRegion.h	/^    inline void addCPtsToStore(NodeBS& cpts, const StoreStmt *st, const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
addCallEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addCallEdge(NodeID src, NodeID dst, const CallICFGNode* cs, const FunEntryICFGNode* entry)$/;"	f	class:SVF::SVFIRBuilder
addCallEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::addCallEdge(ICFGNode* srcNode, ICFGNode* dstNode)$/;"	f	class:ICFG
addCallEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::addCallEdge(NodeID srcId, NodeID dstId, CallSiteID csId)$/;"	f	class:VFG
addCallGraphNode	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::addCallGraphNode(const FunObjVar* fun)$/;"	f	class:CallGraph
addCallICFGNode	svf/include/Graphs/ICFG.h	/^    virtual inline CallICFGNode* addCallICFGNode($/;"	f	class:SVF::ICFG
addCallIndirectSVFGEdge	svf/lib/Graphs/SVFGOPT.cpp	/^SVFGEdge* SVFGOPT::addCallIndirectSVFGEdge(NodeID srcId, NodeID dstId, CallSiteID csid, const NodeBS& cpts)$/;"	f	class:SVFGOPT
addCallIndirectVFEdge	svf/lib/Graphs/SVFG.cpp	/^SVFGEdge* SVFG::addCallIndirectVFEdge(NodeID srcId, NodeID dstId, const NodeBS& cpts,CallSiteID csId)$/;"	f	class:SVFG
addCallPE	svf/include/Graphs/ICFGEdge.h	/^    inline void addCallPE(const CallPE* callPE)$/;"	f	class:SVF::CallCFGEdge
addCallPE	svf/include/Graphs/VFGNode.h	/^    inline void addCallPE(const CallPE* call)$/;"	f	class:SVF::FormalParmVFGNode
addCallPE	svf/lib/SVFIR/SVFIR.cpp	/^CallPE* SVFIR::addCallPE(NodeID src, NodeID dst, const CallICFGNode* cs, const FunEntryICFGNode* entry)$/;"	f	class:SVFIR
addCallSite	svf/include/Graphs/CallGraph.h	/^    inline CallSiteID addCallSite(const CallICFGNode* cs, const FunObjVar* callee)$/;"	f	class:SVF::CallGraph
addCallSite	svf/include/SVFIR/SVFIR.h	/^    inline void addCallSite(const CallICFGNode* call)$/;"	f	class:SVF::SVFIR
addCallSiteArgs	svf/include/SVFIR/SVFIR.h	/^    inline void addCallSiteArgs(CallICFGNode* callBlockNode,const ValVar* arg)$/;"	f	class:SVF::SVFIR
addCallSiteRets	svf/include/SVFIR/SVFIR.h	/^    inline void addCallSiteRets(RetICFGNode* retBlockNode,const SVFVar* arg)$/;"	f	class:SVF::SVFIR
addCandidate	svf/include/DDA/DDAClient.h	/^    void addCandidate(NodeID id)$/;"	f	class:SVF::DDAClient
addCmpEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addCmpEdge(NodeID op1, NodeID op2, NodeID dst, u32_t predict)$/;"	f	class:SVF::SVFIRBuilder
addCmpStmt	svf/lib/SVFIR/SVFIR.cpp	/^CmpStmt* SVFIR::addCmpStmt(NodeID op1, NodeID op2, NodeID dst, u32_t predicate)$/;"	f	class:SVFIR
addCmpVFGNode	svf/include/Graphs/VFG.h	/^    inline void addCmpVFGNode(const CmpStmt* edge)$/;"	f	class:SVF::VFG
addComplexConsForExt	svf-llvm/lib/SVFIRExtAPI.cpp	/^void SVFIRBuilder::addComplexConsForExt(Value *D, Value *S, const Value* szValue)$/;"	f	class:SVFIRBuilder
addCondIntraLock	svf/include/MTA/LockAnalysis.h	/^    inline void addCondIntraLock(const ICFGNode* lockSite, const InstSet& stmts)$/;"	f	class:SVF::LockAnalysis
addConditionalIntraEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::addConditionalIntraEdge(ICFGNode* srcNode, ICFGNode* dstNode, s64_t branchCondVal)$/;"	f	class:ICFG
addConstantAggObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantAggObjNode(const NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addConstantAggValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantAggValNode(const NodeID i, const ICFGNode* icfgNode, const SVFType* svfType)$/;"	f	class:SVF::SVFIR
addConstantDataObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantDataObjNode(const NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addConstantDataValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantDataValNode(const NodeID i, const ICFGNode* icfgNode, const SVFType* type)$/;"	f	class:SVF::SVFIR
addConstantFPObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantFPObjNode(NodeID i, ObjTypeInfo* ti, double dval, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addConstantFPValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantFPValNode(const NodeID i, double dval,$/;"	f	class:SVF::SVFIR
addConstantIntObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantIntObjNode(NodeID i, ObjTypeInfo* ti, const std::pair<s64_t, u64_t>& intValue, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addConstantIntValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantIntValNode(NodeID i, const std::pair<s64_t, u64_t>& intValue,$/;"	f	class:SVF::SVFIR
addConstantNullPtrObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantNullPtrObjNode(const NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addConstantNullPtrValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantNullPtrValNode(const NodeID i, const ICFGNode* icfgNode, const SVFType* type)$/;"	f	class:SVF::SVFIR
addConstantObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addConstantObjNode()$/;"	f	class:SVF::SVFIR
addConstraintNode	svf/include/Graphs/ConsG.h	/^    inline void addConstraintNode(ConstraintNode* node, NodeID id)$/;"	f	class:SVF::ConstraintGraph
addCopyCGEdge	svf/lib/Graphs/ConsG.cpp	/^CopyCGEdge* ConstraintGraph::addCopyCGEdge(NodeID src, NodeID dst)$/;"	f	class:ConstraintGraph
addCopyEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline CopyStmt* addCopyEdge(NodeID src, NodeID dst, CopyStmt::CopyKind kind)$/;"	f	class:SVF::SVFIRBuilder
addCopyEdge	svf/include/CFL/CFLAlias.h	/^    virtual inline bool addCopyEdge(NodeID src, NodeID dst)$/;"	f	class:SVF::CFLAlias
addCopyEdge	svf/include/WPA/Andersen.h	/^    virtual inline bool addCopyEdge(NodeID src, NodeID dst)$/;"	f	class:SVF::Andersen
addCopyEdge	svf/lib/WPA/AndersenSCD.cpp	/^bool AndersenSCD::addCopyEdge(NodeID src, NodeID dst)$/;"	f	class:AndersenSCD
addCopyStmt	svf/lib/SVFIR/SVFIR.cpp	/^CopyStmt* SVFIR::addCopyStmt(NodeID src, NodeID dst, CopyStmt::CopyKind type)$/;"	f	class:SVFIR
addCopyVFGNode	svf/include/Graphs/VFG.h	/^    inline void addCopyVFGNode(const CopyStmt* copy)$/;"	f	class:SVF::VFG
addCustomGraphFeatures	svf/include/Graphs/DOTGraphTraits.h	/^    static void addCustomGraphFeatures(const GraphType &, GraphWriter &) {}$/;"	f	struct:SVF::DefaultDOTGraphTraits
addCxtLock	svf/include/MTA/LockAnalysis.h	/^    inline void addCxtLock(const CallStrCxt& cxt,const ICFGNode* inst)$/;"	f	class:SVF::LockAnalysis
addCxtOfCxtThread	svf/include/MTA/TCT.h	/^    void addCxtOfCxtThread(const CallStrCxt& cxt, const CxtThread& ct)$/;"	f	class:SVF::TCT
addCxtStmtToSpan	svf/include/MTA/LockAnalysis.h	/^    inline bool addCxtStmtToSpan(const CxtStmt& cts, const CxtLock& cl)$/;"	f	class:SVF::LockAnalysis
addDDAPts	svf/include/DDA/DDAVFSolver.h	/^    virtual void addDDAPts(CPtSet& pts, const CVar& var)$/;"	f	class:SVF::DDAVFSolver
addDetector	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    void addDetector(std::unique_ptr<AEDetector> detector)$/;"	f	class:SVF::AbstractInterpretation
addDirectCallGraphEdge	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::addDirectCallGraphEdge(const CallICFGNode* cs,const FunObjVar* callerFun, const FunObjVar* calleeFun)$/;"	f	class:CallGraph
addDirectCallSite	svf/lib/Graphs/CallGraph.cpp	/^void CallGraphEdge::addDirectCallSite(const CallICFGNode* call)$/;"	f	class:CallGraphEdge
addDirectForkEdge	svf/lib/Graphs/ThreadCallGraph.cpp	/^bool ThreadCallGraph::addDirectForkEdge(const CallICFGNode* cs)$/;"	f	class:ThreadCallGraph
addDirectJoinEdge	svf/lib/Graphs/ThreadCallGraph.cpp	/^void ThreadCallGraph::addDirectJoinEdge(const CallICFGNode* cs,const CallSiteSet& forkset)$/;"	f	class:ThreadCallGraph
addDirectlyJoinTID	svf/include/MTA/MHP.h	/^    inline void addDirectlyJoinTID(const CxtStmt& cs, NodeID tid)$/;"	f	class:SVF::ForkJoinAnalysis
addDpmToLoc	svf/include/DDA/DDAVFSolver.h	/^    inline void addDpmToLoc(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
addDummyObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addDummyObjNode(NodeID i, const SVFType* type)$/;"	f	class:SVF::SVFIR
addDummyObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addDummyObjNode(const SVFType* type)$/;"	f	class:SVF::SVFIR
addDummyValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addDummyValNode()$/;"	f	class:SVF::SVFIR
addDummyValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addDummyValNode(NodeID i, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addDummyVersionPropSVFGNode	svf/include/Graphs/SVFG.h	/^    inline const DummyVersionPropSVFGNode *addDummyVersionPropSVFGNode(const NodeID object, const NodeID version)$/;"	f	class:SVF::SVFG
addEdge	svf-llvm/lib/DCHG.cpp	/^DCHEdge *DCHGraph::addEdge(const DIType *t1, const DIType *t2, DCHEdge::GEdgeKind et)$/;"	f	class:DCHGraph
addEdge	svf/include/CFL/CFLSolver.h	/^    inline bool addEdge(const NodeID src, const NodeID dst, const Label ty)$/;"	f	class:SVF::POCRSolver
addEdge	svf/include/Graphs/CallGraph.h	/^    inline void addEdge(CallGraphEdge* edge)$/;"	f	class:SVF::CallGraph
addEdge	svf/lib/Graphs/CHG.cpp	/^void CHGraph::addEdge(const string className, const string baseClassName,$/;"	f	class:CHGraph
addEdge	svf/lib/Graphs/IRGraph.cpp	/^bool IRGraph::addEdge(SVFVar* src, SVFVar* dst, SVFStmt* edge)$/;"	f	class:IRGraph
addEdge	svf/lib/SVFIR/PAGBuilderFromFile.cpp	/^void PAGBuilderFromFile::addEdge(NodeID srcID, NodeID dstID,$/;"	f	class:PAGBuilderFromFile
addEdges	svf/include/CFL/CFLSolver.h	/^    inline NodeBS addEdges(const NodeBS& srcData, const NodeID dst, const Label ty)$/;"	f	class:SVF::POCRSolver
addEdges	svf/include/CFL/CFLSolver.h	/^    inline NodeBS addEdges(const NodeID src, const NodeBS& dstData, const Label ty)$/;"	f	class:SVF::POCRSolver
addEntryICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline void addEntryICFGEdge(const ICFGEdge *edge)$/;"	f	class:SVF::SVFLoop
addFIObjNode	svf/include/SVFIR/SVFIR.h	/^    NodeID addFIObjNode(NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addFldWithType	svf/lib/SVFIR/SVFValue.cpp	/^void StInfo::addFldWithType(u32_t fldIdx, const SVFType* type, u32_t elemIdx)$/;"	f	class:StInfo
addForksite	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool addForksite(const CallICFGNode* cs)$/;"	f	class:SVF::ThreadCallGraph
addFormalINSVFGNode	svf/include/Graphs/SVFG.h	/^    inline void addFormalINSVFGNode(const FunEntryICFGNode* funEntry,  const MRVer* resVer, const NodeID nodeId)$/;"	f	class:SVF::SVFG
addFormalOUTSVFGNode	svf/include/Graphs/SVFG.h	/^    inline void addFormalOUTSVFGNode(const FunExitICFGNode* funExit, const MRVer* ver, const NodeID nodeId)$/;"	f	class:SVF::SVFG
addFormalParmVFGNode	svf/include/Graphs/VFG.h	/^    inline void addFormalParmVFGNode(const PAGNode* fparm, const FunObjVar* fun, CallPESet& callPEs)$/;"	f	class:SVF::VFG
addFormalParms	svf/include/Graphs/ICFGNode.h	/^    inline void addFormalParms(const SVFVar *fp)$/;"	f	class:SVF::FunEntryICFGNode
addFormalRet	svf/include/Graphs/ICFGNode.h	/^    inline void addFormalRet(const SVFVar *fr)$/;"	f	class:SVF::FunExitICFGNode
addFormalRetVFGNode	svf/include/Graphs/VFG.h	/^    inline void addFormalRetVFGNode(const PAGNode* uniqueFunRet, const FunObjVar* fun, RetPESet& retPEs)$/;"	f	class:SVF::VFG
addForwardVisited	svf/include/SABER/SrcSnkDDA.h	/^    inline void addForwardVisited(const SVFGNode* node, const DPIm& item)$/;"	f	class:SVF::SrcSnkDDA
addFunArgs	svf/include/SVFIR/SVFIR.h	/^    inline void addFunArgs(const FunObjVar* fun, const SVFVar* arg)$/;"	f	class:SVF::SVFIR
addFunEntryBlock	svf-llvm/lib/ICFGBuilder.cpp	/^FunEntryICFGNode* ICFGBuilder::addFunEntryBlock(const Function* fun)$/;"	f	class:ICFGBuilder
addFunEntryICFGNode	svf/include/Graphs/ICFG.h	/^    virtual inline FunEntryICFGNode* addFunEntryICFGNode(const FunObjVar* svfFunc)$/;"	f	class:SVF::ICFG
addFunExitBlock	svf-llvm/lib/ICFGBuilder.cpp	/^inline FunExitICFGNode* ICFGBuilder::addFunExitBlock(const Function* fun)$/;"	f	class:ICFGBuilder
addFunExitICFGNode	svf/include/Graphs/ICFG.h	/^    virtual inline FunExitICFGNode* addFunExitICFGNode(const FunObjVar* svfFunc)$/;"	f	class:SVF::ICFG
addFunObjNode	svf/include/SVFIR/SVFIR.h	/^    NodeID addFunObjNode(NodeID id,  ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addFunRet	svf/include/SVFIR/SVFIR.h	/^    inline void addFunRet(const FunObjVar* fun, const SVFVar* ret)$/;"	f	class:SVF::SVFIR
addFunValNode	svf/include/SVFIR/SVFIR.h	/^    NodeID addFunValNode(NodeID i, const ICFGNode* icfgNode, const FunObjVar* funObjVar, const SVFType* type)$/;"	f	class:SVF::SVFIR
addFuncToFuncVector	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::addFuncToFuncVector(CHNode::FuncVector &v, const Function *lf)$/;"	f	class:CHGBuilder
addFunctionSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void addFunctionSet(const Function* svfFunc)$/;"	f	class:SVF::LLVMModuleSet
addGNode	svf/include/Graphs/GenericGraph.h	/^    inline void addGNode(NodeID id, NodeType* node)$/;"	f	class:SVF::GenericGraph
addGNode	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLNode* CFLGraphBuilder::addGNode(u32_t NodeID)$/;"	f	class:SVF::CFLGraphBuilder
addGepEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addGepEdge(NodeID src, NodeID dst, const AccessPath& ap, bool constGep)$/;"	f	class:SVF::SVFIRBuilder
addGepObjNode	svf/lib/SVFIR/SVFIR.cpp	/^NodeID SVFIR::addGepObjNode(const BaseObjVar* baseObj, const APOffset& apOffset, const NodeID gepId)$/;"	f	class:SVFIR
addGepStmt	svf/lib/SVFIR/SVFIR.cpp	/^GepStmt* SVFIR::addGepStmt(NodeID src, NodeID dst, const AccessPath& ap, bool constGep)$/;"	f	class:SVFIR
addGepVFGNode	svf/include/Graphs/VFG.h	/^    inline void addGepVFGNode(const GepStmt* gep)$/;"	f	class:SVF::VFG
addGepValNode	svf/lib/SVFIR/SVFIR.cpp	/^NodeID SVFIR::addGepValNode(NodeID curInst,const ValVar* baseVar, const AccessPath& ap, NodeID i, const SVFType* type, const ICFGNode* icn)$/;"	f	class:SVFIR
addGlobalBlackHoleAddrEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void addGlobalBlackHoleAddrEdge(NodeID node, const ConstantExpr *int2Ptrce)$/;"	f	class:SVF::SVFIRBuilder
addGlobalICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline void addGlobalICFGNode()$/;"	f	class:SVF::ICFGBuilder
addGlobalObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addGlobalObjNode(const NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addGlobalPAGEdge	svf/include/SVFIR/SVFIR.h	/^    inline void addGlobalPAGEdge(const SVFStmt* edge)$/;"	f	class:SVF::SVFIR
addGlobalValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addGlobalValNode(const NodeID i, const ICFGNode* icfgNode, const SVFType* svfType)$/;"	f	class:SVF::SVFIR
addHareParForEdgeSetMap	svf/include/Graphs/ThreadCallGraph.h	/^    inline void addHareParForEdgeSetMap(const CallICFGNode* cs, HareParForEdge* edge)$/;"	f	class:SVF::ThreadCallGraph
addHeapObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addHeapObjNode(NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addICFGEdge	svf/include/Graphs/ICFG.h	/^    inline bool addICFGEdge(ICFGEdge* edge)$/;"	f	class:SVF::ICFG
addICFGInterEdges	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::addICFGInterEdges(const Instruction* cs, const Function* callee)$/;"	f	class:ICFGBuilder
addICFGNode	svf/include/Graphs/BasicBlockG.h	/^    inline void addICFGNode(const ICFGNode* icfgNode)$/;"	f	class:SVF::SVFBasicBlock
addICFGNode	svf/include/Graphs/ICFG.h	/^    virtual inline void addICFGNode(ICFGNode* node)$/;"	f	class:SVF::ICFG
addInDirectCallSite	svf/lib/Graphs/CallGraph.cpp	/^void CallGraphEdge::addInDirectCallSite(const CallICFGNode* call)$/;"	f	class:CallGraphEdge
addInEdge	svf/include/SVFIR/SVFVariables.h	/^    inline void addInEdge(SVFStmt* inEdge)$/;"	f	class:SVF::SVFVar
addInEdgeWithKind	svf/include/Graphs/CFLGraph.h	/^    inline bool addInEdgeWithKind(CFLEdge* inEdge, GrammarBase::Symbol s)$/;"	f	class:SVF::CFLNode
addInICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline void addInICFGEdge(const ICFGEdge *edge)$/;"	f	class:SVF::SVFLoop
addIncomingAddrEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addIncomingAddrEdge(AddrCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
addIncomingCopyEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addIncomingCopyEdge(CopyCGEdge *inEdge)$/;"	f	class:SVF::ConstraintNode
addIncomingDirectEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool addIncomingDirectEdge(ConstraintEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
addIncomingEdge	svf/include/Graphs/GenericGraph.h	/^    inline bool addIncomingEdge(EdgeType* inEdge)$/;"	f	class:SVF::GenericNode
addIncomingGepEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addIncomingGepEdge(GepCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
addIncomingLoadEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addIncomingLoadEdge(LoadCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
addIncomingStoreEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addIncomingStoreEdge(StoreCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
addInd_h	svf/lib/CFL/CFLSolver.cpp	/^POCRHybridSolver::TreeNode* POCRHybridSolver::addInd_h(NodeID src, NodeID dst)$/;"	f	class:POCRHybridSolver
addIndirectCallGraphEdge	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::addIndirectCallGraphEdge(const CallICFGNode* cs,const FunObjVar* callerFun, const FunObjVar* calleeFun)$/;"	f	class:CallGraph
addIndirectCallsites	svf/include/SVFIR/SVFIR.h	/^    inline void addIndirectCallsites(const CallICFGNode* cs,NodeID funPtr)$/;"	f	class:SVF::SVFIR
addIndirectForkEdge	svf/lib/Graphs/ThreadCallGraph.cpp	/^bool ThreadCallGraph::addIndirectForkEdge(const CallICFGNode* cs, const FunObjVar* calleefun)$/;"	f	class:ThreadCallGraph
addIngoingEdge	svf/include/Graphs/CFLGraph.h	/^    inline bool addIngoingEdge(CFLEdge* inEdge)$/;"	f	class:SVF::CFLNode
addInstances	svf/include/Graphs/CHG.h	/^    inline void addInstances(const std::string templateName, CHNode* node)$/;"	f	class:SVF::CHGraph
addInstructionMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void addInstructionMap(const Instruction* inst, CallICFGNode* svfInst)$/;"	f	class:SVF::LLVMModuleSet
addInstructionMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void addInstructionMap(const Instruction* inst, IntraICFGNode* svfInst)$/;"	f	class:SVF::LLVMModuleSet
addInstructionMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void addInstructionMap(const Instruction* inst, RetICFGNode* svfInst)$/;"	f	class:SVF::LLVMModuleSet
addInterBlockICFGNode	svf-llvm/lib/ICFGBuilder.cpp	/^InterICFGNode* ICFGBuilder::addInterBlockICFGNode(const Instruction* inst)$/;"	f	class:ICFGBuilder
addInterEdgeFromAPToFP	svf/include/Graphs/VFG.h	/^    inline VFGEdge* addInterEdgeFromAPToFP(ActualParmVFGNode* src, FormalParmVFGNode* dst, CallSiteID csId)$/;"	f	class:SVF::VFG
addInterEdgeFromAPToFP	svf/include/Graphs/VFG.h	/^    inline VFGEdge* addInterEdgeFromAPToFP(NodeID src, NodeID dst, CallSiteID csId)$/;"	f	class:SVF::VFG
addInterEdgeFromFRToAR	svf/include/Graphs/VFG.h	/^    inline VFGEdge* addInterEdgeFromFRToAR(FormalRetVFGNode* src, ActualRetVFGNode* dst, CallSiteID csId)$/;"	f	class:SVF::VFG
addInterEdgeFromFRToAR	svf/include/Graphs/VFG.h	/^    inline VFGEdge* addInterEdgeFromFRToAR(NodeID src, NodeID dst, CallSiteID csId)$/;"	f	class:SVF::VFG
addInterIndirectVFCallEdge	svf/lib/Graphs/SVFG.cpp	/^SVFGEdge* SVFG::addInterIndirectVFCallEdge(const ActualINSVFGNode* src, const FormalINSVFGNode* dst,CallSiteID csId)$/;"	f	class:SVFG
addInterIndirectVFRetEdge	svf/lib/Graphs/SVFG.cpp	/^SVFGEdge* SVFG::addInterIndirectVFRetEdge(const FormalOUTSVFGNode* src, const ActualOUTSVFGNode* dst,CallSiteID csId)$/;"	f	class:SVFG
addInterPHIForAR	svf/include/Graphs/SVFGOPT.h	/^    inline InterPHISVFGNode* addInterPHIForAR(const ActualRetSVFGNode* ar)$/;"	f	class:SVF::SVFGOPT
addInterPHIForFP	svf/include/Graphs/SVFGOPT.h	/^    inline InterPHISVFGNode* addInterPHIForFP(const FormalParmSVFGNode* fp)$/;"	f	class:SVF::SVFGOPT
addInterPHIOperands	svf/include/Graphs/SVFGOPT.h	/^    inline void addInterPHIOperands(PHISVFGNode* phi, const PAGNode* operand)$/;"	f	class:SVF::SVFGOPT
addInterleavingThread	svf/include/MTA/MHP.h	/^    inline void addInterleavingThread(const CxtThreadStmt& tgr, NodeID tid)$/;"	f	class:SVF::MHP
addInterleavingThread	svf/include/MTA/MHP.h	/^    inline void addInterleavingThread(const CxtThreadStmt& tgr, const CxtThreadStmt& src)$/;"	f	class:SVF::MHP
addIntoWorklist	svf/include/Graphs/SVFGOPT.h	/^    inline bool addIntoWorklist(const SVFGNode* node)$/;"	f	class:SVF::SVFGOPT
addIntraBlockICFGNode	svf-llvm/lib/ICFGBuilder.cpp	/^IntraICFGNode* ICFGBuilder::addIntraBlockICFGNode(const Instruction* inst)$/;"	f	class:ICFGBuilder
addIntraDirectVFEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::addIntraDirectVFEdge(NodeID srcId, NodeID dstId)$/;"	f	class:VFG
addIntraEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::addIntraEdge(ICFGNode* srcNode, ICFGNode* dstNode)$/;"	f	class:ICFG
addIntraICFGNode	svf/include/Graphs/ICFG.h	/^    virtual inline IntraICFGNode* addIntraICFGNode(const SVFBasicBlock* bb, bool isRet)$/;"	f	class:SVF::ICFG
addIntraIndirectVFEdge	svf/lib/Graphs/SVFG.cpp	/^SVFGEdge* SVFG::addIntraIndirectVFEdge(NodeID srcId, NodeID dstId, const NodeBS& cpts)$/;"	f	class:SVFG
addIntraLock	svf/include/MTA/LockAnalysis.h	/^    inline void addIntraLock(const ICFGNode* lockSite, const InstSet& stmts)$/;"	f	class:SVF::LockAnalysis
addIntraMSSAPHISVFGNode	svf/include/Graphs/SVFG.h	/^    inline void addIntraMSSAPHISVFGNode(ICFGNode* BlockICFGNode, const Map<u32_t,const MRVer*>::const_iterator opVerBegin,$/;"	f	class:SVF::SVFG
addIntraPHIVFGNode	svf/include/Graphs/VFG.h	/^    inline void addIntraPHIVFGNode(const MultiOpndStmt* edge)$/;"	f	class:SVF::VFG
addJoinsite	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool addJoinsite(const CallICFGNode* cs)$/;"	f	class:SVF::ThreadCallGraph
addLoadCGEdge	svf/lib/Graphs/ConsG.cpp	/^LoadCGEdge* ConstraintGraph::addLoadCGEdge(NodeID src, NodeID dst)$/;"	f	class:ConstraintGraph
addLoadCVar	svf/include/DDA/DDAVFSolver.h	/^    inline void addLoadCVar(const DPIm& dpm, const CVar& loadVar)$/;"	f	class:SVF::DDAVFSolver
addLoadDpm	svf/include/DDA/DDAVFSolver.h	/^    inline void addLoadDpm(const DPIm& dpm,const DPIm& loadDpm)$/;"	f	class:SVF::DDAVFSolver
addLoadDpmAndCVar	svf/include/DDA/DDAVFSolver.h	/^    inline void addLoadDpmAndCVar(const DPIm& dpm,const DPIm& loadDpm,const CVar& loadVar)$/;"	f	class:SVF::DDAVFSolver
addLoadEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addLoadEdge(NodeID src, NodeID dst)$/;"	f	class:SVF::SVFIRBuilder
addLoadStmt	svf/lib/SVFIR/SVFIR.cpp	/^LoadStmt* SVFIR::addLoadStmt(NodeID src, NodeID dst)$/;"	f	class:SVFIR
addLoadVFGNode	svf/include/Graphs/VFG.h	/^    void addLoadVFGNode(const LoadStmt* load)$/;"	f	class:SVF::VFG
addMDTag	svf/include/Util/Annotator.h	/^    inline void addMDTag(Instruction* inst, Value* val, std::string str)$/;"	f	class:SVF::Annotator
addMDTag	svf/include/Util/Annotator.h	/^    inline void addMDTag(Instruction* inst, std::string str)$/;"	f	class:SVF::Annotator
addModSideEffectOfCallSite	svf/lib/MSSA/MemRegion.cpp	/^bool MRGenerator::addModSideEffectOfCallSite(const CallICFGNode* cs, const NodeBS& mods)$/;"	f	class:MRGenerator
addModSideEffectOfFunction	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::addModSideEffectOfFunction(const FunObjVar* fun, const NodeBS& mods)$/;"	f	class:MRGenerator
addNewCandidate	svf/include/WPA/WPAFSSolver.h	/^    inline void addNewCandidate(NodeID node)$/;"	f	class:SVF::WPAMinimumSolver
addNewSVFGEdge	svf/lib/Graphs/SVFGOPT.cpp	/^bool SVFGOPT::addNewSVFGEdge(NodeID srcId, NodeID dstId, const SVFGEdge* preEdge, const SVFGEdge* succEdge)$/;"	f	class:SVFGOPT
addNode	svf/include/Graphs/IRGraph.h	/^    inline NodeID addNode(SVFVar* node)$/;"	f	class:SVF::IRGraph
addNodeIntoWorkList	svf/include/WPA/WPAFSSolver.h	/^    virtual inline void addNodeIntoWorkList(NodeID node)$/;"	f	class:SVF::WPAMinimumSolver
addNodeIntoWorkList	svf/include/WPA/WPAFSSolver.h	/^    virtual inline void addNodeIntoWorkList(NodeID node)$/;"	f	class:SVF::WPASCCSolver
addNodeToBeCollapsed	svf/include/Graphs/ConsG.h	/^    inline void addNodeToBeCollapsed(NodeID id)$/;"	f	class:SVF::ConstraintGraph
addNodeToSVFLoop	svf/include/Graphs/ICFG.h	/^    inline void addNodeToSVFLoop(const ICFGNode *node, const SVFLoop* loop)$/;"	f	class:SVF::ICFG
addNormalGepCGEdge	svf/lib/Graphs/ConsG.cpp	/^NormalGepCGEdge*  ConstraintGraph::addNormalGepCGEdge(NodeID src, NodeID dst, const AccessPath& ap)$/;"	f	class:ConstraintGraph
addNormalGepEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addNormalGepEdge(NodeID src, NodeID dst, const AccessPath& ap)$/;"	f	class:SVF::SVFIRBuilder
addNormalGepStmt	svf/lib/SVFIR/SVFIR.cpp	/^GepStmt* SVFIR::addNormalGepStmt(NodeID src, NodeID dst, const AccessPath& ap)$/;"	f	class:SVFIR
addNullPtrNode	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline NodeID addNullPtrNode()$/;"	f	class:SVF::SVFIRBuilder
addNullPtrVFGNode	svf/include/Graphs/VFG.h	/^    inline void addNullPtrVFGNode(const PAGNode* pagNode)$/;"	f	class:SVF::VFG
addObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addObjNode(NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addObjNode(SVFVar *node)$/;"	f	class:SVF::SVFIR
addOffsetVarAndGepTypePair	svf/lib/MemoryModel/AccessPath.cpp	/^bool AccessPath::addOffsetVarAndGepTypePair(const SVFVar* var, const SVFType* gepIterType)$/;"	f	class:AccessPath
addOpVar	svf/include/SVFIR/SVFStatements.h	/^    void addOpVar(SVFVar* op, const ICFGNode* inode)$/;"	f	class:SVF::PhiStmt
addOutEdge	svf/include/SVFIR/SVFVariables.h	/^    inline void addOutEdge(SVFStmt* outEdge)$/;"	f	class:SVF::SVFVar
addOutEdgeWithKind	svf/include/Graphs/CFLGraph.h	/^    inline bool addOutEdgeWithKind(CFLEdge* outEdge, GrammarBase::Symbol s)$/;"	f	class:SVF::CFLNode
addOutICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline void addOutICFGEdge(const ICFGEdge *edge)$/;"	f	class:SVF::SVFLoop
addOutOfBudgetDpm	svf/include/DDA/DDAVFSolver.h	/^    inline void addOutOfBudgetDpm(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
addOutgoingAddrEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addOutgoingAddrEdge(AddrCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
addOutgoingCopyEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addOutgoingCopyEdge(CopyCGEdge *outEdge)$/;"	f	class:SVF::ConstraintNode
addOutgoingDirectEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool addOutgoingDirectEdge(ConstraintEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
addOutgoingEdge	svf/include/Graphs/CFLGraph.h	/^    inline bool addOutgoingEdge(CFLEdge* OutEdge)$/;"	f	class:SVF::CFLNode
addOutgoingEdge	svf/include/Graphs/GenericGraph.h	/^    inline bool addOutgoingEdge(EdgeType* outEdge)$/;"	f	class:SVF::GenericNode
addOutgoingGepEdge	svf/include/Graphs/ConsGNode.h	/^    inline void addOutgoingGepEdge(GepCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
addOutgoingLoadEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool addOutgoingLoadEdge(LoadCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
addOutgoingStoreEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool addOutgoingStoreEdge(StoreCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
addParForSite	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool addParForSite(const CallICFGNode* cs)$/;"	f	class:SVF::ThreadCallGraph
addPhiStmt	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addPhiStmt(NodeID res, NodeID opnd, const ICFGNode* pred)$/;"	f	class:SVF::SVFIRBuilder
addPhiStmt	svf/lib/SVFIR/SVFIR.cpp	/^PhiStmt* SVFIR::addPhiStmt(NodeID res, NodeID opnd, const ICFGNode* pred)$/;"	f	class:SVFIR
addPointsTo	svf/include/Graphs/SVFGEdge.h	/^    inline bool addPointsTo(const NodeBS& c)$/;"	f	class:SVF::IndirectSVFGEdge
addPred	svf/include/CFL/CFLSolver.h	/^    inline bool addPred(const NodeID key, const NodeID src, const Label ty)$/;"	f	class:SVF::POCRSolver
addPredBasicBlock	svf/include/Graphs/BasicBlockG.h	/^    inline void addPredBasicBlock(const SVFBasicBlock* pred2)$/;"	f	class:SVF::SVFBasicBlock
addPreds	svf/include/CFL/CFLSolver.h	/^    inline bool addPreds(const NodeID key, const NodeBS& data, const Label ty)$/;"	f	class:SVF::POCRSolver
addPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline bool addPts(DataSet &d, const Data& e)$/;"	f	class:SVF::MutableDFPTData
addPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline bool addPts(DataSet &d, const Data& e)$/;"	f	class:SVF::MutablePTData
addPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool addPts(CVar id, CVar ptd)$/;"	f	class:SVF::CondPTAImpl
addPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool addPts(NodeID id, NodeID ptd)$/;"	f	class:SVF::BVDataPTAImpl
addRefSideEffectOfCallSite	svf/lib/MSSA/MemRegion.cpp	/^bool MRGenerator::addRefSideEffectOfCallSite(const CallICFGNode* cs, const NodeBS& refs)$/;"	f	class:MRGenerator
addRefSideEffectOfFunction	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::addRefSideEffectOfFunction(const FunObjVar* fun, const NodeBS& refs)$/;"	f	class:MRGenerator
addRetEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addRetEdge(NodeID src, NodeID dst, const CallICFGNode* cs, const FunExitICFGNode* exit)$/;"	f	class:SVF::SVFIRBuilder
addRetEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::addRetEdge(ICFGNode* srcNode, ICFGNode* dstNode)$/;"	f	class:ICFG
addRetEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::addRetEdge(NodeID srcId, NodeID dstId, CallSiteID csId)$/;"	f	class:VFG
addRetICFGNode	svf/include/Graphs/ICFG.h	/^    virtual inline RetICFGNode* addRetICFGNode(CallICFGNode* call)$/;"	f	class:SVF::ICFG
addRetIndirectSVFGEdge	svf/lib/Graphs/SVFGOPT.cpp	/^SVFGEdge* SVFGOPT::addRetIndirectSVFGEdge(NodeID srcId, NodeID dstId, CallSiteID csid, const NodeBS& cpts)$/;"	f	class:SVFGOPT
addRetIndirectVFEdge	svf/lib/Graphs/SVFG.cpp	/^SVFGEdge* SVFG::addRetIndirectVFEdge(NodeID srcId, NodeID dstId, const NodeBS& cpts,CallSiteID csId)$/;"	f	class:SVFG
addRetNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addRetNode(NodeID i, const FunObjVar* callGraphNode, const SVFType* type, const ICFGNode* icn)$/;"	f	class:SVF::SVFIR
addRetNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addRetNode(const FunObjVar*, SVFVar *node)$/;"	f	class:SVF::SVFIR
addRetPE	svf/include/Graphs/ICFGEdge.h	/^    inline void addRetPE(const RetPE* ret)$/;"	f	class:SVF::RetCFGEdge
addRetPE	svf/include/Graphs/VFGNode.h	/^    inline void addRetPE(const RetPE* retPE)$/;"	f	class:SVF::FormalRetVFGNode
addRetPE	svf/lib/SVFIR/SVFIR.cpp	/^RetPE* SVFIR::addRetPE(NodeID src, NodeID dst, const CallICFGNode* cs, const FunExitICFGNode* exit)$/;"	f	class:SVFIR
addRevPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void addRevPts(const DataSet &ptsData, const Key& tgr)$/;"	f	class:SVF::MutablePTData
addSUStat	svf/include/DDA/DDAVFSolver.h	/^    inline void addSUStat(const DPIm& dpm, const SVFGNode* node)$/;"	f	class:SVF::DDAVFSolver
addSVFGEdge	svf/include/Graphs/SVFG.h	/^    inline bool addSVFGEdge(SVFGEdge* edge)$/;"	f	class:SVF::SVFG
addSVFGNode	svf/include/Graphs/SVFG.h	/^    virtual inline void addSVFGNode(SVFGNode* node, ICFGNode* icfgNode)$/;"	f	class:SVF::SVFG
addSVFGNodesForAddrTakenVars	svf/lib/Graphs/SVFG.cpp	/^void SVFG::addSVFGNodesForAddrTakenVars()$/;"	f	class:SVFG
addSVFMain	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::addSVFMain()$/;"	f	class:LLVMModuleSet
addSVFStmt	svf/include/Graphs/ICFGNode.h	/^    inline void addSVFStmt(const SVFStmt *edge)$/;"	f	class:SVF::ICFGNode
addSVFTypeInfo	svf-llvm/lib/LLVMModule.cpp	/^SVFType* LLVMModuleSet::addSVFTypeInfo(const Type* T)$/;"	f	class:LLVMModuleSet
addSaberBug	svf/include/Util/SVFBugReport.h	/^    void addSaberBug(GenericBug::BugType bugType, const GenericBug::EventStack &eventStack)$/;"	f	class:SVF::SVFBugReport
addSccCandidate	svf/include/WPA/AndersenPWC.h	/^    inline void addSccCandidate(NodeID nodeId)$/;"	f	class:SVF::AndersenSCD
addSelectStmt	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addSelectStmt(NodeID res, NodeID op1, NodeID op2, NodeID cond)$/;"	f	class:SVF::SVFIRBuilder
addSelectStmt	svf/lib/SVFIR/SVFIR.cpp	/^SelectStmt* SVFIR::addSelectStmt(NodeID res, NodeID op1, NodeID op2, NodeID cond)$/;"	f	class:SVFIR
addSingleRevPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void addSingleRevPts(KeySet &revData, const Key& tgr)$/;"	f	class:SVF::MutablePTData
addSinkToCurSlice	svf/include/SABER/SrcSnkDDA.h	/^    inline void addSinkToCurSlice(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
addSrcToCSID	svf/include/SABER/LeakChecker.h	/^    inline void addSrcToCSID(const SVFGNode* src, const CallICFGNode* cs)$/;"	f	class:SVF::LeakChecker
addStInfo	svf/include/Graphs/IRGraph.h	/^    inline void addStInfo(StInfo* stInfo)$/;"	f	class:SVF::IRGraph
addStackObjNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addStackObjNode(NodeID i, ObjTypeInfo* ti, const SVFType* type, const ICFGNode* node)$/;"	f	class:SVF::SVFIR
addStartRoutineOfCxtThread	svf/include/MTA/TCT.h	/^    void addStartRoutineOfCxtThread(const FunObjVar* fun, const CxtThread& ct)$/;"	f	class:SVF::TCT
addStmtVFGNode	svf/include/Graphs/VFG.h	/^    inline void addStmtVFGNode(StmtVFGNode* node, const PAGEdge* pagEdge)$/;"	f	class:SVF::VFG
addStoreCGEdge	svf/lib/Graphs/ConsG.cpp	/^StoreCGEdge* ConstraintGraph::addStoreCGEdge(NodeID src, NodeID dst)$/;"	f	class:ConstraintGraph
addStoreEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addStoreEdge(NodeID src, NodeID dst)$/;"	f	class:SVF::SVFIRBuilder
addStoreStmt	svf/lib/SVFIR/SVFIR.cpp	/^StoreStmt* SVFIR::addStoreStmt(NodeID src, NodeID dst, const ICFGNode* curVal)$/;"	f	class:SVFIR
addStoreVFGNode	svf/include/Graphs/VFG.h	/^    void addStoreVFGNode(const StoreStmt* store)$/;"	f	class:SVF::VFG
addSubNode	svf/include/Graphs/ICFG.h	/^    void addSubNode(const ICFGNode* rep, const ICFGNode* sub)$/;"	f	class:SVF::ICFG
addSubNode	svf/include/WPA/Steensgaard.h	/^    inline void addSubNode(NodeID node, NodeID sub)$/;"	f	class:SVF::Steensgaard
addSubNodes	svf/include/Graphs/SCC.h	/^        inline void addSubNodes(NodeID n)$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
addSucc	svf/include/CFL/CFLSolver.h	/^    inline bool addSucc(const NodeID key, const NodeID dst, const Label ty)$/;"	f	class:SVF::POCRSolver
addSuccBasicBlock	svf/include/Graphs/BasicBlockG.h	/^    inline void addSuccBasicBlock(const SVFBasicBlock* succ2)$/;"	f	class:SVF::SVFBasicBlock
addSuccs	svf/include/CFL/CFLSolver.h	/^    inline bool addSuccs(const NodeID key, const NodeBS& data, const Label ty)$/;"	f	class:SVF::POCRSolver
addSymmetricLoopJoin	svf/include/MTA/MHP.h	/^    inline void addSymmetricLoopJoin(const CxtStmt& cs, LoopBBs& lp)$/;"	f	class:SVF::ForkJoinAnalysis
addTCTEdge	svf/include/MTA/TCT.h	/^    inline bool addTCTEdge(TCTNode* src, TCTNode* dst)$/;"	f	class:SVF::TCT
addTCTNode	svf/include/MTA/TCT.h	/^    inline TCTNode* addTCTNode(const CxtThread& ct)$/;"	f	class:SVF::TCT
addThreadForkEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addThreadForkEdge(NodeID src, NodeID dst, const CallICFGNode* cs, const FunEntryICFGNode* entry)$/;"	f	class:SVF::SVFIRBuilder
addThreadForkEdgeSetMap	svf/include/Graphs/ThreadCallGraph.h	/^    inline void addThreadForkEdgeSetMap(const CallICFGNode* cs, ThreadForkEdge* edge)$/;"	f	class:SVF::ThreadCallGraph
addThreadForkPE	svf/lib/SVFIR/SVFIR.cpp	/^TDForkPE* SVFIR::addThreadForkPE(NodeID src, NodeID dst, const CallICFGNode* cs, const FunEntryICFGNode* entry)$/;"	f	class:SVFIR
addThreadJoinEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addThreadJoinEdge(NodeID src, NodeID dst, const CallICFGNode* cs, const FunExitICFGNode* exit)$/;"	f	class:SVF::SVFIRBuilder
addThreadJoinEdgeSetMap	svf/include/Graphs/ThreadCallGraph.h	/^    inline void addThreadJoinEdgeSetMap(const CallICFGNode* cs, ThreadJoinEdge* edge)$/;"	f	class:SVF::ThreadCallGraph
addThreadJoinPE	svf/lib/SVFIR/SVFIR.cpp	/^TDJoinPE* SVFIR::addThreadJoinPE(NodeID src, NodeID dst, const CallICFGNode* cs, const FunExitICFGNode* exit)$/;"	f	class:SVFIR
addThreadMHPIndirectVFEdge	svf/lib/Graphs/SVFG.cpp	/^SVFGEdge* SVFG::addThreadMHPIndirectVFEdge(NodeID srcId, NodeID dstId, const NodeBS& cpts)$/;"	f	class:SVFG
addToBB2LoopMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline void addToBB2LoopMap(const SVFBasicBlock* bb, const SVFBasicBlock* loopBB)$/;"	f	class:SVF::SVFLoopAndDomInfo
addToBackwardSlice	svf/include/Graphs/SVFGStat.h	/^    inline void addToBackwardSlice(const SVFGNode* node)$/;"	f	class:SVF::SVFGStat
addToBackwardSlice	svf/include/SABER/ProgSlice.h	/^    inline void addToBackwardSlice(const SVFGNode* node)$/;"	f	class:SVF::ProgSlice
addToCurBackwardSlice	svf/include/SABER/SrcSnkDDA.h	/^    inline void addToCurBackwardSlice(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
addToCurForwardSlice	svf/include/SABER/SrcSnkDDA.h	/^    inline void addToCurForwardSlice(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
addToForwardSlice	svf/include/Graphs/SVFGStat.h	/^    inline void addToForwardSlice(const SVFGNode* node)$/;"	f	class:SVF::SVFGStat
addToForwardSlice	svf/include/SABER/ProgSlice.h	/^    inline void addToForwardSlice(const SVFGNode* node)$/;"	f	class:SVF::ProgSlice
addToFullJoin	svf/include/MTA/MHP.h	/^    inline void addToFullJoin(NodeID tid1, NodeID tid2)$/;"	f	class:SVF::ForkJoinAnalysis
addToGepObjOffsetFromBase	svf/include/AE/Svfexe/AEDetector.h	/^    void addToGepObjOffsetFromBase(const GepObjVar* obj, const IntervalValue& offset)$/;"	f	class:SVF::BufOverflowDetector
addToHBPair	svf/include/MTA/MHP.h	/^    inline void addToHBPair(NodeID tid1, NodeID tid2)$/;"	f	class:SVF::ForkJoinAnalysis
addToHPPair	svf/include/MTA/MHP.h	/^    inline void addToHPPair(NodeID tid1, NodeID tid2)$/;"	f	class:SVF::ForkJoinAnalysis
addToPartial	svf/include/MTA/MHP.h	/^    inline void addToPartial(NodeID tid1, NodeID tid2)$/;"	f	class:SVF::ForkJoinAnalysis
addToSVFStmtList	svf/include/SVFIR/SVFIR.h	/^    inline void addToSVFStmtList(ICFGNode* inst, SVFStmt* edge)$/;"	f	class:SVF::SVFIR
addToSVFVar2LLVMValueMap	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::addToSVFVar2LLVMValueMap(const Value* val,$/;"	f	class:LLVMModuleSet
addToSinks	svf/include/Graphs/SVFGStat.h	/^    inline void addToSinks(const SVFGNode* node)$/;"	f	class:SVF::SVFGStat
addToSinks	svf/include/SABER/ProgSlice.h	/^    inline void addToSinks(const SVFGNode* node)$/;"	f	class:SVF::ProgSlice
addToSinks	svf/include/SABER/SrcSnkDDA.h	/^    inline void addToSinks(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
addToSources	svf/include/Graphs/SVFGStat.h	/^    inline void addToSources(const SVFGNode* node)$/;"	f	class:SVF::SVFGStat
addToSources	svf/include/SABER/SrcSnkDDA.h	/^    inline void addToSources(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
addToStmt2TypeMap	svf/include/SVFIR/SVFIR.h	/^    inline void addToStmt2TypeMap(SVFStmt* edge)$/;"	f	class:SVF::SVFIR
addToTypeLocSetsMap	svf/include/SVFIR/SVFIR.h	/^    inline void addToTypeLocSetsMap(NodeID argId, SVFTypeLocSetsPair& locSets)$/;"	f	class:SVF::SVFIR
addTopLevelNodeTimeEnd	svf/include/Graphs/SVFGStat.h	/^    double addTopLevelNodeTimeEnd;$/;"	m	class:SVF::SVFGStat
addTopLevelNodeTimeStart	svf/include/Graphs/SVFGStat.h	/^    double addTopLevelNodeTimeStart;$/;"	m	class:SVF::SVFGStat
addTypeInfo	svf/include/Graphs/IRGraph.h	/^    inline void addTypeInfo(const SVFType* ty)$/;"	f	class:SVF::IRGraph
addTypedef	svf-llvm/include/SVF-LLVM/DCHG.h	/^    void addTypedef(const DIDerivedType *diTypedef)$/;"	f	class:SVF::DCHNode
addUnaryOPEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addUnaryOPEdge(NodeID src, NodeID dst, u32_t opcode)$/;"	f	class:SVF::SVFIRBuilder
addUnaryOPStmt	svf/lib/SVFIR/SVFIR.cpp	/^UnaryOPStmt* SVFIR::addUnaryOPStmt(NodeID src, NodeID dst, u32_t opcode)$/;"	f	class:SVFIR
addUnaryOPVFGNode	svf/include/Graphs/VFG.h	/^    inline void addUnaryOPVFGNode(const UnaryOPStmt* edge)$/;"	f	class:SVF::VFG
addVFGEdge	svf/include/Graphs/VFG.h	/^    inline bool addVFGEdge(VFGEdge* edge)$/;"	f	class:SVF::VFG
addVFGNode	svf/include/Graphs/ICFGNode.h	/^    inline void addVFGNode(const VFGNode *vfgNode)$/;"	f	class:SVF::ICFGNode
addVFGNode	svf/include/Graphs/VFG.h	/^    virtual inline void addVFGNode(VFGNode* vfgNode, ICFGNode* icfgNode)$/;"	f	class:SVF::VFG
addVFGNodes	svf/lib/Graphs/VFG.cpp	/^void VFG::addVFGNodes()$/;"	f	class:VFG
addValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addValNode(NodeID i, const SVFType* type, const ICFGNode* icfgNode)$/;"	f	class:SVF::SVFIR
addValNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addValNode(SVFVar *node)$/;"	f	class:SVF::SVFIR
addVarargNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addVarargNode(NodeID i, const FunObjVar* val, const SVFType* type, const ICFGNode* n)$/;"	f	class:SVF::SVFIR
addVarargNode	svf/include/SVFIR/SVFIR.h	/^    inline NodeID addVarargNode(const FunObjVar*, SVFVar *node)$/;"	f	class:SVF::SVFIR
addVariantGepCGEdge	svf/lib/Graphs/ConsG.cpp	/^VariantGepCGEdge* ConstraintGraph::addVariantGepCGEdge(NodeID src, NodeID dst)$/;"	f	class:ConstraintGraph
addVariantGepEdge	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void addVariantGepEdge(NodeID src, NodeID dst, const AccessPath& ap)$/;"	f	class:SVF::SVFIRBuilder
addVariantGepStmt	svf/lib/SVFIR/SVFIR.cpp	/^GepStmt* SVFIR::addVariantGepStmt(NodeID src, NodeID dst, const AccessPath& ap)$/;"	f	class:SVFIR
addVirtualFunctionVector	svf/include/Graphs/CHG.h	/^    void addVirtualFunctionVector(FuncVector vfuncvec)$/;"	f	class:SVF::CHNode
add_const_interp	z3.obj/include/z3++.h	/^        void add_const_interp(func_decl& f, expr& value) {$/;"	f	class:z3::model
add_const_past_pointer	svf/include/Util/Casting.h	/^struct add_const_past_pointer$/;"	s	namespace:SVF::SVFUtil
add_const_past_pointer	svf/include/Util/Casting.h	/^struct add_const_past_pointer<T, std::enable_if_t<std::is_pointer<T>::value>>$/;"	s	namespace:SVF::SVFUtil
add_cover	z3.obj/bin/python/z3/z3.py	/^    def add_cover(self, level, predicate, property):$/;"	m	class:Fixedpoint
add_cover	z3.obj/include/z3++.h	/^        void add_cover(int level, func_decl& p, expr& property) { Z3_fixedpoint_add_cover(ctx(), m_fp, level, p, property); check_error();  }$/;"	f	class:z3::fixedpoint
add_entry	z3.obj/include/z3++.h	/^        void add_entry(expr_vector const& args, expr& value) {$/;"	f	class:z3::func_interp
add_fact	z3.obj/include/z3++.h	/^        void add_fact(func_decl& f, unsigned * args) { Z3_fixedpoint_add_fact(ctx(), m_fp, f, f.arity(), args); check_error(); }$/;"	f	class:z3::fixedpoint
add_func_interp	z3.obj/include/z3++.h	/^        func_interp add_func_interp(func_decl& f, expr& else_val) {$/;"	f	class:z3::model
add_item_to_array	svf/lib/Util/cJSON.cpp	/^static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)$/;"	f	file:
add_item_to_object	svf/lib/Util/cJSON.cpp	/^static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)$/;"	f	file:
add_lvalue_reference_if_not_pointer	svf/include/Util/Casting.h	/^struct add_lvalue_reference_if_not_pointer$/;"	s	namespace:SVF::SVFUtil
add_lvalue_reference_if_not_pointer	svf/include/Util/Casting.h	/^struct add_lvalue_reference_if_not_pointer<$/;"	s	namespace:SVF::SVFUtil
add_paren	z3.obj/bin/python/z3/z3printer.py	/^    def add_paren(self, a):$/;"	m	class:Formatter
add_rule	z3.obj/bin/python/z3/z3.py	/^    def add_rule(self, head, body = None, name = None):$/;"	m	class:Fixedpoint
add_rule	z3.obj/include/z3++.h	/^        void add_rule(expr& rule, symbol const& name) { Z3_fixedpoint_add_rule(ctx(), m_fp, rule, name); check_error(); }$/;"	f	class:z3::fixedpoint
add_soft	z3.obj/bin/python/z3/z3.py	/^    def add_soft(self, arg, weight = "1", id = None):$/;"	m	class:Optimize
addrTime	svf/include/WPA/FlowSensitive.h	/^    double addrTime;	\/\/\/< time of handling address edges$/;"	m	class:SVF::FlowSensitive
addressInEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy addressInEdges; \/\/\/< all incoming address edge of this node$/;"	m	class:SVF::ConstraintNode
addressOutEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy addressOutEdges; \/\/\/< all outgoing address edge of this node$/;"	m	class:SVF::ConstraintNode
addrs	svf/include/AE/Core/AbstractValue.h	/^    AddressValue addrs;$/;"	m	class:SVF::AbstractValue
algebraic_i	z3.obj/include/z3++.h	/^        unsigned algebraic_i() const {$/;"	f	class:z3::expr
algebraic_lower	z3.obj/include/z3++.h	/^        expr algebraic_lower(unsigned precision) const { $/;"	f	class:z3::expr
algebraic_poly	z3.obj/include/z3++.h	/^        expr_vector algebraic_poly() const {$/;"	f	class:z3::expr
algebraic_upper	z3.obj/include/z3++.h	/^        expr algebraic_upper(unsigned precision) const { $/;"	f	class:z3::expr
alias	svf/include/CFL/CFLAlias.h	/^    virtual AliasResult alias(NodeID node1, NodeID node2)$/;"	f	class:SVF::CFLAlias
alias	svf/include/DDA/DDAPass.h	/^    virtual AliasResult alias(const SVFVar* V1,	const SVFVar* V2)$/;"	f	class:SVF::DDAPass
alias	svf/include/MTA/LockAnalysis.h	/^    inline bool alias(const CxtLockSet& lockset1,const CxtLockSet& lockset2)$/;"	f	class:SVF::LockAnalysis
alias	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual AliasResult alias(const CVar& var1, const CVar& var2)$/;"	f	class:SVF::CondPTAImpl
alias	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline AliasResult alias(NodeID node1, NodeID node2)$/;"	f	class:SVF::CondPTAImpl
alias	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline AliasResult alias(const CPtSet& pts1, const CPtSet& pts2)$/;"	f	class:SVF::CondPTAImpl
alias	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline AliasResult alias(const SVFVar* V1, const SVFVar* V2)$/;"	f	class:SVF::CondPTAImpl
alias	svf/lib/DDA/DDAPass.cpp	/^AliasResult DDAPass::alias(NodeID node1, NodeID node2)$/;"	f	class:DDAPass
alias	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^AliasResult BVDataPTAImpl::alias(NodeID node1, NodeID node2)$/;"	f	class:BVDataPTAImpl
alias	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^AliasResult BVDataPTAImpl::alias(const PointsTo& p1, const PointsTo& p2)$/;"	f	class:BVDataPTAImpl
aliasQuery	svf-llvm/tools/Example/svf-ex.cpp	/^SVF::AliasResult aliasQuery(PointerAnalysis* pta, const SVFVar* v1, const SVFVar* v2)$/;"	f
aliasTestFailMayAlias	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestFailMayAlias;$/;"	m	class:SVF::PointerAnalysis
aliasTestFailMayAlias	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestFailMayAlias        = "EXPECTEDFAIL_MAYALIAS";$/;"	m	class:PointerAnalysis	file:
aliasTestFailMayAliasMangled	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestFailMayAliasMangled;$/;"	m	class:SVF::PointerAnalysis
aliasTestFailMayAliasMangled	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestFailMayAliasMangled = "_Z21EXPECTEDFAIL_MAYALIASPvS_";$/;"	m	class:PointerAnalysis	file:
aliasTestFailNoAlias	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestFailNoAlias;$/;"	m	class:SVF::PointerAnalysis
aliasTestFailNoAlias	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestFailNoAlias         = "EXPECTEDFAIL_NOALIAS";$/;"	m	class:PointerAnalysis	file:
aliasTestFailNoAliasMangled	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestFailNoAliasMangled;$/;"	m	class:SVF::PointerAnalysis
aliasTestFailNoAliasMangled	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestFailNoAliasMangled  = "_Z20EXPECTEDFAIL_NOALIASPvS_";$/;"	m	class:PointerAnalysis	file:
aliasTestMayAlias	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestMayAlias;$/;"	m	class:SVF::PointerAnalysis
aliasTestMayAlias	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestMayAlias            = "MAYALIAS";$/;"	m	class:PointerAnalysis	file:
aliasTestMayAliasMangled	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestMayAliasMangled;$/;"	m	class:SVF::PointerAnalysis
aliasTestMayAliasMangled	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestMayAliasMangled     = "_Z8MAYALIASPvS_";$/;"	m	class:PointerAnalysis	file:
aliasTestMustAlias	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestMustAlias;$/;"	m	class:SVF::PointerAnalysis
aliasTestMustAlias	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestMustAlias           = "MUSTALIAS";$/;"	m	class:PointerAnalysis	file:
aliasTestMustAliasMangled	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestMustAliasMangled;$/;"	m	class:SVF::PointerAnalysis
aliasTestMustAliasMangled	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestMustAliasMangled    = "_Z9MUSTALIASPvS_";$/;"	m	class:PointerAnalysis	file:
aliasTestNoAlias	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestNoAlias;$/;"	m	class:SVF::PointerAnalysis
aliasTestNoAlias	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestNoAlias             = "NOALIAS";$/;"	m	class:PointerAnalysis	file:
aliasTestNoAliasMangled	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestNoAliasMangled;$/;"	m	class:SVF::PointerAnalysis
aliasTestNoAliasMangled	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestNoAliasMangled      = "_Z7NOALIASPvS_";$/;"	m	class:PointerAnalysis	file:
aliasTestPartialAlias	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestPartialAlias;$/;"	m	class:SVF::PointerAnalysis
aliasTestPartialAlias	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestPartialAlias        = "PARTIALALIAS";$/;"	m	class:PointerAnalysis	file:
aliasTestPartialAliasMangled	svf/include/MemoryModel/PointerAnalysis.h	/^    static const std::string aliasTestPartialAliasMangled;$/;"	m	class:SVF::PointerAnalysis
aliasTestPartialAliasMangled	svf/lib/MemoryModel/PointerAnalysis.cpp	/^const std::string PointerAnalysis::aliasTestPartialAliasMangled = "_Z12PARTIALALIASPvS_";$/;"	m	class:PointerAnalysis	file:
alias_validation	svf/include/MemoryModel/PointerAnalysis.h	/^    bool alias_validation;$/;"	m	class:SVF::PointerAnalysis
aliased	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool aliased(const CondPointsToSet<Cond>& rhs) const$/;"	f	class:SVF::CondPointsToSet
aligned_alloc	svf-llvm/lib/extapi.c	/^void* aligned_alloc(unsigned long size1, unsigned long size2)$/;"	f
allArgs	svf/include/SVFIR/SVFVariables.h	/^    std::vector<const ArgValVar*> allArgs;    \/\/\/ all formal arguments of this function$/;"	m	class:SVF::FunObjVar
allGlobals	svf/include/MSSA/MemRegion.h	/^    NodeBS allGlobals;$/;"	m	class:SVF::MRGenerator
allICFGNodes	svf/include/Graphs/BasicBlockG.h	/^    std::vector<const ICFGNode*> allICFGNodes;    \/\/\/< all ICFGNodes in this BasicBlock$/;"	m	class:SVF::SVFBasicBlock
allocLowerBound	svf/include/Util/SVFBugReport.h	/^    s64_t allocLowerBound, allocUpperBound, accessLowerBound, accessUpperBound;$/;"	m	class:SVF::BufferOverflowBug
allocUpperBound	svf/include/Util/SVFBugReport.h	/^    s64_t allocLowerBound, allocUpperBound, accessLowerBound, accessUpperBound;$/;"	m	class:SVF::BufferOverflowBug
allocate	svf/lib/SABER/SaberCondAllocator.cpp	/^void SaberCondAllocator::allocate()$/;"	f	class:SaberCondAllocator
allocate	svf/lib/Util/cJSON.cpp	/^    void *(CJSON_CDECL *allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
allocateForBB	svf/lib/SABER/SaberCondAllocator.cpp	/^void SaberCondAllocator::allocateForBB(const SVFBasicBlock &bb)$/;"	f	class:SaberCondAllocator
allocateGepObjectId	svf/lib/Util/NodeIDAllocator.cpp	/^NodeID NodeIDAllocator::allocateGepObjectId(NodeID base, u32_t offset, u32_t maxFieldLimit)$/;"	f	class:SVF::NodeIDAllocator
allocateObjectId	svf/lib/Util/NodeIDAllocator.cpp	/^NodeID NodeIDAllocator::allocateObjectId(void)$/;"	f	class:SVF::NodeIDAllocator
allocateValueId	svf/lib/Util/NodeIDAllocator.cpp	/^NodeID NodeIDAllocator::allocateValueId(void)$/;"	f	class:SVF::NodeIDAllocator
allocator	svf/include/Util/NodeIDAllocator.h	/^    static NodeIDAllocator *allocator;$/;"	m	class:SVF::NodeIDAllocator
allocator	svf/lib/Util/NodeIDAllocator.cpp	/^NodeIDAllocator *NodeIDAllocator::allocator = nullptr;$/;"	m	class:SVF::NodeIDAllocator	file:
analyse	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::analyse()$/;"	f	class:AbstractInterpretation
analyze	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::analyze()$/;"	f	class:SVF::CFLBase
analyze	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::analyze()$/;"	f	class:LockAnalysis
analyze	svf/lib/MTA/MHP.cpp	/^void MHP::analyze()$/;"	f	class:MHP
analyze	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::analyze()$/;"	f	class:SrcSnkDDA
analyze	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::analyze()$/;"	f	class:AndersenBase
analyze	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::analyze()$/;"	f	class:FlowSensitive
analyze	svf/lib/WPA/TypeAnalysis.cpp	/^void TypeAnalysis::analyze()$/;"	f	class:TypeAnalysis
analyzeForkJoinPair	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::analyzeForkJoinPair()$/;"	f	class:ForkJoinAnalysis
analyzeHeapAllocByteSize	svf-llvm/lib/SymbolTableBuilder.cpp	/^u32_t SymbolTableBuilder::analyzeHeapAllocByteSize(const Value* val)$/;"	f	class:SymbolTableBuilder
analyzeHeapObjType	svf-llvm/lib/SymbolTableBuilder.cpp	/^u32_t SymbolTableBuilder::analyzeHeapObjType(ObjTypeInfo* typeinfo, const Value* val)$/;"	f	class:SymbolTableBuilder
analyzeInterleaving	svf/lib/MTA/MHP.cpp	/^void MHP::analyzeInterleaving()$/;"	f	class:MHP
analyzeIntraProcedualLock	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::analyzeIntraProcedualLock()$/;"	f	class:LockAnalysis
analyzeLockSpanCxtStmt	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::analyzeLockSpanCxtStmt()$/;"	f	class:LockAnalysis
analyzeObjType	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::analyzeObjType(ObjTypeInfo* typeinfo, const Value* val)$/;"	f	class:SymbolTableBuilder
analyzeStaticObjType	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::analyzeStaticObjType(ObjTypeInfo* typeinfo, const Value* val)$/;"	f	class:SymbolTableBuilder
analyzeVTables	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::analyzeVTables(const Module &M)$/;"	f	class:CHGBuilder
ander	svf/include/WPA/FlowSensitive.h	/^    AndersenWaveDiff *ander;$/;"	m	class:SVF::FlowSensitive
annotateSlice	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::annotateSlice(ProgSlice* slice)$/;"	f	class:SrcSnkDDA
answerQueries	svf/lib/DDA/DDAClient.cpp	/^void DDAClient::answerQueries(PointerAnalysis* pta)$/;"	f	class:DDAClient
ap	svf/include/Graphs/ConsGEdge.h	/^    AccessPath ap;	\/\/\/< Access path of the gep edge$/;"	m	class:SVF::NormalGepCGEdge
ap	svf/include/SVFIR/SVFStatements.h	/^    AccessPath ap;	\/\/\/< Access path of the GEP edge$/;"	m	class:SVF::GepStmt
ap	svf/include/SVFIR/SVFVariables.h	/^    AccessPath ap;	\/\/ AccessPath$/;"	m	class:SVF::GepValVar
apOffset	svf/include/SVFIR/SVFVariables.h	/^    APOffset apOffset = 0;$/;"	m	class:SVF::GepObjVar
append	z3.obj/bin/python/z3/z3.py	/^    def append(self, *args):$/;"	m	class:Fixedpoint
append	z3.obj/bin/python/z3/z3.py	/^    def append(self, *args):$/;"	m	class:Goal
append	z3.obj/bin/python/z3/z3.py	/^    def append(self, *args):$/;"	m	class:Solver
append_log	z3.obj/bin/python/z3/z3.py	/^def append_log(s):$/;"	f
apply	z3.obj/bin/python/z3/z3.py	/^    def apply(self, goal, *arguments, **keywords):$/;"	m	class:Tactic
apply	z3.obj/include/z3++.h	/^        apply_result apply(goal const & g) const {$/;"	f	class:z3::tactic
apply	z3.obj/include/z3++.h	/^        double apply(goal const & g) const { double r = Z3_probe_apply(ctx(), m_probe, g); check_error(); return r; }$/;"	f	class:z3::probe
apply_result	z3.obj/include/z3++.h	/^        apply_result(apply_result const & s):object(s) { init(s.m_apply_result); }$/;"	f	class:z3::apply_result
apply_result	z3.obj/include/z3++.h	/^        apply_result(context & c, Z3_apply_result s):object(c) { init(s); }$/;"	f	class:z3::apply_result
apply_result	z3.obj/include/z3++.h	/^    class apply_result : public object {$/;"	c	namespace:z3
approx	z3.obj/bin/python/z3/z3.py	/^    def approx(self, precision=10):$/;"	m	class:AlgebraicNumRef
approx	z3.obj/bin/python/z3/z3num.py	/^    def approx(self, precision=10):$/;"	m	class:Numeral
arg	z3.obj/bin/python/z3/z3.py	/^    def arg(self, idx):$/;"	m	class:ExprRef
arg	z3.obj/include/z3++.h	/^        expr arg(unsigned i) const { Z3_ast r = Z3_func_entry_get_arg(ctx(), m_entry, i); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::func_entry
arg	z3.obj/include/z3++.h	/^        expr arg(unsigned i) const { Z3_ast r = Z3_get_app_arg(ctx(), *this, i); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
argNo	svf/include/SVFIR/SVFVariables.h	/^    u32_t argNo;$/;"	m	class:SVF::ArgValVar
arg_empty	svf/include/Graphs/ICFGNode.h	/^    inline bool arg_empty() const$/;"	f	class:SVF::CallICFGNode
arg_size	svf/include/Graphs/ICFGNode.h	/^    inline u32_t arg_size() const$/;"	f	class:SVF::CallICFGNode
arg_size	svf/include/SVFIR/SVFVariables.h	/^    u32_t inline arg_size() const$/;"	f	class:SVF::FunObjVar
arg_value	z3.obj/bin/python/z3/z3.py	/^    def arg_value(self, idx):$/;"	m	class:FuncEntry
args2params	z3.obj/bin/python/z3/z3.py	/^def args2params(arguments, keywords, ctx=None):$/;"	f
arity	z3.obj/bin/python/z3/z3.py	/^    def arity(self):$/;"	m	class:FuncDeclRef
arity	z3.obj/bin/python/z3/z3.py	/^    def arity(self):$/;"	m	class:FuncInterp
arity	z3.obj/include/z3++.h	/^        unsigned arity() const { return Z3_get_arity(ctx(), *this); }$/;"	f	class:z3::func_decl
arrSize	svf/include/SVFIR/SVFStatements.h	/^    std::vector<SVFVar*> arrSize;	\/\/\/< Array size of the allocated memory$/;"	m	class:SVF::AddrStmt
array	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);$/;"	v
array	z3.obj/include/z3++.h	/^        array(unsigned sz):m_size(sz) { m_array = new T[sz]; }$/;"	f	class:z3::array
array	z3.obj/include/z3++.h	/^    array<T>::array(ast_vector_tpl<T2> const & v) {$/;"	f	class:z3::array
array	z3.obj/include/z3++.h	/^    class array {$/;"	c	namespace:z3
array_domain	z3.obj/include/z3++.h	/^        sort array_domain() const { assert(is_array()); Z3_sort s = Z3_get_array_sort_domain(ctx(), *this); check_error(); return sort(ctx(), s); }$/;"	f	class:z3::sort
array_range	z3.obj/include/z3++.h	/^        sort array_range() const { assert(is_array()); Z3_sort s = Z3_get_array_sort_range(ctx(), *this); check_error(); return sort(ctx(), s); }$/;"	f	class:z3::sort
array_sort	z3.obj/include/z3++.h	/^    inline sort context::array_sort(sort d, sort r) { Z3_sort s = Z3_mk_array_sort(m_ctx, d, r); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
array_sort	z3.obj/include/z3++.h	/^    inline sort context::array_sort(sort_vector const& d, sort r) {$/;"	f	class:z3::context
as_array	z3.obj/include/z3++.h	/^    inline expr as_array(func_decl & f) {$/;"	f	namespace:z3
as_ast	z3.obj/bin/python/z3/z3.py	/^    def as_ast(self):$/;"	m	class:AstRef
as_ast	z3.obj/bin/python/z3/z3.py	/^    def as_ast(self):$/;"	m	class:ExprRef
as_ast	z3.obj/bin/python/z3/z3.py	/^    def as_ast(self):$/;"	m	class:FuncDeclRef
as_ast	z3.obj/bin/python/z3/z3.py	/^    def as_ast(self):$/;"	m	class:PatternRef
as_ast	z3.obj/bin/python/z3/z3.py	/^    def as_ast(self):$/;"	m	class:QuantifierRef
as_ast	z3.obj/bin/python/z3/z3.py	/^    def as_ast(self):$/;"	m	class:SortRef
as_ast	z3.obj/bin/python/z3/z3num.py	/^    def as_ast(self):$/;"	m	class:Numeral
as_decimal	z3.obj/bin/python/z3/z3.py	/^    def as_decimal(self, prec):$/;"	m	class:AlgebraicNumRef
as_decimal	z3.obj/bin/python/z3/z3.py	/^    def as_decimal(self, prec):$/;"	m	class:RatNumRef
as_expr	z3.obj/bin/python/z3/z3.py	/^    def as_expr(self):$/;"	m	class:ApplyResult
as_expr	z3.obj/bin/python/z3/z3.py	/^    def as_expr(self):$/;"	m	class:Goal
as_expr	z3.obj/include/z3++.h	/^        expr as_expr() const {$/;"	f	class:z3::goal
as_fraction	z3.obj/bin/python/z3/z3.py	/^    def as_fraction(self):$/;"	m	class:RatNumRef
as_fraction	z3.obj/bin/python/z3/z3num.py	/^    def as_fraction(self):$/;"	m	class:Numeral
as_func_decl	z3.obj/bin/python/z3/z3.py	/^    def as_func_decl(self):$/;"	m	class:FuncDeclRef
as_list	z3.obj/bin/python/z3/z3.py	/^    def as_list(self):$/;"	m	class:FuncEntry
as_list	z3.obj/bin/python/z3/z3.py	/^    def as_list(self):$/;"	m	class:FuncInterp
as_long	z3.obj/bin/python/z3/z3.py	/^    def as_long(self):$/;"	m	class:BitVecNumRef
as_long	z3.obj/bin/python/z3/z3.py	/^    def as_long(self):$/;"	m	class:FiniteDomainNumRef
as_long	z3.obj/bin/python/z3/z3.py	/^    def as_long(self):$/;"	m	class:IntNumRef
as_long	z3.obj/bin/python/z3/z3.py	/^    def as_long(self):$/;"	m	class:RatNumRef
as_long	z3.obj/bin/python/z3/z3num.py	/^    def as_long(self):$/;"	m	class:Numeral
as_signed_long	z3.obj/bin/python/z3/z3.py	/^    def as_signed_long(self):$/;"	m	class:BitVecNumRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:BitVecNumRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:FPNumRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:FPRMRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:FPRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:FiniteDomainNumRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:FiniteDomainRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:IntNumRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:RatNumRef
as_string	z3.obj/bin/python/z3/z3.py	/^    def as_string(self):$/;"	m	class:SeqRef
as_tuple	z3.obj/bin/python/z3/z3printer.py	/^    def as_tuple(self):$/;"	m	class:ChoiceFormatObject
as_tuple	z3.obj/bin/python/z3/z3printer.py	/^    def as_tuple(self):$/;"	m	class:ComposeFormatObject
as_tuple	z3.obj/bin/python/z3/z3printer.py	/^    def as_tuple(self):$/;"	m	class:FormatObject
as_tuple	z3.obj/bin/python/z3/z3printer.py	/^    def as_tuple(self):$/;"	m	class:IndentFormatObject
as_tuple	z3.obj/bin/python/z3/z3printer.py	/^    def as_tuple(self):$/;"	m	class:LineBreakFormatObject
as_tuple	z3.obj/bin/python/z3/z3printer.py	/^    def as_tuple(self):$/;"	m	class:StringFormatObject
asctime	svf-llvm/lib/extapi.c	/^char *asctime(const void *timeptr)$/;"	f
asctime_r	svf-llvm/lib/extapi.c	/^char *asctime_r(const void *tm, char *buf)$/;"	f
ashr	svf/include/Util/Z3Expr.h	/^    friend Z3Expr ashr(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
ashr	z3.obj/include/z3++.h	/^    inline expr ashr(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvashr(a.ctx(), a, b)); }$/;"	f	namespace:z3
ashr	z3.obj/include/z3++.h	/^    inline expr ashr(expr const & a, int b) { return ashr(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
ashr	z3.obj/include/z3++.h	/^    inline expr ashr(int a, expr const & b) { return ashr(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
asprintf	svf-llvm/lib/extapi.c	/^int asprintf(char **restrict strp, const char *restrict fmt, ...)$/;"	f
assert_and_track	z3.obj/bin/python/z3/z3.py	/^    def assert_and_track(self, a, p):$/;"	m	class:Optimize
assert_and_track	z3.obj/bin/python/z3/z3.py	/^    def assert_and_track(self, a, p):$/;"	m	class:Solver
assert_exprs	z3.obj/bin/python/z3/z3.py	/^    def assert_exprs(self, *args):$/;"	m	class:Fixedpoint
assert_exprs	z3.obj/bin/python/z3/z3.py	/^    def assert_exprs(self, *args):$/;"	m	class:Goal
assert_exprs	z3.obj/bin/python/z3/z3.py	/^    def assert_exprs(self, *args):$/;"	m	class:Optimize
assert_exprs	z3.obj/bin/python/z3/z3.py	/^    def assert_exprs(self, *args):$/;"	m	class:Solver
assertions	z3.obj/bin/python/z3/z3.py	/^    def assertions(self):$/;"	m	class:Optimize
assertions	z3.obj/bin/python/z3/z3.py	/^    def assertions(self):$/;"	m	class:Solver
assertions	z3.obj/include/z3++.h	/^        expr_vector assertions() const { Z3_ast_vector r = Z3_fixedpoint_get_assertions(ctx(), m_fp); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::fixedpoint
assertions	z3.obj/include/z3++.h	/^        expr_vector assertions() const { Z3_ast_vector r = Z3_optimize_get_assertions(ctx(), m_opt); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::optimize
assertions	z3.obj/include/z3++.h	/^        expr_vector assertions() const { Z3_ast_vector r = Z3_solver_get_assertions(ctx(), m_solver); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::solver
ast	z3.obj/include/z3++.h	/^        ast(ast const & s):object(s), m_ast(s.m_ast) { Z3_inc_ref(ctx(), m_ast); }$/;"	f	class:z3::ast
ast	z3.obj/include/z3++.h	/^        ast(context & c):object(c), m_ast(0) {}$/;"	f	class:z3::ast
ast	z3.obj/include/z3++.h	/^        ast(context & c, Z3_ast n):object(c), m_ast(n) { Z3_inc_ref(ctx(), m_ast); }$/;"	f	class:z3::ast
ast	z3.obj/include/z3++.h	/^    class ast : public object {$/;"	c	namespace:z3
ast_vector	z3.obj/include/z3++.h	/^    typedef ast_vector_tpl<ast>       ast_vector;$/;"	t	namespace:z3
ast_vector_tpl	z3.obj/include/z3++.h	/^        ast_vector_tpl(ast_vector_tpl const & s):object(s), m_vector(s.m_vector) { Z3_ast_vector_inc_ref(ctx(), m_vector); }$/;"	f	class:z3::ast_vector_tpl
ast_vector_tpl	z3.obj/include/z3++.h	/^        ast_vector_tpl(context & c):object(c) { init(Z3_mk_ast_vector(c)); }$/;"	f	class:z3::ast_vector_tpl
ast_vector_tpl	z3.obj/include/z3++.h	/^        ast_vector_tpl(context & c, Z3_ast_vector v):object(c) { init(v); }$/;"	f	class:z3::ast_vector_tpl
ast_vector_tpl	z3.obj/include/z3++.h	/^        ast_vector_tpl(context& c, ast_vector_tpl const& src): object(c) { init(Z3_ast_vector_translate(src.ctx(), src, c)); }$/;"	f	class:z3::ast_vector_tpl
ast_vector_tpl	z3.obj/include/z3++.h	/^    class ast_vector_tpl : public object {$/;"	c	namespace:z3
at	z3.obj/bin/python/z3/z3.py	/^    def at(self, i):$/;"	m	class:SeqRef
at	z3.obj/include/z3++.h	/^        expr at(expr const& index) const {$/;"	f	class:z3::expr
atEnd	svf/include/MemoryModel/ConditionalPT.h	/^        bool atEnd;$/;"	m	class:SVF::CondPointsToSet::CondPtsSetIterator
atEnd	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::PointsToIterator::atEnd() const$/;"	f	class:SVF::PointsTo::PointsToIterator
atEnd	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::CoreBitVectorIterator::atEnd(void) const$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
atKey	svf/lib/WPA/VersionedFlowSensitive.cpp	/^VersionedVar VersionedFlowSensitive::atKey(NodeID var, Version version)$/;"	f	class:VersionedFlowSensitive
atPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutablePTData<VersionedKey, VersionedKeySet, Data, DataSet> atPTData;$/;"	m	class:SVF::MutableVersionedPTData
atPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPTData<VersionedKey, VersionedKeySet, Data, DataSet> atPTData;$/;"	m	class:SVF::PersistentVersionedPTData
atleast	z3.obj/include/z3++.h	/^    inline expr atleast(expr_vector const& es, unsigned bound) {$/;"	f	namespace:z3
atmost	z3.obj/include/z3++.h	/^    inline expr atmost(expr_vector const& es, unsigned bound) {$/;"	f	namespace:z3
attribute	svf/include/CFL/CFGrammar.h	/^        Attribute attribute: 16;$/;"	m	struct:SVF::GrammarBase::Symbol
attributeKinds	svf/include/CFL/CFGrammar.h	/^    Set<Kind> attributeKinds;$/;"	m	class:SVF::GrammarBase
avgInDegree	svf/include/Graphs/SVFGStat.h	/^    int avgInDegree;	\/\/\/< average in degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
avgIndInDegree	svf/include/Graphs/SVFGStat.h	/^    int avgIndInDegree;	\/\/\/< average indirect in degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
avgIndOutDegree	svf/include/Graphs/SVFGStat.h	/^    int avgIndOutDegree;	\/\/\/< average indirect out degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
avgOutDegree	svf/include/Graphs/SVFGStat.h	/^    int avgOutDegree;	\/\/\/< average out degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
avgWeight	svf/include/Graphs/SVFGStat.h	/^    int avgWeight;	\/\/\/< average weight.$/;"	m	class:SVF::SVFGStat
back	svf/include/Graphs/BasicBlockG.h	/^    inline const ICFGNode* back() const$/;"	f	class:SVF::SVFBasicBlock
back	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFBasicBlock* back() const$/;"	f	class:SVF::FunObjVar
back	svf/include/Util/WorkList.h	/^    inline Data &back()$/;"	f	class:SVF::FILOWorkList
back	z3.obj/include/z3++.h	/^        T back() const { return operator[](size() - 1); }$/;"	f	class:z3::ast_vector_tpl
backICFGEdges	svf/include/MemoryModel/SVFLoop.h	/^    ICFGEdgeSet entryICFGEdges, backICFGEdges, inICFGEdges, outICFGEdges;$/;"	m	class:SVF::SVFLoop
backICFGEdgesBegin	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator backICFGEdgesBegin()$/;"	f	class:SVF::SVFLoop
backICFGEdgesEnd	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator backICFGEdgesEnd()$/;"	f	class:SVF::SVFLoop
backtraceAlongDirectVF	svf/include/DDA/DDAVFSolver.h	/^    void backtraceAlongDirectVF(CPtSet& pts, const DPIm& oldDpm)$/;"	f	class:SVF::DDAVFSolver
backtraceAlongIndirectVF	svf/include/DDA/DDAVFSolver.h	/^    void backtraceAlongIndirectVF(CPtSet& pts, const DPIm& oldDpm)$/;"	f	class:SVF::DDAVFSolver
backtraceToStoreSrc	svf/include/DDA/DDAVFSolver.h	/^    inline void backtraceToStoreSrc(CPtSet& pts, const DPIm& oldDpm)$/;"	f	class:SVF::DDAVFSolver
backwardPropDpm	svf/include/DDA/DDAVFSolver.h	/^    virtual void backwardPropDpm(CPtSet& pts, NodeID ptr,const DPIm& oldDpm,const SVFGEdge* edge)$/;"	f	class:SVF::DDAVFSolver
backwardSlice	svf/include/Graphs/SVFGStat.h	/^    SVFGNodeSet backwardSlice;$/;"	m	class:SVF::SVFGStat
backwardSliceBegin	svf/include/SABER/ProgSlice.h	/^    inline SVFGNodeSetIter backwardSliceBegin() const$/;"	f	class:SVF::ProgSlice
backwardSliceEnd	svf/include/SABER/ProgSlice.h	/^    inline SVFGNodeSetIter backwardSliceEnd() const$/;"	f	class:SVF::ProgSlice
backwardTraverse	svf/include/SABER/SrcSnkSolver.h	/^    virtual void backwardTraverse(DPIm& it)$/;"	f	class:SVF::SrcSnkSolver
backwardTraverse	svf/include/Util/GraphReachSolver.h	/^    virtual void backwardTraverse(DPIm& it)$/;"	f	class:SVF::GraphReachSolver
backwardVisited	svf/include/DDA/DDAVFSolver.h	/^    DPTItemSet backwardVisited;		\/\/\/< visited map during backward traversing$/;"	m	class:SVF::DDAVFSolver
backwardVisited	svf/include/SABER/SrcSnkDDA.h	/^    inline bool backwardVisited(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
backwardslice	svf/include/SABER/ProgSlice.h	/^    SVFGNodeSet backwardslice;				\/\/\/<  the backward slice$/;"	m	class:SVF::ProgSlice
barReplace	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::barReplace(CFGrammar *grammar)$/;"	f	class:CFGNormalizer
base	svf/include/SVFIR/SVFVariables.h	/^    const BaseObjVar* base;$/;"	m	class:SVF::GepObjVar
base	svf/include/SVFIR/SVFVariables.h	/^    const ValVar* base;	\/\/ base node$/;"	m	class:SVF::GepValVar
baseIds	svf/include/Graphs/ConsGNode.h	/^    NodeBS baseIds;$/;"	m	class:SVF::ConstraintNode
basicBlock	svf/include/SVFIR/SVFStatements.h	/^    const SVFBasicBlock* basicBlock; \/\/\/< LLVM BasicBlock$/;"	m	class:SVF::SVFStmt
basicBlockHasRetInst	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::basicBlockHasRetInst(const BasicBlock* bb)$/;"	f	class:LLVMUtil
basis	z3.obj/bin/python/z3/z3.py	/^    def basis(self):$/;"	m	class:ReSortRef
basis	z3.obj/bin/python/z3/z3.py	/^    def basis(self):$/;"	m	class:SeqSortRef
bb	svf/include/Graphs/ICFGNode.h	/^    const SVFBasicBlock* bb;$/;"	m	class:SVF::ICFGNode
bb	svf/include/MSSA/MSSAMuChi.h	/^    const SVFBasicBlock* bb;$/;"	m	class:SVF::LoadMU
bb	svf/include/MSSA/MSSAMuChi.h	/^    const SVFBasicBlock* bb;$/;"	m	class:SVF::MSSAPHI
bb	svf/include/MSSA/MSSAMuChi.h	/^    const SVFBasicBlock* bb;$/;"	m	class:SVF::StoreCHI
bb2LoopMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    Map<const SVFBasicBlock*, LoopBBs> bb2LoopMap;  \/\/\/< map a BasicBlock (if it is in a loop) to all the BasicBlocks in this loop$/;"	m	class:SVF::SVFLoopAndDomInfo
bb2PIdom	svf/include/Util/SVFLoopAndDomInfo.h	/^    Map<const SVFBasicBlock*, const SVFBasicBlock*> bb2PIdom;  \/\/\/< map a BasicBlock to its immediate dominator in pdom tree, used in findNearestCommonPDominator$/;"	m	class:SVF::SVFLoopAndDomInfo
bb2PdomLevel	svf/include/Util/SVFLoopAndDomInfo.h	/^    Map<const SVFBasicBlock*, u32_t> bb2PdomLevel;  \/\/\/< map a BasicBlock to its level in pdom tree, used in findNearestCommonPDominator$/;"	m	class:SVF::SVFLoopAndDomInfo
bb2PhiSetMap	svf/include/MSSA/MemSSA.h	/^    BBToPhiSetMap bb2PhiSetMap;$/;"	m	class:SVF::MemSSA
bbConds	svf/include/SABER/SaberCondAllocator.h	/^    BBCondMap bbConds;						\/\/\/< map basic block to its successors\/predecessors branch conditions$/;"	m	class:SVF::SaberCondAllocator
bbGraph	svf/include/SVFIR/SVFVariables.h	/^    BasicBlockGraph* bbGraph; \/\/\/ the basic block graph of this function$/;"	m	class:SVF::FunObjVar
bbToCondMap	svf/include/SABER/SaberCondAllocator.h	/^    BBToCondMap bbToCondMap;				\/\/\/< map a basic block to its path condition starting from root$/;"	m	class:SVF::SaberCondAllocator
bcopy	svf-llvm/lib/extapi.c	/^void bcopy(const void *s1, void *s2, unsigned long n){}$/;"	f
begin	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    static generic_bridge_gep_type_iterator begin(Type* Ty, ItTy It)$/;"	f	class:llvm::generic_bridge_gep_type_iterator
begin	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    static generic_bridge_gep_type_iterator begin(Type* Ty, unsigned AddrSpace,$/;"	f	class:llvm::generic_bridge_gep_type_iterator
begin	svf/include/AE/Core/AddressValue.h	/^    AddrSet::const_iterator begin() const$/;"	f	class:SVF::AddressValue
begin	svf/include/CFL/CFLSolver.h	/^    inline const_iterator begin() const$/;"	f	class:SVF::POCRSolver
begin	svf/include/CFL/CFLSolver.h	/^    inline iterator begin()$/;"	f	class:SVF::POCRSolver
begin	svf/include/Graphs/BasicBlockG.h	/^    inline const_iterator begin() const$/;"	f	class:SVF::SVFBasicBlock
begin	svf/include/Graphs/GenericGraph.h	/^    inline const_iterator begin() const$/;"	f	class:SVF::GenericGraph
begin	svf/include/Graphs/GenericGraph.h	/^    inline iterator begin()$/;"	f	class:SVF::GenericGraph
begin	svf/include/Graphs/WTO.h	/^    Iterator begin() const$/;"	f	class:SVF::WTO
begin	svf/include/Graphs/WTO.h	/^    Iterator begin() const$/;"	f	class:SVF::WTOCycleDepth
begin	svf/include/Graphs/WTO.h	/^    Iterator begin() const$/;"	f	class:SVF::final
begin	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator begin() const$/;"	f	class:SVF::CondPointsToSet
begin	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator begin() const$/;"	f	class:SVF::CondStdSet
begin	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator begin()$/;"	f	class:SVF::CondPointsToSet
begin	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator begin()$/;"	f	class:SVF::CondStdSet
begin	svf/include/MemoryModel/PointsTo.h	/^    const_iterator begin() const$/;"	f	class:SVF::PointsTo
begin	svf/include/SVFIR/SVFVariables.h	/^    inline const_bb_iterator begin() const$/;"	f	class:SVF::FunObjVar
begin	svf/include/Util/DPItem.h	/^    inline const_iterator begin() const$/;"	f	class:SVF::ContextCond
begin	svf/include/Util/SparseBitVector.h	/^    iterator begin() const$/;"	f	class:SVF::SparseBitVector
begin	svf/include/Util/iterator_range.h	/^    IteratorT begin() const$/;"	f	class:SVF::iter_range
begin	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::const_iterator CoreBitVector::begin(void) const$/;"	f	class:SVF::CoreBitVector
begin	z3.obj/include/z3++.h	/^            cube_iterator begin() { return cube_iterator(m_solver, m_vars, m_cutoff, false); }$/;"	f	class:z3::solver::cube_generator
begin	z3.obj/include/z3++.h	/^        iterator begin() const { return iterator(this, 0); }$/;"	f	class:z3::ast_vector_tpl
begin_iterator	svf/include/Util/iterator_range.h	/^    IteratorT begin_iterator, end_iterator;$/;"	m	class:SVF::iter_range
beta	svf/lib/AE/Core/RelationSolver.cpp	/^AbstractState RelationSolver::beta(const Map<u32_t, s32_t>& sigma,$/;"	f	class:RelationSolver
bidirection	svf/include/CFL/CFLGraphBuilder.h	/^    bidirection,$/;"	m	class:SVF::BuildDirection
bilateral	svf/lib/AE/Core/RelationSolver.cpp	/^AbstractState RelationSolver::bilateral(const AbstractState&domain, const Z3Expr& phi,$/;"	f	class:RelationSolver
bind_textdomain_codeset	svf-llvm/lib/extapi.c	/^char * bind_textdomain_codeset(const char * domainname, const char * codeset)$/;"	f
bindtextdomain	svf-llvm/lib/extapi.c	/^char * bindtextdomain(const char * domainname, const char * dirname)$/;"	f
bit	svf/include/Util/CoreBitVector.h	/^        u32_t bit;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
blackHoleObjectId	svf/include/Util/NodeIDAllocator.h	/^    static const NodeID blackHoleObjectId;$/;"	m	class:SVF::NodeIDAllocator
blackHoleObjectId	svf/lib/Util/NodeIDAllocator.cpp	/^const NodeID NodeIDAllocator::blackHoleObjectId = 0;$/;"	m	class:SVF::NodeIDAllocator	file:
blackHolePointerId	svf/include/Util/NodeIDAllocator.h	/^    static const NodeID blackHolePointerId;$/;"	m	class:SVF::NodeIDAllocator
blackHolePointerId	svf/lib/Util/NodeIDAllocator.cpp	/^const NodeID NodeIDAllocator::blackHolePointerId = 2;$/;"	m	class:SVF::NodeIDAllocator	file:
blackholeSymID	svf/include/Graphs/IRGraph.h	/^    inline NodeID blackholeSymID() const$/;"	f	class:SVF::IRGraph
blkPtrSymID	svf/include/Graphs/IRGraph.h	/^    inline NodeID blkPtrSymID() const$/;"	f	class:SVF::IRGraph
body	z3.obj/bin/python/z3/z3.py	/^    def body(self):$/;"	m	class:QuantifierRef
body	z3.obj/include/z3++.h	/^        expr body() const { assert(is_quantifier()); Z3_ast r = Z3_get_quantifier_body(ctx(), *this); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
bool_const	z3.obj/include/z3++.h	/^    inline expr context::bool_const(char const * name) { return constant(name, bool_sort()); }$/;"	f	class:z3::context
bool_sort	z3.obj/include/z3++.h	/^    inline sort context::bool_sort() { Z3_sort s = Z3_mk_bool_sort(m_ctx); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
bool_val	z3.obj/include/z3++.h	/^    inline expr context::bool_val(bool b) { return b ? expr(*this, Z3_mk_true(m_ctx)) : expr(*this, Z3_mk_false(m_ctx)); }$/;"	f	class:z3::context
bool_value	z3.obj/include/z3++.h	/^        Z3_lbool bool_value() const {$/;"	f	class:z3::expr
boolean	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);$/;"	v
bothInterEdges	svf/include/Graphs/SVFGOPT.h	/^    inline bool bothInterEdges(const SVFGEdge* edge1, const SVFGEdge* edge2) const$/;"	f	class:SVF::SVFGOPT
bottom	svf/include/AE/Core/AbstractState.h	/^    AbstractState bottom() const$/;"	f	class:SVF::AbstractState
bottom	svf/include/AE/Core/IntervalValue.h	/^    static IntervalValue bottom()$/;"	f	class:SVF::IntervalValue
brConditions	svf/include/Graphs/CDG.h	/^    Set<BranchCondition> brConditions;$/;"	m	class:SVF::CDGEdge
brInst	svf/include/SVFIR/SVFStatements.h	/^    const SVFVar* brInst;$/;"	m	class:SVF::BranchStmt
branchCondVal	svf/include/Graphs/ICFGEdge.h	/^    s64_t branchCondVal;$/;"	m	class:SVF::IntraCFGEdge
branchStat	svf/lib/Util/SVFStat.cpp	/^void SVFStat::branchStat()$/;"	f	class:SVFStat
bridge_gep_begin	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^inline bridge_gep_iterator bridge_gep_begin(const User &GEP)$/;"	f	namespace:llvm
bridge_gep_begin	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^inline bridge_gep_iterator bridge_gep_begin(const User* GEP)$/;"	f	namespace:llvm
bridge_gep_end	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^inline bridge_gep_iterator bridge_gep_end(const User &GEP)$/;"	f	namespace:llvm
bridge_gep_end	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^inline bridge_gep_iterator bridge_gep_end(const User* GEP)$/;"	f	namespace:llvm
bridge_gep_end	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^inline generic_bridge_gep_type_iterator<const T*> bridge_gep_end( Type*  \/*Op0*\/, ArrayRef<T> A )$/;"	f	namespace:llvm
bridge_gep_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::bridge_gep_iterator bridge_gep_iterator;$/;"	t	namespace:SVF
bridge_gep_iterator	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^typedef generic_bridge_gep_type_iterator<> bridge_gep_iterator;$/;"	t	namespace:llvm
brstmt	svf/include/Graphs/VFGNode.h	/^    const BranchStmt* brstmt;$/;"	m	class:SVF::BranchVFGNode
bsearch	svf-llvm/lib/extapi.c	/^void *bsearch(const void *key, const void *base, unsigned long nitems, unsigned long size, int (*compar)(const void *, const void *))$/;"	f
buffer	svf/lib/Util/cJSON.cpp	/^    unsigned char *buffer;$/;"	m	struct:__anon17	file:
buffer_at_offset	svf/lib/Util/cJSON.cpp	303;"	d	file:
buffer_skip_whitespace	svf/lib/Util/cJSON.cpp	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
bugEventStack	svf/include/Util/SVFBugReport.h	/^    const EventStack bugEventStack;$/;"	m	class:SVF::GenericBug
bugLoc	svf/include/AE/Svfexe/AEDetector.h	/^    Set<std::string> bugLoc; \/\/\/< Set of locations where bugs have been reported.$/;"	m	class:SVF::BufOverflowDetector
bugMsg1	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::bugMsg1(const std::string& msg)$/;"	f	class:SVFUtil
bugMsg2	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::bugMsg2(const std::string& msg)$/;"	f	class:SVFUtil
bugMsg3	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::bugMsg3(const std::string& msg)$/;"	f	class:SVFUtil
bugSet	svf/include/Util/SVFBugReport.h	/^    BugSet bugSet;    \/\/ maintain bugs$/;"	m	class:SVF::SVFBugReport
bugType	svf/include/Util/SVFBugReport.h	/^    BugType bugType;$/;"	m	class:SVF::GenericBug
build	svf-llvm/lib/ICFGBuilder.cpp	/^ICFG* ICFGBuilder::build()$/;"	f	class:ICFGBuilder
build	svf-llvm/lib/LLVMLoopAnalysis.cpp	/^void LLVMLoopAnalysis::build(ICFG *icfg)$/;"	f	class:LLVMLoopAnalysis
build	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::build()$/;"	f	class:LLVMModuleSet
build	svf-llvm/lib/SVFIRBuilder.cpp	/^SVFIR* SVFIRBuilder::build()$/;"	f	class:SVFIRBuilder
build	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* CFLGraphBuilder::build(GenericGraph<N,E>* graph, GrammarBase *grammar, BuildDirection direction)$/;"	f	class:SVF::CFLGraphBuilder
build	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* CFLGraphBuilder::build(std::string fileName, GrammarBase *grammar, BuildDirection direction)$/;"	f	class:SVF::CFLGraphBuilder
build	svf/lib/CFL/GrammarBuilder.cpp	/^GrammarBase* GrammarBuilder::build() const$/;"	f	class:SVF::GrammarBuilder
build	svf/lib/MSSA/SVFGBuilder.cpp	/^SVFG* SVFGBuilder::build(BVDataPTAImpl* pta, VFG::VFGK kind)$/;"	f	class:SVFGBuilder
build	svf/lib/MTA/TCT.cpp	/^void TCT::build()$/;"	f	class:TCT
build	svf/lib/SVFIR/PAGBuilderFromFile.cpp	/^SVFIR* PAGBuilderFromFile::build()$/;"	f	class:PAGBuilderFromFile
build	svf/lib/Util/CDGBuilder.cpp	/^void CDGBuilder::build()$/;"	f	class:CDGBuilder
buildBiPEGgraph	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* AliasCFLGraphBuilder::buildBiPEGgraph(ConstraintGraph *graph, Kind startKind, GrammarBase *grammar, SVFIR* pag)$/;"	f	class:SVF::AliasCFLGraphBuilder
buildBiPEGgraph	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* VFCFLGraphBuilder::buildBiPEGgraph(ConstraintGraph *graph, Kind startKind, GrammarBase *grammar, SVFIR* pag)$/;"	f	class:SVF::VFCFLGraphBuilder
buildBigraph	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* AliasCFLGraphBuilder::buildBigraph(ConstraintGraph *graph, Kind startKind, GrammarBase *grammar)$/;"	f	class:SVF::AliasCFLGraphBuilder
buildBigraph	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* VFCFLGraphBuilder::buildBigraph(SVFG *graph, Kind startKind, GrammarBase *grammar)$/;"	f	class:SVF::VFCFLGraphBuilder
buildCFLData	svf/lib/CFL/CFLSolver.cpp	/^void POCRSolver::buildCFLData()$/;"	f	class:POCRSolver
buildCFLGrammar	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::buildCFLGrammar()$/;"	f	class:SVF::CFLBase
buildCFLGraph	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::buildCFLGraph()$/;"	f	class:SVF::CFLBase
buildCFLGraph	svf/lib/CFL/CFLVF.cpp	/^void CFLVF::buildCFLGraph()$/;"	f	class:CFLVF
buildCG	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::buildCG()$/;"	f	class:ConstraintGraph
buildCHG	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildCHG()$/;"	f	class:CHGBuilder
buildCHG	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::buildCHG(bool extend)$/;"	f	class:DCHGraph
buildCHGEdges	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildCHGEdges(const Function* F)$/;"	f	class:CHGBuilder
buildCHGNodes	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildCHGNodes(const Function* F)$/;"	f	class:CHGBuilder
buildCHGNodes	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildCHGNodes(const GlobalValue *globalvalue)$/;"	f	class:CHGBuilder
buildCSToCHAVtblsAndVfnsMap	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildCSToCHAVtblsAndVfnsMap()$/;"	f	class:CHGBuilder
buildCandidateFuncSetforLock	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::buildCandidateFuncSetforLock()$/;"	f	class:LockAnalysis
buildClassNameToAncestorsDescendantsMap	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildClassNameToAncestorsDescendantsMap()$/;"	f	class:CHGBuilder
buildControlDependence	svf/lib/Util/CDGBuilder.cpp	/^void CDGBuilder::buildControlDependence()$/;"	f	class:CDGBuilder
buildDeltaMaps	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::buildDeltaMaps(void)$/;"	f	class:VersionedFlowSensitive
buildFromDot	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph *CFLGraphBuilder::buildFromDot(std::string fileName, GrammarBase *grammar, BuildDirection direction)$/;"	f	class:SVF::CFLGraphBuilder
buildFromJson	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* CFLGraphBuilder::buildFromJson(std::string fileName, GrammarBase *grammar, BuildDirection direction)$/;"	f	class:SVF::CFLGraphBuilder
buildFromText	svf/lib/CFL/CFLGraphBuilder.cpp	/^CFLGraph* CFLGraphBuilder::buildFromText(std::string fileName, GrammarBase *grammar, BuildDirection direction)$/;"	f	class:SVF::CFLGraphBuilder
buildFullSVFG	svf/lib/MSSA/SVFGBuilder.cpp	/^SVFG* SVFGBuilder::buildFullSVFG(BVDataPTAImpl* pta)$/;"	f	class:SVFGBuilder
buildFunToFunMap	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::buildFunToFunMap()$/;"	f	class:LLVMModuleSet
buildGlobalDefToRepMap	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::buildGlobalDefToRepMap()$/;"	f	class:LLVMModuleSet
buildICFGNodeControlMap	svf/lib/Util/CDGBuilder.cpp	/^void CDGBuilder::buildICFGNodeControlMap()$/;"	f	class:CDGBuilder
buildInternalMaps	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildInternalMaps()$/;"	f	class:CHGBuilder
buildIsStoreLoadMaps	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::buildIsStoreLoadMaps(void)$/;"	f	class:VersionedFlowSensitive
buildLLVMLoops	svf-llvm/lib/LLVMLoopAnalysis.cpp	/^void LLVMLoopAnalysis::buildLLVMLoops(ICFG* icfg)$/;"	f	class:LLVMLoopAnalysis
buildMSSA	svf/lib/MSSA/SVFGBuilder.cpp	/^std::unique_ptr<MemSSA> SVFGBuilder::buildMSSA(BVDataPTAImpl* pta, bool ptrOnlyMSSA)$/;"	f	class:SVFGBuilder
buildMemModel	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::buildMemModel()$/;"	f	class:SymbolTableBuilder
buildMemSSA	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::buildMemSSA(const FunObjVar& fun)$/;"	f	class:MemSSA
buildNodeToDepth	svf/include/Graphs/WTO.h	/^    void buildNodeToDepth()$/;"	f	class:SVF::WTO
buildPTACallGraph	svf/lib/Util/CallGraphBuilder.cpp	/^CallGraph* CallGraphBuilder::buildPTACallGraph()$/;"	f	class:CallGraphBuilder
buildPTROnlySVFG	svf/lib/MSSA/SVFGBuilder.cpp	/^SVFG* SVFGBuilder::buildPTROnlySVFG(BVDataPTAImpl* pta)$/;"	f	class:SVFGBuilder
buildRelZ3Expr	svf/lib/AE/Core/RelExeState.cpp	/^Z3Expr RelExeState::buildRelZ3Expr(u32_t cmp, s32_t succ, Set<u32_t> &vars, Set<u32_t> &initVars)$/;"	f	class:RelExeState
buildSVFG	svf/include/DDA/DDAVFSolver.h	/^    virtual inline void buildSVFG(SVFIR* pag)$/;"	f	class:SVF::DDAVFSolver
buildSVFG	svf/lib/CFL/CFLSVFGBuilder.cpp	/^void CFLSVFGBuilder::buildSVFG()$/;"	f	class:CFLSVFGBuilder
buildSVFG	svf/lib/Graphs/SVFG.cpp	/^void SVFG::buildSVFG()$/;"	f	class:SVFG
buildSVFG	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::buildSVFG()$/;"	f	class:SVFGOPT
buildSVFG	svf/lib/MSSA/SVFGBuilder.cpp	/^void SVFGBuilder::buildSVFG()$/;"	f	class:SVFGBuilder
buildSVFG	svf/lib/SABER/SaberSVFGBuilder.cpp	/^void SaberSVFGBuilder::buildSVFG()$/;"	f	class:SaberSVFGBuilder
buildSVFIRCallGraph	svf/lib/Util/CallGraphBuilder.cpp	/^CallGraph* CallGraphBuilder::buildSVFIRCallGraph(const std::vector<const FunObjVar*>& funset)$/;"	f	class:CallGraphBuilder
buildSVFLoops	svf-llvm/lib/LLVMLoopAnalysis.cpp	/^void LLVMLoopAnalysis::buildSVFLoops(ICFG *icfg, std::vector<const Loop *> &llvmLoops)$/;"	f	class:LLVMLoopAnalysis
buildSVFModule	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::buildSVFModule(Module &mod)$/;"	f	class:LLVMModuleSet
buildSVFModule	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::buildSVFModule(const std::vector<std::string> &moduleNameVec)$/;"	f	class:LLVMModuleSet
buildSymbolTable	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::buildSymbolTable() const$/;"	f	class:LLVMModuleSet
buildThreadCallGraph	svf/lib/Util/CallGraphBuilder.cpp	/^ThreadCallGraph* CallGraphBuilder::buildThreadCallGraph()$/;"	f	class:CallGraphBuilder
buildUsage	svf/include/Util/CommandLine.h	/^    static std::string buildUsage($/;"	f	class:OptionBase
buildVTables	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::buildVTables()$/;"	f	class:DCHGraph
buildVirtualFunctionToIDMap	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::buildVirtualFunctionToIDMap()$/;"	f	class:CHGBuilder
build_llvm_from_source	build.sh	/^function build_llvm_from_source {$/;"	f
build_z3_from_source	build.sh	/^function build_z3_from_source {$/;"	f
buildingCHGTime	svf/include/Graphs/CHG.h	/^    double buildingCHGTime;$/;"	m	class:SVF::CHGraph
buildlabelToKindMap	svf/lib/CFL/CFLGraphBuilder.cpp	/^void CFLGraphBuilder::buildlabelToKindMap(GrammarBase *grammar)$/;"	f	class:SVF::CFLGraphBuilder
bv	svf/include/MemoryModel/PointsTo.h	/^        BitVector bv;$/;"	m	union:SVF::PointsTo::__anon19
bv2int	svf/include/Util/Z3Expr.h	/^    friend Z3Expr bv2int(const Z3Expr &e, bool isSigned)$/;"	f	class:SVF::Z3Expr
bv2int	z3.obj/include/z3++.h	/^    inline expr bv2int(expr const& a, bool is_signed) { Z3_ast r = Z3_mk_bv2int(a.ctx(), a, is_signed); a.check_error(); return expr(a.ctx(), r); }$/;"	f	namespace:z3
bvIt	svf/include/MemoryModel/PointsTo.h	/^            BitVector::iterator bvIt;$/;"	m	union:SVF::PointsTo::PointsToIterator::__anon20
bv_const	z3.obj/include/z3++.h	/^    inline expr context::bv_const(char const * name, unsigned sz) { return constant(name, bv_sort(sz)); }$/;"	f	class:z3::context
bv_size	z3.obj/include/z3++.h	/^        unsigned bv_size() const { assert(is_bv()); unsigned r = Z3_get_bv_sort_size(ctx(), *this); check_error(); return r; }$/;"	f	class:z3::sort
bv_sort	z3.obj/include/z3++.h	/^    inline sort context::bv_sort(unsigned sz) { Z3_sort s = Z3_mk_bv_sort(m_ctx, sz); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
bv_val	z3.obj/include/z3++.h	/^    inline expr context::bv_val(char const * n, unsigned sz) { sort s = bv_sort(sz); Z3_ast r = Z3_mk_numeral(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
bv_val	z3.obj/include/z3++.h	/^    inline expr context::bv_val(int n, unsigned sz) { sort s = bv_sort(sz); Z3_ast r = Z3_mk_int(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
bv_val	z3.obj/include/z3++.h	/^    inline expr context::bv_val(int64_t n, unsigned sz) { sort s = bv_sort(sz); Z3_ast r = Z3_mk_int64(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
bv_val	z3.obj/include/z3++.h	/^    inline expr context::bv_val(uint64_t n, unsigned sz) { sort s = bv_sort(sz); Z3_ast r = Z3_mk_unsigned_int64(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
bv_val	z3.obj/include/z3++.h	/^    inline expr context::bv_val(unsigned n, bool const* bits) {$/;"	f	class:z3::context
bv_val	z3.obj/include/z3++.h	/^    inline expr context::bv_val(unsigned n, unsigned sz) { sort s = bv_sort(sz); Z3_ast r = Z3_mk_unsigned_int(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
bvadd_no_overflow	z3.obj/include/z3++.h	/^    inline expr bvadd_no_overflow(expr const& a, expr const& b, bool is_signed) { $/;"	f	namespace:z3
bvadd_no_underflow	z3.obj/include/z3++.h	/^    inline expr bvadd_no_underflow(expr const& a, expr const& b) {$/;"	f	namespace:z3
bvmul_no_overflow	z3.obj/include/z3++.h	/^    inline expr bvmul_no_overflow(expr const& a, expr const& b, bool is_signed) {$/;"	f	namespace:z3
bvmul_no_underflow	z3.obj/include/z3++.h	/^    inline expr bvmul_no_underflow(expr const& a, expr const& b) {$/;"	f	namespace:z3
bvneg_no_overflow	z3.obj/include/z3++.h	/^    inline expr bvneg_no_overflow(expr const& a) {$/;"	f	namespace:z3
bvsdiv_no_overflow	z3.obj/include/z3++.h	/^    inline expr bvsdiv_no_overflow(expr const& a, expr const& b) {$/;"	f	namespace:z3
bvsub_no_overflow	z3.obj/include/z3++.h	/^    inline expr bvsub_no_overflow(expr const& a, expr const& b) {$/;"	f	namespace:z3
bvsub_no_underflow	z3.obj/include/z3++.h	/^    inline expr bvsub_no_underflow(expr const& a, expr const& b, bool is_signed) {$/;"	f	namespace:z3
bwFindAllocOrClsNameSources	svf-llvm/lib/ObjTypeInference.cpp	/^Set<const Value *> &ObjTypeInference::bwFindAllocOrClsNameSources(const Value *startValue)$/;"	f	class:ObjTypeInference
bwfindAllocOfVar	svf-llvm/lib/ObjTypeInference.cpp	/^Set<const Value *> &ObjTypeInference::bwfindAllocOfVar(const Value *var)$/;"	f	class:ObjTypeInference
bypassMSSAPHINode	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::bypassMSSAPHINode(const MSSAPHISVFGNode* node)$/;"	f	class:SVFGOPT
byteSize	svf/include/SVFIR/ObjTypeInfo.h	/^    u32_t byteSize;$/;"	m	class:SVF::ObjTypeInfo
byteSize	svf/include/SVFIR/SVFType.h	/^    u32_t byteSize; \/\/\/< LLVM Byte Size$/;"	m	class:SVF::SVFType
cJSON	svf/include/Util/cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	svf/include/Util/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddArrayToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddBoolToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)$/;"	f
cJSON_AddFalseToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddItemReferenceToArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemReferenceToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
cJSON_AddItemToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddItemToObjectCS	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
cJSON_AddNullToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNumberToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)$/;"	f
cJSON_AddObjectToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddRawToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)$/;"	f
cJSON_AddStringToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)$/;"	f
cJSON_AddTrueToObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_Array	svf/include/Util/cJSON.h	95;"	d
cJSON_ArrayForEach	svf/include/Util/cJSON.h	290;"	d
cJSON_Compare	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
cJSON_CreateArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateArrayReference	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child)$/;"	f
cJSON_CreateBool	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)$/;"	f
cJSON_CreateDoubleArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateObjectReference	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)$/;"	f
cJSON_CreateRaw	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count)$/;"	f
cJSON_CreateStringReference	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)$/;"	f
cJSON_CreateTrue	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_False	svf/include/Util/cJSON.h	90;"	d
cJSON_GetArrayItem	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetNumberValue	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)$/;"	f
cJSON_GetObjectItem	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetStringValue	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item)$/;"	f
cJSON_HasObjectItem	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
cJSON_Hooks	svf/include/Util/cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	svf/include/Util/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_Invalid	svf/include/Util/cJSON.h	89;"	d
cJSON_IsArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
cJSON_IsBool	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
cJSON_IsFalse	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
cJSON_IsInvalid	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
cJSON_IsNull	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
cJSON_IsNumber	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
cJSON_IsObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
cJSON_IsRaw	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
cJSON_IsReference	svf/include/Util/cJSON.h	99;"	d
cJSON_IsString	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
cJSON_IsTrue	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
cJSON_Minify	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_NULL	svf/include/Util/cJSON.h	92;"	d
cJSON_New_Item	svf/lib/Util/cJSON.cpp	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Number	svf/include/Util/cJSON.h	93;"	d
cJSON_Object	svf/include/Util/cJSON.h	96;"	d
cJSON_Parse	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithLength	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)$/;"	f
cJSON_ParseWithLengthOpts	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_ParseWithOpts	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintPreallocated	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)$/;"	f
cJSON_PrintUnformatted	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_Raw	svf/include/Util/cJSON.h	97;"	d
cJSON_ReplaceItemInArray	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObject	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemInObjectCaseSensitive	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
cJSON_ReplaceItemViaPointer	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
cJSON_SetBoolValue	svf/include/Util/cJSON.h	283;"	d
cJSON_SetIntValue	svf/include/Util/cJSON.h	275;"	d
cJSON_SetNumberHelper	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_SetNumberValue	svf/include/Util/cJSON.h	278;"	d
cJSON_SetValuestring	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)$/;"	f
cJSON_String	svf/include/Util/cJSON.h	94;"	d
cJSON_StringIsConst	svf/include/Util/cJSON.h	100;"	d
cJSON_True	svf/include/Util/cJSON.h	91;"	d
cJSON_Version	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON__h	svf/include/Util/cJSON.h	24;"	d
cJSON_bool	svf/include/Util/cJSON.h	/^typedef int cJSON_bool;$/;"	t
cJSON_free	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	svf/lib/Util/cJSON.cpp	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	svf/lib/Util/cJSON.cpp	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
cachedPtsChainMap	svf/include/MSSA/MemRegion.h	/^    NodeToPTSSMap cachedPtsChainMap;$/;"	m	class:SVF::MRGenerator
calculateAddrVarPts	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::calculateAddrVarPts(NodeID pointer, const SVFGNode* svfg_node)$/;"	f	class:FlowSensitiveStat
calculateNodeDegrees	svf/lib/Graphs/SVFGStat.cpp	/^void SVFGStat::calculateNodeDegrees(SVFGNode* node, NodeSet& nodeHasIndInEdge, NodeSet& nodeHasIndOutEdge)$/;"	f	class:SVFGStat
call	svf/include/SVFIR/SVFStatements.h	/^    const CallICFGNode* call;      \/\/\/ the callsite statement calling from$/;"	m	class:SVF::CallPE
call	svf/include/SVFIR/SVFStatements.h	/^    const CallICFGNode* call;    \/\/\/ the callsite statement returning to$/;"	m	class:SVF::RetPE
callBlockNode	svf/include/Graphs/ICFGNode.h	/^    const CallICFGNode* callBlockNode;$/;"	m	class:SVF::RetICFGNode
callEdgeLabelCounter	svf/include/SVFIR/SVFStatements.h	/^    static u64_t callEdgeLabelCounter;  \/\/\/< Call site Instruction counter$/;"	m	class:SVF::SVFStmt
callGraph	svf/include/MSSA/MemRegion.h	/^    CallGraph* callGraph;$/;"	m	class:SVF::MRGenerator
callGraph	svf/include/SVFIR/SVFIR.h	/^    CallGraph* callGraph; \/\/\/ call graph$/;"	m	class:SVF::SVFIR
callGraphNode	svf/include/SVFIR/SVFVariables.h	/^    const FunObjVar* callGraphNode;$/;"	m	class:SVF::RetValPN
callGraphNode	svf/include/SVFIR/SVFVariables.h	/^    const FunObjVar* callGraphNode;$/;"	m	class:SVF::VarArgValPN
callGraphNodeNum	svf/include/Graphs/CallGraph.h	/^    NodeID callGraphNodeNum;$/;"	m	class:SVF::CallGraph
callGraphSCC	svf/include/MSSA/MemRegion.h	/^    SCC* callGraphSCC;$/;"	m	class:SVF::MRGenerator
callGraphSCC	svf/include/MemoryModel/PointerAnalysis.h	/^    CallGraphSCC* callGraphSCC;$/;"	m	class:SVF::PointerAnalysis
callGraphSCCDetection	svf/include/MemoryModel/PointerAnalysis.h	/^    inline void callGraphSCCDetection()$/;"	f	class:SVF::PointerAnalysis
callGraphSolveBasedOnCHA	svf/lib/WPA/TypeAnalysis.cpp	/^void TypeAnalysis::callGraphSolveBasedOnCHA(const CallSiteToFunPtrMap& callsites, CallEdgeMap& newEdges)$/;"	f	class:TypeAnalysis
callInst	svf/include/Graphs/SVFGNode.h	/^    const CallICFGNode* callInst;$/;"	m	class:SVF::InterMSSAPHISVFGNode
callInst	svf/include/Graphs/VFGNode.h	/^    const CallICFGNode* callInst;$/;"	m	class:SVF::InterPHIVFGNode
callNodeToCHAVFnsMap	svf/include/Graphs/CHG.h	/^    CallNodeToVFunSetMap callNodeToCHAVFnsMap;$/;"	m	class:SVF::CHGraph
callNodeToCHAVtblsMap	svf/include/Graphs/CHG.h	/^    CallNodeToVTableSetMap callNodeToCHAVtblsMap;$/;"	m	class:SVF::CHGraph
callNodeToClassesMap	svf/include/Graphs/CHG.h	/^    CallNodeToCHNodesMap callNodeToClassesMap;$/;"	m	class:SVF::CHGraph
callPEBegin	svf/include/Graphs/VFGNode.h	/^    inline CallPESet::const_iterator callPEBegin() const$/;"	f	class:SVF::FormalParmVFGNode
callPEEnd	svf/include/Graphs/VFGNode.h	/^    inline CallPESet::const_iterator callPEEnd() const$/;"	f	class:SVF::FormalParmVFGNode
callPEs	svf/include/Graphs/ICFGEdge.h	/^    std::vector<const CallPE*> callPEs;$/;"	m	class:SVF::CallCFGEdge
callPEs	svf/include/Graphs/VFGNode.h	/^    CallPESet callPEs;$/;"	m	class:SVF::FormalParmVFGNode
callSiteArgsListMap	svf/include/SVFIR/SVFIR.h	/^    CSToArgsListMap callSiteArgsListMap;	\/\/\/< Map a callsite to a list of all its actual parameters$/;"	m	class:SVF::SVFIR
callSiteRetMap	svf/include/SVFIR/SVFIR.h	/^    CSToRetMap callSiteRetMap;	\/\/\/< Map a callsite to its callsite returns PAGNodes$/;"	m	class:SVF::SVFIR
callSiteSet	svf/include/SVFIR/SVFIR.h	/^    CallSiteSet callSiteSet; \/\/\/ all the callsites of a program$/;"	m	class:SVF::SVFIR
callSiteStack	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    std::vector<const CallICFGNode*> callSiteStack;$/;"	m	class:SVF::AbstractInterpretation
callSiteToActualINMap	svf/include/Graphs/SVFG.h	/^    CallSiteToActualINsMapTy callSiteToActualINMap;$/;"	m	class:SVF::SVFG
callSiteToActualOUTMap	svf/include/Graphs/SVFG.h	/^    CallSiteToActualOUTsMapTy callSiteToActualOUTMap;$/;"	m	class:SVF::SVFG
calledFunc	svf/include/Graphs/ICFGNode.h	/^    const FunObjVar* calledFunc;  \/\/\/ called function$/;"	m	class:SVF::CallICFGNode
callgraph	svf/include/Graphs/VFG.h	/^    CallGraph* callgraph;$/;"	m	class:SVF::VFG
callgraph	svf/include/MemoryModel/PointerAnalysis.h	/^    CallGraph* callgraph;$/;"	m	class:SVF::PointerAnalysis
callgraph	svf/include/SABER/SrcSnkDDA.h	/^    CallGraph* callgraph;$/;"	m	class:SVF::SrcSnkDDA
callgraphStat	svf/include/Util/SVFStat.h	/^    virtual void callgraphStat() {}$/;"	f	class:SVF::SVFStat
callgraphStat	svf/lib/Util/PTAStat.cpp	/^void PTAStat::callgraphStat()$/;"	f	class:PTAStat
callinstToCallGraphEdgesMap	svf/include/Graphs/CallGraph.h	/^    CallInstToCallGraphEdgesMap callinstToCallGraphEdgesMap; \/\/\/< Map a call instruction to its corresponding call edges$/;"	m	class:SVF::CallGraph
callinstToHareParForEdgesMap	svf/include/Graphs/ThreadCallGraph.h	/^    CallInstToParForEdgesMap callinstToHareParForEdgesMap; \/\/\/< Map a call instruction to its corresponding hare_parallel_for edges$/;"	m	class:SVF::ThreadCallGraph
callinstToThreadForkEdgesMap	svf/include/Graphs/ThreadCallGraph.h	/^    CallInstToForkEdgesMap callinstToThreadForkEdgesMap; \/\/\/< Map a call instruction to its corresponding fork edges$/;"	m	class:SVF::ThreadCallGraph
callinstToThreadJoinEdgesMap	svf/include/Graphs/ThreadCallGraph.h	/^    CallInstToJoinEdgesMap callinstToThreadJoinEdgesMap; \/\/\/< Map a call instruction to its corresponding join edges$/;"	m	class:SVF::ThreadCallGraph
calloc	svf-llvm/lib/extapi.c	/^void *calloc(unsigned long nitems, unsigned long size)$/;"	f
callsite	svf/include/MSSA/MSSAMuChi.h	/^    const CallICFGNode* callsite;$/;"	m	class:SVF::CallCHI
callsite	svf/include/MSSA/MSSAMuChi.h	/^    const CallICFGNode* callsite;$/;"	m	class:SVF::CallMU
callsite2DummyValPN	svf/include/CFL/CFLAlias.h	/^    CallSite2DummyValPN callsite2DummyValPN;        \/\/\/< Map an instruction to a dummy obj which created at an indirect callsite, which invokes a heap allocator$/;"	m	class:SVF::CFLAlias
callsite2DummyValPN	svf/include/WPA/Andersen.h	/^    CallSite2DummyValPN callsite2DummyValPN;        \/\/\/< Map an instruction to a dummy obj which created at an indirect callsite, which invokes a heap allocator$/;"	m	class:SVF::Andersen
callsite2DummyValPN	svf/include/WPA/Andersen.h	/^    callsite2DummyValPN; \/\/\/< Map an instruction to a dummy obj which$/;"	m	class:SVF::AndersenBase
callsiteHasRet	svf/include/SVFIR/SVFIR.h	/^    inline bool callsiteHasRet(const RetICFGNode* cs) const$/;"	f	class:SVF::SVFIR
callsiteToChiSetMap	svf/include/MSSA/MemSSA.h	/^    CallSiteToCHISetMap callsiteToChiSetMap;$/;"	m	class:SVF::MemSSA
callsiteToModMRsMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToMRsMap callsiteToModMRsMap;$/;"	m	class:SVF::MRGenerator
callsiteToModPointsToMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToPointsToMap callsiteToModPointsToMap;$/;"	m	class:SVF::MRGenerator
callsiteToMuSetMap	svf/include/MSSA/MemSSA.h	/^    CallSiteToMUSetMap callsiteToMuSetMap;$/;"	m	class:SVF::MemSSA
callsiteToRefMRsMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToMRsMap callsiteToRefMRsMap;$/;"	m	class:SVF::MRGenerator
callsiteToRefPointsToMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToPointsToMap callsiteToRefPointsToMap;$/;"	m	class:SVF::MRGenerator
canBeRemoved	svf/lib/Graphs/SVFGOPT.cpp	/^bool SVFGOPT::canBeRemoved(const SVFGNode * node)$/;"	f	class:SVFGOPT
canHold	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::canHold(u32_t bit) const$/;"	f	class:SVF::CoreBitVector
canSafelyAccessMemory	svf/lib/AE/Svfexe/AEDetector.cpp	/^bool BufOverflowDetector::canSafelyAccessMemory(AbstractState& as, const SVF::SVFVar* value, const SVF::IntervalValue& len)$/;"	f	class:BufOverflowDetector
can_access_at_index	svf/lib/Util/cJSON.cpp	300;"	d	file:
can_read	svf/lib/Util/cJSON.cpp	298;"	d	file:
candidateFuncSet	svf/include/MTA/TCT.h	/^    FunSet candidateFuncSet; \/\/\/ Procedures we care about during call graph traversing when creating TCT$/;"	m	class:SVF::TCT
candidateMappings	svf/include/WPA/FlowSensitive.h	/^    std::vector<std::pair<hclust_fast_methods, std::vector<NodeID>>> candidateMappings;$/;"	m	class:SVF::FlowSensitive
candidatePointers	svf/include/SVFIR/SVFIR.h	/^    OrderedNodeSet candidatePointers;$/;"	m	class:SVF::SVFIR
candidateQueries	svf/include/DDA/DDAClient.h	/^    OrderedNodeSet candidateQueries;	\/\/\/< store all candidate pointers to be queried$/;"	m	class:SVF::DDAClient
candidateQueries	svf/include/DDA/DDAVFSolver.h	/^    NodeBS candidateQueries;		\/\/\/< candidate pointers;$/;"	m	class:SVF::DDAVFSolver
candidates	svf/include/WPA/WPAFSSolver.h	/^    NodeBS candidates;	\/\/\/< nodes which need to be analyzed in current iteration.$/;"	m	class:SVF::WPAMinimumSolver
cannot_access_at_index	svf/lib/Util/cJSON.cpp	301;"	d	file:
canonicalTypeMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, const DIType*> canonicalTypeMap;$/;"	m	class:SVF::DCHGraph
canonicalTypes	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Set<const DIType*> canonicalTypes;$/;"	m	class:SVF::DCHGraph
case_insensitive_strcmp	svf/lib/Util/cJSON.cpp	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
cast	svf/include/Util/Casting.h	/^        cast(std::unique_ptr<Y> &&Val)$/;"	f	namespace:SVF::SVFUtil
cast	svf/include/Util/Casting.h	/^       cast(const Y &Val)$/;"	f	namespace:SVF::SVFUtil
cast	svf/include/Util/Casting.h	/^inline typename cast_retty<X, Y *>::ret_type cast(Y *Val)$/;"	f	namespace:SVF::SVFUtil
cast	svf/include/Util/Casting.h	/^inline typename cast_retty<X, Y>::ret_type cast(Y &Val)$/;"	f	namespace:SVF::SVFUtil
cast	z3.obj/bin/python/z3/z3.py	/^    def cast(self, val):$/;"	m	class:ArithSortRef
cast	z3.obj/bin/python/z3/z3.py	/^    def cast(self, val):$/;"	m	class:BitVecSortRef
cast	z3.obj/bin/python/z3/z3.py	/^    def cast(self, val):$/;"	m	class:BoolSortRef
cast	z3.obj/bin/python/z3/z3.py	/^    def cast(self, val):$/;"	m	class:FPSortRef
cast	z3.obj/bin/python/z3/z3.py	/^    def cast(self, val):$/;"	m	class:SortRef
cast_ast	z3.obj/include/z3++.h	/^    template<> class cast_ast<ast> {$/;"	c	namespace:z3
cast_ast	z3.obj/include/z3++.h	/^    template<> class cast_ast<expr> {$/;"	c	namespace:z3
cast_ast	z3.obj/include/z3++.h	/^    template<> class cast_ast<func_decl> {$/;"	c	namespace:z3
cast_ast	z3.obj/include/z3++.h	/^    template<> class cast_ast<sort> {$/;"	c	namespace:z3
cast_away_const	svf/lib/Util/cJSON.cpp	/^static void* cast_away_const(const void* string)$/;"	f	file:
cast_convert_val	svf/include/Util/Casting.h	/^template<class To, class From, class SimpleFrom> struct cast_convert_val$/;"	s	namespace:SVF::SVFUtil
cast_convert_val	svf/include/Util/Casting.h	/^template<class To, class FromTy> struct cast_convert_val<To,FromTy,FromTy>$/;"	s	namespace:SVF::SVFUtil
cast_retty	svf/include/Util/Casting.h	/^struct cast_retty$/;"	s	namespace:SVF::SVFUtil
cast_retty_impl	svf/include/Util/Casting.h	/^struct cast_retty_impl<To, std::unique_ptr<From>>$/;"	s	namespace:SVF::SVFUtil
cast_retty_impl	svf/include/Util/Casting.h	/^template<class To, class From> struct cast_retty_impl$/;"	s	namespace:SVF::SVFUtil
cast_retty_impl	svf/include/Util/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, From*>$/;"	s	namespace:SVF::SVFUtil
cast_retty_impl	svf/include/Util/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From*>$/;"	s	namespace:SVF::SVFUtil
cast_retty_impl	svf/include/Util/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From*const>$/;"	s	namespace:SVF::SVFUtil
cast_retty_impl	svf/include/Util/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From>$/;"	s	namespace:SVF::SVFUtil
cast_retty_wrap	svf/include/Util/Casting.h	/^struct cast_retty_wrap$/;"	s	namespace:SVF::SVFUtil
cast_retty_wrap	svf/include/Util/Casting.h	/^struct cast_retty_wrap<To, FromTy, FromTy>$/;"	s	namespace:SVF::SVFUtil
cbv	svf/include/MemoryModel/PointsTo.h	/^        CoreBitVector cbv;$/;"	m	union:SVF::PointsTo::__anon19
cbv	svf/include/Util/CoreBitVector.h	/^        CoreBitVectorIterator &operator=(CoreBitVectorIterator &&cbv) = default;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
cbv	svf/include/Util/CoreBitVector.h	/^        CoreBitVectorIterator &operator=(const CoreBitVectorIterator &cbv) = default;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
cbv	svf/include/Util/CoreBitVector.h	/^        CoreBitVectorIterator(CoreBitVectorIterator &&cbv) = default;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
cbv	svf/include/Util/CoreBitVector.h	/^        CoreBitVectorIterator(const CoreBitVectorIterator &cbv) = default;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
cbv	svf/include/Util/CoreBitVector.h	/^        const CoreBitVector *cbv;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
cbvIt	svf/include/MemoryModel/PointsTo.h	/^            CoreBitVector::iterator cbvIt;$/;"	m	union:SVF::PointsTo::PointsToIterator::__anon20
cflEdgeSet	svf/include/Graphs/CFLGraph.h	/^    CFLEdgeSet cflEdgeSet;$/;"	m	class:SVF::CFLGraph
cflGraph	svf/include/CFL/CFLGraphBuilder.h	/^    CFLGraph *cflGraph;$/;"	m	class:SVF::CFLGraphBuilder
cg	svf/include/Graphs/ThreadCallGraph.h	/^    ThreadCallGraph(ThreadCallGraph& cg) = delete;$/;"	m	class:SVF::ThreadCallGraph
cgNode	svf/include/SVFIR/SVFVariables.h	/^    const FunObjVar* cgNode;$/;"	m	class:SVF::ArgValVar
cha	svf-llvm/lib/DCHG.cpp	/^const NodeBS &DCHGraph::cha(const DIType *type, bool firstField)$/;"	f	class:DCHGraph
chaFFMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, NodeBS> chaFFMap;$/;"	m	class:SVF::DCHGraph
chaMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, NodeBS> chaMap;$/;"	m	class:SVF::DCHGraph
check	svf/include/CFL/CFLGramGraphChecker.h	/^    void check(GrammarBase *grammar, CFLGraphBuilder *graphBuilder, CFLGraph *graph)$/;"	f	class:SVF::CFLGramGraphChecker
check	z3.obj/bin/python/z3/z3.py	/^    def check(self, *assumptions):$/;"	m	class:Optimize
check	z3.obj/bin/python/z3/z3.py	/^    def check(self, *assumptions):$/;"	m	class:Solver
check	z3.obj/include/z3++.h	/^        check_result check() { Z3_lbool r = Z3_optimize_check(ctx(), m_opt, 0, 0); check_error(); return to_check_result(r); }$/;"	f	class:z3::optimize
check	z3.obj/include/z3++.h	/^        check_result check() { Z3_lbool r = Z3_solver_check(ctx(), m_solver); check_error(); return to_check_result(r); }$/;"	f	class:z3::solver
check	z3.obj/include/z3++.h	/^        check_result check(expr_vector const& asms) {$/;"	f	class:z3::optimize
check	z3.obj/include/z3++.h	/^        check_result check(expr_vector const& assumptions) {$/;"	f	class:z3::solver
check	z3.obj/include/z3++.h	/^        check_result check(unsigned n, expr * const assumptions) {$/;"	f	class:z3::solver
checkAndRemap	svf/include/MemoryModel/ConditionalPT.h	/^    void checkAndRemap(void) const { }$/;"	f	class:SVF::CondStdSet
checkAndRemap	svf/lib/MemoryModel/PointsTo.cpp	/^void PointsTo::checkAndRemap()$/;"	f	class:SVF::PointsTo
checkArgTypes	svf/lib/Graphs/CHG.cpp	/^static bool checkArgTypes(const CallICFGNode* cs, const FunObjVar* fn)$/;"	f	file:
checkICFGNodesVisited	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::checkICFGNodesVisited(const Function* fun)$/;"	f	class:ICFGBuilder
checkIntraEdgeParents	svf/include/Graphs/ICFG.h	/^    inline void checkIntraEdgeParents(const ICFGNode *srcNode, const ICFGNode *dstNode)$/;"	f	class:SVF::ICFG
checkIntraEdgeParents	svf/include/Graphs/VFG.h	/^    inline void checkIntraEdgeParents(const VFGNode *srcNode, const VFGNode *dstNode)$/;"	f	class:SVF::VFG
checkParameter	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::checkParameter()$/;"	f	class:SVF::CFLBase
checkParameter	svf/lib/CFL/CFLVF.cpp	/^void CFLVF::checkParameter()$/;"	f	class:CFLVF
checkPointAllSet	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::checkPointAllSet()$/;"	f	class:AbstractInterpretation
checkRelation	svf/lib/MemoryModel/AccessPath.cpp	/^SVF::AccessPath::LSRelation AccessPath::checkRelation(const AccessPath& LHS, const AccessPath& RHS)$/;"	f	class:AccessPath
checkSelfCycleEdges	svf/lib/Graphs/SVFGOPT.cpp	/^bool SVFGOPT::checkSelfCycleEdges(const MSSAPHISVFGNode* node)$/;"	f	class:SVFGOPT
check_and_install_brew	build.sh	/^function check_and_install_brew {$/;"	f
check_context	z3.obj/include/z3++.h	/^    inline void check_context(object const & a, object const & b) { (void)a; (void)b; assert(a.m_ctx == b.m_ctx); }$/;"	f	namespace:z3
check_error	z3.obj/include/z3++.h	/^        Z3_error_code check_error() const { return m_ctx->check_error(); }$/;"	f	class:z3::object
check_error	z3.obj/include/z3++.h	/^        Z3_error_code check_error() const {$/;"	f	class:z3::context
check_head	svf/lib/CFL/CFGNormalizer.cpp	/^GrammarBase::Symbol CFGNormalizer::check_head(GrammarBase::SymbolMap<GrammarBase::Symbol, GrammarBase::Productions> &grammar, GrammarBase::Production &rule)$/;"	f	class:CFGNormalizer
check_parser_error	z3.obj/include/z3++.h	/^        void check_parser_error() const {$/;"	f	class:z3::context
check_result	z3.obj/include/z3++.h	/^    enum check_result {$/;"	g	namespace:z3
check_unzip	build.sh	/^function check_unzip {$/;"	f
check_xz	build.sh	/^function check_xz {$/;"	f
checkpoints	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Set<const CallICFGNode*> checkpoints; \/\/ for CI check$/;"	m	class:SVF::AbstractInterpretation
chg	svf-llvm/include/SVF-LLVM/CHGBuilder.h	/^    CHGraph* chg;$/;"	m	class:SVF::CHGBuilder
chgraph	svf/include/MemoryModel/PointerAnalysis.h	/^    CommonCHGraph *chgraph;$/;"	m	class:SVF::PointerAnalysis
chgraph	svf/include/SVFIR/SVFIR.h	/^    CommonCHGraph* chgraph; \/\/ class hierarchy graph$/;"	m	class:SVF::SVFIR
child	svf/include/Util/cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);$/;"	v
child	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);$/;"	v
child_begin	svf/include/Graphs/GenericGraph.h	/^    static inline ChildIteratorType child_begin(const NodeType* N)$/;"	f	struct:SVF::GenericGraphTraits
child_end	svf/include/Graphs/GenericGraph.h	/^    static inline ChildIteratorType child_end(const NodeType* N)$/;"	f	struct:SVF::GenericGraphTraits
child_iterator	svf/include/Graphs/SCC.h	/^    typedef typename GTraits::ChildIteratorType child_iterator;$/;"	t	class:SVF::SCCDetection
child_iterator	svf/include/SABER/SrcSnkSolver.h	/^    typedef typename GTraits::ChildIteratorType child_iterator;$/;"	t	class:SVF::SrcSnkSolver
child_iterator	svf/include/Util/GraphReachSolver.h	/^    typedef typename GTraits::ChildIteratorType child_iterator;$/;"	t	class:SVF::GraphReachSolver
child_iterator	svf/include/WPA/WPAFSSolver.h	/^    typedef typename WPASolver<GraphType>::child_iterator child_iterator;$/;"	t	class:SVF::WPAMinimumSolver
child_iterator	svf/include/WPA/WPAFSSolver.h	/^    typedef typename WPASolver<GraphType>::child_iterator child_iterator;$/;"	t	class:SVF::WPASCCSolver
child_iterator	svf/include/WPA/WPASolver.h	/^    typedef typename GTraits::ChildIteratorType child_iterator;$/;"	t	class:SVF::WPASolver
children	svf/include/CFL/CFLSolver.h	/^        std::unordered_set<TreeNode*> children;$/;"	m	struct:SVF::POCRHybridSolver::TreeNode
children	svf/include/Graphs/GraphTraits.h	/^children(const typename GenericGraphTraits<GraphType>::NodeRef &G)$/;"	f	namespace:SVF
children	z3.obj/bin/python/z3/z3.py	/^    def children(self):$/;"	m	class:ExprRef
children	z3.obj/bin/python/z3/z3.py	/^    def children(self):$/;"	m	class:QuantifierRef
children	z3.obj/bin/python/z3/z3printer.py	/^    def children(self):$/;"	m	class:FormatObject
children	z3.obj/bin/python/z3/z3printer.py	/^    def children(self):$/;"	m	class:IndentFormatObject
children	z3.obj/bin/python/z3/z3printer.py	/^    def children(self):$/;"	m	class:NAryFormatObject
children_edges	svf/include/Graphs/GraphTraits.h	/^children_edges(const typename GenericGraphTraits<GraphType>::NodeRef &G)$/;"	f	namespace:SVF
ciLocktoSpan	svf/include/MTA/LockAnalysis.h	/^    CILockToSpan ciLocktoSpan;$/;"	m	class:SVF::LockAnalysis
cjson_min	svf/lib/Util/cJSON.cpp	1187;"	d	file:
ckAPI	svf/include/SABER/SaberCheckerAPI.h	/^    static SaberCheckerAPI* ckAPI;$/;"	m	class:SVF::SaberCheckerAPI
className	svf-llvm/include/SVF-LLVM/CppUtil.h	/^    std::string className;$/;"	m	struct:SVF::cppUtil::DemangledName
className	svf/include/Graphs/CHG.h	/^    std::string className;$/;"	m	class:SVF::CHNode
classNameToAncestorsMap	svf/include/Graphs/CHG.h	/^    NameToCHNodesMap classNameToAncestorsMap;$/;"	m	class:SVF::CHGraph
classNameToDescendantsMap	svf/include/Graphs/CHG.h	/^    NameToCHNodesMap classNameToDescendantsMap;$/;"	m	class:SVF::CHGraph
classNameToInstAndDescsMap	svf/include/Graphs/CHG.h	/^    NameToCHNodesMap classNameToInstAndDescsMap;$/;"	m	class:SVF::CHGraph
classNameToNodeMap	svf/include/Graphs/CHG.h	/^    Map<std::string, CHNode*> classNameToNodeMap;$/;"	m	class:SVF::CHGraph
classNum	svf/include/Graphs/CHG.h	/^    u32_t classNum;$/;"	m	class:SVF::CHGraph
classTyHasVTable	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::classTyHasVTable(const StructType* ty)$/;"	f	class:cppUtil
classof	svf-llvm/include/SVF-LLVM/DCHG.h	/^    static inline bool classof(const CommonCHGraph *chg)$/;"	f	class:SVF::DCHGraph
classof	svf/include/AE/Svfexe/AEDetector.h	/^    static bool classof(const AEDetector* detector)$/;"	f	class:SVF::AEDetector
classof	svf/include/AE/Svfexe/AEDetector.h	/^    static bool classof(const AEDetector* detector)$/;"	f	class:SVF::BufOverflowDetector
classof	svf/include/CFL/CFGrammar.h	/^    static inline bool classof(const CFGrammar *)$/;"	f	class:SVF::CFGrammar
classof	svf/include/CFL/CFGrammar.h	/^    static inline bool classof(const GrammarBase *node)$/;"	f	class:SVF::CFGrammar
classof	svf/include/Graphs/BasicBlockG.h	/^    static inline bool classof(const SVFBasicBlock* node)$/;"	f	class:SVF::SVFBasicBlock
classof	svf/include/Graphs/BasicBlockG.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::SVFBasicBlock
classof	svf/include/Graphs/CDG.h	/^    static inline bool classof(const CDGNode *)$/;"	f	class:SVF::CDGNode
classof	svf/include/Graphs/CDG.h	/^    static inline bool classof(const GenericICFGNodeTy* node)$/;"	f	class:SVF::CDGNode
classof	svf/include/Graphs/CDG.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::CDGNode
classof	svf/include/Graphs/CFLGraph.h	/^    static inline bool classof(const CFLNode *)$/;"	f	class:SVF::CFLNode
classof	svf/include/Graphs/CFLGraph.h	/^    static inline bool classof(const GenericICFGNodeTy* node)$/;"	f	class:SVF::CFLNode
classof	svf/include/Graphs/CFLGraph.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::CFLNode
classof	svf/include/Graphs/CHG.h	/^    static inline bool classof(const CHNode *)$/;"	f	class:SVF::CHNode
classof	svf/include/Graphs/CHG.h	/^    static inline bool classof(const CommonCHGraph *chg)$/;"	f	class:SVF::CHGraph
classof	svf/include/Graphs/CHG.h	/^    static inline bool classof(const GenericCHNodeTy * node)$/;"	f	class:SVF::CHNode
classof	svf/include/Graphs/CHG.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::CHNode
classof	svf/include/Graphs/CallGraph.h	/^    static inline bool classof(const CallGraphEdge*)$/;"	f	class:SVF::CallGraphEdge
classof	svf/include/Graphs/CallGraph.h	/^    static inline bool classof(const CallGraphNode*)$/;"	f	class:SVF::CallGraphNode
classof	svf/include/Graphs/CallGraph.h	/^    static inline bool classof(const GenericICFGNodeTy* node)$/;"	f	class:SVF::CallGraphNode
classof	svf/include/Graphs/CallGraph.h	/^    static inline bool classof(const GenericPTACallGraphEdgeTy *edge)$/;"	f	class:SVF::CallGraphEdge
classof	svf/include/Graphs/CallGraph.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::CallGraphNode
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const AddrCGEdge *)$/;"	f	class:SVF::AddrCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::AddrCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::CopyCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::GepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::LoadCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::NormalGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::StoreCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const ConstraintEdge *edge)$/;"	f	class:SVF::VariantGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const CopyCGEdge *)$/;"	f	class:SVF::CopyCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::AddrCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::ConstraintEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::CopyCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::GepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::LoadCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::NormalGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::StoreCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GenericConsEdgeTy *edge)$/;"	f	class:SVF::VariantGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GepCGEdge *)$/;"	f	class:SVF::GepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GepCGEdge *edge)$/;"	f	class:SVF::NormalGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const GepCGEdge *edge)$/;"	f	class:SVF::VariantGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const LoadCGEdge *)$/;"	f	class:SVF::LoadCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const NormalGepCGEdge *)$/;"	f	class:SVF::NormalGepCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const StoreCGEdge *)$/;"	f	class:SVF::StoreCGEdge
classof	svf/include/Graphs/ConsGEdge.h	/^    static inline bool classof(const VariantGepCGEdge *)$/;"	f	class:SVF::VariantGepCGEdge
classof	svf/include/Graphs/ConsGNode.h	/^    static inline bool classof(const ConstraintNode *)$/;"	f	class:SVF::ConstraintNode
classof	svf/include/Graphs/ConsGNode.h	/^    static inline bool classof(const GenericICFGNodeTy* node)$/;"	f	class:SVF::ConstraintNode
classof	svf/include/Graphs/ConsGNode.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstraintNode
classof	svf/include/Graphs/GenericGraph.h	/^    static inline bool classof(const GenericNode<NodeTy, EdgeTy>*)$/;"	f	class:SVF::GenericNode
classof	svf/include/Graphs/GenericGraph.h	/^    static inline bool classof(const SVFValue*)$/;"	f	class:SVF::GenericNode
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const CallCFGEdge*)$/;"	f	class:SVF::CallCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const GenericICFGEdgeTy* edge)$/;"	f	class:SVF::CallCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const GenericICFGEdgeTy* edge)$/;"	f	class:SVF::IntraCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const GenericICFGEdgeTy* edge)$/;"	f	class:SVF::RetCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const ICFGEdge* edge)$/;"	f	class:SVF::CallCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const ICFGEdge* edge)$/;"	f	class:SVF::IntraCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const ICFGEdge* edge)$/;"	f	class:SVF::RetCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const IntraCFGEdge*)$/;"	f	class:SVF::IntraCFGEdge
classof	svf/include/Graphs/ICFGEdge.h	/^    static inline bool classof(const RetCFGEdge*)$/;"	f	class:SVF::RetCFGEdge
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const CallICFGNode *)$/;"	f	class:SVF::CallICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const FunEntryICFGNode *)$/;"	f	class:SVF::FunEntryICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const FunEntryICFGNode *)$/;"	f	class:SVF::FunExitICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy *node)$/;"	f	class:SVF::CallICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy *node)$/;"	f	class:SVF::FunEntryICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy *node)$/;"	f	class:SVF::FunExitICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy *node)$/;"	f	class:SVF::GlobalICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy *node)$/;"	f	class:SVF::IntraICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy *node)$/;"	f	class:SVF::RetICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy* node)$/;"	f	class:SVF::ICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GenericICFGNodeTy* node)$/;"	f	class:SVF::InterICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const GlobalICFGNode *)$/;"	f	class:SVF::GlobalICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *)$/;"	f	class:SVF::ICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *node)$/;"	f	class:SVF::CallICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *node)$/;"	f	class:SVF::FunEntryICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *node)$/;"	f	class:SVF::FunExitICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *node)$/;"	f	class:SVF::GlobalICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *node)$/;"	f	class:SVF::IntraICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode *node)$/;"	f	class:SVF::RetICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const ICFGNode* node)$/;"	f	class:SVF::InterICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const InterICFGNode *)$/;"	f	class:SVF::InterICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const InterICFGNode *node)$/;"	f	class:SVF::CallICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const InterICFGNode *node)$/;"	f	class:SVF::FunEntryICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const InterICFGNode *node)$/;"	f	class:SVF::FunExitICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const InterICFGNode *node)$/;"	f	class:SVF::RetICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const IntraICFGNode *)$/;"	f	class:SVF::IntraICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const RetICFGNode *)$/;"	f	class:SVF::RetICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::InterICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::CallICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::FunEntryICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::FunExitICFGNode
classof	svf/include/Graphs/ICFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::RetICFGNode
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const CallIndSVFGEdge *)$/;"	f	class:SVF::CallIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::CallIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::IndirectSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::IntraIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::RetIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::ThreadMHPIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const IndirectSVFGEdge *)$/;"	f	class:SVF::IndirectSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const IndirectSVFGEdge *edge)$/;"	f	class:SVF::CallIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const IndirectSVFGEdge *edge)$/;"	f	class:SVF::IntraIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const IndirectSVFGEdge *edge)$/;"	f	class:SVF::RetIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const IndirectSVFGEdge *edge)$/;"	f	class:SVF::ThreadMHPIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const IntraIndSVFGEdge*)$/;"	f	class:SVF::IntraIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const RetIndSVFGEdge *)$/;"	f	class:SVF::RetIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const ThreadMHPIndSVFGEdge*)$/;"	f	class:SVF::ThreadMHPIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::CallIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::IndirectSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::IntraIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::RetIndSVFGEdge
classof	svf/include/Graphs/SVFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::ThreadMHPIndSVFGEdge
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const ActualINSVFGNode *)$/;"	f	class:SVF::ActualINSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const ActualOUTSVFGNode *)$/;"	f	class:SVF::ActualOUTSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const DummyVersionPropSVFGNode *)$/;"	f	class:SVF::DummyVersionPropSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const FormalINSVFGNode *)$/;"	f	class:SVF::FormalINSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const FormalOUTSVFGNode *)$/;"	f	class:SVF::FormalOUTSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::ActualINSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::ActualOUTSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::DummyVersionPropSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::FormalINSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::FormalOUTSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::InterMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::IntraMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::MRSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::MSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const InterMSSAPHISVFGNode *)$/;"	f	class:SVF::InterMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const IntraMSSAPHISVFGNode *)$/;"	f	class:SVF::IntraMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MRSVFGNode *)$/;"	f	class:SVF::MRSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MRSVFGNode *node)$/;"	f	class:SVF::InterMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MRSVFGNode *node)$/;"	f	class:SVF::IntraMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MRSVFGNode *node)$/;"	f	class:SVF::MSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MSSAPHISVFGNode * node)$/;"	f	class:SVF::InterMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MSSAPHISVFGNode * node)$/;"	f	class:SVF::IntraMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const MSSAPHISVFGNode *)$/;"	f	class:SVF::MSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::ActualINSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::ActualOUTSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::DummyVersionPropSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::FormalINSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::FormalOUTSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::InterMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::IntraMSSAPHISVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::MRSVFGNode
classof	svf/include/Graphs/SVFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::MSSAPHISVFGNode
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const CallGraph*g)$/;"	f	class:SVF::ThreadCallGraph
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const CallGraphEdge*edge)$/;"	f	class:SVF::HareParForEdge
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const CallGraphEdge*edge)$/;"	f	class:SVF::ThreadForkEdge
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const CallGraphEdge*edge)$/;"	f	class:SVF::ThreadJoinEdge
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const HareParForEdge*)$/;"	f	class:SVF::HareParForEdge
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const ThreadCallGraph *)$/;"	f	class:SVF::ThreadCallGraph
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const ThreadForkEdge*)$/;"	f	class:SVF::ThreadForkEdge
classof	svf/include/Graphs/ThreadCallGraph.h	/^    static inline bool classof(const ThreadJoinEdge*)$/;"	f	class:SVF::ThreadJoinEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const CallDirSVFGEdge *)$/;"	f	class:SVF::CallDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const DirectSVFGEdge *)$/;"	f	class:SVF::DirectSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const DirectSVFGEdge *edge)$/;"	f	class:SVF::CallDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const DirectSVFGEdge *edge)$/;"	f	class:SVF::IntraDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const DirectSVFGEdge *edge)$/;"	f	class:SVF::RetDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::CallDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::DirectSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::IntraDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const GenericVFGEdgeTy *edge)$/;"	f	class:SVF::RetDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const IntraDirSVFGEdge*)$/;"	f	class:SVF::IntraDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const RetDirSVFGEdge *)$/;"	f	class:SVF::RetDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::CallDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::DirectSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::IntraDirSVFGEdge
classof	svf/include/Graphs/VFGEdge.h	/^    static inline bool classof(const VFGEdge *edge)$/;"	f	class:SVF::RetDirSVFGEdge
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ActualParmVFGNode *)$/;"	f	class:SVF::ActualParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ActualRetVFGNode *)$/;"	f	class:SVF::ActualRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const AddrVFGNode *)$/;"	f	class:SVF::AddrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ArgumentVFGNode *)$/;"	f	class:SVF::ArgumentVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ArgumentVFGNode *node)$/;"	f	class:SVF::ActualParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ArgumentVFGNode *node)$/;"	f	class:SVF::ActualRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ArgumentVFGNode *node)$/;"	f	class:SVF::FormalParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const ArgumentVFGNode *node)$/;"	f	class:SVF::FormalRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const BinaryOPVFGNode *)$/;"	f	class:SVF::BinaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const BranchVFGNode *)$/;"	f	class:SVF::BranchVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const CmpVFGNode *)$/;"	f	class:SVF::CmpVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const CopyVFGNode *)$/;"	f	class:SVF::CopyVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const FormalParmVFGNode *)$/;"	f	class:SVF::FormalParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const FormalRetVFGNode )$/;"	f	class:SVF::FormalRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy * node)$/;"	f	class:SVF::VFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::ActualParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::ActualRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::AddrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::ArgumentVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::BinaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::BranchVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::CmpVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::CopyVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::FormalParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::FormalRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::GepVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::InterPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::IntraPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::LoadVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::NullPtrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::PHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::StmtVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::StoreVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GenericVFGNodeTy *node)$/;"	f	class:SVF::UnaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const GepVFGNode *)$/;"	f	class:SVF::GepVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const InterPHIVFGNode*)$/;"	f	class:SVF::InterPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const IntraPHIVFGNode*)$/;"	f	class:SVF::IntraPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const LoadVFGNode *)$/;"	f	class:SVF::LoadVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const NullPtrVFGNode *)$/;"	f	class:SVF::NullPtrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const PHIVFGNode *)$/;"	f	class:SVF::PHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const PHIVFGNode *node)$/;"	f	class:SVF::InterPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const PHIVFGNode *node)$/;"	f	class:SVF::IntraPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::VFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::ActualParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::ActualRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::AddrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::ArgumentVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::BinaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::BranchVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::CmpVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::CopyVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::FormalParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::FormalRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::GepVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::InterPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::IntraPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::LoadVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::NullPtrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::PHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::StmtVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::StoreVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::UnaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StmtVFGNode *)$/;"	f	class:SVF::StmtVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StmtVFGNode *node)$/;"	f	class:SVF::AddrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StmtVFGNode *node)$/;"	f	class:SVF::CopyVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StmtVFGNode *node)$/;"	f	class:SVF::GepVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StmtVFGNode *node)$/;"	f	class:SVF::LoadVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StmtVFGNode *node)$/;"	f	class:SVF::StoreVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const StoreVFGNode *)$/;"	f	class:SVF::StoreVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const UnaryOPVFGNode *)$/;"	f	class:SVF::UnaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *)$/;"	f	class:SVF::VFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::ActualParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::ActualRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::AddrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::ArgumentVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::BinaryOPVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::BranchVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::CmpVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::CopyVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::FormalParmVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::FormalRetVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::GepVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::InterPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::IntraPHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::LoadVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::NullPtrVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::PHIVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::StmtVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::StoreVFGNode
classof	svf/include/Graphs/VFGNode.h	/^    static inline bool classof(const VFGNode *node)$/;"	f	class:SVF::UnaryOPVFGNode
classof	svf/include/Graphs/WTO.h	/^    static inline bool classof(const WTOComponent<GraphT>* c)$/;"	f	class:SVF::final
classof	svf/include/Graphs/WTO.h	/^    static inline bool classof(const WTOCycle<GraphT>*)$/;"	f	class:SVF::final
classof	svf/include/Graphs/WTO.h	/^    static inline bool classof(const WTONode<GraphT>*)$/;"	f	class:SVF::final
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const CallCHI * chi)$/;"	f	class:SVF::CallCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const CallMU *)$/;"	f	class:SVF::CallMU
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const EntryCHI * chi)$/;"	f	class:SVF::EntryCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const LoadMU *)$/;"	f	class:SVF::LoadMU
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSACHI * chi)$/;"	f	class:SVF::MSSACHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSACHI<Cond> * chi)$/;"	f	class:SVF::CallCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSACHI<Cond> * chi)$/;"	f	class:SVF::EntryCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSACHI<Cond> * chi)$/;"	f	class:SVF::StoreCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSADEF *chi)$/;"	f	class:SVF::CallCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSADEF *chi)$/;"	f	class:SVF::EntryCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSADEF *chi)$/;"	f	class:SVF::MSSACHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSADEF *chi)$/;"	f	class:SVF::StoreCHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSADEF *phi)$/;"	f	class:SVF::MSSAPHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSAMU<Cond> *mu)$/;"	f	class:SVF::CallMU
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSAMU<Cond> *mu)$/;"	f	class:SVF::LoadMU
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSAMU<Cond> *mu)$/;"	f	class:SVF::RetMU
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const MSSAPHI * phi)$/;"	f	class:SVF::MSSAPHI
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const RetMU *)$/;"	f	class:SVF::RetMU
classof	svf/include/MSSA/MSSAMuChi.h	/^    static inline bool classof(const StoreCHI * chi)$/;"	f	class:SVF::StoreCHI
classof	svf/include/MTA/TCT.h	/^    static inline bool classof(const GenericTCTEdgeTy *edge)$/;"	f	class:SVF::TCTEdge
classof	svf/include/MTA/TCT.h	/^    static inline bool classof(const GenericTCTNodeTy *node)$/;"	f	class:SVF::TCTNode
classof	svf/include/MTA/TCT.h	/^    static inline bool classof(const SVFValue*node)$/;"	f	class:SVF::TCTNode
classof	svf/include/MTA/TCT.h	/^    static inline bool classof(const TCTEdge*)$/;"	f	class:SVF::TCTEdge
classof	svf/include/MTA/TCT.h	/^    static inline bool classof(const TCTNode *)$/;"	f	class:SVF::TCTNode
classof	svf/include/MemoryModel/AbstractPointsToDS.h	/^    static inline bool classof(const DFPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::DFPTData
classof	svf/include/MemoryModel/AbstractPointsToDS.h	/^    static inline bool classof(const DiffPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::DiffPTData
classof	svf/include/MemoryModel/AbstractPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::DFPTData
classof	svf/include/MemoryModel/AbstractPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::DiffPTData
classof	svf/include/MemoryModel/AbstractPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::VersionedPTData
classof	svf/include/MemoryModel/AbstractPointsToDS.h	/^    static inline bool classof(const VersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet> *)$/;"	f	class:SVF::VersionedPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const MutableDFPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::MutableDFPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const MutableDiffPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::MutableDiffPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const MutableIncDFPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::MutableIncDFPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const MutablePTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::MutablePTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const MutableVersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet> *)$/;"	f	class:SVF::MutableVersionedPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::MutableDFPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::MutableDiffPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::MutableIncDFPTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::MutablePTData
classof	svf/include/MemoryModel/MutablePointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::MutableVersionedPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet> *ptd)$/;"	f	class:SVF::PersistentDFPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet> *ptd)$/;"	f	class:SVF::PersistentIncDFPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::PersistentDiffPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::PersistentPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PTData<Key, KeySet, Data, DataSet>* ptd)$/;"	f	class:SVF::PersistentVersionedPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PersistentDFPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::PersistentDFPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PersistentDiffPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::PersistentDiffPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PersistentIncDFPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::PersistentIncDFPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PersistentPTData<Key, KeySet, Data, DataSet> *)$/;"	f	class:SVF::PersistentPTData
classof	svf/include/MemoryModel/PersistentPointsToDS.h	/^    static inline bool classof(const PersistentVersionedPTData<Key, KeySet, Data, DataSet, VersionedKey, VersionedKeySet> *)$/;"	f	class:SVF::PersistentVersionedPTData
classof	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::BVDataPTAImpl
classof	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::CondPTAImpl
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const AddrStmt*)$/;"	f	class:SVF::AddrStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const AssignStmt*)$/;"	f	class:SVF::AssignStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const BinaryOPStmt*)$/;"	f	class:SVF::BinaryOPStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const BranchStmt*)$/;"	f	class:SVF::BranchStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const CallPE*)$/;"	f	class:SVF::CallPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const CmpStmt*)$/;"	f	class:SVF::CmpStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const CopyStmt*)$/;"	f	class:SVF::CopyStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::AddrStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::AssignStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::BinaryOPStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::BranchStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::CallPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::CmpStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::CopyStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::GepStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::LoadStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::PhiStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::RetPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::SVFStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::SelectStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::StoreStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::TDForkPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::TDJoinPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* edge)$/;"	f	class:SVF::UnaryOPStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GenericPAGEdgeTy* node)$/;"	f	class:SVF::MultiOpndStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const GepStmt*)$/;"	f	class:SVF::GepStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const LoadStmt*)$/;"	f	class:SVF::LoadStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const MultiOpndStmt* edge)$/;"	f	class:SVF::BinaryOPStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const MultiOpndStmt* edge)$/;"	f	class:SVF::CmpStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const MultiOpndStmt* edge)$/;"	f	class:SVF::PhiStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const MultiOpndStmt* edge)$/;"	f	class:SVF::SelectStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const MultiOpndStmt*)$/;"	f	class:SVF::MultiOpndStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const PhiStmt*)$/;"	f	class:SVF::PhiStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const RetPE*)$/;"	f	class:SVF::RetPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::AddrStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::AssignStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::BinaryOPStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::BranchStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::CallPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::CmpStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::CopyStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::GepStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::LoadStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::PhiStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::RetPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::SelectStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::StoreStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::TDForkPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::TDJoinPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* edge)$/;"	f	class:SVF::UnaryOPStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt* node)$/;"	f	class:SVF::MultiOpndStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SVFStmt*)$/;"	f	class:SVF::SVFStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const SelectStmt*)$/;"	f	class:SVF::SelectStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const StoreStmt*)$/;"	f	class:SVF::StoreStmt
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const TDForkPE*)$/;"	f	class:SVF::TDForkPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const TDJoinPE*)$/;"	f	class:SVF::TDJoinPE
classof	svf/include/SVFIR/SVFStatements.h	/^    static inline bool classof(const UnaryOPStmt*)$/;"	f	class:SVF::UnaryOPStmt
classof	svf/include/SVFIR/SVFType.h	/^    static inline bool classof(const SVFType* node)$/;"	f	class:SVF::SVFArrayType
classof	svf/include/SVFIR/SVFType.h	/^    static inline bool classof(const SVFType* node)$/;"	f	class:SVF::SVFFunctionType
classof	svf/include/SVFIR/SVFType.h	/^    static inline bool classof(const SVFType* node)$/;"	f	class:SVF::SVFIntegerType
classof	svf/include/SVFIR/SVFType.h	/^    static inline bool classof(const SVFType* node)$/;"	f	class:SVF::SVFOtherType
classof	svf/include/SVFIR/SVFType.h	/^    static inline bool classof(const SVFType* node)$/;"	f	class:SVF::SVFPointerType
classof	svf/include/SVFIR/SVFType.h	/^    static inline bool classof(const SVFType* node)$/;"	f	class:SVF::SVFStructType
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ArgValVar*)$/;"	f	class:SVF::ArgValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::ConstAggObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::ConstDataObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::DummyObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::FunObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::GlobalObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::HeapObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar* node)$/;"	f	class:SVF::StackObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BaseObjVar*)$/;"	f	class:SVF::BaseObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const BlackHoleValVar*)$/;"	f	class:SVF::BlackHoleValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstAggObjVar*)$/;"	f	class:SVF::ConstAggObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstAggValVar*)$/;"	f	class:SVF::ConstAggValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataObjVar* node)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataObjVar* node)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataObjVar* node)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataObjVar*)$/;"	f	class:SVF::ConstDataObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataValVar* node)$/;"	f	class:SVF::BlackHoleValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataValVar* node)$/;"	f	class:SVF::ConstFPValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataValVar* node)$/;"	f	class:SVF::ConstIntValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataValVar* node)$/;"	f	class:SVF::ConstNullPtrValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstDataValVar*)$/;"	f	class:SVF::ConstDataValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstFPObjVar*)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstFPValVar*)$/;"	f	class:SVF::ConstFPValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstIntObjVar*)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstIntValVar*)$/;"	f	class:SVF::ConstIntValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstNullPtrObjVar*)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ConstNullPtrValVar*)$/;"	f	class:SVF::ConstNullPtrValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const DummyObjVar*)$/;"	f	class:SVF::DummyObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const DummyValVar*)$/;"	f	class:SVF::DummyValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const FunObjVar*)$/;"	f	class:SVF::FunObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const FunValVar*)$/;"	f	class:SVF::FunValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy * node)$/;"	f	class:SVF::SVFVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy *node)$/;"	f	class:SVF::GepValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ArgValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::BaseObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::BlackHoleValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstAggObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstAggValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstDataObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstDataValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstFPValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstIntValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ConstNullPtrValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::DummyObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::DummyValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::FunObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::FunValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::GepObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::GlobalObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::GlobalValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::HeapObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::RetValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::StackObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::ValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GenericPAGNodeTy* node)$/;"	f	class:SVF::VarArgValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GepObjVar*)$/;"	f	class:SVF::GepObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GepValVar *)$/;"	f	class:SVF::GepValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GlobalObjVar*)$/;"	f	class:SVF::GlobalObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const GlobalValVar*)$/;"	f	class:SVF::GlobalValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const HeapObjVar*)$/;"	f	class:SVF::HeapObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::BaseObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::ConstAggObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::ConstDataObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::DummyObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::FunObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::GepObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::GlobalObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::HeapObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar* node)$/;"	f	class:SVF::StackObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ObjVar*)$/;"	f	class:SVF::ObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const RetValPN*)$/;"	f	class:SVF::RetValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ArgValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::BaseObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::BlackHoleValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstAggObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstAggValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstDataObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstDataValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstFPValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstIntValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ConstNullPtrValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::DummyObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::DummyValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::FunObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::FunValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::GepObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::GepValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::GlobalObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::GlobalValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::HeapObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::RetValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::SVFVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::StackObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::ValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFValue* node)$/;"	f	class:SVF::VarArgValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar *)$/;"	f	class:SVF::SVFVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar *node)$/;"	f	class:SVF::GepValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ArgValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::BaseObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::BlackHoleValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstAggObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstAggValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstDataObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstDataValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstFPObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstFPValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstIntObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstIntValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstNullPtrObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ConstNullPtrValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::DummyObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::DummyValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::FunObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::FunValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::GepObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::GlobalObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::GlobalValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::HeapObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::RetValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::StackObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::ValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const SVFVar* node)$/;"	f	class:SVF::VarArgValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const StackObjVar*)$/;"	f	class:SVF::StackObjVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar * node)$/;"	f	class:SVF::GepValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::ArgValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::BlackHoleValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::ConstAggValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::ConstDataValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::ConstFPValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::ConstIntValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::ConstNullPtrValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::DummyValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::FunValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::GlobalValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::RetValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar* node)$/;"	f	class:SVF::VarArgValPN
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const ValVar*)$/;"	f	class:SVF::ValVar
classof	svf/include/SVFIR/SVFVariables.h	/^    static inline bool classof(const VarArgValPN*)$/;"	f	class:SVF::VarArgValPN
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::BufferOverflowBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::DoubleFreeBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::FileNeverCloseBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::FilePartialCloseBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::FullBufferOverflowBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::FullNullPtrDereferenceBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::NeverFreeBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::PartialBufferOverflowBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::PartialLeakBug
classof	svf/include/Util/SVFBugReport.h	/^    static inline bool classof(const GenericBug *bug)$/;"	f	class:SVF::PartialNullPtrDereferenceBug
classof	svf/include/WPA/Andersen.h	/^    static inline bool classof(const Andersen *)$/;"	f	class:SVF::Andersen
classof	svf/include/WPA/Andersen.h	/^    static inline bool classof(const AndersenBase *)$/;"	f	class:SVF::AndersenBase
classof	svf/include/WPA/Andersen.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::Andersen
classof	svf/include/WPA/Andersen.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::AndersenBase
classof	svf/include/WPA/FlowSensitive.h	/^    static inline bool classof(const FlowSensitive *)$/;"	f	class:SVF::FlowSensitive
classof	svf/include/WPA/FlowSensitive.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::FlowSensitive
classof	svf/include/WPA/Steensgaard.h	/^    static inline bool classof(const AndersenBase* pta)$/;"	f	class:SVF::Steensgaard
classof	svf/include/WPA/Steensgaard.h	/^    static inline bool classof(const PointerAnalysis* pta)$/;"	f	class:SVF::Steensgaard
classof	svf/include/WPA/Steensgaard.h	/^    static inline bool classof(const Steensgaard*)$/;"	f	class:SVF::Steensgaard
classof	svf/include/WPA/TypeAnalysis.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::TypeAnalysis
classof	svf/include/WPA/TypeAnalysis.h	/^    static inline bool classof(const TypeAnalysis *)$/;"	f	class:SVF::TypeAnalysis
classof	svf/include/WPA/VersionedFlowSensitive.h	/^    static inline bool classof(const PointerAnalysis *pta)$/;"	f	class:SVF::VersionedFlowSensitive
classof	svf/include/WPA/VersionedFlowSensitive.h	/^    static inline bool classof(const VersionedFlowSensitive *)$/;"	f	class:SVF::VersionedFlowSensitive
cleanConsCG	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::cleanConsCG(NodeID id)$/;"	f	class:AndersenBase
clear	svf/include/AE/Core/AbstractState.h	/^    void clear()$/;"	f	class:SVF::AbstractState
clear	svf/include/CFL/CFGrammar.h	/^    inline void clear()$/;"	f	class:SVF::CFLFIFOWorkList
clear	svf/include/CFL/CFLSolver.h	/^    virtual void clear()$/;"	f	class:SVF::POCRSolver
clear	svf/include/Graphs/SCC.h	/^    void clear()$/;"	f	class:SVF::SCCDetection
clear	svf/include/MemoryModel/ConditionalPT.h	/^    inline void clear()$/;"	f	class:SVF::CondPointsToSet
clear	svf/include/MemoryModel/ConditionalPT.h	/^    inline void clear()$/;"	f	class:SVF::CondStdSet
clear	svf/include/MemoryModel/PersistentPointsToCache.h	/^    void clear()$/;"	f	class:SVF::PersistentPointsToCache
clear	svf/include/Util/SparseBitVector.h	/^    void clear()$/;"	f	class:SVF::SparseBitVector
clear	svf/include/Util/WorkList.h	/^    inline void clear()$/;"	f	class:SVF::FIFOWorkList
clear	svf/include/Util/WorkList.h	/^    inline void clear()$/;"	f	class:SVF::FILOWorkList
clear	svf/lib/Graphs/SVFGStat.cpp	/^void SVFGStat::clear()$/;"	f	class:SVFGStat
clear	svf/lib/MemoryModel/PointsTo.cpp	/^void PointsTo::clear()$/;"	f	class:SVF::PointsTo
clear	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::clear(void)$/;"	f	class:SVF::CoreBitVector
clear	svf/lib/WPA/CSC.cpp	/^void CSC::clear()$/;"	f	class:CSC
clearAllDFOutVarFlag	svf/include/WPA/FlowSensitive.h	/^    inline void clearAllDFOutVarFlag(const SVFGNode* stmt)$/;"	f	class:SVF::FlowSensitive
clearAllPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline void clearAllPts()$/;"	f	class:SVF::BVDataPTAImpl
clearCFCond	svf/include/SABER/ProgSlice.h	/^    inline void clearCFCond()$/;"	f	class:SVF::ProgSlice
clearCFCond	svf/include/SABER/SaberCondAllocator.h	/^    inline void clearCFCond()$/;"	f	class:SVF::SaberCondAllocator
clearEdges	svf/include/CFL/CFLSolver.h	/^    inline void clearEdges(const NodeID key)$/;"	f	class:SVF::POCRSolver
clearFlagMap	svf/include/MTA/LockAnalysis.h	/^    inline void clearFlagMap()$/;"	f	class:SVF::LockAnalysis
clearFlagMap	svf/include/MTA/MHP.h	/^    inline void clearFlagMap()$/;"	f	class:SVF::ForkJoinAnalysis
clearFullPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline void clearFullPts(NodeID id)$/;"	f	class:SVF::BVDataPTAImpl
clearMSSA	svf/include/Graphs/SVFG.h	/^    inline void clearMSSA()$/;"	f	class:SVF::SVFG
clearPropaPts	svf/include/WPA/Andersen.h	/^    inline void clearPropaPts(NodeID src)$/;"	f	class:SVF::Andersen
clearPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline void clearPts()$/;"	f	class:SVF::CondPTAImpl
clearPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline void clearPts(NodeID id, NodeID element)$/;"	f	class:SVF::BVDataPTAImpl
clearRevPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void clearRevPts(const DataSet &pts, const Key &k)$/;"	f	class:SVF::MutablePTData
clearRevPts	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline void clearRevPts(const DataSet &pts, const Key &k)$/;"	f	class:SVF::PersistentPTData
clearSingleRevPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void clearSingleRevPts(KeySet &revSet, const Key &k)$/;"	f	class:SVF::MutablePTData
clearSingleRevPts	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline void clearSingleRevPts(KeySet &revSet, const Key &k)$/;"	f	class:SVF::PersistentPTData
clearSolitaries	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::clearSolitaries()$/;"	f	class:ConstraintGraph
clearStat	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::clearStat()$/;"	f	class:FlowSensitiveStat
clearStat	svf/lib/WPA/VersionedFlowSensitiveStat.cpp	/^void VersionedFlowSensitiveStat::clearStat()$/;"	f	class:VersionedFlowSensitiveStat
clearVisitedMap	svf/include/SABER/SrcSnkDDA.h	/^    inline void clearVisitedMap()$/;"	f	class:SVF::SrcSnkDDA
clearbkVisited	svf/include/DDA/DDAVFSolver.h	/^    inline void clearbkVisited(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
clpList	svf/include/MTA/LockAnalysis.h	/^    CxtLockProcVec clpList;	\/\/\/ CxtLockProc List$/;"	m	class:SVF::LockAnalysis
clsName	svf-llvm/lib/CppUtil.cpp	/^const std::string clsName = "class.";$/;"	v
cluster	svf/lib/Util/NodeIDAllocator.cpp	/^std::vector<NodeID> NodeIDAllocator::Clusterer::cluster(BVDataPTAImpl *pta, const std::vector<std::pair<NodeID, unsigned>> keys, std::vector<std::pair<hclust_fast_methods, std::vector<NodeID>>> &candidates, std::string evalSubtitle)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
cluster	svf/lib/WPA/Andersen.cpp	/^void Andersen::cluster(void) const$/;"	f	class:Andersen
cluster	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::cluster(void)$/;"	f	class:FlowSensitive
cluster	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::cluster(void)$/;"	f	class:VersionedFlowSensitive
cmpNodeBS	svf/include/Util/SVFUtil.h	/^inline bool cmpNodeBS(const NodeBS& lpts,const NodeBS& rpts)$/;"	f	namespace:SVF::SVFUtil
cmpPts	svf/include/Util/SVFUtil.h	/^inline bool cmpPts (const PointsTo& lpts,const PointsTo& rpts)$/;"	f	namespace:SVF::SVFUtil
collapseField	svf/lib/WPA/Andersen.cpp	/^bool Andersen::collapseField(NodeID nodeId)$/;"	f	class:Andersen
collapseFields	svf/include/WPA/WPASolver.h	/^    virtual void collapseFields() {}$/;"	f	class:SVF::WPASolver
collapseFields	svf/lib/WPA/Andersen.cpp	/^inline void Andersen::collapseFields()$/;"	f	class:Andersen
collapseNodePts	svf/lib/WPA/Andersen.cpp	/^bool Andersen::collapseNodePts(NodeID nodeId)$/;"	f	class:Andersen
collapsePWCNode	svf/lib/WPA/Andersen.cpp	/^inline void Andersen::collapsePWCNode(NodeID nodeId)$/;"	f	class:Andersen
collectArrayInfo	svf-llvm/lib/LLVMModule.cpp	/^StInfo* LLVMModuleSet::collectArrayInfo(const ArrayType* ty)$/;"	f	class:LLVMModuleSet
collectBBCallingProgExit	svf/lib/SABER/SaberCondAllocator.cpp	/^void SaberCondAllocator::collectBBCallingProgExit(const SVFBasicBlock &bb)$/;"	f	class:SaberCondAllocator
collectCallSitePts	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::collectCallSitePts(const CallICFGNode* cs)$/;"	f	class:MRGenerator
collectCandidateQueries	svf/include/DDA/DDAClient.h	/^    virtual inline OrderedNodeSet& collectCandidateQueries(SVFIR* p)$/;"	f	class:SVF::DDAClient
collectCandidateQueries	svf/lib/DDA/DDAClient.cpp	/^OrderedNodeSet& AliasDDAClient::collectCandidateQueries(SVFIR* pag)$/;"	f	class:AliasDDAClient
collectCandidateQueries	svf/lib/DDA/DDAClient.cpp	/^OrderedNodeSet& FunptrDDAClient::collectCandidateQueries(SVFIR* p)$/;"	f	class:FunptrDDAClient
collectCheckPoint	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::collectCheckPoint()$/;"	f	class:AbstractInterpretation
collectCxtInsenEdgeForRecur	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::collectCxtInsenEdgeForRecur(PointerAnalysis* pta, const SVFG* svfg,SVFGEdgeSet& insensitveEdges)$/;"	f	class:DDAPass
collectCxtInsenEdgeForVFCycle	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::collectCxtInsenEdgeForVFCycle(PointerAnalysis* pta, const SVFG* svfg,const SVFGSCC* svfgSCC, SVFGEdgeSet& insensitveEdges)$/;"	f	class:DDAPass
collectCxtLock	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::collectCxtLock()$/;"	f	class:LockAnalysis
collectCycleInfo	svf/lib/WPA/AndersenStat.cpp	/^void AndersenStat::collectCycleInfo(ConstraintGraph* consCG)$/;"	f	class:AndersenStat
collectEntryFunInCallGraph	svf/lib/MTA/TCT.cpp	/^void TCT::collectEntryFunInCallGraph()$/;"	f	class:TCT
collectExtFunAnnotations	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::collectExtFunAnnotations(const Module* mod)$/;"	f	class:LLVMModuleSet
collectGlobals	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::collectGlobals()$/;"	f	class:MRGenerator
collectGlobals	svf/lib/SABER/SaberSVFGBuilder.cpp	/^void SaberSVFGBuilder::collectGlobals(BVDataPTAImpl* pta)$/;"	f	class:SaberSVFGBuilder
collectLockUnlocksites	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::collectLockUnlocksites()$/;"	f	class:LockAnalysis
collectLoopInfoForJoin	svf/lib/MTA/TCT.cpp	/^void TCT::collectLoopInfoForJoin()$/;"	f	class:TCT
collectModRefForCall	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::collectModRefForCall()$/;"	f	class:MRGenerator
collectModRefForLoadStore	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::collectModRefForLoadStore()$/;"	f	class:MRGenerator
collectMultiForkedThreads	svf/lib/MTA/TCT.cpp	/^void TCT::collectMultiForkedThreads()$/;"	f	class:TCT
collectObj	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::collectObj(const Value* val)$/;"	f	class:SymbolTableBuilder
collectRegDefs	svf/include/MSSA/MemSSA.h	/^    inline void collectRegDefs(const SVFBasicBlock* bb, const MemRegion* mr)$/;"	f	class:SVF::MemSSA
collectRegUses	svf/include/MSSA/MemSSA.h	/^    inline void collectRegUses(const MemRegion* mr)$/;"	f	class:SVF::MemSSA
collectRet	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::collectRet(const Function* val)$/;"	f	class:SymbolTableBuilder
collectSCEVInfo	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::collectSCEVInfo()$/;"	f	class:ForkJoinAnalysis
collectSVFTypeInfo	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::collectSVFTypeInfo(const Value* val)$/;"	f	class:SymbolTableBuilder
collectSimpleTypeInfo	svf-llvm/lib/LLVMModule.cpp	/^StInfo* LLVMModuleSet::collectSimpleTypeInfo(const Type* ty)$/;"	f	class:LLVMModuleSet
collectStructInfo	svf-llvm/lib/LLVMModule.cpp	/^StInfo* LLVMModuleSet::collectStructInfo(const StructType* structTy,$/;"	f	class:LLVMModuleSet
collectSym	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::collectSym(const Value* val)$/;"	f	class:SymbolTableBuilder
collectTypeInfo	svf-llvm/lib/LLVMModule.cpp	/^StInfo* LLVMModuleSet::collectTypeInfo(const Type* T)$/;"	f	class:LLVMModuleSet
collectVal	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::collectVal(const Value* val)$/;"	f	class:SymbolTableBuilder
collectVararg	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::collectVararg(const Function* val)$/;"	f	class:SymbolTableBuilder
collectWPANum	svf/include/DDA/DDAClient.h	/^    virtual inline void collectWPANum() {}$/;"	f	class:SVF::DDAClient
compact_str	z3.obj/bin/python/z3/z3rcf.py	/^    def compact_str(self):$/;"	m	class:RCFNum
compare	svf/include/Graphs/WTO.h	/^    int compare(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
compare_double	svf/lib/Util/cJSON.cpp	/^static cJSON_bool compare_double(double a, double b)$/;"	f	file:
complementCache	svf/include/MemoryModel/PersistentPointsToCache.h	/^    OpCache complementCache;$/;"	m	class:SVF::PersistentPointsToCache
complementPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PointsToID complementPts(PointsToID lhs, PointsToID rhs)$/;"	f	class:SVF::PersistentPointsToCache
component	svf/include/Graphs/WTO.h	/^    virtual const WTOCycleT* component(const NodeT* node)$/;"	f	class:SVF::WTO
compose	z3.obj/bin/python/z3/z3printer.py	/^def compose(*args):$/;"	f
computeAllLocations	svf/lib/MemoryModel/AccessPath.cpp	/^NodeBS AccessPath::computeAllLocations() const$/;"	f	class:AccessPath
computeConstantByteOffset	svf/lib/MemoryModel/AccessPath.cpp	/^APOffset AccessPath::computeConstantByteOffset() const$/;"	f	class:AccessPath
computeConstantOffset	svf/lib/MemoryModel/AccessPath.cpp	/^APOffset AccessPath::computeConstantOffset() const$/;"	f	class:AccessPath
computeDDAPts	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual void computeDDAPts(NodeID) {}$/;"	f	class:SVF::PointerAnalysis
computeDDAPts	svf/lib/DDA/ContextDDA.cpp	/^const CxtPtSet& ContextDDA::computeDDAPts(const CxtVar& var)$/;"	f	class:ContextDDA
computeDDAPts	svf/lib/DDA/ContextDDA.cpp	/^void ContextDDA::computeDDAPts(NodeID id)$/;"	f	class:ContextDDA
computeDDAPts	svf/lib/DDA/FlowDDA.cpp	/^void FlowDDA::computeDDAPts(NodeID id)$/;"	f	class:FlowDDA
computeDiffPts	svf/include/WPA/Andersen.h	/^    virtual inline void computeDiffPts(NodeID id)$/;"	f	class:SVF::Andersen
computeGepOffset	svf-llvm/lib/SVFIRBuilder.cpp	/^bool SVFIRBuilder::computeGepOffset(const User *V, AccessPath& ap)$/;"	f	class:SVFIRBuilder
computeIntersections	svf/lib/MSSA/MemPartition.cpp	/^void IntraDisjointMRG::computeIntersections(const NodeBS& cpts, PointsToList& inters)$/;"	f	class:IntraDisjointMRG
computeInvalidCondFromRemovedSUVFEdge	svf/lib/SABER/ProgSlice.cpp	/^ProgSlice::Condition ProgSlice::computeInvalidCondFromRemovedSUVFEdge(const SVFGNode * cur)$/;"	f	class:ProgSlice
computeLocksets	svf/lib/MTA/MTA.cpp	/^LockAnalysis* MTA::computeLocksets(TCT* tct)$/;"	f	class:MTA
computeMHP	svf/lib/MTA/MTA.cpp	/^MHP* MTA::computeMHP()$/;"	f	class:MTA
concat	z3.obj/include/z3++.h	/^    inline expr concat(expr const& a, expr const& b) {$/;"	f	namespace:z3
concat	z3.obj/include/z3++.h	/^    inline expr concat(expr_vector const& args) {$/;"	f	namespace:z3
concreteCxt	svf/include/Util/DPItem.h	/^    ContextCond(ContextCond &&cond) noexcept: context(std::move(cond.context)), concreteCxt(cond.concreteCxt) {}$/;"	f	class:SVF::ContextCond
concreteCxt	svf/include/Util/DPItem.h	/^    bool concreteCxt;$/;"	m	class:SVF::ContextCond
cond	svf/include/MSSA/MSSAMuChi.h	/^    Cond cond;$/;"	m	class:SVF::MSSACHI
cond	svf/include/MSSA/MSSAMuChi.h	/^    Cond cond;$/;"	m	class:SVF::MSSAMU
cond	svf/include/MSSA/MSSAMuChi.h	/^    Cond cond;$/;"	m	class:SVF::MSSAPHI
cond	svf/include/MemoryModel/ConditionalPT.h	/^        Cond cond(void)$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
cond	svf/include/SVFIR/SVFStatements.h	/^    const SVFVar* cond;$/;"	m	class:SVF::BranchStmt
cond	z3.obj/include/z3++.h	/^    inline tactic cond(probe const & p, tactic const & t1, tactic const & t2) {$/;"	f	namespace:z3
condAnd	svf/include/SABER/ProgSlice.h	/^    inline Condition condAnd(const Condition &lhs, const Condition &rhs)$/;"	f	class:SVF::ProgSlice
condAnd	svf/include/SABER/SaberCondAllocator.h	/^    inline Condition condAnd(const Condition& lhs, const Condition& rhs)$/;"	f	class:SVF::SaberCondAllocator
condNeg	svf/include/SABER/ProgSlice.h	/^    inline Condition condNeg(const Condition &cond)$/;"	f	class:SVF::ProgSlice
condNeg	svf/include/SABER/SaberCondAllocator.h	/^    inline Condition condNeg(const Condition& cond)$/;"	f	class:SVF::SaberCondAllocator
condOr	svf/include/SABER/ProgSlice.h	/^    inline Condition condOr(const Condition &lhs, const Condition &rhs)$/;"	f	class:SVF::ProgSlice
condOr	svf/include/SABER/SaberCondAllocator.h	/^    inline Condition condOr(const Condition& lhs, const Condition& rhs)$/;"	f	class:SVF::SaberCondAllocator
condensedIndex	svf/lib/Util/NodeIDAllocator.cpp	/^size_t NodeIDAllocator::Clusterer::condensedIndex(size_t n, size_t i, size_t j)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
condition	svf/include/SVFIR/SVFStatements.h	/^    const SVFVar* condition;$/;"	m	class:SVF::SelectStmt
conditionVar	svf/include/Graphs/ICFGEdge.h	/^    const SVFVar* conditionVar;$/;"	m	class:SVF::IntraCFGEdge
conditionVec	svf/include/SABER/SaberCondAllocator.h	/^    std::vector<Condition> conditionVec;          \/\/\/ vector storing z3expression$/;"	m	class:SVF::SaberCondAllocator
config	z3.obj/include/z3++.h	/^        config() { m_cfg = Z3_mk_config(); }$/;"	f	class:z3::config
config	z3.obj/include/z3++.h	/^    class config {$/;"	c	namespace:z3
connectAInAndFIn	svf/include/Graphs/SVFG.h	/^    virtual inline void connectAInAndFIn(const ActualINSVFGNode* actualIn, const FormalINSVFGNode* formalIn, CallSiteID csId, SVFGEdgeSetTy& edges)$/;"	f	class:SVF::SVFG
connectAParamAndFParam	svf/include/Graphs/VFG.h	/^    virtual inline void connectAParamAndFParam(const PAGNode* csArg, const PAGNode* funArg, const CallICFGNode* cbn, CallSiteID csId, VFGEdgeSetTy& edges)$/;"	f	class:SVF::VFG
connectCaller2CalleeParams	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::connectCaller2CalleeParams(const CallICFGNode* cs, const FunObjVar* F)$/;"	f	class:CFLAlias
connectCaller2CalleeParams	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::connectCaller2CalleeParams(const CallICFGNode* cs,$/;"	f	class:AndersenBase
connectCaller2ForkedFunParams	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::connectCaller2ForkedFunParams(const CallICFGNode* cs, const FunObjVar* F,$/;"	f	class:AndersenBase
connectCallerAndCallee	svf/lib/Graphs/SVFG.cpp	/^void SVFG::connectCallerAndCallee(const CallICFGNode* cs, const FunObjVar* callee, SVFGEdgeSetTy& edges)$/;"	f	class:SVFG
connectCallerAndCallee	svf/lib/Graphs/VFG.cpp	/^void VFG::connectCallerAndCallee(const CallICFGNode* callBlockNode, const FunObjVar* callee, VFGEdgeSetTy& edges)$/;"	f	class:VFG
connectCallerAndCallee	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::connectCallerAndCallee(const CallEdgeMap& newEdges, SVFGEdgeSetTy& edges)$/;"	f	class:FlowSensitive
connectDirSVFGEdgeTimeEnd	svf/include/Graphs/SVFGStat.h	/^    double connectDirSVFGEdgeTimeEnd;$/;"	m	class:SVF::SVFGStat
connectDirSVFGEdgeTimeStart	svf/include/Graphs/SVFGStat.h	/^    double connectDirSVFGEdgeTimeStart;$/;"	m	class:SVF::SVFGStat
connectDirectVFGEdges	svf/lib/Graphs/VFG.cpp	/^void VFG::connectDirectVFGEdges()$/;"	f	class:VFG
connectFOutAndAOut	svf/include/Graphs/SVFG.h	/^    virtual inline void connectFOutAndAOut(const FormalOUTSVFGNode* formalOut, const ActualOUTSVFGNode* actualOut, CallSiteID csId, SVFGEdgeSetTy& edges)$/;"	f	class:SVF::SVFG
connectFRetAndARet	svf/include/Graphs/VFG.h	/^    virtual inline void connectFRetAndARet(const PAGNode* funReturn, const PAGNode* csReturn, CallSiteID csId, VFGEdgeSetTy& edges)$/;"	f	class:SVF::VFG
connectFromGlobalToProgEntry	svf/lib/Graphs/SVFG.cpp	/^void SVFG::connectFromGlobalToProgEntry()$/;"	f	class:SVFG
connectGlobalToProgEntry	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::connectGlobalToProgEntry()$/;"	f	class:ICFGBuilder
connectIndSVFGEdgeTimeEnd	svf/include/Graphs/SVFGStat.h	/^    double connectIndSVFGEdgeTimeEnd;$/;"	m	class:SVF::SVFGStat
connectIndSVFGEdgeTimeStart	svf/include/Graphs/SVFGStat.h	/^    double connectIndSVFGEdgeTimeStart;$/;"	m	class:SVF::SVFGStat
connectIndirectSVFGEdges	svf/lib/Graphs/SVFG.cpp	/^void SVFG::connectIndirectSVFGEdges()$/;"	f	class:SVFG
connectInheritEdgeViaCall	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::connectInheritEdgeViaCall(const Function* caller, const CallBase* cs)$/;"	f	class:CHGBuilder
connectInheritEdgeViaStore	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::connectInheritEdgeViaStore(const Function* caller, const StoreInst* storeInst)$/;"	f	class:CHGBuilder
connectVCallToVFns	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::connectVCallToVFns(const CallICFGNode* cs, const VFunSet &vfns, CallEdgeMap& newEdges)$/;"	f	class:PointerAnalysis
connectVGep	svf/lib/CFL/CFLGraphBuilder.cpp	/^void AliasCFLGraphBuilder::AliasCFLGraphBuilder::connectVGep(CFLGraph *cflGraph,  ConstraintGraph *graph, ConstraintNode *src, ConstraintNode *dst, u32_t level, SVFIR* pag)$/;"	f	class:SVF::AliasCFLGraphBuilder::AliasCFLGraphBuilder
consCG	svf/include/WPA/Andersen.h	/^    ConstraintGraph* consCG;$/;"	m	class:SVF::AndersenBase
consequences	z3.obj/bin/python/z3/z3.py	/^    def consequences(self, assumptions, variables):$/;"	m	class:Solver
consequences	z3.obj/include/z3++.h	/^        check_result consequences(expr_vector& assumptions, expr_vector& vars, expr_vector& conseq) {$/;"	f	class:z3::solver
const	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
const_array	z3.obj/include/z3++.h	/^    inline expr const_array(sort const & d, expr const & v) {$/;"	f	namespace:z3
const_bb_iterator	svf/include/SVFIR/SVFVariables.h	/^    typedef BasicBlockGraph::IDToNodeMapTy::const_iterator const_bb_iterator;$/;"	t	class:SVF::FunObjVar
const_inst_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::const_inst_iterator const_inst_iterator;$/;"	t	namespace:SVF
const_iterator	svf/include/CFL/CFLSolver.h	/^    typedef typename DataMap::const_iterator const_iterator;$/;"	t	class:SVF::POCRSolver
const_iterator	svf/include/Graphs/BasicBlockG.h	/^    typedef std::vector<const ICFGNode*>::const_iterator const_iterator;$/;"	t	class:SVF::SVFBasicBlock
const_iterator	svf/include/Graphs/CDG.h	/^    typedef CDGEdge::CDGEdgeSetTy::const_iterator const_iterator;$/;"	t	class:SVF::CDGNode
const_iterator	svf/include/Graphs/CDG.h	/^    typedef CDGNodeIDToNodeMapTy::const_iterator const_iterator;$/;"	t	class:SVF::CDG
const_iterator	svf/include/Graphs/ConsGNode.h	/^    typedef ConstraintEdge::ConstraintEdgeSetTy::const_iterator const_iterator;$/;"	t	class:SVF::ConstraintNode
const_iterator	svf/include/Graphs/GenericGraph.h	/^    typedef typename GEdgeSetTy::const_iterator const_iterator;$/;"	t	class:SVF::GenericNode
const_iterator	svf/include/Graphs/GenericGraph.h	/^    typedef typename IDToNodeMapTy::const_iterator const_iterator;$/;"	t	class:SVF::GenericGraph
const_iterator	svf/include/Graphs/ICFG.h	/^    typedef ICFGNodeIDToNodeMapTy::const_iterator const_iterator;$/;"	t	class:SVF::ICFG
const_iterator	svf/include/Graphs/ICFGNode.h	/^    typedef ICFGEdge::ICFGEdgeSetTy::const_iterator const_iterator;$/;"	t	class:SVF::ICFGNode
const_iterator	svf/include/Graphs/VFG.h	/^    typedef VFGNodeIDToNodeMapTy::const_iterator const_iterator;$/;"	t	class:SVF::VFG
const_iterator	svf/include/Graphs/VFGNode.h	/^    typedef VFGEdge::VFGEdgeSetTy::const_iterator const_iterator;$/;"	t	class:SVF::VFGNode
const_iterator	svf/include/MemoryModel/ConditionalPT.h	/^    typedef typename OrderedSet<Element>::const_iterator const_iterator;$/;"	t	class:SVF::CondStdSet
const_iterator	svf/include/MemoryModel/PointsTo.h	/^    typedef PointsToIterator const_iterator;$/;"	t	class:SVF::PointsTo
const_iterator	svf/include/Util/CoreBitVector.h	/^    typedef CoreBitVectorIterator const_iterator;$/;"	t	class:SVF::CoreBitVector
const_iterator	svf/include/Util/DPItem.h	/^    typedef CallStrCxt::const_iterator const_iterator;$/;"	t	class:SVF::ContextCond
const_pred_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::const_pred_iterator const_pred_iterator;$/;"	t	namespace:SVF
constant	z3.obj/include/z3++.h	/^    inline expr context::constant(char const * name, sort const & s) { return constant(str_symbol(name), s); }$/;"	f	class:z3::context
constant	z3.obj/include/z3++.h	/^    inline expr context::constant(symbol const & name, sort const & s) {$/;"	f	class:z3::context
constantObjectId	svf/include/Util/NodeIDAllocator.h	/^    static const NodeID constantObjectId;$/;"	m	class:SVF::NodeIDAllocator
constantObjectId	svf/lib/Util/NodeIDAllocator.cpp	/^const NodeID NodeIDAllocator::constantObjectId = 1;$/;"	m	class:SVF::NodeIDAllocator	file:
constantSymID	svf/include/Graphs/IRGraph.h	/^    inline NodeID constantSymID() const$/;"	f	class:SVF::IRGraph
constraintGraphStat	svf/lib/WPA/AndersenStat.cpp	/^void AndersenStat::constraintGraphStat()$/;"	f	class:AndersenStat
constructor	z3.obj/bin/python/z3/z3.py	/^    def constructor(self, idx):$/;"	m	class:DatatypeSortRef
consume	svf/include/WPA/VersionedFlowSensitive.h	/^    LocVersionMap consume;$/;"	m	class:SVF::VersionedFlowSensitive
contain	svf/include/AE/Core/IntervalValue.h	/^    bool contain(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
containBlackHoleNode	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool containBlackHoleNode(const PointsTo& pts)$/;"	f	class:SVF::PointerAnalysis
containBlackHoleNode	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline bool containBlackHoleNode(const CPtSet& cpts)$/;"	f	class:SVF::CondPTAImpl
containCallStr	svf/include/Util/DPItem.h	/^    inline bool containCallStr(NodeID cxt) const$/;"	f	class:SVF::ContextCond
containConstantNode	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool containConstantNode(const PointsTo& pts)$/;"	f	class:SVF::PointerAnalysis
containConstantNode	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline bool containConstantNode(const CPtSet& cpts)$/;"	f	class:SVF::CondPTAImpl
containedWithin	svf/include/AE/Core/IntervalValue.h	/^    bool containedWithin(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
containingAggs	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, Set<const DIType*>> containingAggs;$/;"	m	class:SVF::DCHGraph
contains	svf/include/AE/Core/AddressValue.h	/^    bool contains(u32_t id) const$/;"	f	class:SVF::AddressValue
contains	svf/include/AE/Core/IntervalValue.h	/^    bool contains(int n) const$/;"	f	class:SVF::IntervalValue
contains	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    bool contains(const CPtSet& cpts1, const CPtSet& cpts2)$/;"	f	class:SVF::CondPTAImpl
contains	svf/include/Util/SparseBitVector.h	/^    bool contains(const SparseBitVector<ElementSize> &RHS) const$/;"	f	class:SVF::SparseBitVector
contains	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::contains(const PointsTo &rhs) const$/;"	f	class:SVF::PointsTo
contains	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::contains(const CoreBitVector &rhs) const$/;"	f	class:SVF::CoreBitVector
contains	z3.obj/include/z3++.h	/^        expr contains(expr const& s) {$/;"	f	class:z3::expr
content	svf/lib/Util/cJSON.cpp	/^    const unsigned char *content;$/;"	m	struct:__anon16	file:
context	svf/include/Util/DPItem.h	/^    CallStrCxt context;$/;"	m	class:SVF::ContextCond
context	svf/include/Util/DPItem.h	/^    ContextCond context;$/;"	m	class:SVF::CxtDPItem
context	svf/include/Util/DPItem.h	/^    ContextCond context;$/;"	m	class:SVF::CxtStmtDPItem
context	z3.obj/include/z3++.h	/^        context() { config c; init(c); }$/;"	f	class:z3::context
context	z3.obj/include/z3++.h	/^        context(config & c) { init(c); }$/;"	f	class:z3::context
context	z3.obj/include/z3++.h	/^    class context {$/;"	c	namespace:z3
contextDDA	svf/include/DDA/DDAStat.h	/^    ContextDDA* contextDDA;$/;"	m	class:SVF::DDAStat
controlDg	svf/include/Graphs/CDG.h	/^    static CDG *controlDg; \/\/\/< Singleton pattern here$/;"	m	class:SVF::CDG
convertExpression	svf-llvm/lib/BreakConstantExpr.cpp	/^convertExpression (ConstantExpr * CE, Instruction*  InsertPt)$/;"	f	file:
convert_model	z3.obj/bin/python/z3/z3.py	/^    def convert_model(self, model):$/;"	m	class:Goal
convert_model	z3.obj/include/z3++.h	/^        model convert_model(model const & m) const {$/;"	f	class:z3::goal
copyInEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy copyInEdges;$/;"	m	class:SVF::ConstraintNode
copyKind	svf/include/SVFIR/SVFStatements.h	/^    u32_t copyKind;$/;"	m	class:SVF::CopyStmt
copyOutEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy copyOutEdges;$/;"	m	class:SVF::ConstraintNode
copyTime	svf/include/WPA/FlowSensitive.h	/^    double copyTime;	\/\/\/< time of handling copy edges$/;"	m	class:SVF::FlowSensitive
count	svf/include/MemoryModel/ConditionalPT.h	/^    inline unsigned count() const$/;"	f	class:SVF::CondStdSet
count	svf/include/Util/SparseBitVector.h	/^    size_type count() const$/;"	f	struct:SVF::SparseBitVectorElement
count	svf/include/Util/SparseBitVector.h	/^    static unsigned count(T Val, ZeroBehavior ZB)$/;"	f	struct:SVF::LeadingZerosCounter
count	svf/include/Util/SparseBitVector.h	/^    static unsigned count(T Val, ZeroBehavior)$/;"	f	struct:SVF::LeadingZerosCounter
count	svf/include/Util/SparseBitVector.h	/^    static unsigned count(T Val, ZeroBehavior)$/;"	f	struct:SVF::TrailingZerosCounter
count	svf/include/Util/SparseBitVector.h	/^    static unsigned count(T Value)$/;"	f	struct:SVF::PopulationCounter
count	svf/include/Util/SparseBitVector.h	/^    unsigned count() const$/;"	f	class:SVF::SparseBitVector
count	svf/lib/MemoryModel/PointsTo.cpp	/^u32_t PointsTo::count(void) const$/;"	f	class:SVF::PointsTo
count	svf/lib/Util/CoreBitVector.cpp	/^u32_t CoreBitVector::count(void) const$/;"	f	class:SVF::CoreBitVector
countAliases	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::countAliases(Set<std::pair<NodeID, NodeID>> cmp, unsigned *mayAliases, unsigned *noAliases)$/;"	f	class:FlowSensitive
countLeadingZeros	svf/include/Util/SparseBitVector.h	/^unsigned countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width)$/;"	f	namespace:SVF
countPopulation	svf/include/Util/SparseBitVector.h	/^inline unsigned countPopulation(T Value)$/;"	f	namespace:SVF
countStat	svf/include/Graphs/ICFGStat.h	/^    void countStat()$/;"	f	class:SVF::ICFGStat
countStateSize	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AEStat::countStateSize()$/;"	f	class:AEStat
countSumEdges	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::countSumEdges()$/;"	f	class:SVF::CFLBase
countTrailingZeros	svf/include/Util/SparseBitVector.h	/^unsigned countTrailingZeros(T Val, ZeroBehavior ZB = ZB_Width)$/;"	f	namespace:SVF
coverage	svf/include/Util/SVFBugReport.h	/^    double coverage;  \/\/ coverage (%)$/;"	m	class:SVF::SVFBugReport
cppClsNameToType	svf-llvm/lib/CppUtil.cpp	/^const Type *cppUtil::cppClsNameToType(const std::string &className)$/;"	f	class:cppUtil
cppUtil	svf-llvm/include/SVF-LLVM/CppUtil.h	/^namespace cppUtil$/;"	n	namespace:SVF
cpts	svf/include/Graphs/SVFGEdge.h	/^    NodeBS cpts;$/;"	m	class:SVF::IndirectSVFGEdge
cpts	svf/include/Graphs/SVFGNode.h	/^    NodeBS cpts;$/;"	m	class:SVF::MRSVFGNode
cptsBegin	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondPtsConstIter cptsBegin() const$/;"	f	class:SVF::CondPointsToSet
cptsBegin	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondPtsIter cptsBegin()$/;"	f	class:SVF::CondPointsToSet
cptsEnd	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondPtsConstIter cptsEnd() const$/;"	f	class:SVF::CondPointsToSet
cptsEnd	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondPtsIter cptsEnd()$/;"	f	class:SVF::CondPointsToSet
cptsSet	svf/include/MSSA/MemRegion.h	/^    const NodeBS cptsSet;$/;"	m	class:SVF::MemRegion
cptsToRepCPtsMap	svf/include/MSSA/MemRegion.h	/^    PtsToRepPtsSetMap cptsToRepCPtsMap;$/;"	m	class:SVF::MRGenerator
create	svf/include/AE/Core/IntervalValue.h	/^    static IntervalValue create(const BoundedInt& lb, const BoundedInt& ub)$/;"	f	class:SVF::IntervalValue
create	z3.obj/bin/python/z3/z3.py	/^    def create(self):$/;"	m	class:Datatype
createAndersenSCD	svf/include/WPA/AndersenPWC.h	/^    static AndersenSCD *createAndersenSCD(SVFIR* _pag)$/;"	f	class:SVF::AndersenSCD
createAndersenSFR	svf/include/WPA/AndersenPWC.h	/^    static AndersenSFR *createAndersenSFR(SVFIR* _pag)$/;"	f	class:SVF::AndersenSFR
createAndersenWaveDiff	svf/include/WPA/Andersen.h	/^    static AndersenWaveDiff* createAndersenWaveDiff(SVFIR* _pag)$/;"	f	class:SVF::AndersenWaveDiff
createBlkObjTypeInfo	svf-llvm/lib/SymbolTableBuilder.cpp	/^ObjTypeInfo* SymbolTableBuilder::createBlkObjTypeInfo(NodeID symId)$/;"	f	class:SymbolTableBuilder
createConstantObjTypeInfo	svf-llvm/lib/SymbolTableBuilder.cpp	/^ObjTypeInfo* SymbolTableBuilder::createConstantObjTypeInfo(NodeID symId)$/;"	f	class:SymbolTableBuilder
createDisjointMR	svf/lib/MSSA/MemPartition.cpp	/^void IntraDisjointMRG::createDisjointMR(const FunObjVar* func, const NodeBS& cpts)$/;"	f	class:IntraDisjointMRG
createDistinctMR	svf/lib/MSSA/MemPartition.cpp	/^void DistinctMRG::createDistinctMR(const FunObjVar* func, const NodeBS& pts)$/;"	f	class:DistinctMRG
createDummyObjTypeInfo	svf/lib/Graphs/IRGraph.cpp	/^const ObjTypeInfo *IRGraph::createDummyObjTypeInfo(NodeID symId, const SVFType *type)$/;"	f	class:IRGraph
createFSWPA	svf/include/WPA/FlowSensitive.h	/^    static FlowSensitive* createFSWPA(SVFIR* _pag)$/;"	f	class:SVF::FlowSensitive
createFunObjVars	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::createFunObjVars()$/;"	f	class:SVFIRBuilder
createMR	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::createMR(const FunObjVar* fun, const NodeBS& cpts)$/;"	f	class:MRGenerator
createMUCHI	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::createMUCHI(const FunObjVar& fun)$/;"	f	class:MemSSA
createNode	svf-llvm/lib/CHGBuilder.cpp	/^CHNode *CHGBuilder::createNode(const std::string& className)$/;"	f	class:CHGBuilder
createObjTypeInfo	svf-llvm/lib/SymbolTableBuilder.cpp	/^ObjTypeInfo* SymbolTableBuilder::createObjTypeInfo(const Value* val)$/;"	f	class:SymbolTableBuilder
createObjTypeInfo	svf/lib/Graphs/IRGraph.cpp	/^ObjTypeInfo *IRGraph::createObjTypeInfo(const SVFType *type)$/;"	f	class:IRGraph
createSVFDataStructure	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::createSVFDataStructure()$/;"	f	class:LLVMModuleSet
createSteensgaard	svf/include/WPA/Steensgaard.h	/^    static Steensgaard* createSteensgaard(SVFIR* _pag)$/;"	f	class:SVF::Steensgaard
createVFSWPA	svf/include/WPA/VersionedFlowSensitive.h	/^    static VersionedFlowSensitive *createVFSWPA(SVFIR *_pag)$/;"	f	class:SVF::VersionedFlowSensitive
create_reference	svf/lib/Util/cJSON.cpp	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
crypt	svf-llvm/lib/extapi.c	/^char *crypt(const char *key, const char *salt)$/;"	f
cs	svf/include/Graphs/SVFGNode.h	/^    const CallICFGNode* cs;$/;"	m	class:SVF::ActualINSVFGNode
cs	svf/include/Graphs/SVFGNode.h	/^    const CallICFGNode* cs;$/;"	m	class:SVF::ActualOUTSVFGNode
cs	svf/include/Graphs/VFGNode.h	/^    const CallICFGNode* cs;$/;"	m	class:SVF::ActualParmVFGNode
cs	svf/include/Graphs/VFGNode.h	/^    const CallICFGNode* cs;$/;"	m	class:SVF::ActualRetVFGNode
csCHAMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const CallICFGNode*, VFunSet> csCHAMap;$/;"	m	class:SVF::DCHGraph
csHasVFnsBasedonCHA	svf/lib/Graphs/CHG.cpp	/^bool CHGraph::csHasVFnsBasedonCHA(const CallICFGNode* cs)$/;"	f	class:CHGraph
csHasVtblsBasedonCHA	svf-llvm/include/SVF-LLVM/DCHG.h	/^    virtual bool csHasVtblsBasedonCHA(CallBase* cs)$/;"	f	class:SVF::DCHGraph
csHasVtblsBasedonCHA	svf/lib/Graphs/CHG.cpp	/^bool CHGraph::csHasVtblsBasedonCHA(const CallICFGNode* cs)$/;"	f	class:CHGraph
csId	svf/include/Graphs/CallGraph.h	/^    CallSiteID csId;$/;"	m	class:SVF::CallGraphEdge
csId	svf/include/Graphs/SVFGEdge.h	/^    CallSiteID csId;$/;"	m	class:SVF::CallIndSVFGEdge
csId	svf/include/Graphs/SVFGEdge.h	/^    CallSiteID csId;$/;"	m	class:SVF::RetIndSVFGEdge
csId	svf/include/Graphs/VFGEdge.h	/^    CallSiteID csId;$/;"	m	class:SVF::CallDirSVFGEdge
csId	svf/include/Graphs/VFGEdge.h	/^    CallSiteID csId;$/;"	m	class:SVF::RetDirSVFGEdge
csToCallSiteArgsPtsMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToPointsToMap csToCallSiteArgsPtsMap;$/;"	m	class:SVF::MRGenerator
csToCallSiteRetPtsMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToPointsToMap csToCallSiteRetPtsMap;$/;"	m	class:SVF::MRGenerator
csToIdMap	svf/include/Graphs/CallGraph.h	/^    static CallSiteToIdMap csToIdMap;	\/\/\/< Map a pair of call instruction and callee to a callsite ID$/;"	m	class:SVF::CallGraph
csToModsMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToPointsToMap csToModsMap;$/;"	m	class:SVF::MRGenerator
csToRefsMap	svf/include/MSSA/MemRegion.h	/^    CallSiteToPointsToMap csToRefsMap;$/;"	m	class:SVF::MRGenerator
csc	svf/include/WPA/AndersenPWC.h	/^    CSC* csc;$/;"	m	class:SVF::AndersenSFR
ctToForkCxtMap	svf/include/MTA/TCT.h	/^    CxtThreadToForkCxt ctToForkCxtMap; \/\/\/ Map a CxtThread to the context at its spawning site (fork site).$/;"	m	class:SVF::TCT
ctToRoutineFunMap	svf/include/MTA/TCT.h	/^    CxtThreadToFun ctToRoutineFunMap; \/\/\/ Map a CxtThread to its start routine function.$/;"	m	class:SVF::TCT
ctermid	svf-llvm/lib/extapi.c	/^char *ctermid(char *s)$/;"	f
ctime	svf-llvm/lib/extapi.c	/^char *ctime(const void *timer)$/;"	f
ctime_r	svf-llvm/lib/extapi.c	/^char* ctime_r(const char *timer, char *buf)$/;"	f
ctir	svf-llvm/include/SVF-LLVM/CppUtil.h	/^namespace ctir$/;"	n	namespace:SVF::cppUtil
ctpList	svf/include/MTA/TCT.h	/^    CxtThreadProcVec ctpList;	\/\/\/ CxtThreadProc List$/;"	m	class:SVF::TCT
ctpToNodeMap	svf/include/MTA/TCT.h	/^    CxtThreadToNodeMap ctpToNodeMap; \/\/\/ Map a ctp to its graph node$/;"	m	class:SVF::TCT
ctx	svf/include/MTA/TCT.h	/^    const CxtThread ctx;$/;"	m	class:SVF::TCTNode
ctx	svf/include/Util/Z3Expr.h	/^    static z3::context *ctx;$/;"	m	class:SVF::Z3Expr
ctx	svf/lib/Util/Z3Expr.cpp	/^z3::context *Z3Expr::ctx = nullptr;$/;"	m	class:SVF::Z3Expr	file:
ctx	z3.obj/include/z3++.h	/^        context & ctx() const { return *m_ctx; }$/;"	f	class:z3::object
ctx_ref	z3.obj/bin/python/z3/z3.py	/^    def ctx_ref(self):$/;"	m	class:AstRef
ctx_ref	z3.obj/bin/python/z3/z3num.py	/^    def ctx_ref(self):$/;"	m	class:Numeral
ctx_ref	z3.obj/bin/python/z3/z3rcf.py	/^    def ctx_ref(self):$/;"	m	class:RCFNum
cube	z3.obj/bin/python/z3/z3.py	/^    def cube(self, vars = None):$/;"	m	class:Solver
cube	z3.obj/include/z3++.h	/^        expr_vector cube(expr_vector& vars, unsigned cutoff) {$/;"	f	class:z3::solver
cube_generator	z3.obj/include/z3++.h	/^            cube_generator(solver& s):$/;"	f	class:z3::solver::cube_generator
cube_generator	z3.obj/include/z3++.h	/^            cube_generator(solver& s, expr_vector& vars):$/;"	f	class:z3::solver::cube_generator
cube_generator	z3.obj/include/z3++.h	/^        class cube_generator {$/;"	c	class:z3::solver
cube_iterator	z3.obj/include/z3++.h	/^            cube_iterator(solver& s, expr_vector& vars, unsigned& cutoff, bool end):$/;"	f	class:z3::solver::cube_iterator
cube_iterator	z3.obj/include/z3++.h	/^        class cube_iterator {$/;"	c	class:z3::solver
cube_vars	z3.obj/bin/python/z3/z3.py	/^    def cube_vars(self):$/;"	m	class:Solver
cubes	z3.obj/include/z3++.h	/^        cube_generator cubes() { return cube_generator(*this); }$/;"	f	class:z3::solver
cubes	z3.obj/include/z3++.h	/^        cube_generator cubes(expr_vector& vars) { return cube_generator(*this, vars); }$/;"	f	class:z3::solver
cur	svf/include/Util/DPItem.h	/^    DPItem(DPItem&& dps) noexcept : cur(dps.cur)$/;"	f	class:SVF::DPItem
cur	svf/include/Util/DPItem.h	/^    NodeID cur;$/;"	m	class:SVF::DPItem
curBB	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    const SVFBasicBlock* curBB;	\/\/\/< Current basic block during SVFIR construction when visiting the module$/;"	m	class:SVF::SVFIRBuilder
curPtr	svf/include/DDA/DDAClient.h	/^    NodeID curPtr;				\/\/\/< current pointer being queried$/;"	m	class:SVF::DDAClient
curSCCID	svf/include/WPA/WPAFSSolver.h	/^    NodeID curSCCID;	\/\/\/< index of current SCC.$/;"	m	class:SVF::WPASCCSolver
curVal	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    const Value* curVal;	\/\/\/< Current Value during SVFIR construction when visiting the module$/;"	m	class:SVF::SVFIRBuilder
curloc	svf/include/Util/DPItem.h	/^    const LocCond* curloc;$/;"	m	class:SVF::StmtDPItem
current	svf/include/CFL/CFLGraphBuilder.h	/^    Kind current;$/;"	m	class:SVF::CFLGraphBuilder
currentBestNodeMapping	svf/include/MemoryModel/PointsTo.h	/^    static MappingPtr currentBestNodeMapping;$/;"	m	class:SVF::PointsTo
currentBestNodeMapping	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::MappingPtr PointsTo::currentBestNodeMapping = nullptr;$/;"	m	class:SVF::PointsTo	file:
currentBestReverseNodeMapping	svf/include/MemoryModel/PointsTo.h	/^    static MappingPtr currentBestReverseNodeMapping;$/;"	m	class:SVF::PointsTo
currentBestReverseNodeMapping	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::MappingPtr PointsTo::currentBestReverseNodeMapping = nullptr;$/;"	m	class:SVF::PointsTo	file:
cutree_cdist	svf/lib/FastCluster/fastcluster.cpp	/^void cutree_cdist(int n, const int* merge, double* height, double cdist, int* labels)$/;"	f
cutree_k	svf/lib/FastCluster/fastcluster.cpp	/^void cutree_k(int n, const int* merge, int nclust, int* labels)$/;"	f
cxt	svf/include/Util/CxtStmt.h	/^    CallStrCxt cxt;$/;"	m	class:SVF::CxtProc
cxt	svf/include/Util/CxtStmt.h	/^    CallStrCxt cxt;$/;"	m	class:SVF::CxtStmt
cxt	svf/include/Util/CxtStmt.h	/^    CallStrCxt cxt;$/;"	m	class:SVF::CxtThread
cxtJoinInLoop	svf/include/MTA/MHP.h	/^    CxtStmtToLoopMap cxtJoinInLoop;		\/\/\/< a set of context-sensitive join inside loop$/;"	m	class:SVF::ForkJoinAnalysis
cxtLockset	svf/include/MTA/LockAnalysis.h	/^    CxtLockSet cxtLockset;$/;"	m	class:SVF::LockAnalysis
cxtLocktoSpan	svf/include/MTA/LockAnalysis.h	/^    CxtLockToSpan cxtLocktoSpan;$/;"	m	class:SVF::LockAnalysis
cxtSize	svf/include/Util/DPItem.h	/^    inline u32_t cxtSize() const$/;"	f	class:SVF::ContextCond
cxtStmtList	svf/include/MTA/LockAnalysis.h	/^    CxtStmtWorkList cxtStmtList;$/;"	m	class:SVF::LockAnalysis
cxtStmtList	svf/include/MTA/MHP.h	/^    CxtStmtWorkList cxtStmtList;	 \/\/\/< context-sensitive statement worklist$/;"	m	class:SVF::ForkJoinAnalysis
cxtStmtList	svf/include/MTA/MHP.h	/^    CxtThreadStmtWorkList cxtStmtList;	\/\/\/< CxtThreadStmt worklist$/;"	m	class:SVF::MHP
cxtStmtToAliveFlagMap	svf/include/MTA/MHP.h	/^    CxtStmtToAliveFlagMap cxtStmtToAliveFlagMap;	\/\/\/< flags for context-sensitive statements$/;"	m	class:SVF::ForkJoinAnalysis
cxtStmtToCxtLockSet	svf/include/MTA/LockAnalysis.h	/^    CxtStmtToCxtLockSet cxtStmtToCxtLockSet;$/;"	m	class:SVF::LockAnalysis
cxtToStr	svf/include/Util/CxtStmt.h	/^    inline std::string cxtToStr() const$/;"	f	class:SVF::CxtProc
cxtToStr	svf/include/Util/CxtStmt.h	/^    inline std::string cxtToStr() const$/;"	f	class:SVF::CxtStmt
cxtToStr	svf/include/Util/CxtStmt.h	/^    inline std::string cxtToStr() const$/;"	f	class:SVF::CxtThread
cycleDepth	svf/include/Graphs/WTO.h	/^    const GraphTWTOCycleDepth& cycleDepth(const NodeT* n) const$/;"	f	class:SVF::WTO
d	z3.obj/bin/python/z3/z3core.py	/^      d = os.path.join(d, 'libz3.%s' % _ext)$/;"	v
d	z3.obj/bin/python/z3/z3core.py	/^    d = os.path.realpath(d)$/;"	v
data	svf/include/Util/WorkList.h	/^        Data data;$/;"	m	class:SVF::List::ListNode
data_list	svf/include/CFL/CFGrammar.h	/^    DataDeque data_list;	\/\/\/< work list using std::vector.$/;"	m	class:SVF::CFLFIFOWorkList
data_list	svf/include/Util/WorkList.h	/^    DataDeque data_list;    \/\/\/< work list using std::vector.$/;"	m	class:SVF::FIFOWorkList
data_list	svf/include/Util/WorkList.h	/^    DataVector data_list;    \/\/\/< work list using std::vector.$/;"	m	class:SVF::FILOWorkList
data_set	svf/include/CFL/CFGrammar.h	/^    DataSet data_set;	\/\/\/< store all data in the work list.$/;"	m	class:SVF::CFLFIFOWorkList
data_set	svf/include/Util/WorkList.h	/^    DataSet data_set;    \/\/\/< store all data in the work list.$/;"	m	class:SVF::FIFOWorkList
data_set	svf/include/Util/WorkList.h	/^    DataSet data_set;    \/\/\/< store all data in the work list.$/;"	m	class:SVF::FILOWorkList
db_create	svf-llvm/lib/extapi.c	/^int db_create(void **dbp, void *dbenv, unsigned int flags)$/;"	f
dcgettext	svf-llvm/lib/extapi.c	/^char * dcgettext(const char * domainname, const char * msgid, int category)$/;"	f
ddaStat	svf/include/DDA/DDAVFSolver.h	/^    DDAStat* ddaStat;				\/\/\/< DDA stat$/;"	m	class:SVF::DDAVFSolver
deallocate	svf/lib/Util/cJSON.cpp	/^    void (CJSON_CDECL *deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
decide_cpa_ext	svf/lib/AE/Core/RelationSolver.cpp	/^void RelationSolver::decide_cpa_ext(const Z3Expr& phi,$/;"	f	class:RelationSolver
decimal	z3.obj/bin/python/z3/z3rcf.py	/^    def decimal(self, prec=5):$/;"	m	class:RCFNum
decl	z3.obj/bin/python/z3/z3.py	/^    def decl(self):$/;"	m	class:ExprRef
decl	z3.obj/include/z3++.h	/^        func_decl decl() const { Z3_func_decl f = Z3_get_app_decl(ctx(), *this); check_error(); return func_decl(ctx(), f); }$/;"	f	class:z3::expr
decl_kind	z3.obj/include/z3++.h	/^        Z3_decl_kind decl_kind() const { return Z3_get_decl_kind(ctx(), *this); }$/;"	f	class:z3::func_decl
declare	z3.obj/bin/python/z3/z3.py	/^    def declare(self, name, *args):$/;"	m	class:Datatype
declare_core	z3.obj/bin/python/z3/z3.py	/^    def declare_core(self, name, rec_name, *args):$/;"	m	class:Datatype
declare_var	z3.obj/bin/python/z3/z3.py	/^    def declare_var(self, *vars):$/;"	m	class:Fixedpoint
decls	z3.obj/bin/python/z3/z3.py	/^    def decls(self):$/;"	m	class:ModelRef
def	svf/include/MSSA/MSSAMuChi.h	/^    MSSADef* def;$/;"	m	class:SVF::MRVer
defNodes	svf/include/Graphs/SVFGOPT.h	/^    NodeBS defNodes;	\/\/\/< preserved def nodes of formal-in\/actual-out$/;"	m	class:SVF::SVFGOPT
default	z3.obj/bin/python/z3/z3.py	/^    def default(self):$/;"	m	class:ArrayRef
defaultType	svf-llvm/lib/ObjTypeInference.cpp	/^const Type *ObjTypeInference::defaultType(const Value *val)$/;"	f	class:ObjTypeInference
delta	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::delta(const NodeID l) const$/;"	f	class:VersionedFlowSensitive
deltaMap	svf/include/WPA/VersionedFlowSensitive.h	/^    std::vector<bool> deltaMap;$/;"	m	class:SVF::VersionedFlowSensitive
deltaSource	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::deltaSource(const NodeID l) const$/;"	f	class:VersionedFlowSensitive
deltaSourceMap	svf/include/WPA/VersionedFlowSensitive.h	/^    std::vector<bool> deltaSourceMap;$/;"	m	class:SVF::VersionedFlowSensitive
demangle	svf-llvm/lib/CppUtil.cpp	/^struct cppUtil::DemangledName cppUtil::demangle(const std::string& name)$/;"	f	class:cppUtil
denominator	z3.obj/bin/python/z3/z3.py	/^    def denominator(self):$/;"	m	class:RatNumRef
denominator	z3.obj/bin/python/z3/z3num.py	/^    def denominator(self):$/;"	m	class:Numeral
denominator	z3.obj/include/z3++.h	/^        expr denominator() const {$/;"	f	class:z3::expr
denominator_as_long	z3.obj/bin/python/z3/z3.py	/^    def denominator_as_long(self):$/;"	m	class:RatNumRef
depth	svf/lib/Util/cJSON.cpp	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon16	file:
depth	svf/lib/Util/cJSON.cpp	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon17	file:
depth	z3.obj/bin/python/z3/z3.py	/^    def depth(self):$/;"	m	class:Goal
depth	z3.obj/include/z3++.h	/^        unsigned depth() const { return Z3_goal_depth(ctx(), m_goal); }$/;"	f	class:z3::goal
derefMDName	svf-llvm/include/SVF-LLVM/CppUtil.h	/^const std::string derefMDName = "ctir";$/;"	m	namespace:SVF::cppUtil::ctir
deref_val	svf/include/Graphs/GenericGraph.h	/^    static inline NodeType* deref_val(PairTy P)$/;"	f	struct:SVF::GenericGraphTraits
describe_probes	z3.obj/bin/python/z3/z3.py	/^def describe_probes():$/;"	f
describe_tactics	z3.obj/bin/python/z3/z3.py	/^def describe_tactics():$/;"	f
description	svf/include/Util/CommandLine.h	/^    std::string description;$/;"	m	class:OptionBase
destory	svf/lib/Util/ExtAPI.cpp	/^void ExtAPI::destory()$/;"	f	class:ExtAPI
destorySymTable	svf/lib/Graphs/IRGraph.cpp	/^void IRGraph::destorySymTable()$/;"	f	class:IRGraph
destroy	svf/include/Graphs/GenericGraph.h	/^    void destroy()$/;"	f	class:SVF::GenericGraph
destroy	svf/include/MTA/TCT.h	/^    inline void destroy()$/;"	f	class:SVF::TCT
destroy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline void destroy()$/;"	f	class:SVF::CondPTAImpl
destroy	svf/include/SABER/SaberCondAllocator.h	/^    void destroy()$/;"	f	class:SVF::SaberCondAllocator
destroy	svf/include/SVFIR/SVFVariables.h	/^    void destroy()$/;"	f	class:SVF::BaseObjVar
destroy	svf/include/Util/ThreadAPI.h	/^    static void destroy()$/;"	f	class:SVF::ThreadAPI
destroy	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::destroy()$/;"	f	class:CallGraph
destroy	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::destroy()$/;"	f	class:ConstraintGraph
destroy	svf/lib/Graphs/SVFG.cpp	/^void SVFG::destroy()$/;"	f	class:SVFG
destroy	svf/lib/Graphs/VFG.cpp	/^void VFG::destroy()$/;"	f	class:VFG
destroy	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::destroy()$/;"	f	class:MRGenerator
destroy	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::destroy()$/;"	f	class:MemSSA
destroy	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::destroy()$/;"	f	class:PointerAnalysis
destroy	svf/lib/SABER/ProgSlice.cpp	/^void ProgSlice::destroy()$/;"	f	class:ProgSlice
destroy	svf/lib/SVFIR/SVFIR.cpp	/^void SVFIR::destroy()$/;"	f	class:SVFIR
detect	svf/lib/AE/Svfexe/AEDetector.cpp	/^void BufOverflowDetector::detect(AbstractState& as, const ICFGNode* node)$/;"	f	class:BufOverflowDetector
detect	svf/lib/MTA/MTA.cpp	/^void MTA::detect()$/;"	f	class:MTA
detectExtAPI	svf/lib/AE/Svfexe/AEDetector.cpp	/^void BufOverflowDetector::detectExtAPI(AbstractState& as,$/;"	f	class:BufOverflowDetector
detectSCCs	svf/lib/WPA/VersionedFlowSensitive.cpp	/^unsigned VersionedFlowSensitive::SCC::detectSCCs(VersionedFlowSensitive *vfs,$/;"	f	class:VersionedFlowSensitive::SCC
detectStrcat	svf/lib/AE/Svfexe/AEDetector.cpp	/^bool BufOverflowDetector::detectStrcat(AbstractState& as, const CallICFGNode *call)$/;"	f	class:BufOverflowDetector
detectStrcpy	svf/lib/AE/Svfexe/AEDetector.cpp	/^bool BufOverflowDetector::detectStrcpy(AbstractState& as, const CallICFGNode *call)$/;"	f	class:BufOverflowDetector
detectors	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    std::vector<std::unique_ptr<AEDetector>> detectors;$/;"	m	class:SVF::AbstractInterpretation
determineBestMapping	svf/lib/Util/NodeIDAllocator.cpp	/^std::pair<hclust_fast_methods, std::vector<NodeID>> NodeIDAllocator::Clusterer::determineBestMapping($/;"	f	class:SVF::NodeIDAllocator::Clusterer
dfBBsMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    Map<const SVFBasicBlock*,BBSet> dfBBsMap;    \/\/\/< map a BasicBlock to its Dominate Frontier BasicBlocks$/;"	m	class:SVF::SVFLoopAndDomInfo
dfInPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    DFPtsMap dfInPtsMap;$/;"	m	class:SVF::MutableDFPTData
dfInPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    DFKeyToIDMap dfInPtsMap;$/;"	m	class:SVF::PersistentDFPTData
dfOutPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    DFPtsMap dfOutPtsMap;$/;"	m	class:SVF::MutableDFPTData
dfOutPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    DFKeyToIDMap dfOutPtsMap;$/;"	m	class:SVF::PersistentDFPTData
dfsNodesBetweenPdomNodes	svf/lib/Util/CDGBuilder.cpp	/^void CDGBuilder::dfsNodesBetweenPdomNodes(const SVFBasicBlock *cur,$/;"	f	class:CDGBuilder
dgettext	svf-llvm/lib/extapi.c	/^char * dgettext(const char * domainname, const char * msgid)$/;"	f
diType	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const DIType *diType;$/;"	m	class:SVF::DCHNode
diTypeToNodeMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, DCHNode*> diTypeToNodeMap;$/;"	m	class:SVF::DCHGraph
diTypeToStr	svf-llvm/lib/DCHG.cpp	/^std::string DCHGraph::diTypeToStr(const DIType *t)$/;"	f	class:DCHGraph
diff	svf/include/CFL/CFLSolver.h	/^    NodeBS diff;$/;"	m	class:SVF::POCRSolver
diffPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    PtsMap diffPtsMap;$/;"	m	class:SVF::MutableDiffPTData
diffPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    KeyToIDMap diffPtsMap;$/;"	m	class:SVF::PersistentDiffPTData
diffWave	svf/include/WPA/Andersen.h	/^    static AndersenWaveDiff* diffWave; \/\/ static instance$/;"	m	class:SVF::AndersenWaveDiff
dimacs	z3.obj/bin/python/z3/z3.py	/^    def dimacs(self):$/;"	m	class:Goal
dimacs	z3.obj/bin/python/z3/z3.py	/^    def dimacs(self, include_names=True):$/;"	m	class:Solver
dimacs	z3.obj/include/z3++.h	/^        std::string dimacs() const { return std::string(Z3_goal_to_dimacs_string(ctx(), m_goal)); }$/;"	f	class:z3::goal
dimacs	z3.obj/include/z3++.h	/^        std::string dimacs(bool include_names = true) const { return std::string(Z3_solver_to_dimacs_string(ctx(), m_solver, include_names)); }$/;"	f	class:z3::solver
dirAndIndJoinMap	svf/include/MTA/MHP.h	/^    CxtStmtToTIDMap dirAndIndJoinMap; \/\/\/< maps a context-sensitive join site to directly and indirectly joined thread ids$/;"	m	class:SVF::ForkJoinAnalysis
dirVFEdgeEnd	svf/include/Graphs/SVFGStat.h	/^    void dirVFEdgeEnd()$/;"	f	class:SVF::SVFGStat
dirVFEdgeStart	svf/include/Graphs/SVFGStat.h	/^    void dirVFEdgeStart()$/;"	f	class:SVF::SVFGStat
directCallFunPass	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::directCallFunPass(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
directCalls	svf/include/Graphs/CallGraph.h	/^    CallInstSet directCalls;$/;"	m	class:SVF::CallGraphEdge
directCallsBegin	svf/include/Graphs/CallGraph.h	/^    inline CallInstSet::const_iterator directCallsBegin() const$/;"	f	class:SVF::CallGraphEdge
directCallsEnd	svf/include/Graphs/CallGraph.h	/^    inline CallInstSet::const_iterator directCallsEnd() const$/;"	f	class:SVF::CallGraphEdge
directEdgeSet	svf/include/Graphs/ConsG.h	/^    ConstraintEdge::ConstraintEdgeSetTy directEdgeSet;$/;"	m	class:SVF::ConstraintGraph
directInEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    virtual inline const_iterator directInEdgeBegin() const$/;"	f	class:SVF::GenericNode
directInEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    virtual inline iterator directInEdgeBegin()$/;"	f	class:SVF::GenericNode
directInEdgeBegin	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::const_iterator ConstraintNode::directInEdgeBegin() const$/;"	f	class:ConstraintNode
directInEdgeBegin	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::iterator ConstraintNode::directInEdgeBegin()$/;"	f	class:ConstraintNode
directInEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    virtual inline const_iterator directInEdgeEnd() const$/;"	f	class:SVF::GenericNode
directInEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    virtual inline iterator directInEdgeEnd()$/;"	f	class:SVF::GenericNode
directInEdgeEnd	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::const_iterator ConstraintNode::directInEdgeEnd() const$/;"	f	class:ConstraintNode
directInEdgeEnd	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::iterator ConstraintNode::directInEdgeEnd()$/;"	f	class:ConstraintNode
directInEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy directInEdges;$/;"	m	class:SVF::ConstraintNode
directJoinMap	svf/include/MTA/MHP.h	/^    CxtStmtToTIDMap directJoinMap; \/\/\/< maps a context-sensitive join site to directly joined thread ids$/;"	m	class:SVF::ForkJoinAnalysis
directOutEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    virtual inline const_iterator directOutEdgeBegin() const$/;"	f	class:SVF::GenericNode
directOutEdgeBegin	svf/include/Graphs/GenericGraph.h	/^    virtual inline iterator directOutEdgeBegin()$/;"	f	class:SVF::GenericNode
directOutEdgeBegin	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::const_iterator ConstraintNode::directOutEdgeBegin() const$/;"	f	class:ConstraintNode
directOutEdgeBegin	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::iterator ConstraintNode::directOutEdgeBegin()$/;"	f	class:ConstraintNode
directOutEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    virtual inline const_iterator directOutEdgeEnd() const$/;"	f	class:SVF::GenericNode
directOutEdgeEnd	svf/include/Graphs/GenericGraph.h	/^    virtual inline iterator directOutEdgeEnd()$/;"	f	class:SVF::GenericNode
directOutEdgeEnd	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::const_iterator ConstraintNode::directOutEdgeEnd() const$/;"	f	class:ConstraintNode
directOutEdgeEnd	svf/lib/Graphs/ConsG.cpp	/^ConstraintNode::iterator ConstraintNode::directOutEdgeEnd()$/;"	f	class:ConstraintNode
directOutEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy directOutEdges;$/;"	m	class:SVF::ConstraintNode
directPropaTime	svf/include/WPA/FlowSensitive.h	/^    double directPropaTime;	\/\/\/< time of points-to propagation of address-taken objects$/;"	m	class:SVF::FlowSensitive
direct_child_begin	svf/include/Graphs/GenericGraph.h	/^    static inline ChildIteratorType direct_child_begin(const NodeType *N)$/;"	f	struct:SVF::GenericGraphTraits
direct_child_end	svf/include/Graphs/GenericGraph.h	/^    static inline ChildIteratorType direct_child_end(const NodeType *N)$/;"	f	struct:SVF::GenericGraphTraits
disablePrintStat	svf/include/MemoryModel/PointerAnalysis.h	/^    inline void disablePrintStat()$/;"	f	class:SVF::PointerAnalysis
disable_trace	z3.obj/bin/python/z3/z3.py	/^def disable_trace(msg):$/;"	f
distinct	z3.obj/include/z3++.h	/^    inline expr distinct(expr_vector const& args) {$/;"	f	namespace:z3
dlerror	svf-llvm/lib/extapi.c	/^char *dlerror(void)$/;"	f
dlopen	svf-llvm/lib/extapi.c	/^void *dlopen(const char *voidname, int flags)$/;"	f
dngettext	svf-llvm/lib/extapi.c	/^char * dngettext(const char * domainname, const char * msgid, const char * msgid_plural, unsigned long int n)$/;"	f
documentation	z3.obj/include/z3++.h	/^        std::string documentation(symbol const& s) { char const* r = Z3_param_descrs_get_documentation(ctx(), m_descrs, s); check_error(); return r; }$/;"	f	class:z3::param_descrs
doit	svf/include/Util/Casting.h	/^    static bool doit(const From &Val)$/;"	f	struct:SVF::SVFUtil::isa_impl_wrap
doit	svf/include/Util/Casting.h	/^    static bool doit(const FromTy &Val)$/;"	f	struct:SVF::SVFUtil::isa_impl_wrap
doit	svf/include/Util/Casting.h	/^    static inline bool doit(const From &)$/;"	f	struct:SVF::SVFUtil::isa_impl
doit	svf/include/Util/Casting.h	/^    static inline bool doit(const From &Val)$/;"	f	struct:SVF::SVFUtil::isa_impl
doit	svf/include/Util/Casting.h	/^    static inline bool doit(const From &Val)$/;"	f	struct:SVF::SVFUtil::isa_impl_cl
doit	svf/include/Util/Casting.h	/^    static inline bool doit(const From *Val)$/;"	f	struct:SVF::SVFUtil::isa_impl_cl
doit	svf/include/Util/Casting.h	/^    static inline bool doit(const std::unique_ptr<From> &Val)$/;"	f	struct:SVF::SVFUtil::isa_impl_cl
doit	svf/include/Util/Casting.h	/^    static typename cast_retty<To, From>::ret_type doit(From &Val)$/;"	f	struct:SVF::SVFUtil::cast_convert_val
doit	svf/include/Util/Casting.h	/^    static typename cast_retty<To, FromTy>::ret_type doit(const FromTy &Val)$/;"	f	struct:SVF::SVFUtil::cast_convert_val
domain	z3.obj/bin/python/z3/z3.py	/^    def domain(self):$/;"	m	class:ArrayRef
domain	z3.obj/bin/python/z3/z3.py	/^    def domain(self):$/;"	m	class:ArraySortRef
domain	z3.obj/bin/python/z3/z3.py	/^    def domain(self, i):$/;"	m	class:FuncDeclRef
domain	z3.obj/include/z3++.h	/^        sort domain(unsigned i) const { assert(i < arity()); Z3_sort r = Z3_get_domain(ctx(), *this, i); check_error(); return sort(ctx(), r); }$/;"	f	class:z3::func_decl
dominate	svf/include/SABER/SaberCondAllocator.h	/^    inline bool dominate(const SVFBasicBlock* bbKey, const SVFBasicBlock* bbValue) const$/;"	f	class:SVF::SaberCondAllocator
dominate	svf/include/SVFIR/SVFVariables.h	/^    inline bool dominate(const SVFBasicBlock* bbKey, const SVFBasicBlock* bbValue) const$/;"	f	class:SVF::FunObjVar
dominate	svf/lib/SVFIR/SVFValue.cpp	/^bool SVFLoopAndDomInfo::dominate(const SVFBasicBlock* bbKey, const SVFBasicBlock* bbValue) const$/;"	f	class:SVFLoopAndDomInfo
doubleEqual	svf/include/AE/Core/NumericValue.h	/^    static bool doubleEqual(double a, double b)$/;"	f	class:SVF::BoundedDouble
double_value	z3.obj/include/z3++.h	/^        double double_value(unsigned i) const { double r = Z3_stats_get_double_value(ctx(), m_stats, i); check_error(); return r; }$/;"	f	class:z3::stats
dpmToADCPtSetMap	svf/include/DDA/DDAVFSolver.h	/^    DPImToCPtSetMap dpmToADCPtSetMap;	\/\/\/< points-to caching map for address-taken vars$/;"	m	class:SVF::DDAVFSolver
dpmToTLCPtSetMap	svf/include/DDA/DDAVFSolver.h	/^    DPImToCPtSetMap dpmToTLCPtSetMap;	\/\/\/< points-to caching map for top-level vars$/;"	m	class:SVF::DDAVFSolver
dpmToloadDpmMap	svf/include/DDA/DDAVFSolver.h	/^    DPMToDPMMap dpmToloadDpmMap;		\/\/\/< dpms at loads for may\/must-alias analysis with stores$/;"	m	class:SVF::DDAVFSolver
dst	svf/include/Graphs/GenericGraph.h	/^    NodeTy* dst;		\/\/\/< destination node$/;"	m	class:SVF::GenericEdge
dtBBsMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    Map<const SVFBasicBlock*,BBSet> dtBBsMap;   \/\/\/< map a BasicBlock to BasicBlocks it Dominates$/;"	m	class:SVF::SVFLoopAndDomInfo
dummyVisit	svf-llvm/tools/Example/svf-ex.cpp	/^void dummyVisit(const VFGNode* node)$/;"	f
dump	svf-llvm/include/SVF-LLVM/DCHG.h	/^    void dump(const std::string& filename)$/;"	f	class:SVF::DCHGraph
dump	svf/include/AE/Core/IntervalValue.h	/^    void dump(std::ostream &o) const$/;"	f	class:SVF::IntervalValue
dump	svf/include/Graphs/CDG.h	/^    void dump(const std::string &filename)$/;"	f	class:SVF::CDG
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::CallCHI
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::CallMU
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::EntryCHI
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::LoadMU
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::MSSACHI
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::MSSADEF
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::MSSAMU
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::MSSAPHI
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::RetMU
dump	svf/include/MSSA/MSSAMuChi.h	/^    virtual void dump()$/;"	f	class:SVF::StoreCHI
dump	svf/include/MTA/TCT.h	/^    void dump()$/;"	f	class:SVF::TCTNode
dump	svf/include/MemoryModel/ConditionalPT.h	/^    inline void dump(OutStream & O) const$/;"	f	class:SVF::CondPointsToSet
dump	svf/include/Util/CxtStmt.h	/^    inline void dump() const$/;"	f	class:SVF::CxtProc
dump	svf/include/Util/CxtStmt.h	/^    inline void dump() const$/;"	f	class:SVF::CxtStmt
dump	svf/include/Util/CxtStmt.h	/^    inline void dump() const$/;"	f	class:SVF::CxtThread
dump	svf/include/Util/CxtStmt.h	/^    inline void dump() const$/;"	f	class:SVF::CxtThreadProc
dump	svf/include/Util/CxtStmt.h	/^    inline void dump() const$/;"	f	class:SVF::CxtThreadStmt
dump	svf/include/Util/DPItem.h	/^    inline void dump() const$/;"	f	class:SVF::CxtStmtDPItem
dump	svf/include/Util/DPItem.h	/^    inline void dump() const$/;"	f	class:SVF::DPItem
dump	svf/include/Util/DPItem.h	/^    inline void dump() const$/;"	f	class:SVF::StmtDPItem
dump	svf/include/Util/SparseBitVector.h	/^void dump(const SparseBitVector<ElementSize> &LHS, std::ostream &out)$/;"	f	namespace:SVF
dump	svf/lib/CFL/CFGrammar.cpp	/^void CFGrammar::dump() const$/;"	f	class:CFGrammar
dump	svf/lib/CFL/CFGrammar.cpp	/^void CFGrammar::dump(std::string fileName) const$/;"	f	class:CFGrammar
dump	svf/lib/Graphs/CFLGraph.cpp	/^void CFLGraph::dump(const std::string& filename)$/;"	f	class:CFLGraph
dump	svf/lib/Graphs/CHG.cpp	/^void CHGraph::dump(const std::string& filename)$/;"	f	class:CHGraph
dump	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::dump(const std::string& filename)$/;"	f	class:CallGraph
dump	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::dump(std::string name)$/;"	f	class:ConstraintGraph
dump	svf/lib/Graphs/ICFG.cpp	/^void ICFG::dump(const std::string& file, bool simple)$/;"	f	class:ICFG
dump	svf/lib/Graphs/ICFG.cpp	/^void ICFGNode::dump() const$/;"	f	class:ICFGNode
dump	svf/lib/Graphs/IRGraph.cpp	/^void IRGraph::dump(std::string name)$/;"	f	class:IRGraph
dump	svf/lib/Graphs/SVFG.cpp	/^void SVFG::dump(const std::string& file, bool simple)$/;"	f	class:SVFG
dump	svf/lib/Graphs/VFG.cpp	/^void VFG::dump(const std::string& file, bool simple)$/;"	f	class:VFG
dump	svf/lib/MTA/TCT.cpp	/^void TCT::dump(const std::string& filename)$/;"	f	class:TCT
dump	svf/lib/MemoryModel/AccessPath.cpp	/^std::string AccessPath::dump() const$/;"	f	class:AccessPath
dump	svf/lib/SVFIR/SVFVariables.cpp	/^void SVFVar::dump() const$/;"	f	class:SVFVar
dumpAliasSet	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::dumpAliasSet(unsigned node, NodeBS bs)$/;"	f	class:SVFUtil
dumpAllPts	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual void dumpAllPts() {}$/;"	f	class:SVF::PointerAnalysis
dumpAllPts	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::dumpAllPts()$/;"	f	class:BVDataPTAImpl
dumpAllTypes	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::dumpAllTypes()$/;"	f	class:PointerAnalysis
dumpCHAStats	svf/lib/WPA/TypeAnalysis.cpp	/^void TypeAnalysis::dumpCHAStats()$/;"	f	class:TypeAnalysis
dumpCPtSet	svf/include/DDA/DDAVFSolver.h	/^    inline void dumpCPtSet(const CPtSet& cpts) const$/;"	f	class:SVF::DDAVFSolver
dumpCPts	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual void dumpCPts() {}$/;"	f	class:SVF::PointerAnalysis
dumpCPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual void dumpCPts()$/;"	f	class:SVF::CondPTAImpl
dumpCond	svf/include/SABER/ProgSlice.h	/^    inline std::string dumpCond(const Condition& cond) const$/;"	f	class:SVF::ProgSlice
dumpCond	svf/include/SABER/SaberCondAllocator.h	/^    inline std::string dumpCond(const Condition& cond) const$/;"	f	class:SVF::SaberCondAllocator
dumpContexts	svf/include/DDA/ContextDDA.h	/^    virtual inline void dumpContexts(const ContextCond& cxts)$/;"	f	class:SVF::ContextDDA
dumpCxt	svf/lib/MTA/TCT.cpp	/^void TCT::dumpCxt(CallStrCxt& cxt)$/;"	f	class:TCT
dumpLocVersionMaps	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::dumpLocVersionMaps(void) const$/;"	f	class:VersionedFlowSensitive
dumpMSSA	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::dumpMSSA(OutStream& Out)$/;"	f	class:MemSSA
dumpMeldVersion	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::dumpMeldVersion(MeldVersion &v)$/;"	f	class:VersionedFlowSensitive
dumpModulesToFile	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::dumpModulesToFile(const std::string& suffix)$/;"	f	class:LLVMModuleSet
dumpPointsToList	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::dumpPointsToList(const PointsToList& ptl)$/;"	f	class:SVFUtil
dumpPointsToSet	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::dumpPointsToSet(unsigned node, NodeBS bs)$/;"	f	class:SVFUtil
dumpPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual inline void dumpPts(const PtsMap & ptsSet,OutStream & O = SVFUtil::outs()) const$/;"	f	class:SVF::MutableDFPTData
dumpPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual inline void dumpPts(const PtsMap & ptsSet,OutStream & O = SVFUtil::outs()) const$/;"	f	class:SVF::MutablePTData
dumpPts	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::dumpPts(NodeID ptr, const PointsTo& pts)$/;"	f	class:PointerAnalysis
dumpReliances	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::dumpReliances(void) const$/;"	f	class:VersionedFlowSensitive
dumpSet	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::dumpSet(NodeBS bs, OutStream & O)$/;"	f	class:SVFUtil
dumpSet	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::dumpSet(PointsTo pt, OutStream &o)$/;"	f	class:SVFUtil
dumpSlices	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::dumpSlices()$/;"	f	class:SrcSnkDDA
dumpSparseSet	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::dumpSparseSet(const NodeBS& bs)$/;"	f	class:SVFUtil
dumpStat	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::dumpStat()$/;"	f	class:PointerAnalysis
dumpStr	svf/include/MSSA/MemRegion.h	/^    inline std::string dumpStr() const$/;"	f	class:SVF::MemRegion
dumpStr	svf/include/MemoryModel/ConditionalPT.h	/^    inline std::string dumpStr() const$/;"	f	class:SVF::CondPointsToSet
dumpStr	svf/lib/Util/Z3Expr.cpp	/^std::string Z3Expr::dumpStr(const Z3Expr &z3Expr)$/;"	f	class:SVF::Z3Expr
dumpSymTable	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::dumpSymTable()$/;"	f	class:LLVMModuleSet
dumpToJsonFile	svf/lib/Util/SVFBugReport.cpp	/^void SVFBugReport::dumpToJsonFile(const std::string& filePath) const$/;"	f	class:SVFBugReport
dumpTopLevelPtsTo	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual void dumpTopLevelPtsTo() {}$/;"	f	class:SVF::PointerAnalysis
dumpTopLevelPtsTo	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    void dumpTopLevelPtsTo()$/;"	f	class:SVF::CondPTAImpl
dumpTopLevelPtsTo	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::dumpTopLevelPtsTo()$/;"	f	class:BVDataPTAImpl
dumpTopLevelPtsTo	svf/lib/WPA/Andersen.cpp	/^void Andersen::dumpTopLevelPtsTo()$/;"	f	class:Andersen
dumpType	svf-llvm/lib/LLVMUtil.cpp	/^std::string LLVMUtil::dumpType(const Type* type)$/;"	f	class:LLVMUtil
dumpValue	svf-llvm/lib/LLVMUtil.cpp	/^std::string LLVMUtil::dumpValue(const Value* val)$/;"	f	class:LLVMUtil
dumpValueAndDbgInfo	svf-llvm/lib/LLVMUtil.cpp	/^std::string LLVMUtil::dumpValueAndDbgInfo(const Value *val)$/;"	f	class:LLVMUtil
dval	svf/include/SVFIR/SVFVariables.h	/^    double dval;$/;"	m	class:SVF::ConstFPValVar
dval	svf/include/SVFIR/SVFVariables.h	/^    float dval;$/;"	m	class:SVF::ConstFPObjVar
dyn_cast	svf/include/Util/Casting.h	/^LLVM_NODISCARD inline typename cast_retty<X, Y *>::ret_type dyn_cast(Y *Val)$/;"	f	namespace:SVF::SVFUtil
dyn_cast	svf/include/Util/Casting.h	/^LLVM_NODISCARD inline typename cast_retty<X, Y>::ret_type dyn_cast(Y &Val)$/;"	f	namespace:SVF::SVFUtil
dyn_cast	svf/include/Util/Casting.h	/^dyn_cast(const Y &Val)$/;"	f	namespace:SVF::SVFUtil
dyncast	svf-llvm/lib/CppUtil.cpp	/^const std::string dyncast = "__dynamic_cast";$/;"	v
e	svf/include/Util/Z3Expr.h	/^    z3::expr e;$/;"	m	class:SVF::Z3Expr
ebits	z3.obj/bin/python/z3/z3.py	/^    def ebits(self):$/;"	m	class:FPRef
ebits	z3.obj/bin/python/z3/z3.py	/^    def ebits(self):$/;"	m	class:FPSortRef
ebnfBracketMatch	svf/lib/CFL/CFGNormalizer.cpp	/^int CFGNormalizer::ebnfBracketMatch(GrammarBase::Production &prod, int i, CFGrammar *grammar)$/;"	f	class:CFGNormalizer
ebnfSignReplace	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::ebnfSignReplace(char sign, CFGrammar *grammar)$/;"	f	class:CFGNormalizer
ebnf_bin	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::ebnf_bin(CFGrammar *grammar)$/;"	f	class:CFGNormalizer
ecUnion	svf/lib/WPA/Steensgaard.cpp	/^void Steensgaard::ecUnion(NodeID node, NodeID ec)$/;"	f	class:Steensgaard
edgeFlag	svf/include/Graphs/GenericGraph.h	/^    GEdgeFlag edgeFlag;	\/\/\/< edge kind$/;"	m	class:SVF::GenericEdge
edgeId	svf/include/Graphs/ConsGEdge.h	/^    EdgeID edgeId;$/;"	m	class:SVF::ConstraintEdge
edgeId	svf/include/SVFIR/SVFStatements.h	/^    EdgeID edgeId;                   \/\/\/< Edge ID$/;"	m	class:SVF::SVFStmt
edgeInCallGraphSCC	svf/include/DDA/ContextDDA.h	/^    inline bool edgeInCallGraphSCC(const SVFGEdge* edge)$/;"	f	class:SVF::ContextDDA
edgeInCallGraphSCC	svf/lib/DDA/DDAPass.cpp	/^bool DDAPass::edgeInCallGraphSCC(PointerAnalysis* pta,const SVFGEdge* edge)$/;"	f	class:DDAPass
edgeInSVFGSCC	svf/include/DDA/DDAVFSolver.h	/^    inline bool edgeInSVFGSCC(const SVFGEdge* edge)$/;"	f	class:SVF::DDAVFSolver
edgeInSVFGSCC	svf/lib/DDA/DDAPass.cpp	/^bool DDAPass::edgeInSVFGSCC(const SVFGSCC* svfgSCC,const SVFGEdge* edge)$/;"	f	class:DDAPass
edgeIndex	svf/include/Graphs/ConsG.h	/^    EdgeID edgeIndex;$/;"	m	class:SVF::ConstraintGraph
edgeNum	svf/include/Graphs/GenericGraph.h	/^    u32_t edgeNum;		\/\/\/< total num of node$/;"	m	class:SVF::GenericGraph
edgeTargetsEdgeSource	svf/include/Graphs/DOTGraphTraits.h	/^    static bool edgeTargetsEdgeSource(const void *, EdgeIter)$/;"	f	struct:SVF::DefaultDOTGraphTraits
edgeType	svf/include/Graphs/CHG.h	/^    CHEDGETYPE edgeType;$/;"	m	class:SVF::CHEdge
edge_dest	svf/include/Graphs/GenericGraph.h	/^    static inline NodeType* edge_dest(const EdgeType* E)$/;"	f	struct:SVF::GenericGraphTraits
ehash	z3.obj/bin/python/z3/z3util.py	/^def ehash(v):$/;"	f
ei_pair	svf/lib/SABER/SaberCheckerAPI.cpp	/^struct ei_pair$/;"	s	namespace:__anon13	file:
ei_pair	svf/lib/Util/ThreadAPI.cpp	/^struct ei_pair$/;"	s	namespace:__anon14	file:
ei_pairs	svf/lib/SABER/SaberCheckerAPI.cpp	/^static const ei_pair ei_pairs[]=$/;"	v	file:
ei_pairs	svf/lib/Util/ThreadAPI.cpp	/^static const ei_pair ei_pairs[]=$/;"	v	file:
elemIdxVec	svf/include/SVFIR/SVFType.h	/^    std::vector<u32_t> elemIdxVec;$/;"	m	class:SVF::StInfo
elemNum	svf/include/SVFIR/ObjTypeInfo.h	/^    u32_t elemNum;$/;"	m	class:SVF::ObjTypeInfo
elements	svf/include/MemoryModel/ConditionalPT.h	/^    ElementSet elements;$/;"	m	class:SVF::CondStdSet
else_value	z3.obj/bin/python/z3/z3.py	/^    def else_value(self):$/;"	m	class:FuncInterp
else_value	z3.obj/include/z3++.h	/^        expr else_value() const { Z3_ast r = Z3_func_interp_get_else(ctx(), m_interp); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::func_interp
emitEdge	svf/include/Graphs/GraphWriter.h	/^    void emitEdge(const void *SrcNodeID, int SrcNodePort,$/;"	f	class:SVF::GraphWriter
emitSimpleNode	svf/include/Graphs/GraphWriter.h	/^    void emitSimpleNode(const void *ID, const std::string &Attr,$/;"	f	class:SVF::GraphWriter
emplacePts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PointsToID emplacePts(const Data &pts)$/;"	f	class:SVF::PersistentPointsToCache
empty	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    bool empty() const$/;"	f	class:SVF::LLVMModuleSet
empty	svf/include/AE/Core/AddressValue.h	/^    bool empty() const$/;"	f	class:SVF::AddressValue
empty	svf/include/CFL/CFGrammar.h	/^    inline bool empty() const$/;"	f	class:SVF::CFLFIFOWorkList
empty	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool empty() const$/;"	f	class:SVF::CondPointsToSet
empty	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool empty() const$/;"	f	class:SVF::CondStdSet
empty	svf/include/Util/SparseBitVector.h	/^    bool empty() const$/;"	f	class:SVF::SparseBitVector
empty	svf/include/Util/SparseBitVector.h	/^    bool empty() const$/;"	f	struct:SVF::SparseBitVectorElement
empty	svf/include/Util/WorkList.h	/^    inline bool empty() const$/;"	f	class:SVF::FIFOWorkList
empty	svf/include/Util/WorkList.h	/^    inline bool empty() const$/;"	f	class:SVF::FILOWorkList
empty	svf/include/Util/WorkList.h	/^    inline bool empty() const$/;"	f	class:SVF::List
empty	svf/include/Util/iterator_range.h	/^    bool empty() const$/;"	f	class:SVF::iter_range
empty	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::empty() const$/;"	f	class:SVF::PointsTo
empty	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::empty(void) const$/;"	f	class:SVF::CoreBitVector
empty	z3.obj/include/z3++.h	/^        bool empty() const { return size() == 0; }$/;"	f	class:z3::ast_vector_tpl
empty	z3.obj/include/z3++.h	/^    inline expr empty(sort const& s) {$/;"	f	namespace:z3
emptyData	svf/include/CFL/CFLSolver.h	/^    const NodeBS emptyData;                                         \/\/ ??$/;"	m	class:SVF::POCRSolver
emptyPointsToId	svf/include/MemoryModel/PersistentPointsToCache.h	/^    static PointsToID emptyPointsToId(void)$/;"	f	class:SVF::PersistentPointsToCache
empty_set	z3.obj/include/z3++.h	/^    inline expr empty_set(sort const& s) {$/;"	f	namespace:z3
enable_exceptions	z3.obj/include/z3++.h	/^        bool enable_exceptions() const { return m_enable_exceptions; }$/;"	f	class:z3::context
enable_trace	z3.obj/bin/python/z3/z3.py	/^def enable_trace(msg):$/;"	f
end	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    static generic_bridge_gep_type_iterator end(ItTy It)$/;"	f	class:llvm::generic_bridge_gep_type_iterator
end	svf/include/AE/Core/AddressValue.h	/^    AddrSet::const_iterator end() const$/;"	f	class:SVF::AddressValue
end	svf/include/CFL/CFLSolver.h	/^    inline const_iterator end() const$/;"	f	class:SVF::POCRSolver
end	svf/include/CFL/CFLSolver.h	/^    inline iterator end()$/;"	f	class:SVF::POCRSolver
end	svf/include/Graphs/BasicBlockG.h	/^    inline const_iterator end() const$/;"	f	class:SVF::SVFBasicBlock
end	svf/include/Graphs/GenericGraph.h	/^    inline const_iterator end() const$/;"	f	class:SVF::GenericGraph
end	svf/include/Graphs/GenericGraph.h	/^    inline iterator end()$/;"	f	class:SVF::GenericGraph
end	svf/include/Graphs/WTO.h	/^    Iterator end() const$/;"	f	class:SVF::WTO
end	svf/include/Graphs/WTO.h	/^    Iterator end() const$/;"	f	class:SVF::WTOCycleDepth
end	svf/include/Graphs/WTO.h	/^    Iterator end() const$/;"	f	class:SVF::final
end	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator end() const$/;"	f	class:SVF::CondPointsToSet
end	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator end() const$/;"	f	class:SVF::CondStdSet
end	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator end()$/;"	f	class:SVF::CondPointsToSet
end	svf/include/MemoryModel/ConditionalPT.h	/^    inline iterator end()$/;"	f	class:SVF::CondStdSet
end	svf/include/MemoryModel/PointsTo.h	/^    const_iterator end() const$/;"	f	class:SVF::PointsTo
end	svf/include/SVFIR/SVFVariables.h	/^    inline const_bb_iterator end() const$/;"	f	class:SVF::FunObjVar
end	svf/include/Util/DPItem.h	/^    inline const_iterator end() const$/;"	f	class:SVF::ContextCond
end	svf/include/Util/SparseBitVector.h	/^    iterator end() const$/;"	f	class:SVF::SparseBitVector
end	svf/include/Util/iterator_range.h	/^    IteratorT end() const$/;"	f	class:SVF::iter_range
end	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector::const_iterator CoreBitVector::end(void) const$/;"	f	class:SVF::CoreBitVector
end	z3.obj/include/z3++.h	/^            cube_iterator end() { return cube_iterator(m_solver, m_vars, m_cutoff, true); }$/;"	f	class:z3::solver::cube_generator
end	z3.obj/include/z3++.h	/^        iterator end() const { return iterator(this, size()); }$/;"	f	class:z3::ast_vector_tpl
endClk	svf/include/Util/SVFStat.h	/^    virtual inline void endClk()$/;"	f	class:SVF::SVFStat
endSymbolAllocation	svf/lib/Util/NodeIDAllocator.cpp	/^NodeID NodeIDAllocator::endSymbolAllocation(void)$/;"	f	class:SVF::NodeIDAllocator
endTime	svf/include/Util/SVFStat.h	/^    double endTime;$/;"	m	class:SVF::SVFStat
end_iterator	svf/include/Util/iterator_range.h	/^    IteratorT begin_iterator, end_iterator;$/;"	m	class:SVF::iter_range
ensure	svf/lib/Util/cJSON.cpp	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
entry	svf/include/SVFIR/SVFStatements.h	/^    const FunEntryICFGNode* entry; \/\/\/ the function exit statement calling to$/;"	m	class:SVF::CallPE
entry	z3.obj/bin/python/z3/z3.py	/^    def entry(self, idx):$/;"	m	class:FuncInterp
entry	z3.obj/include/z3++.h	/^        func_entry entry(unsigned i) const { Z3_func_entry e = Z3_func_interp_get_entry(ctx(), m_interp, i); check_error(); return func_entry(ctx(), e); }$/;"	f	class:z3::func_interp
entryFuncSet	svf/include/MTA/TCT.h	/^    FunSet entryFuncSet; \/\/\/ Procedures that are neither called by other functions nor extern functions$/;"	m	class:SVF::TCT
entryICFGEdges	svf/include/MemoryModel/SVFLoop.h	/^    ICFGEdgeSet entryICFGEdges, backICFGEdges, inICFGEdges, outICFGEdges;$/;"	m	class:SVF::SVFLoop
entryICFGEdgesBegin	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator entryICFGEdgesBegin()$/;"	f	class:SVF::SVFLoop
entryICFGEdgesEnd	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator entryICFGEdgesEnd()$/;"	f	class:SVF::SVFLoop
enumeration_sort	z3.obj/include/z3++.h	/^    inline sort context::enumeration_sort(char const * name, unsigned n, char const * const * enum_names, func_decl_vector & cs, func_decl_vector & ts) {$/;"	f	class:z3::context
epsilon	svf/include/AE/Core/NumericValue.h	41;"	d
epsilonProds	svf/include/CFL/CFGrammar.h	/^    SymbolSet<Production> epsilonProds;$/;"	m	class:SVF::CFGrammar
eq	svf/include/AE/Core/NumericValue.h	/^    friend bool eq(const BoundedDouble& lhs, const BoundedDouble& rhs)$/;"	f	class:SVF::BoundedDouble
eq	svf/include/AE/Core/NumericValue.h	/^    friend bool eq(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
eq	svf/include/Util/Z3Expr.h	/^    friend bool eq(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
eq	z3.obj/bin/python/z3/z3.py	/^    def eq(self, other):$/;"	m	class:AstRef
eq	z3.obj/bin/python/z3/z3.py	/^def eq(a, b):$/;"	f
eq	z3.obj/include/z3++.h	/^    inline bool eq(ast const & a, ast const & b) { return Z3_is_eq_ast(a.ctx(), a, b); }$/;"	f	namespace:z3
eqVarToValMap	svf/include/AE/Core/AbstractState.h	/^    static bool eqVarToValMap(const VarToAbsValMap&lhs, const VarToAbsValMap&rhs)$/;"	f	class:SVF::AbstractState
eqVarToValMap	svf/lib/AE/Core/RelExeState.cpp	/^bool RelExeState::eqVarToValMap(const VarToValMap &lhs, const VarToValMap &rhs) const$/;"	f	class:RelExeState
equal	svf/include/AE/Core/NumericValue.h	/^    bool equal(const BoundedDouble& rhs) const$/;"	f	class:SVF::BoundedDouble
equal	svf/include/AE/Core/NumericValue.h	/^    bool equal(const BoundedInt& rhs) const$/;"	f	class:SVF::BoundedInt
equalGEdge	svf/include/Graphs/GenericGraph.h	/^    typedef struct equalGEdge$/;"	s	class:SVF::GenericEdge
equalGEdge	svf/include/Graphs/GenericGraph.h	/^    } equalGEdge;$/;"	t	class:SVF::GenericEdge	typeref:struct:SVF::GenericEdge::equalGEdge
equalMemRegion	svf/include/MSSA/MemRegion.h	/^    typedef struct equalMemRegion$/;"	s	class:SVF::MemRegion
equalMemRegion	svf/include/MSSA/MemRegion.h	/^    } equalMemRegion;$/;"	t	class:SVF::MemRegion	typeref:struct:SVF::MemRegion::equalMemRegion
equalNodeBS	svf/include/Util/SVFUtil.h	/^typedef struct equalNodeBS$/;"	s	namespace:SVF::SVFUtil
equalNodeBS	svf/include/Util/SVFUtil.h	/^} equalNodeBS;$/;"	t	namespace:SVF::SVFUtil	typeref:struct:SVF::SVFUtil::equalNodeBS
equalPointsTo	svf/include/Util/SVFUtil.h	/^typedef struct equalPointsTo$/;"	s	namespace:SVF::SVFUtil
equalPointsTo	svf/include/Util/SVFUtil.h	/^} equalPointsTo;$/;"	t	namespace:SVF::SVFUtil	typeref:struct:SVF::SVFUtil::equalPointsTo
equals	svf/include/AE/Core/AbstractValue.h	/^    bool equals(const AbstractValue &rhs) const$/;"	f	class:SVF::AbstractValue
equals	svf/include/AE/Core/AddressValue.h	/^    bool equals(const AddressValue &rhs) const$/;"	f	class:SVF::AddressValue
equals	svf/include/AE/Core/IntervalValue.h	/^    bool equals(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
equals	svf/lib/AE/Core/AbstractState.cpp	/^bool AbstractState::equals(const AbstractState&other) const$/;"	f	class:AbstractState
equivalentObject	svf/include/WPA/VersionedFlowSensitive.h	/^    Map<NodeID, NodeID> equivalentObject;$/;"	m	class:SVF::VersionedFlowSensitive
erase	z3.obj/bin/python/z3/z3.py	/^    def erase(self, k):$/;"	m	class:AstMap
errMsg	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::errMsg(const std::string& msg)$/;"	f	class:SVFUtil
error	svf/lib/Util/cJSON.cpp	/^} error;$/;"	t	typeref:struct:__anon15	file:
errs	svf/include/Util/SVFUtil.h	/^inline std::ostream  &errs()$/;"	f	namespace:SVF::SVFUtil
eval	z3.obj/bin/python/z3/z3.py	/^    def eval(self, t, model_completion=False):$/;"	m	class:ModelRef
eval	z3.obj/include/z3++.h	/^        expr eval(expr const & n, bool model_completion=false) const {$/;"	f	class:z3::model
evalFinalCond	svf/lib/SABER/ProgSlice.cpp	/^std::string ProgSlice::evalFinalCond() const$/;"	f	class:ProgSlice
evalFinalCond2Event	svf/lib/SABER/ProgSlice.cpp	/^void ProgSlice::evalFinalCond2Event(GenericBug::EventStack &eventStack) const$/;"	f	class:ProgSlice
evalMDTag	svf/include/Util/Annotator.h	/^    inline bool evalMDTag(const Instruction* inst, const Value* val, std::string str,$/;"	f	class:SVF::Annotator
eval_sign_at	z3.obj/bin/python/z3/z3num.py	/^def eval_sign_at(p, vs):$/;"	f
evaluate	svf/lib/Util/NodeIDAllocator.cpp	/^void NodeIDAllocator::Clusterer::evaluate(const std::vector<NodeID> &nodeMap, const Map<PointsTo, unsigned> pointsToSets, Map<std::string, std::string> &stats, bool accountForOcc)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
evaluate	z3.obj/bin/python/z3/z3.py	/^    def evaluate(self, t, model_completion=False):$/;"	m	class:ModelRef
evaluateBranchCond	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::evaluateBranchCond(const SVFBasicBlock* bb, const SVFBasicBlock* succ)$/;"	f	class:SaberCondAllocator
evaluateLoopExitBranch	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::evaluateLoopExitBranch(const SVFBasicBlock* bb, const SVFBasicBlock* dst)$/;"	f	class:SaberCondAllocator
evaluateProgExit	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::evaluateProgExit(const BranchStmt *branchStmt, const SVFBasicBlock* succ)$/;"	f	class:SaberCondAllocator
evaluateTestNullLikeExpr	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::evaluateTestNullLikeExpr(const BranchStmt *branchStmt, const SVFBasicBlock* succ)$/;"	f	class:SaberCondAllocator
eventInst	svf/include/Util/SVFBugReport.h	/^    const ICFGNode *eventInst;$/;"	m	class:SVF::SVFBugEvent
exactCondElem	svf/include/SABER/SaberCondAllocator.h	/^    inline NodeBS exactCondElem(const Condition& cond)$/;"	f	class:SVF::SaberCondAllocator
exact_one_model	z3.obj/bin/python/z3/z3util.py	/^def exact_one_model(f):$/;"	f
exception	z3.obj/include/z3++.h	/^        exception(char const * msg):m_msg(msg) {}$/;"	f	class:z3::exception
exception	z3.obj/include/z3++.h	/^    class exception : public std::exception {$/;"	c	namespace:z3
executedByTheSameThread	svf/lib/MTA/MHP.cpp	/^bool MHP::executedByTheSameThread(const ICFGNode* i1, const ICFGNode* i2)$/;"	f	class:MHP
exists	z3.obj/include/z3++.h	/^    inline expr exists(expr const & x, expr const & b) {$/;"	f	namespace:z3
exists	z3.obj/include/z3++.h	/^    inline expr exists(expr const & x1, expr const & x2, expr const & b) {$/;"	f	namespace:z3
exists	z3.obj/include/z3++.h	/^    inline expr exists(expr const & x1, expr const & x2, expr const & x3, expr const & b) {$/;"	f	namespace:z3
exists	z3.obj/include/z3++.h	/^    inline expr exists(expr const & x1, expr const & x2, expr const & x3, expr const & x4, expr const & b) {$/;"	f	namespace:z3
exists	z3.obj/include/z3++.h	/^    inline expr exists(expr_vector const & xs, expr const & b) {$/;"	f	namespace:z3
existsVar	svf/include/AE/Core/RelExeState.h	/^    inline bool existsVar(u32_t varId) const$/;"	f	class:SVF::RelExeState
exit	svf/include/SVFIR/SVFStatements.h	/^    const FunExitICFGNode* exit; \/\/\/ the function exit statement returned from$/;"	m	class:SVF::RetPE
exitBlock	svf/include/SVFIR/SVFVariables.h	/^    const SVFBasicBlock *exitBlock;             \/\/\/ a 'single' basic block having no successors and containing return instruction in a function$/;"	m	class:SVF::FunObjVar
expandFIObjs	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    void expandFIObjs(const CPtSet& cpts, CPtSet& expandedCpts)$/;"	f	class:SVF::CondPTAImpl
expandFIObjs	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::expandFIObjs(const NodeBS& pts, NodeBS& expandedPts)$/;"	f	class:BVDataPTAImpl
expandFIObjs	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::expandFIObjs(const PointsTo& pts, PointsTo& expandedPts)$/;"	f	class:BVDataPTAImpl
exponent	z3.obj/bin/python/z3/z3.py	/^    def exponent(self, biased=True):$/;"	m	class:FPNumRef
exponent_as_bv	z3.obj/bin/python/z3/z3.py	/^    def exponent_as_bv(self, biased=True):$/;"	m	class:FPNumRef
exponent_as_long	z3.obj/bin/python/z3/z3.py	/^    def exponent_as_long(self, biased=True):$/;"	m	class:FPNumRef
expr	z3.obj/include/z3++.h	/^        expr(context & c):ast(c) {}$/;"	f	class:z3::expr
expr	z3.obj/include/z3++.h	/^        expr(context & c, Z3_ast n):ast(c, reinterpret_cast<Z3_ast>(n)) {}$/;"	f	class:z3::expr
expr	z3.obj/include/z3++.h	/^        expr(expr const & n):ast(n) {}$/;"	f	class:z3::expr
expr	z3.obj/include/z3++.h	/^    class expr : public ast {$/;"	c	namespace:z3
expr_vector	z3.obj/include/z3++.h	/^    typedef ast_vector_tpl<expr>      expr_vector;$/;"	t	namespace:z3
extAPIBufOverflowCheckRules	svf/include/AE/Svfexe/AEDetector.h	/^    Map<std::string, std::vector<std::pair<u32_t, u32_t>>> extAPIBufOverflowCheckRules; \/\/\/< Rules for checking buffer overflows in external APIs.$/;"	m	class:SVF::BufOverflowDetector
extBcPath	svf/include/Util/ExtAPI.h	/^    static std::string extBcPath;$/;"	m	class:SVF::ExtAPI
extBcPath	svf/lib/Util/ExtAPI.cpp	/^std::string ExtAPI::extBcPath = "";$/;"	m	class:ExtAPI	file:
extCallPass	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::extCallPass(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
extOp	svf/include/Util/ExtAPI.h	/^    static ExtAPI *extOp;$/;"	m	class:SVF::ExtAPI
extendBackward	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::extendBackward(u32_t bit)$/;"	f	class:SVF::CoreBitVector
extendForward	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::extendForward(u32_t bit)$/;"	f	class:SVF::CoreBitVector
extendTo	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::extendTo(u32_t bit)$/;"	f	class:SVF::CoreBitVector
extended	svf-llvm/include/SVF-LLVM/DCHG.h	/^    bool extended = false;$/;"	m	class:SVF::DCHGraph
extract	z3.obj/include/z3++.h	/^        expr extract(expr const& offset, expr const& length) const {$/;"	f	class:z3::expr
extract	z3.obj/include/z3++.h	/^        expr extract(unsigned hi, unsigned lo) const { Z3_ast r = Z3_mk_extract(ctx(), hi, lo, *this); ctx().check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
extractAttributeStrFromSymbolStr	svf/lib/CFL/CFGrammar.cpp	/^std::string GrammarBase::extractAttributeStrFromSymbolStr(const std::string& symbolStr) const$/;"	f	class:GrammarBase
extractBBS	svf/lib/Util/CDGBuilder.cpp	/^void CDGBuilder::extractBBS(const SVF::FunObjVar *func,$/;"	f	class:CDGBuilder
extractClsNameFromDynCast	svf-llvm/lib/CppUtil.cpp	/^std::string cppUtil::extractClsNameFromDynCast(const CallBase* callBase)$/;"	f	class:cppUtil
extractClsNamesFromFunc	svf-llvm/lib/CppUtil.cpp	/^Set<std::string> cppUtil::extractClsNamesFromFunc(const Function *foo)$/;"	f	class:cppUtil
extractClsNamesFromTemplate	svf-llvm/lib/CppUtil.cpp	/^Set<std::string> cppUtil::extractClsNamesFromTemplate(const std::string &oname)$/;"	f	class:cppUtil
extractCmpVars	svf/lib/AE/Core/RelExeState.cpp	/^void RelExeState::extractCmpVars(const Z3Expr &expr, Set<u32_t> &res)$/;"	f	class:RelExeState
extractKindStrFromSymbolStr	svf/lib/CFL/CFGrammar.cpp	/^std::string GrammarBase::extractKindStrFromSymbolStr(const std::string& symbolStr) const$/;"	f	class:GrammarBase
extractNodesBetweenPdomNodes	svf/lib/Util/CDGBuilder.cpp	/^CDGBuilder::extractNodesBetweenPdomNodes(const SVFBasicBlock *succ, const SVFBasicBlock *LCA,$/;"	f	class:CDGBuilder
extractPossibilityDescriptions	svf/include/Util/CommandLine.h	/^    static PossibilityDescriptions extractPossibilityDescriptions(const std::vector<OptionPossibility<T>> possibilities)$/;"	f	class:OptionBase
extractSubConds	svf/lib/SABER/SaberCondAllocator.cpp	/^void SaberCondAllocator::extractSubConds(const Condition &condition, NodeBS &support) const$/;"	f	class:SaberCondAllocator
extractSubVars	svf/lib/AE/Core/RelExeState.cpp	/^void RelExeState::extractSubVars(const Z3Expr &expr, Set<u32_t> &res)$/;"	f	class:RelExeState
fact	z3.obj/bin/python/z3/z3.py	/^    def fact(self, head, name = None):$/;"	m	class:Fixedpoint
fail_if	z3.obj/include/z3++.h	/^    inline tactic fail_if(probe const & p) {$/;"	f	namespace:z3
false	svf/lib/Util/cJSON.cpp	68;"	d	file:
false	svf/lib/Util/cJSON.cpp	70;"	d	file:
fastclustercpp_H	svf/include/FastCluster/fastcluster.h	11;"	d
fc_isnan	svf/lib/FastCluster/fastcluster.cpp	/^bool fc_isnan(double x)$/;"	f
fdopen	svf-llvm/lib/extapi.c	/^void *fdopen(int fd, const char *mode)$/;"	f
fgets	svf-llvm/lib/extapi.c	/^char *fgets(char *str, int n, void *stream)$/;"	f
fgets_unlocked	svf-llvm/lib/extapi.c	/^char *fgets_unlocked(char *str, int n, void *stream)$/;"	f
fieldExpand	svf/lib/WPA/AndersenSFR.cpp	/^void AndersenSFR::fieldExpand(NodeSet& initials, APOffset offset, NodeBS& strides, PointsTo& expandPts)$/;"	f	class:AndersenSFR
fieldReps	svf/include/WPA/AndersenPWC.h	/^    FieldReps fieldReps;$/;"	m	class:SVF::AndersenSFR
fieldTypes	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, std::vector<const DIType*>> fieldTypes;$/;"	m	class:SVF::DCHGraph
file	svf/include/SVFIR/PAGBuilderFromFile.h	/^    std::string file;$/;"	m	class:SVF::PAGBuilderFromFile
fileName	svf/include/CFL/GrammarBuilder.h	/^    std::string fileName;$/;"	m	class:SVF::GrammarBuilder
fillAttribute	svf/lib/CFL/CFGNormalizer.cpp	/^CFGrammar* CFGNormalizer::fillAttribute(CFGrammar *grammar, const Map<CFGrammar::Kind, Set<CFGrammar::Attribute>>& kindToAttrsMap)$/;"	f	class:CFGNormalizer
final	svf/include/Graphs/WTO.h	/^    class WTOCycleDepthBuilder final : public WTOComponentVisitor<GraphT>$/;"	c	class:SVF::WTO
final	svf/include/Graphs/WTO.h	/^template <typename GraphT> class WTOCycle final : public WTOComponent<GraphT>$/;"	c	namespace:SVF
final	svf/include/Graphs/WTO.h	/^template <typename GraphT> class WTONode final : public WTOComponent<GraphT>$/;"	c	namespace:SVF
finalBit	svf/lib/Util/CoreBitVector.cpp	/^u32_t CoreBitVector::finalBit(void) const$/;"	f	class:SVF::CoreBitVector
finalCond	svf/include/SABER/ProgSlice.h	/^    Condition finalCond;					\/\/\/<  final condition$/;"	m	class:SVF::ProgSlice
finalize	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual void finalize()$/;"	f	class:SVF::CondPTAImpl
finalize	svf/include/SABER/SrcSnkDDA.h	/^    virtual void finalize()$/;"	f	class:SVF::SrcSnkDDA
finalize	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::finalize()$/;"	f	class:CFLAlias
finalize	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::finalize()$/;"	f	class:SVF::CFLBase
finalize	svf/lib/CFL/CFLVF.cpp	/^void CFLVF::finalize()$/;"	f	class:CFLVF
finalize	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::finalize()$/;"	f	class:PointerAnalysis
finalize	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::finalize()$/;"	f	class:BVDataPTAImpl
finalize	svf/lib/WPA/Andersen.cpp	/^void Andersen::finalize()$/;"	f	class:Andersen
finalize	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::finalize()$/;"	f	class:AndersenBase
finalize	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::finalize()$/;"	f	class:FlowSensitive
finalize	svf/lib/WPA/TypeAnalysis.cpp	/^void TypeAnalysis::finalize()$/;"	f	class:TypeAnalysis
finalize	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::finalize()$/;"	f	class:VersionedFlowSensitive
find	svf/include/CFL/CFGrammar.h	/^    inline bool find(Data data) const$/;"	f	class:SVF::CFLFIFOWorkList
find	svf/include/Graphs/SCC.h	/^    void find(NodeSet &candidates)$/;"	f	class:SVF::SCCDetection
find	svf/include/Graphs/SCC.h	/^    void find(void)$/;"	f	class:SVF::SCCDetection
find	svf/include/Util/WorkList.h	/^    inline bool find(const Data &data) const$/;"	f	class:SVF::FIFOWorkList
find	svf/include/Util/WorkList.h	/^    inline bool find(const Data &data) const$/;"	f	class:SVF::FILOWorkList
find	svf/include/Util/WorkList.h	/^    inline bool find(const Data &data) const$/;"	f	class:SVF::List
find	svf/lib/WPA/CSC.cpp	/^void CSC::find(NodeStack& candidates)$/;"	f	class:CSC
findInnermostBrackets	svf-llvm/lib/CppUtil.cpp	/^std::vector<std::string> findInnermostBrackets(const std::string &input)$/;"	f
findNearestCommonPDominator	svf/lib/SVFIR/SVFValue.cpp	/^const SVFBasicBlock* SVFLoopAndDomInfo::findNearestCommonPDominator(const SVFBasicBlock* A, const SVFBasicBlock* B) const$/;"	f	class:SVFLoopAndDomInfo
findPT	svf/include/DDA/DDAVFSolver.h	/^    virtual const CPtSet& findPT(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
find_first	svf/include/Util/SparseBitVector.h	/^    int find_first() const$/;"	f	class:SVF::SparseBitVector
find_first	svf/include/Util/SparseBitVector.h	/^    int find_first() const$/;"	f	struct:SVF::SparseBitVectorElement
find_first	svf/lib/MemoryModel/PointsTo.cpp	/^int PointsTo::find_first()$/;"	f	class:SVF::PointsTo
find_last	svf/include/Util/SparseBitVector.h	/^    int find_last() const$/;"	f	class:SVF::SparseBitVector
find_last	svf/include/Util/SparseBitVector.h	/^    int find_last() const$/;"	f	struct:SVF::SparseBitVectorElement
find_next	svf/include/Util/SparseBitVector.h	/^    int find_next(unsigned Curr) const$/;"	f	struct:SVF::SparseBitVectorElement
finfo	svf/include/SVFIR/SVFType.h	/^    std::vector<const SVFType*> finfo;$/;"	m	class:SVF::StInfo
finializeStat	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AEStat::finializeStat()$/;"	f	class:AEStat
firstRHSToProds	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions> firstRHSToProds;$/;"	m	class:SVF::CFGrammar
fits	z3.obj/bin/python/z3/z3printer.py	/^def fits(f, space_left):$/;"	f
fixedpoint	z3.obj/include/z3++.h	/^        fixedpoint(context& c):object(c) { m_fp = Z3_mk_fixedpoint(c); Z3_fixedpoint_inc_ref(c, m_fp); }$/;"	f	class:z3::fixedpoint
fixedpoint	z3.obj/include/z3++.h	/^    class fixedpoint : public object {$/;"	c	namespace:z3
fja	svf/include/MTA/MHP.h	/^    ForkJoinAnalysis* fja;				\/\/\/< ForJoin Analysis$/;"	m	class:SVF::MHP
flags	svf-llvm/include/SVF-LLVM/DCHG.h	/^    size_t flags;$/;"	m	class:SVF::DCHNode
flags	svf/include/Graphs/CHG.h	/^    size_t flags;$/;"	m	class:SVF::CHNode
flags	svf/include/SVFIR/ObjTypeInfo.h	/^    u32_t flags;$/;"	m	class:SVF::ObjTypeInfo
flat	z3.obj/bin/python/z3/z3printer.py	/^    def flat(self):$/;"	m	class:ChoiceFormatObject
flat	z3.obj/bin/python/z3/z3printer.py	/^    def flat(self):$/;"	m	class:ComposeFormatObject
flat	z3.obj/bin/python/z3/z3printer.py	/^    def flat(self):$/;"	m	class:FormatObject
flat	z3.obj/bin/python/z3/z3printer.py	/^    def flat(self):$/;"	m	class:IndentFormatObject
flat	z3.obj/bin/python/z3/z3printer.py	/^    def flat(self):$/;"	m	class:LineBreakFormatObject
flatten	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::flatten(const DICompositeType *type)$/;"	f	class:DCHGraph
flattenElementTypes	svf/include/SVFIR/SVFType.h	/^    std::vector<const SVFType*> flattenElementTypes;$/;"	m	class:SVF::StInfo
fldIdx	svf/include/MemoryModel/AccessPath.h	/^    APOffset fldIdx;	\/\/\/< Accumulated Constant Offsets$/;"	m	class:SVF::AccessPath
fldIdx2TypeMap	svf/include/SVFIR/SVFType.h	/^    Map<u32_t, const SVFType*> fldIdx2TypeMap;$/;"	m	class:SVF::StInfo
fldIdxVec	svf/include/SVFIR/SVFType.h	/^    std::vector<u32_t> fldIdxVec;$/;"	m	class:SVF::StInfo
flowDDA	svf/include/DDA/ContextDDA.h	/^    FlowDDA* flowDDA;			\/\/\/< downgrade to flowDDA if out-of-budget$/;"	m	class:SVF::ContextDDA
flowDDA	svf/include/DDA/DDAStat.h	/^    FlowDDA* flowDDA;$/;"	m	class:SVF::DDAStat
fma	z3.obj/include/z3++.h	/^    inline expr fma(expr const& a, expr const& b, expr const& c, expr const& rm) {$/;"	f	namespace:z3
fopen	svf-llvm/lib/extapi.c	/^void *fopen(const char *voidname, const char *mode)$/;"	f
fopen64	svf-llvm/lib/extapi.c	/^void *fopen64(const char *voidname, const char *mode)$/;"	f
forEachSuccessor	svf/include/Graphs/WTO.h	/^    inline virtual void forEachSuccessor(const NodeT* node, std::function<void(const NodeT*)> func) const$/;"	f	class:SVF::WTO
forall	z3.obj/include/z3++.h	/^    inline expr forall(expr const & x, expr const & b) {$/;"	f	namespace:z3
forall	z3.obj/include/z3++.h	/^    inline expr forall(expr const & x1, expr const & x2, expr const & b) {$/;"	f	namespace:z3
forall	z3.obj/include/z3++.h	/^    inline expr forall(expr const & x1, expr const & x2, expr const & x3, expr const & b) {$/;"	f	namespace:z3
forall	z3.obj/include/z3++.h	/^    inline expr forall(expr const & x1, expr const & x2, expr const & x3, expr const & x4, expr const & b) {$/;"	f	namespace:z3
forall	z3.obj/include/z3++.h	/^    inline expr forall(expr_vector const & xs, expr const & b) {$/;"	f	namespace:z3
forksite	svf/include/Util/CxtStmt.h	/^    const ICFGNode* forksite;$/;"	m	class:SVF::CxtThread
forksites	svf/include/Graphs/ThreadCallGraph.h	/^    CallSiteSet forksites; \/\/\/< all thread fork sites$/;"	m	class:SVF::ThreadCallGraph
forksitesBegin	svf/include/Graphs/ThreadCallGraph.h	/^    inline CallSiteSet::const_iterator forksitesBegin() const$/;"	f	class:SVF::ThreadCallGraph
forksitesEnd	svf/include/Graphs/ThreadCallGraph.h	/^    inline CallSiteSet::const_iterator forksitesEnd() const$/;"	f	class:SVF::ThreadCallGraph
formalInOfAddressTakenFunc	svf/include/Graphs/SVFGOPT.h	/^    inline bool formalInOfAddressTakenFunc(const FormalINSVFGNode* fi) const$/;"	f	class:SVF::SVFGOPT
formalOutOfAddressTakenFunc	svf/include/Graphs/SVFGOPT.h	/^    inline bool formalOutOfAddressTakenFunc(const FormalOUTSVFGNode* fo) const$/;"	f	class:SVF::SVFGOPT
formalOutToDefMap	svf/include/Graphs/SVFGOPT.h	/^    NodeIDToNodeIDMap formalOutToDefMap;	\/\/\/< map formal-out to its def-site node$/;"	m	class:SVF::SVFGOPT
formalRet	svf/include/Graphs/ICFGNode.h	/^    const SVFVar *formalRet;$/;"	m	class:SVF::FunExitICFGNode
format	svf/lib/Util/cJSON.cpp	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon17	file:
forwardSlice	svf/include/Graphs/SVFGStat.h	/^    SVFGNodeSet forwardSlice;$/;"	m	class:SVF::SVFGStat
forwardSliceBegin	svf/include/SABER/ProgSlice.h	/^    inline SVFGNodeSetIter forwardSliceBegin() const$/;"	f	class:SVF::ProgSlice
forwardSliceEnd	svf/include/SABER/ProgSlice.h	/^    inline SVFGNodeSetIter forwardSliceEnd() const$/;"	f	class:SVF::ProgSlice
forwardTraverse	svf/include/SABER/SrcSnkSolver.h	/^    virtual void forwardTraverse(DPIm& it)$/;"	f	class:SVF::SrcSnkSolver
forwardTraverse	svf/include/Util/GraphReachSolver.h	/^    virtual void forwardTraverse(DPIm& it)$/;"	f	class:SVF::GraphReachSolver
forwardVisited	svf/include/SABER/SrcSnkDDA.h	/^    inline bool forwardVisited(const SVFGNode* node, const DPIm& item)$/;"	f	class:SVF::SrcSnkDDA
forwardslice	svf/include/SABER/ProgSlice.h	/^    SVFGNodeSet forwardslice;				\/\/\/<  the forward slice$/;"	m	class:SVF::ProgSlice
fpAbs	z3.obj/bin/python/z3/z3.py	/^def fpAbs(a, ctx=None):$/;"	f
fpAdd	z3.obj/bin/python/z3/z3.py	/^def fpAdd(rm, a, b, ctx=None):$/;"	f
fpBVToFP	z3.obj/bin/python/z3/z3.py	/^def fpBVToFP(v, sort, ctx=None):$/;"	f
fpDiv	z3.obj/bin/python/z3/z3.py	/^def fpDiv(rm, a, b, ctx=None):$/;"	f
fpEQ	z3.obj/bin/python/z3/z3.py	/^def fpEQ(a, b, ctx=None):$/;"	f
fpFMA	z3.obj/bin/python/z3/z3.py	/^def fpFMA(rm, a, b, c, ctx=None):$/;"	f
fpFP	z3.obj/bin/python/z3/z3.py	/^def fpFP(sgn, exp, sig, ctx=None):$/;"	f
fpFPToFP	z3.obj/bin/python/z3/z3.py	/^def fpFPToFP(rm, v, sort, ctx=None):$/;"	f
fpGEQ	z3.obj/bin/python/z3/z3.py	/^def fpGEQ(a, b, ctx=None):$/;"	f
fpGT	z3.obj/bin/python/z3/z3.py	/^def fpGT(a, b, ctx=None):$/;"	f
fpInfinity	z3.obj/bin/python/z3/z3.py	/^def fpInfinity(s, negative):$/;"	f
fpIsInf	z3.obj/bin/python/z3/z3.py	/^def fpIsInf(a, ctx=None):$/;"	f
fpIsNaN	z3.obj/bin/python/z3/z3.py	/^def fpIsNaN(a, ctx=None):$/;"	f
fpIsNegative	z3.obj/bin/python/z3/z3.py	/^def fpIsNegative(a, ctx=None):$/;"	f
fpIsNormal	z3.obj/bin/python/z3/z3.py	/^def fpIsNormal(a, ctx=None):$/;"	f
fpIsPositive	z3.obj/bin/python/z3/z3.py	/^def fpIsPositive(a, ctx=None):$/;"	f
fpIsSubnormal	z3.obj/bin/python/z3/z3.py	/^def fpIsSubnormal(a, ctx=None):$/;"	f
fpIsZero	z3.obj/bin/python/z3/z3.py	/^def fpIsZero(a, ctx=None):$/;"	f
fpLEQ	z3.obj/bin/python/z3/z3.py	/^def fpLEQ(a, b, ctx=None):$/;"	f
fpLT	z3.obj/bin/python/z3/z3.py	/^def fpLT(a, b, ctx=None):$/;"	f
fpMax	z3.obj/bin/python/z3/z3.py	/^def fpMax(a, b, ctx=None):$/;"	f
fpMin	z3.obj/bin/python/z3/z3.py	/^def fpMin(a, b, ctx=None):$/;"	f
fpMinusInfinity	z3.obj/bin/python/z3/z3.py	/^def fpMinusInfinity(s):$/;"	f
fpMinusZero	z3.obj/bin/python/z3/z3.py	/^def fpMinusZero(s):$/;"	f
fpMul	z3.obj/bin/python/z3/z3.py	/^def fpMul(rm, a, b, ctx=None):$/;"	f
fpNEQ	z3.obj/bin/python/z3/z3.py	/^def fpNEQ(a, b, ctx=None):$/;"	f
fpNaN	z3.obj/bin/python/z3/z3.py	/^def fpNaN(s):$/;"	f
fpNeg	z3.obj/bin/python/z3/z3.py	/^def fpNeg(a, ctx=None):$/;"	f
fpPlusInfinity	z3.obj/bin/python/z3/z3.py	/^def fpPlusInfinity(s):$/;"	f
fpPlusZero	z3.obj/bin/python/z3/z3.py	/^def fpPlusZero(s):$/;"	f
fpRealToFP	z3.obj/bin/python/z3/z3.py	/^def fpRealToFP(rm, v, sort, ctx=None):$/;"	f
fpRem	z3.obj/bin/python/z3/z3.py	/^def fpRem(a, b, ctx=None):$/;"	f
fpRoundToIntegral	z3.obj/bin/python/z3/z3.py	/^def fpRoundToIntegral(rm, a, ctx=None):$/;"	f
fpSignedToFP	z3.obj/bin/python/z3/z3.py	/^def fpSignedToFP(rm, v, sort, ctx=None):$/;"	f
fpSqrt	z3.obj/bin/python/z3/z3.py	/^def fpSqrt(rm, a, ctx=None):$/;"	f
fpSub	z3.obj/bin/python/z3/z3.py	/^def fpSub(rm, a, b, ctx=None):$/;"	f
fpToFP	z3.obj/bin/python/z3/z3.py	/^def fpToFP(a1, a2=None, a3=None, ctx=None):$/;"	f
fpToFPUnsigned	z3.obj/bin/python/z3/z3.py	/^def fpToFPUnsigned(rm, x, s, ctx=None):$/;"	f
fpToIEEEBV	z3.obj/bin/python/z3/z3.py	/^def fpToIEEEBV(x, ctx=None):$/;"	f
fpToReal	z3.obj/bin/python/z3/z3.py	/^def fpToReal(x, ctx=None):$/;"	f
fpToSBV	z3.obj/bin/python/z3/z3.py	/^def fpToSBV(rm, x, s, ctx=None):$/;"	f
fpToUBV	z3.obj/bin/python/z3/z3.py	/^def fpToUBV(rm, x, s, ctx=None):$/;"	f
fpUnsignedToFP	z3.obj/bin/python/z3/z3.py	/^def fpUnsignedToFP(rm, v, sort, ctx=None):$/;"	f
fpZero	z3.obj/bin/python/z3/z3.py	/^def fpZero(s, negative):$/;"	f
fpa_const	z3.obj/include/z3++.h	/^    inline expr context::fpa_const(char const * name) { return constant(name, fpa_sort<precision>()); }$/;"	f	class:z3::context
fpa_const	z3.obj/include/z3++.h	/^    inline expr context::fpa_const(char const * name, unsigned ebits, unsigned sbits) { return constant(name, fpa_sort(ebits, sbits)); }$/;"	f	class:z3::context
fpa_ebits	z3.obj/include/z3++.h	/^        unsigned fpa_ebits() const { assert(is_fpa()); unsigned r = Z3_fpa_get_ebits(ctx(), *this); check_error(); return r; }$/;"	f	class:z3::sort
fpa_rounding_mode	z3.obj/include/z3++.h	/^        sort fpa_rounding_mode() {$/;"	f	class:z3::expr
fpa_rounding_mode	z3.obj/include/z3++.h	/^    inline sort context::fpa_rounding_mode() {$/;"	f	class:z3::context
fpa_sbits	z3.obj/include/z3++.h	/^        unsigned fpa_sbits() const { assert(is_fpa()); unsigned r = Z3_fpa_get_sbits(ctx(), *this); check_error(); return r; }$/;"	f	class:z3::sort
fpa_sort	z3.obj/include/z3++.h	/^    inline sort context::fpa_sort(unsigned ebits, unsigned sbits) { Z3_sort s = Z3_mk_fpa_sort(m_ctx, ebits, sbits); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
fpa_sort	z3.obj/include/z3++.h	/^    inline sort context::fpa_sort<128>() { return fpa_sort(15, 113); }$/;"	f	class:z3::context
fpa_sort	z3.obj/include/z3++.h	/^    inline sort context::fpa_sort<16>() { return fpa_sort(5, 11); }$/;"	f	class:z3::context
fpa_sort	z3.obj/include/z3++.h	/^    inline sort context::fpa_sort<32>() { return fpa_sort(8, 24); }$/;"	f	class:z3::context
fpa_sort	z3.obj/include/z3++.h	/^    inline sort context::fpa_sort<64>() { return fpa_sort(11, 53); }$/;"	f	class:z3::context
fpa_val	z3.obj/include/z3++.h	/^    inline expr context::fpa_val(double n) { sort s = fpa_sort<64>(); Z3_ast r = Z3_mk_fpa_numeral_double(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
fpa_val	z3.obj/include/z3++.h	/^    inline expr context::fpa_val(float n) { sort s = fpa_sort<32>(); Z3_ast r = Z3_mk_fpa_numeral_float(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
free_fn	svf/include/Util/cJSON.h	/^    void (CJSON_CDECL *free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
freopen	svf-llvm/lib/extapi.c	/^void* freopen(const char* voidname, const char* mode, void* fp)$/;"	f
freopen64	svf-llvm/lib/extapi.c	/^void* freopen64( const char* voidname, const char* mode, void* fp )$/;"	f
fromFile	svf/include/Graphs/IRGraph.h	/^    bool fromFile; \/\/\/< Whether the SVFIR is built according to user specified data from a txt file$/;"	m	class:SVF::IRGraph
fromString	svf/include/Util/CommandLine.h	/^    static bool fromString(const std::string s, std::string &value)$/;"	f	class:Option
fromString	svf/include/Util/CommandLine.h	/^    static bool fromString(const std::string s, u32_t &value)$/;"	f	class:Option
fromString	svf/include/Util/CommandLine.h	/^    static bool fromString(const std::string& s, bool& value)$/;"	f	class:Option
from_file	z3.obj/bin/python/z3/z3.py	/^    def from_file(self, filename):$/;"	m	class:Optimize
from_file	z3.obj/bin/python/z3/z3.py	/^    def from_file(self, filename):$/;"	m	class:Solver
from_file	z3.obj/include/z3++.h	/^        void from_file(char const* file) { Z3_solver_from_file(ctx(), m_solver, file); ctx().check_parser_error(); }$/;"	f	class:z3::solver
from_file	z3.obj/include/z3++.h	/^        void from_file(char const* filename) { Z3_optimize_from_file(ctx(), m_opt, filename); check_error(); }$/;"	f	class:z3::optimize
from_file	z3.obj/include/z3++.h	/^        void from_file(char const* s) { Z3_fixedpoint_from_file(ctx(), m_fp, s); check_error(); }$/;"	f	class:z3::fixedpoint
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:ApplyResultObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Ast
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:AstMapObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:AstVectorObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Config
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Constructor
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:ConstructorList
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:ContextObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:FixedpointObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:FuncDecl
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:FuncEntryObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:FuncInterpObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:GoalObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Literals
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Model
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:ModelObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:OptimizeObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:ParamDescrs
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Params
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Pattern
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:ProbeObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:RCFNumObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:SolverObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Sort
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:StatsObj
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:Symbol
from_param	z3.obj/bin/python/z3/z3types.py	/^  def from_param(obj): return obj$/;"	m	class:TacticObj
from_string	z3.obj/bin/python/z3/z3.py	/^    def from_string(self, s):$/;"	m	class:Optimize
from_string	z3.obj/bin/python/z3/z3.py	/^    def from_string(self, s):$/;"	m	class:Solver
from_string	z3.obj/include/z3++.h	/^        void from_string(char const* constraints) { Z3_optimize_from_string(ctx(), m_opt, constraints); check_error(); }$/;"	f	class:z3::optimize
from_string	z3.obj/include/z3++.h	/^        void from_string(char const* s) { Z3_fixedpoint_from_string(ctx(), m_fp, s); check_error(); }$/;"	f	class:z3::fixedpoint
from_string	z3.obj/include/z3++.h	/^        void from_string(char const* s) { Z3_solver_from_string(ctx(), m_solver, s); ctx().check_parser_error(); }$/;"	f	class:z3::solver
front	svf/include/Graphs/BasicBlockG.h	/^    inline const ICFGNode* front() const$/;"	f	class:SVF::SVFBasicBlock
front	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFBasicBlock* front() const$/;"	f	class:SVF::FunObjVar
front	svf/include/Util/WorkList.h	/^    inline Data &front()$/;"	f	class:SVF::FIFOWorkList
fspta	svf/include/WPA/FlowSensitive.h	/^    static std::unique_ptr<FlowSensitive> fspta;$/;"	m	class:SVF::FlowSensitive
fspta	svf/include/WPA/WPAStat.h	/^    FlowSensitive * fspta;$/;"	m	class:SVF::FlowSensitiveStat
fullJoin	svf/include/MTA/MHP.h	/^    ThreadPairSet fullJoin;		\/\/\/< t1 fully joins t2 along all program path$/;"	m	class:SVF::ForkJoinAnalysis
fullReachable	svf/include/SABER/ProgSlice.h	/^    bool fullReachable;						\/\/\/<  reachable from all paths$/;"	m	class:SVF::ProgSlice
full_set	z3.obj/include/z3++.h	/^    inline expr full_set(sort const& s) {$/;"	f	namespace:z3
fun	svf/include/Graphs/BasicBlockG.h	/^    const FunObjVar* fun;                 \/\/\/ Function where this BasicBlock is$/;"	m	class:SVF::SVFBasicBlock
fun	svf/include/Graphs/CallGraph.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::CallGraphNode
fun	svf/include/Graphs/ICFGNode.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::ICFGNode
fun	svf/include/Graphs/SVFGNode.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::InterMSSAPHISVFGNode
fun	svf/include/Graphs/VFGNode.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::FormalParmVFGNode
fun	svf/include/Graphs/VFGNode.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::FormalRetVFGNode
fun	svf/include/Graphs/VFGNode.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::InterPHIVFGNode
fun	svf/include/MSSA/MSSAMuChi.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::EntryCHI
fun	svf/include/MSSA/MSSAMuChi.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::RetMU
fun	svf/include/Util/CxtStmt.h	/^    const FunObjVar* fun;$/;"	m	class:SVF::CxtProc
funArgsListMap	svf/include/SVFIR/SVFIR.h	/^    FunToArgsListMap funArgsListMap;	\/\/\/< Map a function to a list of all its formal parameters$/;"	m	class:SVF::SVFIR
funEntryNode	svf/include/Graphs/SVFGNode.h	/^    const FunEntryICFGNode* funEntryNode;$/;"	m	class:SVF::FormalINSVFGNode
funExitNode	svf/include/Graphs/SVFGNode.h	/^    const FunExitICFGNode* funExitNode;$/;"	m	class:SVF::FormalOUTSVFGNode
funHasRet	svf/include/SVFIR/SVFIR.h	/^    inline bool funHasRet(const FunObjVar* func) const$/;"	f	class:SVF::SVFIR
funNameOfVcall	svf/include/Graphs/ICFGNode.h	/^    std::string funNameOfVcall;     \/\/\/ the function name of this virtual call$/;"	m	class:SVF::CallICFGNode
funObjVar	svf/include/SVFIR/SVFVariables.h	/^    const FunObjVar* funObjVar;$/;"	m	class:SVF::FunValVar
funObjVar2Annotations	svf/include/Util/ExtAPI.h	/^    Map<const FunObjVar*, std::vector<std::string>> funObjVar2Annotations;$/;"	m	class:SVF::ExtAPI
funPtrToCallSitesMap	svf/include/SVFIR/SVFIR.h	/^    FunPtrToCallSitesMap funPtrToCallSitesMap;	\/\/\/< Map a function pointer to the callsites where it is used$/;"	m	class:SVF::SVFIR
funRetMap	svf/include/SVFIR/SVFIR.h	/^    FunToRetMap funRetMap;	\/\/\/< Map a function to its unique function return PAGNodes$/;"	m	class:SVF::SVFIR
funSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunctionSet funSet;$/;"	m	class:SVF::LLVMModuleSet
funToCallGraphNodeMap	svf/include/Graphs/CallGraph.h	/^    FunToCallGraphNodeMap funToCallGraphNodeMap; \/\/\/< Call Graph node map$/;"	m	class:SVF::CallGraph
funToEntryChiSetMap	svf/include/MSSA/MemSSA.h	/^    FunToEntryChiSetMap funToEntryChiSetMap;$/;"	m	class:SVF::MemSSA
funToExitBB	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunToExitBBMap funToExitBB;$/;"	m	class:SVF::LLVMModuleSet
funToExitBBsMap	svf/include/SABER/SaberCondAllocator.h	/^    FunToExitBBsMap funToExitBBsMap;		\/\/\/< map a function to all its basic blocks calling program exit$/;"	m	class:SVF::SaberCondAllocator
funToFormalINMap	svf/include/Graphs/SVFG.h	/^    FunctionToFormalINsMapTy funToFormalINMap;$/;"	m	class:SVF::SVFG
funToFormalOUTMap	svf/include/Graphs/SVFG.h	/^    FunctionToFormalOUTsMapTy funToFormalOUTMap;$/;"	m	class:SVF::SVFG
funToMRsMap	svf/include/MSSA/MemRegion.h	/^    FunToMRsMap funToMRsMap;$/;"	m	class:SVF::MRGenerator
funToModsMap	svf/include/MSSA/MemRegion.h	/^    FunToPointsToMap funToModsMap;$/;"	m	class:SVF::MRGenerator
funToPointsToMap	svf/include/MSSA/MemRegion.h	/^    FunToPointsTosMap funToPointsToMap;$/;"	m	class:SVF::MRGenerator
funToRealDefFun	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunToRealDefFunMap funToRealDefFun;$/;"	m	class:SVF::LLVMModuleSet
funToRefsMap	svf/include/MSSA/MemRegion.h	/^    FunToPointsToMap funToRefsMap;$/;"	m	class:SVF::MRGenerator
funToReturnMuSetMap	svf/include/MSSA/MemSSA.h	/^    FunToReturnMuSetMap funToReturnMuSetMap;$/;"	m	class:SVF::MemSSA
funToVFGNodesMap	svf/include/Graphs/VFG.h	/^    FunToVFGNodesMapTy funToVFGNodesMap; \/\/\/< map a function to its VFGNodes;$/;"	m	class:SVF::VFG
func2Annotations	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Map<const Function*, std::vector<std::string>> func2Annotations;$/;"	m	class:SVF::LLVMModuleSet
funcName	svf-llvm/include/SVF-LLVM/CppUtil.h	/^    std::string funcName;$/;"	m	struct:SVF::cppUtil::DemangledName
funcToInterMap	svf/include/MSSA/MemPartition.h	/^    FunToInterMap funcToInterMap;$/;"	m	class:SVF::IntraDisjointMRG
funcToPtsMap	svf/include/MSSA/MemPartition.h	/^    FunToPtsMap funcToPtsMap;$/;"	m	class:SVF::IntraDisjointMRG
funcToWTO	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Map<const FunObjVar*, ICFGWTO*> funcToWTO;$/;"	m	class:SVF::AbstractInterpretation
funcType	svf/include/SVFIR/SVFVariables.h	/^    const SVFFunctionType* funcType; \/\/\/ FunctionType, which is different from the type (PointerType) of this SVF Function$/;"	m	class:SVF::FunObjVar
func_decl	z3.obj/include/z3++.h	/^        func_decl(context & c):ast(c) {}$/;"	f	class:z3::func_decl
func_decl	z3.obj/include/z3++.h	/^        func_decl(context & c, Z3_func_decl n):ast(c, reinterpret_cast<Z3_ast>(n)) {}$/;"	f	class:z3::func_decl
func_decl	z3.obj/include/z3++.h	/^        func_decl(func_decl const & s):ast(s) {}$/;"	f	class:z3::func_decl
func_decl	z3.obj/include/z3++.h	/^    class func_decl : public ast {$/;"	c	namespace:z3
func_decl_vector	z3.obj/include/z3++.h	/^    typedef ast_vector_tpl<func_decl> func_decl_vector;$/;"	t	namespace:z3
func_entry	z3.obj/include/z3++.h	/^        func_entry(context & c, Z3_func_entry e):object(c) { init(e); }$/;"	f	class:z3::func_entry
func_entry	z3.obj/include/z3++.h	/^        func_entry(func_entry const & s):object(s) { init(s.m_entry); }$/;"	f	class:z3::func_entry
func_entry	z3.obj/include/z3++.h	/^    class func_entry : public object {$/;"	c	namespace:z3
func_interp	z3.obj/include/z3++.h	/^        func_interp(context & c, Z3_func_interp e):object(c) { init(e); }$/;"	f	class:z3::func_interp
func_interp	z3.obj/include/z3++.h	/^        func_interp(func_interp const & s):object(s) { init(s.m_interp); }$/;"	f	class:z3::func_interp
func_interp	z3.obj/include/z3++.h	/^    class func_interp : public object {$/;"	c	namespace:z3
func_map	svf/include/AE/Svfexe/AbsExtAPI.h	/^    Map<std::string, std::function<void(const CallICFGNode*)>> func_map; \/\/\/< Map of function names to handlers.$/;"	m	class:SVF::AbsExtAPI
func_map	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Map<std::string, std::function<void(const CallICFGNode*)>> func_map;$/;"	m	class:SVF::AbstractInterpretation
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, sort const & d1, sort const & d2, sort const & d3, sort const & d4, sort const & d5, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, sort const & d1, sort const & d2, sort const & d3, sort const & d4, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, sort const & d1, sort const & d2, sort const & d3, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, sort const & d1, sort const & d2, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, sort const & domain, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, sort_vector const& domain, sort const& range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(char const * name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(symbol const & name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl context::function(symbol const& name, sort_vector const& domain, sort const& range) {$/;"	f	class:z3::context
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const * name, sort const & d1, sort const & d2, sort const & d3, sort const & d4, sort const & d5, sort const & range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const * name, sort const & d1, sort const & d2, sort const & d3, sort const & d4, sort const & range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const * name, sort const & d1, sort const & d2, sort const & d3, sort const & range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const * name, sort const & d1, sort const & d2, sort const & range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const * name, sort const & domain, sort const & range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const * name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(char const* name, sort_vector const& domain, sort const& range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(std::string const& name, sort_vector const& domain, sort const& range) {$/;"	f	namespace:z3
function	z3.obj/include/z3++.h	/^    inline func_decl function(symbol const & name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	namespace:z3
functionDoesNotRet	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::functionDoesNotRet(const Function*  fun)$/;"	f	class:LLVMUtil
fwFindClsNameSources	svf-llvm/lib/ObjTypeInference.cpp	/^Set<const CallBase *> &ObjTypeInference::fwFindClsNameSources(const Value *startValue)$/;"	f	class:ObjTypeInference
fwInferObjType	svf-llvm/lib/ObjTypeInference.cpp	/^const Type *ObjTypeInference::fwInferObjType(const Value *var)$/;"	f	class:ObjTypeInference
gai_strerror	svf-llvm/lib/extapi.c	/^const char *gai_strerror(int errcode)$/;"	f
gamma_hat	svf/lib/AE/Core/RelationSolver.cpp	/^Z3Expr RelationSolver::gamma_hat(const AbstractState& alpha,$/;"	f	class:RelationSolver
gamma_hat	svf/lib/AE/Core/RelationSolver.cpp	/^Z3Expr RelationSolver::gamma_hat(const AbstractState& exeState) const$/;"	f	class:RelationSolver
gamma_hat	svf/lib/AE/Core/RelationSolver.cpp	/^Z3Expr RelationSolver::gamma_hat(u32_t id, const AbstractState& exeState) const$/;"	f	class:RelationSolver
gatherAggs	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::gatherAggs(const DICompositeType *type)$/;"	f	class:DCHGraph
gcry_cipher_algo_name	svf-llvm/lib/extapi.c	/^const char *gcry_cipher_algo_name(int errcode)$/;"	f
gcvt	svf-llvm/lib/extapi.c	/^char *gcvt(double x, int ndigit, char *buf)$/;"	f
generalNumMap	svf/include/Util/SVFStat.h	/^    NUMStatMap generalNumMap;$/;"	m	class:SVF::SVFStat
generateMRs	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::generateMRs()$/;"	f	class:MRGenerator
generic_bridge_gep_type_iterator	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    generic_bridge_gep_type_iterator() {}$/;"	f	class:llvm::generic_bridge_gep_type_iterator
generic_bridge_gep_type_iterator	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^class generic_bridge_gep_type_iterator : public std::iterator<std::forward_iterator_tag, Type*, ptrdiff_t>$/;"	c	namespace:llvm
generic_download_file	build.sh	/^function generic_download_file {$/;"	f
gepInEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy gepInEdges;$/;"	m	class:SVF::ConstraintNode
gepNodeNumIndex	svf/lib/SVFIR/PAGBuilderFromFile.cpp	/^static u32_t gepNodeNumIndex = 100000;$/;"	v	file:
gepObjOffsetFromBase	svf/include/AE/Svfexe/AEDetector.h	/^    Map<const GepObjVar*, IntervalValue> gepObjOffsetFromBase; \/\/\/< Maps GEP objects to their offsets from the base.$/;"	m	class:SVF::BufOverflowDetector
gepOutEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy gepOutEdges;$/;"	m	class:SVF::ConstraintNode
gepPointeeType	svf/include/MemoryModel/AccessPath.h	/^    const SVFType* gepPointeeType;   \/\/\/ source element type in gep instruction,$/;"	m	class:SVF::AccessPath
gepSrcNodes	svf/include/DDA/DDAClient.h	/^    PAGNodeSet gepSrcNodes;$/;"	m	class:SVF::AliasDDAClient
gepSrcPointeeType	svf/include/MemoryModel/AccessPath.h	/^    inline const SVFType* gepSrcPointeeType() const$/;"	f	class:SVF::AccessPath
gepTime	svf/include/WPA/FlowSensitive.h	/^    double gepTime;	\/\/\/< time of handling gep edges$/;"	m	class:SVF::FlowSensitive
gepValType	svf/include/SVFIR/SVFVariables.h	/^    const SVFType* gepValType;$/;"	m	class:SVF::GepValVar
gep_type_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::gep_type_iterator gep_type_iterator;$/;"	t	namespace:SVF
geq	svf/include/AE/Core/IntervalValue.h	/^    bool geq(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
geq	svf/include/AE/Core/NumericValue.h	/^    bool geq(const BoundedDouble& rhs) const$/;"	f	class:SVF::BoundedDouble
geq	svf/include/AE/Core/NumericValue.h	/^    bool geq(const BoundedInt& rhs) const$/;"	f	class:SVF::BoundedInt
geqVarToValMap	svf/include/AE/Core/AbstractState.h	/^    static bool geqVarToValMap(const VarToAbsValMap&lhs, const VarToAbsValMap&rhs)$/;"	f	class:SVF::AbstractState
get	svf/lib/Util/NodeIDAllocator.cpp	/^NodeIDAllocator *NodeIDAllocator::get(void)$/;"	f	class:SVF::NodeIDAllocator
get	z3.obj/bin/python/z3/z3.py	/^    def get(self, i):$/;"	m	class:Goal
getAEInstance	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    static AbstractInterpretation& getAEInstance()$/;"	f	class:SVF::AbstractInterpretation
getAbsStateFromTrace	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    AbstractState& getAbsStateFromTrace(const ICFGNode* node)$/;"	f	class:SVF::AbstractInterpretation
getAbsStateFromTrace	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^AbstractState& AbsExtAPI::getAbsStateFromTrace(const SVF::ICFGNode* node)$/;"	f	class:AbsExtAPI
getAccessOffset	svf/lib/AE/Svfexe/AEDetector.cpp	/^IntervalValue BufOverflowDetector::getAccessOffset(SVF::AbstractState& as, SVF::NodeID objId, const SVF::GepStmt* gep)$/;"	f	class:BufOverflowDetector
getAccessPath	svf/include/Graphs/ConsGEdge.h	/^    inline const AccessPath& getAccessPath() const$/;"	f	class:SVF::NormalGepCGEdge
getAccessPath	svf/include/SVFIR/SVFStatements.h	/^    inline const AccessPath& getAccessPath() const$/;"	f	class:SVF::GepStmt
getAccessPathFromBaseNode	svf-llvm/lib/SVFIRBuilder.cpp	/^AccessPath SVFIRBuilder::getAccessPathFromBaseNode(NodeID nodeId)$/;"	f	class:SVFIRBuilder
getActualINDef	svf/include/Graphs/SVFGOPT.h	/^    inline NodeID getActualINDef(NodeID ai) const$/;"	f	class:SVF::SVFGOPT
getActualINSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline ActualINSVFGNodeSet& getActualINSVFGNodes(const CallICFGNode* cs)$/;"	f	class:SVF::SVFG
getActualOUTSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline ActualOUTSVFGNodeSet& getActualOUTSVFGNodes(const CallICFGNode* cs)$/;"	f	class:SVF::SVFG
getActualParmAtForkSite	svf/include/Util/SVFUtil.h	/^inline const ValVar* getActualParmAtForkSite(const CallICFGNode* cs)$/;"	f	namespace:SVF::SVFUtil
getActualParmAtForkSite	svf/lib/Util/ThreadAPI.cpp	/^const ValVar* ThreadAPI::getActualParmAtForkSite(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
getActualParmVFGNode	svf/include/Graphs/VFG.h	/^    inline ActualParmVFGNode* getActualParmVFGNode(const PAGNode* aparm,const CallICFGNode* cs) const$/;"	f	class:SVF::VFG
getActualParms	svf/include/Graphs/ICFGNode.h	/^    inline const ActualParmNodeVec &getActualParms() const$/;"	f	class:SVF::CallICFGNode
getActualPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    const Data &getActualPts(PointsToID id) const$/;"	f	class:SVF::PersistentPointsToCache
getActualRet	svf/include/Graphs/ICFGNode.h	/^    inline const SVFVar *getActualRet() const$/;"	f	class:SVF::RetICFGNode
getActualRetVFGNode	svf/include/Graphs/VFG.h	/^    inline ActualRetVFGNode* getActualRetVFGNode(const PAGNode* aret) const$/;"	f	class:SVF::VFG
getAddrCGEdges	svf/include/Graphs/ConsG.h	/^    inline ConstraintEdge::ConstraintEdgeSetTy& getAddrCGEdges()$/;"	f	class:SVF::ConstraintGraph
getAddrInEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getAddrInEdges() const$/;"	f	class:SVF::ConstraintNode
getAddrOutEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getAddrOutEdges() const$/;"	f	class:SVF::ConstraintNode
getAddrs	svf/include/AE/Core/AbstractValue.h	/^    AddressValue& getAddrs()$/;"	f	class:SVF::AbstractValue
getAddrs	svf/include/AE/Core/AbstractValue.h	/^    const AddressValue getAddrs() const$/;"	f	class:SVF::AbstractValue
getAggs	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const Set<const DIType *> &getAggs(const DIType *base)$/;"	f	class:SVF::DCHGraph
getAliasMemRegions	svf/include/MSSA/MemRegion.h	/^    virtual inline void getAliasMemRegions(MRSet& aliasMRs, const NodeBS& cpts, const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
getAllCallSitesInvokingCallee	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::getAllCallSitesInvokingCallee(const FunObjVar* callee, CallGraphEdge::CallInstSet& csSet)$/;"	f	class:CallGraph
getAllFieldsObjVars	svf/include/Graphs/ConsG.h	/^    inline NodeBS& getAllFieldsObjVars(NodeID id)$/;"	f	class:SVF::ConstraintGraph
getAllFieldsObjVars	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual inline const NodeBS& getAllFieldsObjVars(NodeID id)$/;"	f	class:SVF::PointerAnalysis
getAllFieldsObjVars	svf/lib/SVFIR/SVFIR.cpp	/^NodeBS& SVFIR::getAllFieldsObjVars(NodeID id)$/;"	f	class:SVFIR
getAllFieldsObjVars	svf/lib/SVFIR/SVFIR.cpp	/^NodeBS& SVFIR::getAllFieldsObjVars(const BaseObjVar* obj)$/;"	f	class:SVFIR
getAllPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    Map<Data, unsigned> getAllPts(void)$/;"	f	class:SVF::PersistentPointsToCache
getAllValidPtrs	svf/include/MemoryModel/PointerAnalysis.h	/^    inline OrderedNodeSet& getAllValidPtrs()$/;"	f	class:SVF::PointerAnalysis
getAllValidPtrs	svf/include/SVFIR/SVFIR.h	/^    inline OrderedNodeSet& getAllValidPtrs()$/;"	f	class:SVF::SVFIR
getAllocaInstByteSize	svf/lib/AE/Core/AbstractState.cpp	/^u32_t AbstractState::getAllocaInstByteSize(const AddrStmt *addr)$/;"	f	class:AbstractState
getAnalysisTy	svf/include/MemoryModel/PointerAnalysis.h	/^    inline PTATY getAnalysisTy() const$/;"	f	class:SVF::PointerAnalysis
getAncestorThread	svf/include/MTA/TCT.h	/^    const NodeBS getAncestorThread(NodeID tid) const$/;"	f	class:SVF::TCT
getAndersenAnalysis	svf/include/DDA/DDAVFSolver.h	/^    inline AndersenWaveDiff* getAndersenAnalysis() const$/;"	f	class:SVF::DDAVFSolver
getArg	svf/include/SVFIR/SVFVariables.h	/^    inline const ArgValVar*  getArg(u32_t idx) const$/;"	f	class:SVF::FunObjVar
getArgNo	svf/include/SVFIR/SVFVariables.h	/^    inline u32_t getArgNo() const$/;"	f	class:SVF::ArgValVar
getArgPosInCall	svf-llvm/lib/ObjTypeInference.cpp	/^u32_t ObjTypeInference::getArgPosInCall(const CallBase *callBase, const Value *arg)$/;"	f	class:ObjTypeInference
getArgument	svf/include/Graphs/ICFGNode.h	/^    inline const ValVar* getArgument(u32_t ArgNo) const$/;"	f	class:SVF::CallICFGNode
getArrSize	svf/include/SVFIR/SVFStatements.h	/^    inline const std::vector<SVFVar*>& getArrSize() const   \/\/TODO:getSizeVars$/;"	f	class:SVF::AddrStmt
getAttrSyms	svf/include/CFL/CFGrammar.h	/^    inline const Set<Kind>& getAttrSyms() const$/;"	f	class:SVF::GrammarBase
getAttributedKind	svf/include/CFL/CFGrammar.h	/^    inline static Kind getAttributedKind(Attribute attribute, Kind kind)$/;"	f	class:SVF::GrammarBase
getBB	svf/include/Graphs/ICFGNode.h	/^    virtual const SVFBasicBlock* getBB() const$/;"	f	class:SVF::ICFGNode
getBB	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFBasicBlock* getBB() const$/;"	f	class:SVF::SVFStmt
getBB2PIdom	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline Map<const SVFBasicBlock*,const SVFBasicBlock*>& getBB2PIdom()$/;"	f	class:SVF::SVFLoopAndDomInfo
getBB2PIdom	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const Map<const SVFBasicBlock*,const SVFBasicBlock*>& getBB2PIdom() const$/;"	f	class:SVF::SVFLoopAndDomInfo
getBBPDomLevel	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline Map<const SVFBasicBlock*,u32_t>& getBBPDomLevel()$/;"	f	class:SVF::SVFLoopAndDomInfo
getBBPDomLevel	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const Map<const SVFBasicBlock*,u32_t>& getBBPDomLevel() const$/;"	f	class:SVF::SVFLoopAndDomInfo
getBBPhiNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getBBPhiNum() const$/;"	f	class:MemSSA
getBBPredecessorPos	svf/include/Graphs/BasicBlockG.h	/^    u32_t getBBPredecessorPos(const SVFBasicBlock* succbb) const$/;"	f	class:SVF::SVFBasicBlock
getBBPredecessorPos	svf/include/Graphs/BasicBlockG.h	/^    u32_t getBBPredecessorPos(const SVFBasicBlock* succbb)$/;"	f	class:SVF::SVFBasicBlock
getBBSuccessorBranchID	svf/lib/Util/CDGBuilder.cpp	/^s64_t CDGBuilder::getBBSuccessorBranchID(const SVFBasicBlock *BB, const SVFBasicBlock *Succ)$/;"	f	class:CDGBuilder
getBBSuccessorPos	svf/include/Graphs/BasicBlockG.h	/^    u32_t getBBSuccessorPos(const SVFBasicBlock* Succ) const$/;"	f	class:SVF::SVFBasicBlock
getBBSuccessorPos	svf/include/Graphs/BasicBlockG.h	/^    u32_t getBBSuccessorPos(const SVFBasicBlock* Succ)$/;"	f	class:SVF::SVFBasicBlock
getBBToPhiSetMap	svf/include/MSSA/MemSSA.h	/^    inline BBToPhiSetMap& getBBToPhiSetMap()$/;"	f	class:SVF::MemSSA
getBVPointsTo	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline PointsTo getBVPointsTo(const CPtSet& cpts) const$/;"	f	class:SVF::CondPTAImpl
getBackwardSliceSize	svf/include/SABER/ProgSlice.h	/^    inline u32_t getBackwardSliceSize() const$/;"	f	class:SVF::ProgSlice
getBaseMemObj	svf/include/SVFIR/SVFVariables.h	/^    virtual const BaseObjVar* getBaseMemObj() const$/;"	f	class:SVF::BaseObjVar
getBaseNode	svf/include/SVFIR/SVFVariables.h	/^    inline NodeID getBaseNode(void) const$/;"	f	class:SVF::GepObjVar
getBaseNode	svf/include/SVFIR/SVFVariables.h	/^    inline const ValVar* getBaseNode(void) const$/;"	f	class:SVF::GepValVar
getBaseObj	svf/include/SVFIR/SVFVariables.h	/^    inline const BaseObjVar* getBaseObj() const$/;"	f	class:SVF::GepObjVar
getBaseObjVar	svf/include/Graphs/ConsG.h	/^    inline NodeID getBaseObjVar(NodeID id)$/;"	f	class:SVF::ConstraintGraph
getBaseObjVar	svf/include/MemoryModel/PointerAnalysis.h	/^    inline NodeID getBaseObjVar(NodeID id)$/;"	f	class:SVF::PointerAnalysis
getBaseObjVar	svf/include/SVFIR/SVFIR.h	/^    inline NodeID getBaseObjVar(NodeID id) const$/;"	f	class:SVF::SVFIR
getBaseObject	svf/include/SVFIR/SVFIR.h	/^    inline const BaseObjVar* getBaseObject(NodeID id) const$/;"	f	class:SVF::SVFIR
getBaseTypeAndFlattenedFields	svf-llvm/lib/SVFIRExtAPI.cpp	/^const Type* SVFIRBuilder::getBaseTypeAndFlattenedFields(const Value* V, std::vector<AccessPath> &fields, const Value* szValue)$/;"	f	class:SVFIRBuilder
getBaseValVar	svf/include/SVFIR/SVFIR.h	/^    inline const ValVar* getBaseValVar(NodeID id) const$/;"	f	class:SVF::SVFIR
getBaseValueForExtArg	svf-llvm/lib/SVFIRBuilder.cpp	/^const Value* SVFIRBuilder::getBaseValueForExtArg(const Value* V)$/;"	f	class:SVFIRBuilder
getBasicBlock	svf/include/MSSA/MSSAMuChi.h	/^    inline const SVFBasicBlock* getBasicBlock() const$/;"	f	class:SVF::CallCHI
getBasicBlock	svf/include/MSSA/MSSAMuChi.h	/^    inline const SVFBasicBlock* getBasicBlock() const$/;"	f	class:SVF::CallMU
getBasicBlock	svf/include/MSSA/MSSAMuChi.h	/^    inline const SVFBasicBlock* getBasicBlock() const$/;"	f	class:SVF::LoadMU
getBasicBlock	svf/include/MSSA/MSSAMuChi.h	/^    inline const SVFBasicBlock* getBasicBlock() const$/;"	f	class:SVF::MSSAPHI
getBasicBlock	svf/include/MSSA/MSSAMuChi.h	/^    inline const SVFBasicBlock* getBasicBlock() const$/;"	f	class:SVF::StoreCHI
getBasicBlockGraph	svf/include/SVFIR/SVFVariables.h	/^    BasicBlockGraph* getBasicBlockGraph()$/;"	f	class:SVF::FunObjVar
getBasicBlockGraph	svf/include/SVFIR/SVFVariables.h	/^    const BasicBlockGraph* getBasicBlockGraph() const$/;"	f	class:SVF::FunObjVar
getBeforeBrackets	svf-llvm/lib/CppUtil.cpp	/^std::string cppUtil::getBeforeBrackets(const std::string& name)$/;"	f	class:cppUtil
getBeforeParenthesis	svf-llvm/lib/CppUtil.cpp	/^static std::string getBeforeParenthesis(const std::string& name)$/;"	f	file:
getBinaryOPVFGNode	svf/include/Graphs/VFG.h	/^    inline BinaryOPVFGNode* getBinaryOPVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getBlackHoleNode	svf/include/Graphs/ConsG.h	/^    inline NodeID getBlackHoleNode()$/;"	f	class:SVF::ConstraintGraph
getBlackHoleNode	svf/include/Graphs/IRGraph.h	/^    inline NodeID getBlackHoleNode() const$/;"	f	class:SVF::IRGraph
getBlkPtr	svf/include/Graphs/IRGraph.h	/^    inline NodeID getBlkPtr() const$/;"	f	class:SVF::IRGraph
getBlockTrace	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    u32_t& getBlockTrace()$/;"	f	class:SVF::AEStat
getBranchCond	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::getBranchCond(const SVFBasicBlock* bb, const SVFBasicBlock* succ) const$/;"	f	class:SaberCondAllocator
getBranchConditions	svf/include/Graphs/CDG.h	/^    const Set<BranchCondition> &getBranchConditions() const$/;"	f	class:SVF::CDGEdge
getBranchInst	svf/include/SVFIR/SVFStatements.h	/^    const SVFVar* getBranchInst() const$/;"	f	class:SVF::BranchStmt
getBranchStmt	svf/include/Graphs/VFGNode.h	/^    const BranchStmt* getBranchStmt() const$/;"	f	class:SVF::BranchVFGNode
getBranchVFGNode	svf/include/Graphs/VFG.h	/^    inline BranchVFGNode* getBranchVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON * DoubleFreeBug::getBugDescription() const$/;"	f	class:DoubleFreeBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON * FileNeverCloseBug::getBugDescription() const$/;"	f	class:FileNeverCloseBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON * FilePartialCloseBug::getBugDescription() const$/;"	f	class:FilePartialCloseBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON * NeverFreeBug::getBugDescription() const$/;"	f	class:NeverFreeBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON * PartialLeakBug::getBugDescription() const$/;"	f	class:PartialLeakBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON *BufferOverflowBug::getBugDescription() const$/;"	f	class:BufferOverflowBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON *FullNullPtrDereferenceBug::getBugDescription() const$/;"	f	class:FullNullPtrDereferenceBug
getBugDescription	svf/lib/Util/SVFBugReport.cpp	/^cJSON *PartialNullPtrDereferenceBug::getBugDescription() const$/;"	f	class:PartialNullPtrDereferenceBug
getBugReport	svf/include/SABER/SrcSnkDDA.h	/^    inline const SVFBugReport& getBugReport() const$/;"	f	class:SVF::SrcSnkDDA
getBugSet	svf/include/Util/SVFBugReport.h	/^    const BugSet &getBugSet() const$/;"	f	class:SVF::SVFBugReport
getBugType	svf/include/Util/SVFBugReport.h	/^    inline BugType getBugType() const$/;"	f	class:SVF::GenericBug
getByteOffset	svf/lib/AE/Core/AbstractState.cpp	/^IntervalValue AbstractState::getByteOffset(const GepStmt* gep)$/;"	f	class:AbstractState
getByteSize	svf/include/SVFIR/SVFType.h	/^    inline u32_t getByteSize() const$/;"	f	class:SVF::SVFType
getByteSizeOfObj	svf/include/SVFIR/ObjTypeInfo.h	/^    inline u32_t getByteSizeOfObj() const$/;"	f	class:SVF::ObjTypeInfo
getByteSizeOfObj	svf/include/SVFIR/SVFVariables.h	/^    u32_t getByteSizeOfObj() const$/;"	f	class:SVF::BaseObjVar
getCDG	svf/include/Graphs/CDG.h	/^    static inline CDG * getCDG()$/;"	f	class:SVF::CDG
getCDGEdge	svf/include/Graphs/CDG.h	/^    CDGEdge *getCDGEdge(const CDGNode *src, const CDGNode *dst)$/;"	f	class:SVF::CDG
getCDGNode	svf/include/Graphs/CDG.h	/^    inline CDGNode *getCDGNode(NodeID id) const$/;"	f	class:SVF::CDG
getCDN	svf/include/Graphs/WTO.h	/^    CycleDepthNumber getCDN(const NodeT* n) const$/;"	f	class:SVF::WTO
getCFCond	svf/include/SABER/SaberCondAllocator.h	/^    inline Condition getCFCond(const SVFBasicBlock* bb) const$/;"	f	class:SVF::SaberCondAllocator
getCFLEdges	svf/include/Graphs/CFLGraph.h	/^    inline const CFLEdgeSet& getCFLEdges() const$/;"	f	class:SVF::CFLGraph
getCFLGraph	svf/lib/CFL/CFLBase.cpp	/^CFLGraph* CFLBase::getCFLGraph()$/;"	f	class:SVF::CFLBase
getCFLPts	svf/include/CFL/CFLAlias.h	/^    virtual const PointsTo& getCFLPts(NodeID ptr)$/;"	f	class:SVF::CFLAlias
getCHG	svf/include/SVFIR/SVFIR.h	/^    inline CommonCHGraph* getCHG()$/;"	f	class:SVF::SVFIR
getCHGraph	svf/include/MemoryModel/PointerAnalysis.h	/^    CommonCHGraph *getCHGraph() const$/;"	f	class:SVF::PointerAnalysis
getCHISet	svf/include/MSSA/MemSSA.h	/^    inline CHISet& getCHISet(const CallICFGNode* cs)$/;"	f	class:SVF::MemSSA
getCHISet	svf/include/MSSA/MemSSA.h	/^    inline CHISet& getCHISet(const StoreStmt* st)$/;"	f	class:SVF::MemSSA
getCSClasses	svf-llvm/lib/CHGBuilder.cpp	/^const CHGraph::CHNodeSetTy& CHGBuilder::getCSClasses(const CallBase* cs)$/;"	f	class:CHGBuilder
getCSIDAtCall	svf/lib/DDA/ContextDDA.cpp	/^CallSiteID ContextDDA::getCSIDAtCall(CxtLocDPItem&, const SVFGEdge* edge)$/;"	f	class:ContextDDA
getCSIDAtRet	svf/lib/DDA/ContextDDA.cpp	/^CallSiteID ContextDDA::getCSIDAtRet(CxtLocDPItem&, const SVFGEdge* edge)$/;"	f	class:ContextDDA
getCSStaticType	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const DIType *getCSStaticType(const CallICFGNode* cs) const$/;"	f	class:SVF::DCHGraph
getCSStaticType	svf-llvm/lib/DCHG.cpp	/^const DIType* DCHGraph::getCSStaticType(CallBase* cs) const$/;"	f	class:DCHGraph
getCSTCLS	svf/include/MTA/LockAnalysis.h	/^    CxtStmtToCxtLockSet getCSTCLS()$/;"	f	class:SVF::LockAnalysis
getCSVFsBasedonCHA	svf-llvm/lib/DCHG.cpp	/^const VFunSet &DCHGraph::getCSVFsBasedonCHA(const CallICFGNode* cs)$/;"	f	class:DCHGraph
getCSVFsBasedonCHA	svf/lib/Graphs/CHG.cpp	/^const VFunSet& CHGraph::getCSVFsBasedonCHA(const CallICFGNode* cs)$/;"	f	class:CHGraph
getCSVtblsBasedonCHA	svf-llvm/lib/DCHG.cpp	/^const VTableSet &DCHGraph::getCSVtblsBasedonCHA(const CallICFGNode* cs)$/;"	f	class:DCHGraph
getCSVtblsBasedonCHA	svf/lib/Graphs/CHG.cpp	/^const VTableSet& CHGraph::getCSVtblsBasedonCHA(const CallICFGNode* cs)$/;"	f	class:CHGraph
getCachedADPointsTo	svf/include/DDA/DDAVFSolver.h	/^    virtual inline const CPtSet& getCachedADPointsTo(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
getCachedPointsTo	svf/include/DDA/DDAVFSolver.h	/^    virtual inline const CPtSet& getCachedPointsTo(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
getCachedTLPointsTo	svf/include/DDA/DDAVFSolver.h	/^    virtual inline const CPtSet& getCachedTLPointsTo(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
getCallBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline CallICFGNode* getCallBlock(const Instruction* cs)$/;"	f	class:SVF::LLVMModuleSet
getCallEdgeBegin	svf/include/Graphs/CallGraph.h	/^    inline CallGraphEdgeSet::const_iterator getCallEdgeBegin(const CallICFGNode* inst) const$/;"	f	class:SVF::CallGraph
getCallEdgeEnd	svf/include/Graphs/CallGraph.h	/^    inline CallGraphEdgeSet::const_iterator getCallEdgeEnd(const CallICFGNode* inst) const$/;"	f	class:SVF::CallGraph
getCallGraph	svf/include/Graphs/VFG.h	/^    inline CallGraph* getCallGraph() const$/;"	f	class:SVF::VFG
getCallGraph	svf/include/MemoryModel/PointerAnalysis.h	/^    inline CallGraph* getCallGraph() const$/;"	f	class:SVF::PointerAnalysis
getCallGraph	svf/include/SVFIR/SVFIR.h	/^    inline CallGraph* getCallGraph()$/;"	f	class:SVF::SVFIR
getCallGraphNode	svf/include/Graphs/CallGraph.h	/^    inline CallGraphNode* getCallGraphNode(NodeID id) const$/;"	f	class:SVF::CallGraph
getCallGraphNode	svf/include/Graphs/CallGraph.h	/^    inline CallGraphNode* getCallGraphNode(const FunObjVar* fun) const$/;"	f	class:SVF::CallGraph
getCallGraphNode	svf/include/SVFIR/SVFVariables.h	/^    inline const FunObjVar* getCallGraphNode() const$/;"	f	class:SVF::RetValPN
getCallGraphNode	svf/lib/Graphs/CallGraph.cpp	/^const CallGraphNode* CallGraph::getCallGraphNode(const std::string& name)$/;"	f	class:CallGraph
getCallGraphSCC	svf/include/MemoryModel/PointerAnalysis.h	/^    inline CallGraphSCC* getCallGraphSCC() const$/;"	f	class:SVF::PointerAnalysis
getCallGraphSCCRepNode	svf/include/MemoryModel/PointerAnalysis.h	/^    inline NodeID getCallGraphSCCRepNode(NodeID id) const$/;"	f	class:SVF::PointerAnalysis
getCallICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline CallICFGNode* getCallICFGNode(const Instruction*  cs)$/;"	f	class:SVF::ICFGBuilder
getCallICFGNode	svf-llvm/lib/LLVMModule.cpp	/^CallICFGNode* LLVMModuleSet::getCallICFGNode(const Instruction* inst)$/;"	f	class:LLVMModuleSet
getCallICFGNode	svf/include/Graphs/ICFGNode.h	/^    inline const CallICFGNode* getCallICFGNode() const$/;"	f	class:SVF::RetICFGNode
getCallInst	svf/include/SVFIR/SVFStatements.h	/^    inline const CallICFGNode* getCallInst() const$/;"	f	class:SVF::CallPE
getCallInst	svf/include/SVFIR/SVFStatements.h	/^    inline const CallICFGNode* getCallInst() const$/;"	f	class:SVF::RetPE
getCallInstToCallGraphEdgesMap	svf/include/Graphs/CallGraph.h	/^    inline const CallInstToCallGraphEdgesMap& getCallInstToCallGraphEdgesMap() const$/;"	f	class:SVF::CallGraph
getCallPEs	svf/include/Graphs/ICFGEdge.h	/^    inline const std::vector<const CallPE*>& getCallPEs() const$/;"	f	class:SVF::CallCFGEdge
getCallSite	svf/include/Graphs/CallGraph.h	/^    inline const CallICFGNode* getCallSite(CallSiteID id) const$/;"	f	class:SVF::CallGraph
getCallSite	svf/include/Graphs/ICFGEdge.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::CallCFGEdge
getCallSite	svf/include/Graphs/SVFGNode.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::ActualINSVFGNode
getCallSite	svf/include/Graphs/SVFGNode.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::ActualOUTSVFGNode
getCallSite	svf/include/Graphs/SVFGNode.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::InterMSSAPHISVFGNode
getCallSite	svf/include/Graphs/VFG.h	/^    inline const CallICFGNode* getCallSite(CallSiteID id) const$/;"	f	class:SVF::VFG
getCallSite	svf/include/Graphs/VFGNode.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::ActualParmVFGNode
getCallSite	svf/include/Graphs/VFGNode.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::ActualRetVFGNode
getCallSite	svf/include/Graphs/VFGNode.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::InterPHIVFGNode
getCallSite	svf/include/MSSA/MSSAMuChi.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::CallCHI
getCallSite	svf/include/MSSA/MSSAMuChi.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::CallMU
getCallSite	svf/include/SVFIR/SVFStatements.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::CallPE
getCallSite	svf/include/SVFIR/SVFStatements.h	/^    inline const CallICFGNode* getCallSite() const$/;"	f	class:SVF::RetPE
getCallSite	svf/lib/Graphs/ICFG.cpp	/^const CallICFGNode* RetCFGEdge::getCallSite() const$/;"	f	class:RetCFGEdge
getCallSite	svf/lib/SABER/ProgSlice.cpp	/^const CallICFGNode* ProgSlice::getCallSite(const SVFGEdge* edge) const$/;"	f	class:ProgSlice
getCallSiteArgsList	svf/include/SVFIR/SVFIR.h	/^    inline const SVFVarList& getCallSiteArgsList(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFIR
getCallSiteArgsMap	svf/include/SVFIR/SVFIR.h	/^    inline CSToArgsListMap& getCallSiteArgsMap()$/;"	f	class:SVF::SVFIR
getCallSiteArgsPts	svf/include/MSSA/MemRegion.h	/^    inline NodeBS& getCallSiteArgsPts(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
getCallSiteChiNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getCallSiteChiNum() const$/;"	f	class:MemSSA
getCallSiteID	svf/include/Graphs/CallGraph.h	/^    inline CallSiteID getCallSiteID() const$/;"	f	class:SVF::CallGraphEdge
getCallSiteID	svf/include/Graphs/CallGraph.h	/^    inline CallSiteID getCallSiteID(const CallICFGNode* cs, const FunObjVar* callee) const$/;"	f	class:SVF::CallGraph
getCallSiteID	svf/include/Graphs/VFG.h	/^    inline CallSiteID getCallSiteID(const CallICFGNode* cs, const FunObjVar* func) const$/;"	f	class:SVF::VFG
getCallSiteId	svf/include/Graphs/SVFGEdge.h	/^    inline CallSiteID getCallSiteId() const$/;"	f	class:SVF::CallIndSVFGEdge
getCallSiteId	svf/include/Graphs/SVFGEdge.h	/^    inline CallSiteID getCallSiteId() const$/;"	f	class:SVF::RetIndSVFGEdge
getCallSiteId	svf/include/Graphs/VFGEdge.h	/^    inline CallSiteID getCallSiteId() const$/;"	f	class:SVF::CallDirSVFGEdge
getCallSiteId	svf/include/Graphs/VFGEdge.h	/^    inline CallSiteID getCallSiteId() const$/;"	f	class:SVF::RetDirSVFGEdge
getCallSiteModMRSet	svf/include/MSSA/MemRegion.h	/^    inline MRSet& getCallSiteModMRSet(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
getCallSiteMuNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getCallSiteMuNum() const$/;"	f	class:MemSSA
getCallSitePair	svf/include/Graphs/CallGraph.h	/^    inline const CallSitePair& getCallSitePair(CallSiteID id) const$/;"	f	class:SVF::CallGraph
getCallSiteRefMRSet	svf/include/MSSA/MemRegion.h	/^    inline MRSet& getCallSiteRefMRSet(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
getCallSiteRet	svf/include/SVFIR/SVFIR.h	/^    inline const SVFVar* getCallSiteRet(const RetICFGNode* cs) const$/;"	f	class:SVF::SVFIR
getCallSiteRetPts	svf/include/MSSA/MemRegion.h	/^    inline NodeBS& getCallSiteRetPts(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
getCallSiteRets	svf/include/SVFIR/SVFIR.h	/^    inline CSToRetMap& getCallSiteRets()$/;"	f	class:SVF::SVFIR
getCallSiteSet	svf/include/SVFIR/SVFIR.h	/^    inline const CallSiteSet& getCallSiteSet() const$/;"	f	class:SVF::SVFIR
getCallSiteToChiSetMap	svf/include/MSSA/MemSSA.h	/^    inline CallSiteToCHISetMap& getCallSiteToChiSetMap()$/;"	f	class:SVF::MemSSA
getCallSiteToMuSetMap	svf/include/MSSA/MemSSA.h	/^    inline CallSiteToMUSetMap& getCallSiteToMuSetMap()$/;"	f	class:SVF::MemSSA
getCalledFunction	svf/include/Graphs/ICFGNode.h	/^    inline const FunObjVar* getCalledFunction() const$/;"	f	class:SVF::CallICFGNode
getCalledFunctions	svf-llvm/lib/LLVMUtil.cpp	/^std::vector<const Function *> LLVMUtil::getCalledFunctions(const Function *F)$/;"	f	class:LLVMUtil
getCallee	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const Function* getCallee(const CallBase* cs)$/;"	f	namespace:SVF::LLVMUtil
getCallee	svf/include/MTA/MHP.h	/^    inline const CallGraph::FunctionSet& getCallee(const CallICFGNode* inst, CallGraph::FunctionSet& callees)$/;"	f	class:SVF::MHP
getCallee	svf/include/MTA/MHP.h	/^    inline const CallGraph::FunctionSet& getCallee(const ICFGNode* inst, CallGraph::FunctionSet& callees)$/;"	f	class:SVF::ForkJoinAnalysis
getCalleeOfCallSite	svf/include/Graphs/CallGraph.h	/^    inline const FunObjVar* getCalleeOfCallSite(CallSiteID id) const$/;"	f	class:SVF::CallGraph
getCallees	svf/include/Graphs/CallGraph.h	/^    inline void getCallees(const CallICFGNode* cs, FunctionSet& callees)$/;"	f	class:SVF::CallGraph
getCaller	svf/include/Graphs/ICFGNode.h	/^    inline const FunObjVar* getCaller() const$/;"	f	class:SVF::CallICFGNode
getCaller	svf/include/Graphs/VFGNode.h	/^    inline const FunObjVar* getCaller() const$/;"	f	class:SVF::ActualRetVFGNode
getCallerOfCallSite	svf/lib/Graphs/CallGraph.cpp	/^const FunObjVar *CallGraph::getCallerOfCallSite(CallSiteID id) const$/;"	f	class:CallGraph
getCallgraph	svf/include/SABER/SrcSnkDDA.h	/^    inline CallGraph* getCallgraph() const$/;"	f	class:SVF::SrcSnkDDA
getCandidateQueries	svf/include/DDA/DDAClient.h	/^    inline const OrderedNodeSet& getCandidateQueries() const$/;"	f	class:SVF::DDAClient
getCandidateQueries	svf/include/DDA/DDAVFSolver.h	/^    inline NodeBS& getCandidateQueries()$/;"	f	class:SVF::DDAVFSolver
getCandidates	svf/include/WPA/WPAFSSolver.h	/^    inline const NodeBS& getCandidates() const$/;"	f	class:SVF::WPAMinimumSolver
getCanonicalType	svf-llvm/lib/DCHG.cpp	/^const DIType *DCHGraph::getCanonicalType(const DIType *t)$/;"	f	class:DCHGraph
getCheckerAPI	svf/include/SABER/SaberCheckerAPI.h	/^    static SaberCheckerAPI* getCheckerAPI()$/;"	f	class:SVF::SaberCheckerAPI
getChildrenBegin	svf/include/MTA/TCT.h	/^    inline ThreadCreateEdgeSet::const_iterator getChildrenBegin(const TCTNode* node) const$/;"	f	class:SVF::TCT
getChildrenEnd	svf/include/MTA/TCT.h	/^    inline ThreadCreateEdgeSet::const_iterator getChildrenEnd(const TCTNode* node) const$/;"	f	class:SVF::TCT
getClassNameFromType	svf-llvm/lib/CppUtil.cpp	/^std::string cppUtil::getClassNameFromType(const StructType* ty)$/;"	f	class:cppUtil
getClassNameFromVtblObj	svf-llvm/lib/CppUtil.cpp	/^std::string cppUtil::getClassNameFromVtblObj(const std::string& vtblName)$/;"	f	class:cppUtil
getClassNameOfThisPtr	svf-llvm/lib/CppUtil.cpp	/^Set<std::string> cppUtil::getClassNameOfThisPtr(const CallBase* inst)$/;"	f	class:cppUtil
getClk	svf/lib/Util/SVFStat.cpp	/^double SVFStat::getClk(bool mark)$/;"	f	class:SVFStat
getClsNamesInBrackets	svf-llvm/lib/CppUtil.cpp	/^Set<std::string> cppUtil::getClsNamesInBrackets(const std::string& name)$/;"	f	class:cppUtil
getCmpVFGNode	svf/include/Graphs/VFG.h	/^    inline CmpVFGNode* getCmpVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getCompleteNodeLabel	svf/lib/Graphs/SVFG.cpp	/^    static std::string getCompleteNodeLabel(NodeType *node, SVFG*)$/;"	f	struct:SVF::DOTGraphTraits
getCompleteNodeLabel	svf/lib/Graphs/VFG.cpp	/^    static std::string getCompleteNodeLabel(NodeType *node, VFG*)$/;"	f	struct:SVF::DOTGraphTraits
getCond	svf/include/MSSA/MSSAMuChi.h	/^    inline Cond getCond() const$/;"	f	class:SVF::MSSACHI
getCond	svf/include/MSSA/MSSAMuChi.h	/^    inline Cond getCond() const$/;"	f	class:SVF::MSSAMU
getCond	svf/include/MSSA/MSSAMuChi.h	/^    inline Cond getCond() const$/;"	f	class:SVF::MSSAPHI
getCond	svf/include/Util/DPItem.h	/^    inline ContextCond& getCond()$/;"	f	class:SVF::CxtStmtDPItem
getCond	svf/include/Util/DPItem.h	/^    inline const ContextCond& getCond() const$/;"	f	class:SVF::CxtStmtDPItem
getCondInst	svf/include/SABER/SaberCondAllocator.h	/^    inline const ICFGNode* getCondInst(u32_t id) const$/;"	f	class:SVF::SaberCondAllocator
getCondNum	svf/include/SABER/SaberCondAllocator.h	/^    inline u32_t getCondNum()$/;"	f	class:SVF::SaberCondAllocator
getCondPointsTo	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline const CPtSet& getCondPointsTo(NodeID ptr)$/;"	f	class:SVF::CondPTAImpl
getCondVar	svf/include/Util/DPItem.h	/^    inline CxtVar getCondVar() const$/;"	f	class:SVF::CxtStmtDPItem
getCondition	svf/include/Graphs/ICFGEdge.h	/^    const SVFVar* getCondition() const$/;"	f	class:SVF::IntraCFGEdge
getCondition	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getCondition() const$/;"	f	class:SVF::SelectStmt
getCondition	svf/lib/SVFIR/SVFStatements.cpp	/^const SVFVar* BranchStmt::getCondition() const$/;"	f	class:BranchStmt
getConstantFieldIdx	svf-llvm/include/SVF-LLVM/DCHG.h	/^    u32_t getConstantFieldIdx(void) const$/;"	f	class:SVF::DCHEdge
getConstantFieldIdx	svf/include/Graphs/ConsGEdge.h	/^    inline APOffset getConstantFieldIdx() const$/;"	f	class:SVF::NormalGepCGEdge
getConstantFieldIdx	svf/include/SVFIR/SVFVariables.h	/^    inline APOffset getConstantFieldIdx() const$/;"	f	class:SVF::GepObjVar
getConstantFieldIdx	svf/include/SVFIR/SVFVariables.h	/^    inline APOffset getConstantFieldIdx() const$/;"	f	class:SVF::GepValVar
getConstantNode	svf/include/Graphs/IRGraph.h	/^    inline NodeID getConstantNode() const$/;"	f	class:SVF::IRGraph
getConstantStructFldIdx	svf/include/MemoryModel/AccessPath.h	/^    inline APOffset getConstantStructFldIdx() const$/;"	f	class:SVF::AccessPath
getConstantStructFldIdx	svf/include/SVFIR/SVFStatements.h	/^    inline APOffset getConstantStructFldIdx() const$/;"	f	class:SVF::GepStmt
getConstraintGraph	svf/include/WPA/Andersen.h	/^    ConstraintGraph* getConstraintGraph()$/;"	f	class:SVF::AndersenBase
getConstraintNode	svf/include/Graphs/ConsG.h	/^    inline ConstraintNode* getConstraintNode(NodeID id) const$/;"	f	class:SVF::ConstraintGraph
getConstructorThisPtr	svf-llvm/lib/CppUtil.cpp	/^const Argument* cppUtil::getConstructorThisPtr(const Function* fun)$/;"	f	class:cppUtil
getConsume	svf/lib/WPA/VersionedFlowSensitive.cpp	/^Version VersionedFlowSensitive::getConsume(const NodeID l, const NodeID o) const$/;"	f	class:VersionedFlowSensitive
getContext	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    LLVMContext& getContext() const$/;"	f	class:SVF::LLVMModuleSet
getContext	svf-llvm/tools/AE/ae.cpp	/^    static z3::context& getContext()$/;"	f	class:SymblicAbstractionTest
getContext	svf/include/AE/Core/RelExeState.h	/^    static z3::context &getContext()$/;"	f	class:SVF::RelExeState
getContext	svf/include/Util/CxtStmt.h	/^    inline const CallStrCxt& getContext() const$/;"	f	class:SVF::CxtProc
getContext	svf/include/Util/CxtStmt.h	/^    inline const CallStrCxt& getContext() const$/;"	f	class:SVF::CxtStmt
getContext	svf/include/Util/CxtStmt.h	/^    inline const CallStrCxt& getContext() const$/;"	f	class:SVF::CxtThread
getContext	svf/lib/Util/Z3Expr.cpp	/^z3::context &Z3Expr::getContext()$/;"	f	class:SVF::Z3Expr
getContexts	svf/include/Util/DPItem.h	/^    inline CallStrCxt& getContexts()$/;"	f	class:SVF::ContextCond
getContexts	svf/include/Util/DPItem.h	/^    inline const CallStrCxt& getContexts() const$/;"	f	class:SVF::ContextCond
getContexts	svf/include/Util/DPItem.h	/^    inline const ContextCond& getContexts() const$/;"	f	class:SVF::CxtDPItem
getCopyInEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getCopyInEdges() const$/;"	f	class:SVF::ConstraintNode
getCopyKind	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline CopyStmt::CopyKind getCopyKind(const Value* val)$/;"	f	class:SVF::SVFIRBuilder
getCopyKind	svf/include/SVFIR/SVFStatements.h	/^    inline u32_t getCopyKind() const$/;"	f	class:SVF::CopyStmt
getCopyOutEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getCopyOutEdges() const$/;"	f	class:SVF::ConstraintNode
getCurEvalSVFGNode	svf/include/SABER/SaberCondAllocator.h	/^    inline const SVFGNode* getCurEvalSVFGNode() const$/;"	f	class:SVF::SaberCondAllocator
getCurNodeID	svf/include/Util/DPItem.h	/^    inline NodeID getCurNodeID() const$/;"	f	class:SVF::DPItem
getCurSVFGNode	svf/include/SABER/ProgSlice.h	/^    inline const SVFGNode* getCurSVFGNode() const$/;"	f	class:SVF::ProgSlice
getCurSlice	svf/include/SABER/SrcSnkDDA.h	/^    inline ProgSlice* getCurSlice() const$/;"	f	class:SVF::SrcSnkDDA
getCurrent	svf/include/Graphs/GenericGraph.h	/^    ItTy getCurrent()$/;"	f	class:SVF::mapped_iter
getCurrentBB	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline const SVFBasicBlock* getCurrentBB() const$/;"	f	class:SVF::SVFIRBuilder
getCurrentBestNodeMapping	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::MappingPtr PointsTo::getCurrentBestNodeMapping()$/;"	f	class:SVF::PointsTo
getCurrentBestReverseNodeMapping	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::MappingPtr PointsTo::getCurrentBestReverseNodeMapping()$/;"	f	class:SVF::PointsTo
getCurrentValue	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline const Value* getCurrentValue() const$/;"	f	class:SVF::SVFIRBuilder
getCxtLockfromCxtStmt	svf/include/MTA/LockAnalysis.h	/^    inline CxtLockSet& getCxtLockfromCxtStmt(const CxtStmt& cts)$/;"	f	class:SVF::LockAnalysis
getCxtLockfromCxtStmt	svf/include/MTA/LockAnalysis.h	/^    inline const CxtLockSet& getCxtLockfromCxtStmt(const CxtStmt& cts) const$/;"	f	class:SVF::LockAnalysis
getCxtOfCxtThread	svf/include/MTA/TCT.h	/^    const CallStrCxt& getCxtOfCxtThread(const CxtThread& ct) const$/;"	f	class:SVF::TCT
getCxtStmtfromInst	svf/include/MTA/LockAnalysis.h	/^    inline const CxtStmtSet& getCxtStmtfromInst(const ICFGNode* inst) const$/;"	f	class:SVF::LockAnalysis
getCxtThread	svf/include/MTA/TCT.h	/^    inline const CxtThread& getCxtThread() const$/;"	f	class:SVF::TCTNode
getDFIn	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline const DFPtsMap& getDFIn()$/;"	f	class:SVF::MutableDFPTData
getDFInPtIdRef	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PointsToID &getDFInPtIdRef(LocID loc, const Key &var)$/;"	f	class:SVF::PersistentDFPTData
getDFInPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline const PtsMap& getDFInPtsMap(LocID loc)$/;"	f	class:SVF::MutableDFPTData
getDFInPtsSet	svf/include/WPA/FlowSensitive.h	/^    inline const PointsTo& getDFInPtsSet(const SVFGNode* stmt, const NodeID node)$/;"	f	class:SVF::FlowSensitive
getDFInUpdatedVar	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline const DataSet& getDFInUpdatedVar(LocID loc)$/;"	f	class:SVF::MutableIncDFPTData
getDFInUpdatedVar	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline const KeySet& getDFInUpdatedVar(LocID loc)$/;"	f	class:SVF::PersistentIncDFPTData
getDFInputMap	svf/include/WPA/FlowSensitive.h	/^    inline const DFInOutMap& getDFInputMap() const$/;"	f	class:SVF::FlowSensitive
getDFOut	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline const DFPtsMap& getDFOut()$/;"	f	class:SVF::MutableDFPTData
getDFOutPtIdRef	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PointsToID &getDFOutPtIdRef(LocID loc, const Key &var)$/;"	f	class:SVF::PersistentDFPTData
getDFOutPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline const PtsMap& getDFOutPtsMap(LocID loc)$/;"	f	class:SVF::MutableDFPTData
getDFOutPtsSet	svf/include/WPA/FlowSensitive.h	/^    inline const PointsTo& getDFOutPtsSet(const SVFGNode* stmt, const NodeID node)$/;"	f	class:SVF::FlowSensitive
getDFOutUpdatedVar	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline const DataSet& getDFOutUpdatedVar(LocID loc)$/;"	f	class:SVF::MutableIncDFPTData
getDFOutUpdatedVar	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline const KeySet& getDFOutUpdatedVar(LocID loc)$/;"	f	class:SVF::PersistentIncDFPTData
getDFOutputMap	svf/include/WPA/FlowSensitive.h	/^    inline const DFInOutMap& getDFOutputMap() const$/;"	f	class:SVF::FlowSensitive
getDFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline DFPTDataTy* getDFPTDataTy() const$/;"	f	class:SVF::BVDataPTAImpl
getDIType	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const DIType * getDIType(void) const$/;"	f	class:SVF::DCHNode
getDPIm	svf/include/DDA/DDAVFSolver.h	/^    virtual inline DPIm getDPIm(const CVar& var, const SVFGNode* loc) const$/;"	f	class:SVF::DDAVFSolver
getDPImWithOldCond	svf/include/DDA/DDAVFSolver.h	/^    virtual inline DPIm getDPImWithOldCond(const DPIm& oldDpm,const CVar& var, const SVFGNode* loc)$/;"	f	class:SVF::DDAVFSolver
getDataLayout	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline static DataLayout* getDataLayout(Module* mod)$/;"	f	namespace:SVF::LLVMUtil
getDef	svf/include/Graphs/SVFG.h	/^    inline NodeID getDef(const MRVer* mvar) const$/;"	f	class:SVF::SVFG
getDef	svf/include/Graphs/SVFG.h	/^    inline NodeID getDef(const PAGNode* pagNode) const$/;"	f	class:SVF::SVFG
getDef	svf/include/Graphs/VFG.h	/^    inline NodeID getDef(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getDef	svf/include/MSSA/MSSAMuChi.h	/^    inline MSSADef* getDef() const$/;"	f	class:SVF::MRVer
getDefFunForMultipleModule	svf/include/SVFIR/SVFVariables.h	/^    inline const FunObjVar* getDefFunForMultipleModule() const$/;"	f	class:SVF::FunObjVar
getDefSVFGNode	svf/include/DDA/DDAVFSolver.h	/^    inline const SVFGNode* getDefSVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::DDAVFSolver
getDefSVFGNode	svf/include/Graphs/SVFG.h	/^    inline const SVFGNode* getDefSVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::SVFG
getDefSVFVars	svf/lib/Graphs/SVFG.cpp	/^const NodeBS DummyVersionPropSVFGNode::getDefSVFVars() const$/;"	f	class:DummyVersionPropSVFGNode
getDefSVFVars	svf/lib/Graphs/SVFG.cpp	/^const NodeBS MRSVFGNode::getDefSVFVars() const$/;"	f	class:MRSVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS ActualParmVFGNode::getDefSVFVars() const$/;"	f	class:ActualParmVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS ActualRetVFGNode::getDefSVFVars() const$/;"	f	class:ActualRetVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS AddrVFGNode::getDefSVFVars() const$/;"	f	class:AddrVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS BinaryOPVFGNode::getDefSVFVars() const$/;"	f	class:BinaryOPVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS BranchVFGNode::getDefSVFVars() const$/;"	f	class:BranchVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS CmpVFGNode::getDefSVFVars() const$/;"	f	class:CmpVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS CopyVFGNode::getDefSVFVars() const$/;"	f	class:CopyVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS FormalParmVFGNode::getDefSVFVars() const$/;"	f	class:FormalParmVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS FormalRetVFGNode::getDefSVFVars() const$/;"	f	class:FormalRetVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS GepVFGNode::getDefSVFVars() const$/;"	f	class:GepVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS LoadVFGNode::getDefSVFVars() const$/;"	f	class:LoadVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS NullPtrVFGNode::getDefSVFVars() const$/;"	f	class:NullPtrVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS PHIVFGNode::getDefSVFVars() const$/;"	f	class:PHIVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS StoreVFGNode::getDefSVFVars() const$/;"	f	class:StoreVFGNode
getDefSVFVars	svf/lib/Graphs/VFG.cpp	/^const NodeBS UnaryOPVFGNode::getDefSVFVars() const$/;"	f	class:UnaryOPVFGNode
getDefVFGNode	svf/include/Graphs/VFG.h	/^    inline const VFGNode* getDefVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getDescendants	svf/include/Graphs/CHG.h	/^    inline const CHNodeSetTy &getDescendants(const std::string className)$/;"	f	class:SVF::CHGraph
getDiffPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline DiffPTDataTy* getDiffPTDataTy() const$/;"	f	class:SVF::BVDataPTAImpl
getDiffPts	svf/include/WPA/Andersen.h	/^    virtual inline const PointsTo& getDiffPts(NodeID id)$/;"	f	class:SVF::Andersen
getDirAndIndJoinedTid	svf/lib/MTA/MHP.cpp	/^NodeBS ForkJoinAnalysis::getDirAndIndJoinedTid(const CxtStmt& cs)$/;"	f	class:ForkJoinAnalysis
getDirAndIndJoinedTid	svf/lib/MTA/MHP.cpp	/^NodeBS MHP::getDirAndIndJoinedTid(const CallStrCxt& cxt, const ICFGNode* call)$/;"	f	class:MHP
getDirCallSitesInvokingCallee	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::getDirCallSitesInvokingCallee(const FunObjVar* callee, CallGraphEdge::CallInstSet& csSet)$/;"	f	class:CallGraph
getDirectCGEdges	svf/include/Graphs/ConsG.h	/^    inline ConstraintEdge::ConstraintEdgeSetTy& getDirectCGEdges()$/;"	f	class:SVF::ConstraintGraph
getDirectCalls	svf/include/Graphs/CallGraph.h	/^    inline CallInstSet& getDirectCalls()$/;"	f	class:SVF::CallGraphEdge
getDirectCalls	svf/include/Graphs/CallGraph.h	/^    inline const CallInstSet& getDirectCalls() const$/;"	f	class:SVF::CallGraphEdge
getDirectInEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getDirectInEdges() const$/;"	f	class:SVF::ConstraintNode
getDirectOutEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getDirectOutEdges() const$/;"	f	class:SVF::ConstraintNode
getDirectlyJoinedTid	svf/include/MTA/MHP.h	/^    inline NodeBS& getDirectlyJoinedTid(const CxtStmt& cs)$/;"	f	class:SVF::ForkJoinAnalysis
getDistanceMatrix	svf/lib/Util/NodeIDAllocator.cpp	/^double *NodeIDAllocator::Clusterer::getDistanceMatrix(const std::vector<std::pair<const PointsTo *, unsigned>> pointsToSets,$/;"	f	class:SVF::NodeIDAllocator::Clusterer
getDomFrontierMap	svf/include/SVFIR/SVFVariables.h	/^    inline const Map<const SVFBasicBlock*,BBSet>& getDomFrontierMap() const$/;"	f	class:SVF::FunObjVar
getDomFrontierMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline Map<const SVFBasicBlock*,BBSet>& getDomFrontierMap()$/;"	f	class:SVF::SVFLoopAndDomInfo
getDomFrontierMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const Map<const SVFBasicBlock*,BBSet>& getDomFrontierMap() const$/;"	f	class:SVF::SVFLoopAndDomInfo
getDomTree	svf-llvm/lib/LLVMModule.cpp	/^DominatorTree& LLVMModuleSet::getDomTree(const SVF::Function* fun)$/;"	f	class:LLVMModuleSet
getDomTreeMap	svf/include/SVFIR/SVFVariables.h	/^    inline const Map<const SVFBasicBlock*,BBSet>& getDomTreeMap() const$/;"	f	class:SVF::FunObjVar
getDomTreeMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline Map<const SVFBasicBlock*,BBSet>& getDomTreeMap()$/;"	f	class:SVF::SVFLoopAndDomInfo
getDomTreeMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const Map<const SVFBasicBlock*,BBSet>& getDomTreeMap() const$/;"	f	class:SVF::SVFLoopAndDomInfo
getDoubleValue	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline double getDoubleValue(const ConstantFP* fpValue)$/;"	f	namespace:SVF::LLVMUtil
getDpmSetAtLoc	svf/include/DDA/DDAVFSolver.h	/^    inline const DPTItemSet& getDpmSetAtLoc(const SVFGNode* loc)$/;"	f	class:SVF::DDAVFSolver
getDstID	svf/include/Graphs/GenericGraph.h	/^    inline NodeID getDstID() const$/;"	f	class:SVF::GenericEdge
getDstNode	svf/include/Graphs/GenericGraph.h	/^    NodeType* getDstNode() const$/;"	f	class:SVF::GenericEdge
getEBNFSigns	svf/include/CFL/CFGrammar.h	/^    inline Map<std::string, Kind>& getEBNFSigns()$/;"	f	class:SVF::GrammarBase
getEC	svf/include/WPA/Steensgaard.h	/^    inline NodeID getEC(NodeID id) const$/;"	f	class:SVF::Steensgaard
getEdge	svf/include/Graphs/ConsG.h	/^    inline ConstraintEdge* getEdge(ConstraintNode* src, ConstraintNode* dst, ConstraintEdge::ConstraintEdgeK kind)$/;"	f	class:SVF::ConstraintGraph
getEdgeAttri	svf/include/Graphs/CFLGraph.h	/^    inline GEdgeKind getEdgeAttri() const$/;"	f	class:SVF::CFLEdge
getEdgeAttributes	svf/include/Graphs/CDG.h	/^    static std::string getEdgeAttributes(NodeType *, EdgeIter EI, SVF::CDG *)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getEdgeAttributes(const void *, EdgeIter,$/;"	f	struct:SVF::DefaultDOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/CFLGraph.cpp	/^    static std::string getEdgeAttributes(CFLNode*, EdgeIter EI, CFLGraph* graph)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/CHG.cpp	/^    static std::string getEdgeAttributes(CHNode*, EdgeIter EI, CHGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/CallGraph.cpp	/^    static std::string getEdgeAttributes(CallGraphNode*, EdgeIter EI,$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/ConsG.cpp	/^    static std::string getEdgeAttributes(NodeType*, EdgeIter EI, ConstraintGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/ICFG.cpp	/^    static std::string getEdgeAttributes(NodeType*, EdgeIter EI, ICFG*)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/IRGraph.cpp	/^    static std::string getEdgeAttributes(SVFVar*, EdgeIter EI, IRGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/SVFG.cpp	/^    static std::string getEdgeAttributes(NodeType*, EdgeIter EI, SVFG*)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/Graphs/VFG.cpp	/^    static std::string getEdgeAttributes(NodeType*, EdgeIter EI, VFG*)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeAttributes	svf/lib/MTA/TCT.cpp	/^    static std::string getEdgeAttributes(TCTNode *node, EdgeIter EI, TCT *csThreadTree)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeDestLabel	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getEdgeDestLabel(const void *, unsigned)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getEdgeID	svf/include/Graphs/ConsGEdge.h	/^    inline EdgeID getEdgeID() const$/;"	f	class:SVF::ConstraintEdge
getEdgeID	svf/include/SVFIR/SVFStatements.h	/^    inline EdgeID getEdgeID() const$/;"	f	class:SVF::SVFStmt
getEdgeKind	svf/include/Graphs/CFLGraph.h	/^    inline GEdgeKind getEdgeKind() const$/;"	f	class:SVF::CFLEdge
getEdgeKind	svf/include/Graphs/GenericGraph.h	/^    inline GEdgeKind getEdgeKind() const$/;"	f	class:SVF::GenericEdge
getEdgeKindWithMask	svf/include/Graphs/CFLGraph.h	/^    inline GEdgeKind getEdgeKindWithMask() const$/;"	f	class:SVF::CFLEdge
getEdgeKindWithoutMask	svf/include/Graphs/GenericGraph.h	/^    inline GEdgeKind getEdgeKindWithoutMask() const$/;"	f	class:SVF::GenericEdge
getEdgeSourceLabel	svf/include/Graphs/CDG.h	/^    static std::string getEdgeSourceLabel(NodeType *, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getEdgeSourceLabel(const void *, EdgeIter)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/CFLGraph.cpp	/^    static std::string getEdgeSourceLabel(NodeType*, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/CallGraph.cpp	/^    static std::string getEdgeSourceLabel(NodeType*, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/ConsG.cpp	/^    static std::string getEdgeSourceLabel(NodeType*, EdgeIter)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/ICFG.cpp	/^    static std::string getEdgeSourceLabel(NodeType*, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/IRGraph.cpp	/^    static std::string getEdgeSourceLabel(SVFVar*, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/SVFG.cpp	/^    static std::string getEdgeSourceLabel(NodeType*, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabel	svf/lib/Graphs/VFG.cpp	/^    static std::string getEdgeSourceLabel(NodeType*, EdgeIter EI)$/;"	f	struct:SVF::DOTGraphTraits
getEdgeSourceLabels	svf/include/Graphs/GraphWriter.h	/^    bool getEdgeSourceLabels(std::stringstream &O2, NodeRef Node)$/;"	f	class:SVF::GraphWriter
getEdgeTarget	svf/include/Graphs/DOTGraphTraits.h	/^    static EdgeIter getEdgeTarget(const void *, EdgeIter I)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getEdgeType	svf/include/Graphs/CHG.h	/^    CHEDGETYPE getEdgeType() const$/;"	f	class:SVF::CHEdge
getElementIndex	svf/lib/AE/Core/AbstractState.cpp	/^IntervalValue AbstractState::getElementIndex(const GepStmt* gep)$/;"	f	class:AbstractState
getElementNum	svf/lib/MemoryModel/AccessPath.cpp	/^u32_t AccessPath::getElementNum(const SVFType* type) const$/;"	f	class:AccessPath
getElementSet	svf/include/MemoryModel/ConditionalPT.h	/^    inline const ElementSet& getElementSet() const$/;"	f	class:SVF::CondStdSet
getEntryBlock	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFBasicBlock* getEntryBlock() const$/;"	f	class:SVF::FunObjVar
getEntryNode	svf/include/Graphs/GenericGraph.h	/^    static NodeType* getEntryNode(GenericGraphTy* pag)$/;"	f	struct:SVF::GenericGraphTraits
getEntryNode	svf/include/Graphs/GenericGraph.h	/^    static NodeType* getEntryNode(NodeType* pagN)$/;"	f	struct:SVF::GenericGraphTraits
getEntryNode	svf/include/Graphs/GenericGraph.h	/^    static inline NodeType* getEntryNode(Inverse<NodeType* > G)$/;"	f	struct:SVF::GenericGraphTraits
getEntryProcs	svf/include/MTA/TCT.h	/^    inline const FunSet& getEntryProcs() const$/;"	f	class:SVF::TCT
getEpsilonProds	svf/include/CFL/CFGrammar.h	/^    Productions& getEpsilonProds()$/;"	f	class:SVF::CFGrammar
getEscapObjviaGlobals	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::getEscapObjviaGlobals(NodeBS& globs, const NodeBS& calleeModRef)$/;"	f	class:MRGenerator
getEvalBrCond	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::getEvalBrCond(const SVFBasicBlock* bb, const SVFBasicBlock* succ)$/;"	f	class:SaberCondAllocator
getEventDescription	svf/lib/Util/SVFBugReport.cpp	/^const std::string SVFBugEvent::getEventDescription() const$/;"	f	class:SVFBugEvent
getEventLoc	svf/lib/Util/SVFBugReport.cpp	/^const std::string SVFBugEvent::getEventLoc() const$/;"	f	class:SVFBugEvent
getEventStack	svf/include/Util/SVFBugReport.h	/^    inline const EventStack& getEventStack() const$/;"	f	class:SVF::GenericBug
getEventType	svf/include/Util/SVFBugReport.h	/^    inline u32_t getEventType() const$/;"	f	class:SVF::SVFBugEvent
getExitBB	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFBasicBlock* getExitBB() const$/;"	f	class:SVF::FunObjVar
getExitBlocksOfLoop	svf/include/SVFIR/SVFVariables.h	/^    inline void getExitBlocksOfLoop(const SVFBasicBlock* bb, BBList& exitbbs) const$/;"	f	class:SVF::FunObjVar
getExitBlocksOfLoop	svf/lib/SVFIR/SVFValue.cpp	/^void SVFLoopAndDomInfo::getExitBlocksOfLoop(const SVFBasicBlock* bb, BBList& exitbbs) const$/;"	f	class:SVFLoopAndDomInfo
getExitInstOfParentRoutineFun	svf/include/MTA/MHP.h	/^    inline const ICFGNode* getExitInstOfParentRoutineFun(NodeID tid) const$/;"	f	class:SVF::ForkJoinAnalysis
getExpr	svf/include/Util/Z3Expr.h	/^    const z3::expr &getExpr() const$/;"	f	class:SVF::Z3Expr
getExprSize	svf/lib/Util/Z3Expr.cpp	/^u32_t Z3Expr::getExprSize(const Z3Expr &z3Expr)$/;"	f	class:SVF::Z3Expr
getExtAPI	svf/lib/Util/ExtAPI.cpp	/^ExtAPI* ExtAPI::getExtAPI()$/;"	f	class:ExtAPI
getExtBcPath	svf/lib/Util/ExtAPI.cpp	/^std::string ExtAPI::getExtBcPath()$/;"	f	class:ExtAPI
getExtFuncAnnotation	svf-llvm/lib/LLVMModule.cpp	/^std::string LLVMModuleSet::getExtFuncAnnotation(const Function* fun, const std::string& funcAnnotation)$/;"	f	class:LLVMModuleSet
getExtFuncAnnotation	svf/lib/Util/ExtAPI.cpp	/^std::string ExtAPI::getExtFuncAnnotation(const FunObjVar* fun, const std::string& funcAnnotation)$/;"	f	class:ExtAPI
getExtFuncAnnotations	svf-llvm/lib/LLVMModule.cpp	/^const std::vector<std::string>& LLVMModuleSet::getExtFuncAnnotations(const Function* fun)$/;"	f	class:LLVMModuleSet
getExtFuncAnnotations	svf/lib/Util/ExtAPI.cpp	/^const std::vector<std::string>& ExtAPI::getExtFuncAnnotations(const FunObjVar* fun)$/;"	f	class:ExtAPI
getExternalNode	svf/lib/MemoryModel/PointsTo.cpp	/^NodeID PointsTo::getExternalNode(NodeID n) const$/;"	f	class:SVF::PointsTo
getFIObjVar	svf/include/Graphs/ConsG.h	/^    inline NodeID getFIObjVar(NodeID id)$/;"	f	class:SVF::ConstraintGraph
getFIObjVar	svf/include/MemoryModel/PointerAnalysis.h	/^    inline NodeID getFIObjVar(NodeID id)$/;"	f	class:SVF::PointerAnalysis
getFIObjVar	svf/include/SVFIR/SVFIR.h	/^    inline NodeID getFIObjVar(NodeID id) const$/;"	f	class:SVF::SVFIR
getFIObjVar	svf/include/SVFIR/SVFIR.h	/^    inline NodeID getFIObjVar(const BaseObjVar* obj) const$/;"	f	class:SVF::SVFIR
getFPValue	svf/include/SVFIR/SVFVariables.h	/^    inline double getFPValue() const$/;"	f	class:SVF::ConstFPObjVar
getFPValue	svf/include/SVFIR/SVFVariables.h	/^    inline double getFPValue() const$/;"	f	class:SVF::ConstFPValVar
getFVal	svf/include/AE/Core/NumericValue.h	/^    const double getFVal() const$/;"	f	class:SVF::BoundedDouble
getFVal	svf/include/AE/Core/NumericValue.h	/^    const double getFVal() const$/;"	f	class:SVF::BoundedInt
getFalseCond	svf/include/SABER/ProgSlice.h	/^    inline Condition getFalseCond() const$/;"	f	class:SVF::ProgSlice
getFalseCond	svf/include/SABER/SaberCondAllocator.h	/^    inline Condition getFalseCond() const$/;"	f	class:SVF::SaberCondAllocator
getFalseCond	svf/include/Util/Z3Expr.h	/^    static inline Z3Expr getFalseCond()$/;"	f	class:SVF::Z3Expr
getFalseValue	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getFalseValue() const$/;"	f	class:SVF::SelectStmt
getFieldObjNodeNum	svf/include/SVFIR/SVFIR.h	/^    inline u32_t getFieldObjNodeNum() const$/;"	f	class:SVF::SVFIR
getFieldType	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const DIType *getFieldType(const DIType *base, unsigned idx)$/;"	f	class:SVF::DCHGraph
getFieldTypes	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const std::vector<const DIType *> &getFieldTypes(const DIType *base)$/;"	f	class:SVF::DCHGraph
getFieldValNodeNum	svf/include/SVFIR/SVFIR.h	/^    inline u32_t getFieldValNodeNum() const$/;"	f	class:SVF::SVFIR
getFieldsAfterCollapse	svf/lib/SVFIR/SVFIR.cpp	/^NodeBS SVFIR::getFieldsAfterCollapse(NodeID id)$/;"	f	class:SVFIR
getFileName	svf/include/SVFIR/PAGBuilderFromFile.h	/^    std::string getFileName() const$/;"	f	class:SVF::PAGBuilderFromFile
getFilePath	svf/lib/Util/ExtAPI.cpp	/^static std::string getFilePath(const std::string& path)$/;"	f	file:
getFilledProductions	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::getFilledProductions(GrammarBase::Production &prod, const NodeSet& nodeSet, CFGrammar *grammar,  GrammarBase::Productions& normalProds)$/;"	f	class:CFGNormalizer
getFirstRHSSymbol	svf/include/CFL/CFGrammar.h	/^    const Symbol& getFirstRHSSymbol(const Production& prod) const$/;"	f	class:SVF::CFGrammar
getFirstRHSToProds	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions>& getFirstRHSToProds()$/;"	f	class:SVF::CFGrammar
getFirstUseViaCastInst	svf-llvm/lib/LLVMUtil.cpp	/^const Value* LLVMUtil::getFirstUseViaCastInst(const Value* val)$/;"	f	class:LLVMUtil
getFlattenElementTypes	svf/include/SVFIR/SVFType.h	/^    inline const std::vector<const SVFType*>& getFlattenElementTypes() const$/;"	f	class:SVF::StInfo
getFlattenElementTypes	svf/include/SVFIR/SVFType.h	/^    inline std::vector<const SVFType*>& getFlattenElementTypes()$/;"	f	class:SVF::StInfo
getFlattenFieldTypes	svf/include/SVFIR/SVFType.h	/^    inline const std::vector<const SVFType*>& getFlattenFieldTypes() const$/;"	f	class:SVF::StInfo
getFlattenFieldTypes	svf/include/SVFIR/SVFType.h	/^    inline std::vector<const SVFType*>& getFlattenFieldTypes()$/;"	f	class:SVF::StInfo
getFlattenFieldTypes	svf/lib/Graphs/IRGraph.cpp	/^const std::vector<const SVFType *> &IRGraph::getFlattenFieldTypes(const SVFStructType *T)$/;"	f	class:IRGraph
getFlattenedElemIdx	svf/lib/Graphs/IRGraph.cpp	/^u32_t IRGraph::getFlattenedElemIdx(const SVFType *T, u32_t origId)$/;"	f	class:IRGraph
getFlattenedElemIdxVec	svf/include/SVFIR/SVFType.h	/^    inline const std::vector<u32_t>& getFlattenedElemIdxVec() const$/;"	f	class:SVF::StInfo
getFlattenedElemIdxVec	svf/include/SVFIR/SVFType.h	/^    inline std::vector<u32_t>& getFlattenedElemIdxVec()$/;"	f	class:SVF::StInfo
getFlattenedFieldIdxVec	svf/include/SVFIR/SVFType.h	/^    inline const std::vector<u32_t>& getFlattenedFieldIdxVec() const$/;"	f	class:SVF::StInfo
getFlattenedFieldIdxVec	svf/include/SVFIR/SVFType.h	/^    inline std::vector<u32_t>& getFlattenedFieldIdxVec()$/;"	f	class:SVF::StInfo
getFlatternedElemType	svf/lib/Graphs/IRGraph.cpp	/^const SVFType *IRGraph::getFlatternedElemType(const SVFType *baseType, u32_t flatten_idx)$/;"	f	class:IRGraph
getForkEdgeBegin	svf/include/Graphs/ThreadCallGraph.h	/^    inline ForkEdgeSet::const_iterator getForkEdgeBegin(const CallICFGNode* cs) const$/;"	f	class:SVF::ThreadCallGraph
getForkEdgeEnd	svf/include/Graphs/ThreadCallGraph.h	/^    inline ForkEdgeSet::const_iterator getForkEdgeEnd(const CallICFGNode* cs) const$/;"	f	class:SVF::ThreadCallGraph
getForkedFun	svf/include/Util/SVFUtil.h	/^inline const ValVar* getForkedFun(const CallICFGNode *inst)$/;"	f	namespace:SVF::SVFUtil
getForkedFun	svf/lib/Util/ThreadAPI.cpp	/^const ValVar* ThreadAPI::getForkedFun(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
getForkedThread	svf/include/MTA/MHP.h	/^    inline const SVFVar* getForkedThread(const CallICFGNode* call)$/;"	f	class:SVF::ForkJoinAnalysis
getForkedThread	svf/lib/Util/ThreadAPI.cpp	/^const ValVar* ThreadAPI::getForkedThread(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
getFormalINSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline FormalINSVFGNodeSet& getFormalINSVFGNodes(const FunObjVar* fun)$/;"	f	class:SVF::SVFG
getFormalOUTDef	svf/include/Graphs/SVFGOPT.h	/^    inline NodeID getFormalOUTDef(NodeID fo) const$/;"	f	class:SVF::SVFGOPT
getFormalOUTSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline FormalOUTSVFGNodeSet& getFormalOUTSVFGNodes(const FunObjVar* fun)$/;"	f	class:SVF::SVFG
getFormalParmOfForkedFun	svf/lib/Util/ThreadAPI.cpp	/^const SVFVar* ThreadAPI::getFormalParmOfForkedFun(const FunObjVar* F) const$/;"	f	class:ThreadAPI
getFormalParmVFGNode	svf/include/Graphs/VFG.h	/^    inline FormalParmVFGNode* getFormalParmVFGNode(const PAGNode* fparm) const$/;"	f	class:SVF::VFG
getFormalParms	svf/include/Graphs/ICFGNode.h	/^    inline const FormalParmNodeVec &getFormalParms() const$/;"	f	class:SVF::FunEntryICFGNode
getFormalRet	svf/include/Graphs/ICFGNode.h	/^    inline const SVFVar *getFormalRet() const$/;"	f	class:SVF::FunExitICFGNode
getFormalRetVFGNode	svf/include/Graphs/VFG.h	/^    inline FormalRetVFGNode* getFormalRetVFGNode(const PAGNode* fret) const$/;"	f	class:SVF::VFG
getForwardSliceSize	svf/include/SABER/ProgSlice.h	/^    inline u32_t getForwardSliceSize() const$/;"	f	class:SVF::ProgSlice
getFun	svf/include/Graphs/ICFGNode.h	/^    virtual const FunObjVar* getFun() const$/;"	f	class:SVF::ICFGNode
getFun	svf/include/Graphs/SVFGNode.h	/^    inline const FunObjVar* getFun() const$/;"	f	class:SVF::InterMSSAPHISVFGNode
getFun	svf/include/Graphs/VFGNode.h	/^    virtual const FunObjVar* getFun() const$/;"	f	class:SVF::VFGNode
getFunArgsList	svf/include/SVFIR/SVFIR.h	/^    inline const SVFVarList& getFunArgsList(const FunObjVar*  func) const$/;"	f	class:SVF::SVFIR
getFunArgsMap	svf/include/SVFIR/SVFIR.h	/^    inline FunToArgsListMap& getFunArgsMap()$/;"	f	class:SVF::SVFIR
getFunEntryBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline FunEntryICFGNode* getFunEntryBlock(const Function* fun)$/;"	f	class:SVF::LLVMModuleSet
getFunEntryBlock	svf/include/Graphs/ICFG.h	/^    inline FunEntryICFGNode* getFunEntryBlock(const FunObjVar* fun)$/;"	f	class:SVF::ICFG
getFunEntryChiNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getFunEntryChiNum() const$/;"	f	class:MemSSA
getFunEntryICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline FunEntryICFGNode* getFunEntryICFGNode(const Function*  fun)$/;"	f	class:SVF::ICFGBuilder
getFunEntryICFGNode	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline FunEntryICFGNode* getFunEntryICFGNode(const Function*  fun)$/;"	f	class:SVF::LLVMModuleSet
getFunEntryICFGNode	svf/include/SVFIR/SVFStatements.h	/^    inline const FunEntryICFGNode* getFunEntryICFGNode() const$/;"	f	class:SVF::CallPE
getFunEntryICFGNode	svf/lib/Graphs/ICFG.cpp	/^FunEntryICFGNode* ICFG::getFunEntryICFGNode(const FunObjVar*  fun)$/;"	f	class:ICFG
getFunEntryNode	svf/include/Graphs/SVFGNode.h	/^    inline const FunEntryICFGNode* getFunEntryNode() const$/;"	f	class:SVF::FormalINSVFGNode
getFunExitBB	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline const BasicBlock* getFunExitBB(const Function* fun) const$/;"	f	class:SVF::LLVMModuleSet
getFunExitBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline FunExitICFGNode* getFunExitBlock(const Function* fun)$/;"	f	class:SVF::LLVMModuleSet
getFunExitBlock	svf/include/Graphs/ICFG.h	/^    inline FunExitICFGNode* getFunExitBlock(const FunObjVar* fun)$/;"	f	class:SVF::ICFG
getFunExitICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline FunExitICFGNode* getFunExitICFGNode(const Function*  fun)$/;"	f	class:SVF::ICFGBuilder
getFunExitICFGNode	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline FunExitICFGNode* getFunExitICFGNode(const Function*  fun)$/;"	f	class:SVF::LLVMModuleSet
getFunExitICFGNode	svf/include/SVFIR/SVFStatements.h	/^    inline const FunExitICFGNode* getFunExitICFGNode() const$/;"	f	class:SVF::RetPE
getFunExitICFGNode	svf/lib/Graphs/ICFG.cpp	/^FunExitICFGNode* ICFG::getFunExitICFGNode(const FunObjVar*  fun)$/;"	f	class:ICFG
getFunExitNode	svf/include/Graphs/SVFGNode.h	/^    inline const FunExitICFGNode* getFunExitNode() const$/;"	f	class:SVF::FormalOUTSVFGNode
getFunIdxInVtable	svf/include/Graphs/ICFGNode.h	/^    inline s32_t getFunIdxInVtable() const$/;"	f	class:SVF::CallICFGNode
getFunMRSet	svf/include/MSSA/MemRegion.h	/^    inline MRSet& getFunMRSet(const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
getFunNameOfVCallSite	svf-llvm/lib/CppUtil.cpp	/^std::string cppUtil::getFunNameOfVCallSite(const CallBase* inst)$/;"	f	class:cppUtil
getFunNameOfVirtualCall	svf/include/Graphs/ICFGNode.h	/^    inline const std::string& getFunNameOfVirtualCall() const$/;"	f	class:SVF::CallICFGNode
getFunObjVar	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline const FunObjVar* getFunObjVar(const Function* fun) const$/;"	f	class:SVF::LLVMModuleSet
getFunObjVar	svf-llvm/lib/LLVMModule.cpp	/^const FunObjVar* LLVMModuleSet::getFunObjVar(const std::string& name)$/;"	f	class:LLVMModuleSet
getFunObjVar	svf-llvm/lib/LLVMUtil.cpp	/^const FunObjVar* LLVMUtil::getFunObjVar(const std::string& name)$/;"	f	class:LLVMUtil
getFunObjVar	svf/lib/SVFIR/SVFIR.cpp	/^const FunObjVar *SVFIR::getFunObjVar(const std::string &name)$/;"	f	class:SVFIR
getFunPtr	svf/include/MemoryModel/PointerAnalysis.h	/^    inline NodeID getFunPtr(const CallICFGNode* cs) const$/;"	f	class:SVF::PointerAnalysis
getFunPtr	svf/include/SVFIR/SVFIR.h	/^    inline NodeID getFunPtr(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFIR
getFunReachableBBs	svf-llvm/lib/LLVMUtil.cpp	/^void LLVMUtil::getFunReachableBBs (const Function* fun, std::vector<const SVFBasicBlock*> &reachableBBs)$/;"	f	class:LLVMUtil
getFunRet	svf/include/SVFIR/SVFIR.h	/^    inline const SVFVar* getFunRet(const FunObjVar*  func) const$/;"	f	class:SVF::SVFIR
getFunRetMuNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getFunRetMuNum() const$/;"	f	class:MemSSA
getFunRets	svf/include/SVFIR/SVFIR.h	/^    inline FunToRetMap& getFunRets()$/;"	f	class:SVF::SVFIR
getFunToEntryChiSetMap	svf/include/MSSA/MemSSA.h	/^    inline FunToEntryChiSetMap& getFunToEntryChiSetMap()$/;"	f	class:SVF::MemSSA
getFunToPointsToList	svf/include/MSSA/MemRegion.h	/^    inline FunToPointsTosMap& getFunToPointsToList()$/;"	f	class:SVF::MRGenerator
getFunToRetMuSetMap	svf/include/MSSA/MemSSA.h	/^    inline FunToReturnMuSetMap& getFunToRetMuSetMap()$/;"	f	class:SVF::MemSSA
getFuncEntryChiSet	svf/include/MSSA/MemSSA.h	/^    inline CHISet& getFuncEntryChiSet(const FunObjVar * fun)$/;"	f	class:SVF::MemSSA
getFuncName	svf/lib/Util/SVFBugReport.cpp	/^const std::string GenericBug::getFuncName() const$/;"	f	class:GenericBug
getFuncName	svf/lib/Util/SVFBugReport.cpp	/^const std::string SVFBugEvent::getFuncName() const$/;"	f	class:SVFBugEvent
getFunction	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline const Function* getFunction(const std::string& name)$/;"	f	class:SVF::LLVMModuleSet
getFunction	svf/include/Graphs/BasicBlockG.h	/^    inline const FunObjVar* getFunction() const$/;"	f	class:SVF::SVFBasicBlock
getFunction	svf/include/Graphs/CallGraph.h	/^    inline const FunObjVar* getFunction() const$/;"	f	class:SVF::CallGraphNode
getFunction	svf/include/MSSA/MSSAMuChi.h	/^    inline const FunObjVar* getFunction() const$/;"	f	class:SVF::EntryCHI
getFunction	svf/include/MSSA/MSSAMuChi.h	/^    inline const FunObjVar* getFunction() const$/;"	f	class:SVF::RetMU
getFunction	svf/include/MSSA/MemRegion.h	/^    const FunObjVar* getFunction(const PAGEdge* pagEdge) const$/;"	f	class:SVF::MRGenerator
getFunction	svf/include/SVFIR/SVFVariables.h	/^    inline virtual const FunObjVar* getFunction() const$/;"	f	class:SVF::FunValVar
getFunction	svf/include/SVFIR/SVFVariables.h	/^    virtual const FunObjVar* getFunction() const$/;"	f	class:SVF::GepObjVar
getFunction	svf/include/SVFIR/SVFVariables.h	/^    virtual const FunObjVar* getFunction() const$/;"	f	class:SVF::GepValVar
getFunction	svf/include/SVFIR/SVFVariables.h	/^    virtual inline const FunObjVar* getFunction() const$/;"	f	class:SVF::SVFVar
getFunction	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* ArgValVar::getFunction() const$/;"	f	class:ArgValVar
getFunction	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* BaseObjVar::getFunction() const$/;"	f	class:BaseObjVar
getFunction	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* FunObjVar::getFunction() const$/;"	f	class:FunObjVar
getFunction	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* RetValPN::getFunction() const$/;"	f	class:RetValPN
getFunction	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* ValVar::getFunction() const$/;"	f	class:ValVar
getFunction	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* VarArgValPN::getFunction() const$/;"	f	class:VarArgValPN
getFunctionSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline const FunctionSet& getFunctionSet() const$/;"	f	class:SVF::LLVMModuleSet
getFunctionTrace	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    u32_t& getFunctionTrace()$/;"	f	class:SVF::AEStat
getFunctionType	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFFunctionType* getFunctionType() const$/;"	f	class:SVF::FunObjVar
getGNode	svf/include/Graphs/GenericGraph.h	/^    inline NodeType* getGNode(NodeID id) const$/;"	f	class:SVF::GenericGraph
getGepInEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getGepInEdges() const$/;"	f	class:SVF::ConstraintNode
getGepObjAddrs	svf/lib/AE/Core/AbstractState.cpp	/^AddressValue AbstractState::getGepObjAddrs(u32_t pointer, IntervalValue offset)$/;"	f	class:AbstractState
getGepObjNodeMap	svf/include/SVFIR/SVFIR.h	/^    inline NodeOffsetMap& getGepObjNodeMap()$/;"	f	class:SVF::SVFIR
getGepObjOffsetFromBase	svf/include/AE/Svfexe/AEDetector.h	/^    IntervalValue getGepObjOffsetFromBase(const GepObjVar* obj) const$/;"	f	class:SVF::BufOverflowDetector
getGepObjVar	svf/include/Graphs/ConsG.h	/^    inline NodeID getGepObjVar(NodeID id, const APOffset& apOffset)$/;"	f	class:SVF::ConstraintGraph
getGepObjVar	svf/include/MemoryModel/PointerAnalysis.h	/^    inline NodeID getGepObjVar(NodeID id, const APOffset& ap)$/;"	f	class:SVF::PointerAnalysis
getGepObjVar	svf/lib/SVFIR/SVFIR.cpp	/^NodeID SVFIR::getGepObjVar(NodeID id, const APOffset& apOffset)$/;"	f	class:SVFIR
getGepObjVar	svf/lib/SVFIR/SVFIR.cpp	/^NodeID SVFIR::getGepObjVar(const BaseObjVar* baseObj, const APOffset& apOffset)$/;"	f	class:SVFIR
getGepOutEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getGepOutEdges() const$/;"	f	class:SVF::ConstraintNode
getGepValVar	svf-llvm/lib/SVFIRBuilder.cpp	/^NodeID SVFIRBuilder::getGepValVar(const Value* val, const AccessPath& ap, const SVFType* elementType)$/;"	f	class:SVFIRBuilder
getGepValVar	svf/lib/SVFIR/SVFIR.cpp	/^NodeID SVFIR::getGepValVar(NodeID curInst, NodeID base, const AccessPath& ap) const$/;"	f	class:SVFIR
getGlobalICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline GlobalICFGNode* getGlobalICFGNode() const$/;"	f	class:SVF::ICFGBuilder
getGlobalICFGNode	svf/include/Graphs/ICFG.h	/^    inline GlobalICFGNode* getGlobalICFGNode() const$/;"	f	class:SVF::ICFG
getGlobalRep	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    GlobalVariable *getGlobalRep(const GlobalVariable* val) const$/;"	f	class:SVF::LLVMModuleSet
getGlobalRep	svf-llvm/lib/LLVMUtil.cpp	/^const Value* LLVMUtil::getGlobalRep(const Value* val)$/;"	f	class:LLVMUtil
getGlobalSVFStmtSet	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmtSet& getGlobalSVFStmtSet()$/;"	f	class:SVF::SVFIR
getGlobalVFGNodes	svf/include/Graphs/VFG.h	/^    inline GlobalVFGNodeSet& getGlobalVFGNodes()$/;"	f	class:SVF::VFG
getGlobalVarField	svf-llvm/lib/SVFIRBuilder.cpp	/^NodeID SVFIRBuilder::getGlobalVarField(const GlobalVariable *gvar, u32_t offset, SVFType* tpy)$/;"	f	class:SVFIRBuilder
getGrammar	svf/include/CFL/CFLSolver.h	/^    inline const CFGrammar* getGrammar() const$/;"	f	class:SVF::CFLSolver
getGraph	svf/include/CFL/CFLSolver.h	/^    inline const CFLGraph* getGraph() const$/;"	f	class:SVF::CFLSolver
getGraphEdge	svf/lib/Graphs/CallGraph.cpp	/^CallGraphEdge* CallGraph::getGraphEdge(CallGraphNode* src,$/;"	f	class:CallGraph
getGraphEdge	svf/lib/MTA/TCT.cpp	/^TCTEdge* TCT::getGraphEdge(TCTNode* src, TCTNode* dst, TCTEdge::CEDGEK kind)$/;"	f	class:TCT
getGraphName	svf/include/Graphs/CDG.h	/^    static std::string getGraphName(SVF::CDG *)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getGraphName(const GraphType &)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getGraphName	svf/include/Graphs/IRGraph.h	/^    inline std::string getGraphName() const$/;"	f	class:SVF::IRGraph
getGraphName	svf/lib/Graphs/CFLGraph.cpp	/^    static std::string getGraphName(CFLGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/CHG.cpp	/^    static std::string getGraphName(CHGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/CallGraph.cpp	/^    static std::string getGraphName(CallGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/ConsG.cpp	/^    static std::string getGraphName(ConstraintGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/ICFG.cpp	/^    static std::string getGraphName(ICFG*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/IRGraph.cpp	/^    static std::string getGraphName(IRGraph *graph)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/SVFG.cpp	/^    static std::string getGraphName(SVFG*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/Graphs/VFG.cpp	/^    static std::string getGraphName(VFG*)$/;"	f	struct:SVF::DOTGraphTraits
getGraphName	svf/lib/MTA/TCT.cpp	/^    static std::string getGraphName(TCT *graph)$/;"	f	struct:SVF::DOTGraphTraits
getGraphProperties	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getGraphProperties(const GraphType &)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getHeapAllocHoldingArgPosition	svf-llvm/lib/LLVMUtil.cpp	/^u32_t LLVMUtil::getHeapAllocHoldingArgPosition(const Function* fun)$/;"	f	class:LLVMUtil
getHeapAllocHoldingArgPosition	svf/include/Util/SVFUtil.h	/^inline u32_t getHeapAllocHoldingArgPosition(const FunObjVar* fun)$/;"	f	namespace:SVF::SVFUtil
getHeapAllocHoldingArgPosition	svf/lib/Util/SVFUtil.cpp	/^u32_t SVFUtil::getHeapAllocHoldingArgPosition(const CallICFGNode* cs)$/;"	f	class:SVFUtil
getICFG	svf/include/MemoryModel/PointerAnalysis.h	/^    inline ICFG* getICFG() const$/;"	f	class:SVF::PointerAnalysis
getICFG	svf/include/SABER/SaberCondAllocator.h	/^    inline ICFG* getICFG() const$/;"	f	class:SVF::SaberCondAllocator
getICFG	svf/include/SVFIR/SVFIR.h	/^    inline ICFG* getICFG() const$/;"	f	class:SVF::SVFIR
getICFGEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::getICFGEdge(const ICFGNode* src, const ICFGNode* dst, ICFGEdge::ICFGEdgeK kind)$/;"	f	class:ICFG
getICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline ICFGNode* getICFGNode(const Instruction* inst)$/;"	f	class:SVF::ICFGBuilder
getICFGNode	svf-llvm/lib/LLVMModule.cpp	/^ICFGNode* LLVMModuleSet::getICFGNode(const Instruction* inst)$/;"	f	class:LLVMModuleSet
getICFGNode	svf/include/Graphs/CDG.h	/^    const ICFGNode *getICFGNode() const$/;"	f	class:SVF::CDGNode
getICFGNode	svf/include/Graphs/ICFG.h	/^    inline ICFGNode* getICFGNode(NodeID id) const$/;"	f	class:SVF::ICFG
getICFGNode	svf/include/Graphs/VFGNode.h	/^    virtual const ICFGNode* getICFGNode() const$/;"	f	class:SVF::VFGNode
getICFGNode	svf/include/Graphs/WTO.h	/^    const NodeT* getICFGNode() const$/;"	f	class:SVF::final
getICFGNode	svf/include/SVFIR/SVFStatements.h	/^    inline ICFGNode* getICFGNode() const$/;"	f	class:SVF::SVFStmt
getICFGNode	svf/include/SVFIR/SVFVariables.h	/^    const ICFGNode* getICFGNode() const$/;"	f	class:SVF::ValVar
getICFGNode	svf/include/SVFIR/SVFVariables.h	/^    inline const ICFGNode* getICFGNode() const$/;"	f	class:SVF::BaseObjVar
getICFGNodeList	svf/include/Graphs/BasicBlockG.h	/^    inline const std::vector<const ICFGNode*>& getICFGNodeList() const$/;"	f	class:SVF::SVFBasicBlock
getICFGNodeTrace	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    u32_t& getICFGNodeTrace()$/;"	f	class:SVF::AEStat
getID	svf/include/MSSA/MSSAMuChi.h	/^    inline MRVERID getID() const$/;"	f	class:SVF::MRVer
getIcfgNodeToSVFLoopVec	svf/include/Graphs/ICFG.h	/^    inline const ICFGNodeToSVFLoopVec& getIcfgNodeToSVFLoopVec() const$/;"	f	class:SVF::ICFG
getId	svf/include/SVFIR/SVFValue.h	/^    inline NodeID getId() const$/;"	f	class:SVF::SVFValue
getId	svf/include/SVFIR/SVFVariables.h	/^    inline NodeID getId() const$/;"	f	class:SVF::BaseObjVar
getIdxOperandPairVec	svf/include/MemoryModel/AccessPath.h	/^    inline const IdxOperandPairs& getIdxOperandPairVec() const$/;"	f	class:SVF::AccessPath
getImplTy	svf/include/MemoryModel/PointerAnalysis.h	/^    inline PTAImplTy getImplTy() const$/;"	f	class:SVF::PointerAnalysis
getInEdgeWithTy	svf/include/Graphs/CFLGraph.h	/^    inline const CFLEdge::CFLEdgeSetTy& getInEdgeWithTy(GrammarBase::Symbol s)$/;"	f	class:SVF::CFLNode
getInEdges	svf/include/Graphs/GenericGraph.h	/^    inline const GEdgeSetTy& getInEdges() const$/;"	f	class:SVF::GenericNode
getIncomingEdges	svf/include/SVFIR/SVFVariables.h	/^    inline SVFStmt::SVFStmtSetTy& getIncomingEdges(SVFStmt::PEDGEK kind)$/;"	f	class:SVF::SVFVar
getIncomingEdgesBegin	svf/include/SVFIR/SVFVariables.h	/^    inline SVFStmt::SVFStmtSetTy::iterator getIncomingEdgesBegin(SVFStmt::PEDGEK kind) const$/;"	f	class:SVF::SVFVar
getIncomingEdgesEnd	svf/include/SVFIR/SVFVariables.h	/^    inline SVFStmt::SVFStmtSetTy::iterator getIncomingEdgesEnd(SVFStmt::PEDGEK kind) const$/;"	f	class:SVF::SVFVar
getIndCSCallees	svf/include/Graphs/CallGraph.h	/^    inline const FunctionSet& getIndCSCallees(const CallICFGNode* cs) const$/;"	f	class:SVF::CallGraph
getIndCSCallees	svf/include/MemoryModel/PointerAnalysis.h	/^    inline const FunctionSet& getIndCSCallees(const CallICFGNode* cs) const$/;"	f	class:SVF::PointerAnalysis
getIndCallMap	svf/include/Graphs/CallGraph.h	/^    inline CallEdgeMap& getIndCallMap()$/;"	f	class:SVF::CallGraph
getIndCallMap	svf/include/MemoryModel/PointerAnalysis.h	/^    inline CallEdgeMap& getIndCallMap()$/;"	f	class:SVF::PointerAnalysis
getIndCallSites	svf/include/SVFIR/SVFIR.h	/^    inline const CallSiteSet& getIndCallSites(NodeID funPtr) const$/;"	f	class:SVF::SVFIR
getIndCallSitesInvokingCallee	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::getIndCallSitesInvokingCallee(const FunObjVar* callee, CallGraphEdge::CallInstSet& csSet)$/;"	f	class:CallGraph
getIndexedType	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    Type* getIndexedType() const$/;"	f	class:llvm::generic_bridge_gep_type_iterator
getIndirectCalls	svf/include/Graphs/CallGraph.h	/^    inline CallInstSet& getIndirectCalls()$/;"	f	class:SVF::CallGraphEdge
getIndirectCalls	svf/include/Graphs/CallGraph.h	/^    inline const CallInstSet& getIndirectCalls() const$/;"	f	class:SVF::CallGraphEdge
getIndirectCallsites	svf/include/Graphs/ConsG.h	/^    inline const SVFIR::CallSiteToFunPtrMap& getIndirectCallsites() const$/;"	f	class:SVF::ConstraintGraph
getIndirectCallsites	svf/include/MemoryModel/PointerAnalysis.h	/^    inline const CallSiteToFunPtrMap& getIndirectCallsites() const$/;"	f	class:SVF::PointerAnalysis
getIndirectCallsites	svf/include/SVFIR/SVFIR.h	/^    inline const CallSiteToFunPtrMap& getIndirectCallsites() const$/;"	f	class:SVF::SVFIR
getInsensitiveEdgeSet	svf/include/DDA/ContextDDA.h	/^    inline ConstSVFGEdgeSet& getInsensitiveEdgeSet()$/;"	f	class:SVF::ContextDDA
getInstances	svf/include/Graphs/CHG.h	/^    inline const CHNodeSetTy &getInstances(const std::string className)$/;"	f	class:SVF::CHGraph
getInstancesAndDescendants	svf-llvm/lib/CHGBuilder.cpp	/^const CHGraph::CHNodeSetTy& CHGBuilder::getInstancesAndDescendants($/;"	f	class:CHGBuilder
getIntNumeral	svf/include/AE/Core/IntervalValue.h	/^    s64_t getIntNumeral() const$/;"	f	class:SVF::IntervalValue
getIntNumeral	svf/include/AE/Core/NumericValue.h	/^    inline s64_t getIntNumeral() const$/;"	f	class:SVF::BoundedDouble
getIntNumeral	svf/include/AE/Core/NumericValue.h	/^    inline s64_t getIntNumeral() const$/;"	f	class:SVF::BoundedInt
getIntegerValue	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline std::pair<s64_t, u64_t> getIntegerValue(const ConstantInt* intValue)$/;"	f	namespace:SVF::LLVMUtil
getInterVFEdgeAtIndCSFromAInToFIn	svf/include/Graphs/SVFG.h	/^    virtual inline void getInterVFEdgeAtIndCSFromAInToFIn(ActualINSVFGNode* actualIn, const FunObjVar* callee, SVFGEdgeSetTy& edges)$/;"	f	class:SVF::SVFG
getInterVFEdgeAtIndCSFromAPToFP	svf/include/Graphs/SVFG.h	/^    virtual inline void getInterVFEdgeAtIndCSFromAPToFP(const PAGNode* cs_arg, const PAGNode* fun_arg, const CallICFGNode*, CallSiteID csId, SVFGEdgeSetTy& edges)$/;"	f	class:SVF::SVFG
getInterVFEdgeAtIndCSFromFOutToAOut	svf/include/Graphs/SVFG.h	/^    virtual inline void getInterVFEdgeAtIndCSFromFOutToAOut(ActualOUTSVFGNode* actualOut, const FunObjVar* callee, SVFGEdgeSetTy& edges)$/;"	f	class:SVF::SVFG
getInterVFEdgeAtIndCSFromFRToAR	svf/include/Graphs/SVFG.h	/^    virtual inline void getInterVFEdgeAtIndCSFromFRToAR(const PAGNode* fun_ret, const PAGNode* cs_ret, CallSiteID csId, SVFGEdgeSetTy& edges)$/;"	f	class:SVF::SVFG
getInterVFEdgesForIndirectCallSite	svf/lib/Graphs/SVFG.cpp	/^void SVFG::getInterVFEdgesForIndirectCallSite(const CallICFGNode* callICFGNode, const FunObjVar* callee, SVFGEdgeSetTy& edges)$/;"	f	class:SVFG
getInterleavingThreads	svf/include/MTA/MHP.h	/^    inline const NodeBS& getInterleavingThreads(const CxtThreadStmt& cts)$/;"	f	class:SVF::MHP
getInternalID	svf/include/AE/Core/AbstractState.h	/^    static inline u32_t getInternalID(u32_t idx)$/;"	f	class:SVF::AbstractState
getInternalID	svf/include/AE/Core/AddressValue.h	/^    static inline u32_t getInternalID(u32_t idx)$/;"	f	class:SVF::AddressValue
getInternalID	svf/include/AE/Core/RelExeState.h	/^    static inline u32_t getInternalID(u32_t idx)$/;"	f	class:SVF::RelExeState
getInternalNode	svf/lib/MemoryModel/PointsTo.cpp	/^NodeID PointsTo::getInternalNode(NodeID n) const$/;"	f	class:SVF::PointsTo
getIntersList	svf/include/MSSA/MemPartition.h	/^    inline PointsToList& getIntersList(const FunObjVar* func)$/;"	f	class:SVF::IntraDisjointMRG
getInterval	svf/include/AE/Core/AbstractValue.h	/^    IntervalValue& getInterval()$/;"	f	class:SVF::AbstractValue
getInterval	svf/include/AE/Core/AbstractValue.h	/^    const IntervalValue getInterval() const$/;"	f	class:SVF::AbstractValue
getIntraBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline IntraICFGNode* getIntraBlock(const Instruction* inst)$/;"	f	class:SVF::LLVMModuleSet
getIntraICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline IntraICFGNode* getIntraICFGNode(const Instruction* inst)$/;"	f	class:SVF::ICFGBuilder
getIntraICFGNode	svf-llvm/lib/LLVMModule.cpp	/^IntraICFGNode* LLVMModuleSet::getIntraICFGNode(const Instruction* inst)$/;"	f	class:LLVMModuleSet
getIntraLockSet	svf/include/MTA/LockAnalysis.h	/^    inline const InstSet& getIntraLockSet(const ICFGNode* stmt) const$/;"	f	class:SVF::LockAnalysis
getIntraPAGEdge	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmt* getIntraPAGEdge(NodeID src, NodeID dst, SVFStmt::PEDGEK kind)$/;"	f	class:SVF::SVFIR
getIntraPAGEdge	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmt* getIntraPAGEdge(SVFVar* src, SVFVar* dst, SVFStmt::PEDGEK kind)$/;"	f	class:SVF::SVFIR
getIntraPHIVFGNode	svf/include/Graphs/VFG.h	/^    inline IntraPHIVFGNode* getIntraPHIVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getIntraVFGEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::getIntraVFGEdge(const VFGNode* src, const VFGNode* dst, VFGEdge::VFGEdgeK kind)$/;"	f	class:VFG
getJoinEdgeBegin	svf/include/Graphs/ThreadCallGraph.h	/^    inline JoinEdgeSet::const_iterator getJoinEdgeBegin(const CallICFGNode* cs) const$/;"	f	class:SVF::ThreadCallGraph
getJoinEdgeEnd	svf/include/Graphs/ThreadCallGraph.h	/^    inline JoinEdgeSet::const_iterator getJoinEdgeEnd(const CallICFGNode* cs) const$/;"	f	class:SVF::ThreadCallGraph
getJoinInSymmetricLoop	svf/include/MTA/MHP.h	/^    inline const LoopBBs& getJoinInSymmetricLoop(const CxtStmt& cs) const$/;"	f	class:SVF::ForkJoinAnalysis
getJoinInSymmetricLoop	svf/lib/MTA/MHP.cpp	/^const MHP::LoopBBs& MHP::getJoinInSymmetricLoop(const CallStrCxt& cxt, const ICFGNode* call) const$/;"	f	class:MHP
getJoinLoop	svf/include/MTA/MHP.h	/^    inline LoopBBs& getJoinLoop(const CallICFGNode* inst)$/;"	f	class:SVF::ForkJoinAnalysis
getJoinLoop	svf/include/MTA/TCT.h	/^    inline LoopBBs& getJoinLoop(const CallICFGNode* join)$/;"	f	class:SVF::TCT
getJoinSites	svf/include/Graphs/ThreadCallGraph.h	/^    inline void getJoinSites(const CallGraphNode* routine, InstSet& csSet)$/;"	f	class:SVF::ThreadCallGraph
getJoinedThread	svf/include/MTA/MHP.h	/^    inline const SVFVar* getJoinedThread(const CallICFGNode* call)$/;"	f	class:SVF::ForkJoinAnalysis
getJoinedThread	svf/lib/Util/ThreadAPI.cpp	/^const SVFVar* ThreadAPI::getJoinedThread(const CallICFGNode *cs) const$/;"	f	class:ThreadAPI
getKind	svf/include/AE/Svfexe/AEDetector.h	/^    DetectorKind getKind() const$/;"	f	class:SVF::AEDetector
getKind	svf/include/Graphs/CHG.h	/^    CHGKind getKind(void) const$/;"	f	class:SVF::CommonCHGraph
getKind	svf/include/Graphs/CallGraph.h	/^    inline CGEK getKind() const$/;"	f	class:SVF::CallGraph
getKind	svf/include/Graphs/VFG.h	/^    inline VFGK getKind() const$/;"	f	class:SVF::VFG
getKind	svf/include/Graphs/WTO.h	/^    inline WTOCT getKind() const$/;"	f	class:SVF::WTOComponent
getKind	svf/include/SVFIR/SVFType.h	/^    inline GNodeK getKind() const$/;"	f	class:SVF::SVFType
getKindToAttrsMap	svf/include/CFL/CFGrammar.h	/^    inline const Map<Kind,  Set<Attribute>>& getKindToAttrsMap() const$/;"	f	class:SVF::GrammarBase
getKindToAttrsMap	svf/include/CFL/CFLGraphBuilder.h	/^    Map<CFGrammar::Kind,  Set<CFGrammar::Attribute>>& getKindToAttrsMap()$/;"	f	class:SVF::CFLGraphBuilder
getKindToLabelMap	svf/include/CFL/CFLGraphBuilder.h	/^    Map<Kind, std::string>& getKindToLabelMap()$/;"	f	class:SVF::CFLGraphBuilder
getLHSSymbol	svf/include/CFL/CFGrammar.h	/^    const Symbol& getLHSSymbol(const Production& prod) const$/;"	f	class:SVF::CFGrammar
getLHSTopLevPtr	svf/lib/Graphs/VFG.cpp	/^const PAGNode* VFG::getLHSTopLevPtr(const VFGNode* node) const$/;"	f	class:VFG
getLHSVar	svf/include/SVFIR/SVFStatements.h	/^    inline SVFVar* getLHSVar() const$/;"	f	class:SVF::AssignStmt
getLHSVarID	svf/include/SVFIR/SVFStatements.h	/^    inline NodeID getLHSVarID() const$/;"	f	class:SVF::AssignStmt
getLLVMCallSite	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const CallBase* getLLVMCallSite(const Value* value)$/;"	f	namespace:SVF::LLVMUtil
getLLVMCtx	svf-llvm/lib/ObjTypeInference.cpp	/^LLVMContext &ObjTypeInference::getLLVMCtx()$/;"	f	class:ObjTypeInference
getLLVMFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const Function* getLLVMFunction(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
getLLVMGlobalFunctions	svf-llvm/lib/LLVMModule.cpp	/^std::vector<const Function* > LLVMModuleSet::getLLVMGlobalFunctions(const GlobalVariable *global)$/;"	f	class:LLVMModuleSet
getLLVMModuleSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    static inline LLVMModuleSet* getLLVMModuleSet()$/;"	f	class:SVF::LLVMModuleSet
getLLVMModules	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    const std::vector<std::reference_wrapper<Module>>& getLLVMModules() const$/;"	f	class:SVF::LLVMModuleSet
getLLVMType	svf-llvm/lib/LLVMModule.cpp	/^const Type* LLVMModuleSet::getLLVMType(const SVFType* T) const$/;"	f	class:LLVMModuleSet
getLLVMValue	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    const Value* getLLVMValue(const SVFValue* value) const$/;"	f	class:SVF::LLVMModuleSet
getLabelToKindMap	svf/include/CFL/CFLGraphBuilder.h	/^    Map<std::string, Kind>& getLabelToKindMap()$/;"	f	class:SVF::CFLGraphBuilder
getLoadCGEdges	svf/include/Graphs/ConsG.h	/^    inline ConstraintEdge::ConstraintEdgeSetTy& getLoadCGEdges()$/;"	f	class:SVF::ConstraintGraph
getLoadCVar	svf/include/DDA/DDAVFSolver.h	/^    inline const CVar& getLoadCVar(const DPIm& dpm) const$/;"	f	class:SVF::DDAVFSolver
getLoadDpm	svf/include/DDA/DDAVFSolver.h	/^    inline const DPIm& getLoadDpm(const DPIm& dpm) const$/;"	f	class:SVF::DDAVFSolver
getLoadInEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getLoadInEdges() const$/;"	f	class:SVF::ConstraintNode
getLoadMRSet	svf/include/MSSA/MemRegion.h	/^    inline MRSet& getLoadMRSet(const LoadStmt* load)$/;"	f	class:SVF::MRGenerator
getLoadMuNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getLoadMuNum() const$/;"	f	class:MemSSA
getLoadOutEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getLoadOutEdges() const$/;"	f	class:SVF::ConstraintNode
getLoadStmt	svf/include/MSSA/MSSAMuChi.h	/^    inline const LoadStmt* getLoadStmt() const$/;"	f	class:SVF::LoadMU
getLoadToMUSetMap	svf/include/MSSA/MemSSA.h	/^    inline LoadToMUSetMap& getLoadToMUSetMap()$/;"	f	class:SVF::MemSSA
getLoc	svf/include/Util/DPItem.h	/^    inline const LocCond* getLoc() const$/;"	f	class:SVF::StmtDPItem
getLoc	svf/lib/Util/SVFBugReport.cpp	/^const std::string GenericBug::getLoc() const$/;"	f	class:GenericBug
getLocToDPMVecMap	svf/include/DDA/DDAVFSolver.h	/^    inline const LocToDPMVecMap& getLocToDPMVecMap() const$/;"	f	class:SVF::DDAVFSolver
getLocToVal	svf/include/AE/Core/AbstractState.h	/^    const AddrToAbsValMap&getLocToVal() const$/;"	f	class:SVF::AbstractState
getLocToVal	svf/include/AE/Core/RelExeState.h	/^    const AddrToValMap&getLocToVal() const$/;"	f	class:SVF::RelExeState
getLockAnalysis	svf/include/MTA/MTA.h	/^    LockAnalysis* getLockAnalysis()$/;"	f	class:SVF::MTA
getLockVal	svf/include/MTA/LockAnalysis.h	/^    inline const SVFVar* getLockVal(const ICFGNode* call)$/;"	f	class:SVF::LockAnalysis
getLockVal	svf/lib/Util/ThreadAPI.cpp	/^const SVFVar* ThreadAPI::getLockVal(const ICFGNode *cs) const$/;"	f	class:ThreadAPI
getLoop	svf/lib/MTA/TCT.cpp	/^const TCT::LoopBBs& TCT::getLoop(const SVFBasicBlock* bb)$/;"	f	class:TCT
getLoopAndDomInfo	svf/include/SVFIR/SVFVariables.h	/^    inline SVFLoopAndDomInfo* getLoopAndDomInfo() const$/;"	f	class:SVF::FunObjVar
getLoopBound	svf/include/MemoryModel/SVFLoop.h	/^    inline u32_t getLoopBound() const$/;"	f	class:SVF::SVFLoop
getLoopHeader	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFBasicBlock* getLoopHeader(const BBList& lp) const$/;"	f	class:SVF::FunObjVar
getLoopHeader	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const SVFBasicBlock* getLoopHeader(const LoopBBs& lp) const$/;"	f	class:SVF::SVFLoopAndDomInfo
getLoopInfo	svf/include/SVFIR/SVFVariables.h	/^    const LoopBBs& getLoopInfo(const SVFBasicBlock* bb) const$/;"	f	class:SVF::FunObjVar
getLoopInfo	svf/lib/SVFIR/SVFValue.cpp	/^const SVFLoopAndDomInfo::LoopBBs& SVFLoopAndDomInfo::getLoopInfo(const SVFBasicBlock* bb) const$/;"	f	class:SVFLoopAndDomInfo
getMHP	svf/include/MTA/MTA.h	/^    MHP* getMHP()$/;"	f	class:SVF::MTA
getMR	svf/include/MSSA/MSSAMuChi.h	/^    inline const MemRegion* getMR() const$/;"	f	class:SVF::MRVer
getMR	svf/include/MSSA/MSSAMuChi.h	/^    inline const MemRegion* getMR() const$/;"	f	class:SVF::MSSADEF
getMR	svf/include/MSSA/MSSAMuChi.h	/^    inline const MemRegion* getMR() const$/;"	f	class:SVF::MSSAMU
getMR	svf/lib/MSSA/MemRegion.cpp	/^const MemRegion* MRGenerator::getMR(const NodeBS& cpts) const$/;"	f	class:MRGenerator
getMRGenerator	svf/include/MSSA/MemSSA.h	/^    inline MRGenerator* getMRGenerator()$/;"	f	class:SVF::MemSSA
getMRID	svf/include/MSSA/MemRegion.h	/^    inline MRID getMRID() const$/;"	f	class:SVF::MemRegion
getMRNum	svf/include/MSSA/MemRegion.h	/^    inline u32_t getMRNum() const$/;"	f	class:SVF::MRGenerator
getMRSet	svf/include/MSSA/MemRegion.h	/^    MRSet& getMRSet()$/;"	f	class:SVF::MRGenerator
getMRVERFromString	svf/lib/Graphs/SVFGReadWrite.cpp	/^MRVer* SVFG::getMRVERFromString(const string& s)$/;"	f	class:SVFG
getMRVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getMRVer() const$/;"	f	class:SVF::ActualINSVFGNode
getMRVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getMRVer() const$/;"	f	class:SVF::ActualOUTSVFGNode
getMRVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getMRVer() const$/;"	f	class:SVF::FormalINSVFGNode
getMRVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getMRVer() const$/;"	f	class:SVF::FormalOUTSVFGNode
getMRVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getMRVer() const$/;"	f	class:SVF::IntraMSSAPHISVFGNode
getMRVer	svf/include/MSSA/MSSAMuChi.h	/^    inline MRVer* getMRVer() const$/;"	f	class:SVF::MSSAMU
getMRsForCallSiteRef	svf/include/MSSA/MemRegion.h	/^    virtual inline void getMRsForCallSiteRef(MRSet& aliasMRs, const NodeBS& cpts, const FunObjVar*)$/;"	f	class:SVF::MRGenerator
getMRsForCallSiteRef	svf/lib/MSSA/MemPartition.cpp	/^void DistinctMRG::getMRsForCallSiteRef(MRSet& aliasMRs, const NodeBS& cpts, const FunObjVar* fun)$/;"	f	class:DistinctMRG
getMRsForCallSiteRef	svf/lib/MSSA/MemPartition.cpp	/^void IntraDisjointMRG::getMRsForCallSiteRef(MRSet& aliasMRs, const NodeBS& cpts, const FunObjVar* fun)$/;"	f	class:IntraDisjointMRG
getMRsForLoad	svf/include/MSSA/MemPartition.h	/^    virtual inline void getMRsForLoad(MRSet& aliasMRs, const NodeBS& cpts,$/;"	f	class:SVF::InterDisjointMRG
getMRsForLoad	svf/include/MSSA/MemPartition.h	/^    virtual inline void getMRsForLoad(MRSet& aliasMRs, const NodeBS& cpts,$/;"	f	class:SVF::IntraDisjointMRG
getMRsForLoad	svf/include/MSSA/MemRegion.h	/^    virtual inline void getMRsForLoad(MRSet& aliasMRs, const NodeBS& cpts, const FunObjVar*)$/;"	f	class:SVF::MRGenerator
getMRsForLoad	svf/lib/MSSA/MemPartition.cpp	/^void DistinctMRG::getMRsForLoad(MRSet& mrs, const NodeBS& pts, const FunObjVar*)$/;"	f	class:DistinctMRG
getMRsForLoadFromInterList	svf/lib/MSSA/MemPartition.cpp	/^void IntraDisjointMRG::getMRsForLoadFromInterList(MRSet& mrs, const NodeBS& cpts, const PointsToList& inters)$/;"	f	class:IntraDisjointMRG
getMSSA	svf/include/Graphs/SVFG.h	/^    inline MemSSA* getMSSA() const$/;"	f	class:SVF::SVFG
getMUSet	svf/include/MSSA/MemSSA.h	/^    inline MUSet& getMUSet(const CallICFGNode* cs)$/;"	f	class:SVF::MemSSA
getMUSet	svf/include/MSSA/MemSSA.h	/^    inline MUSet& getMUSet(const LoadStmt* ld)$/;"	f	class:SVF::MemSSA
getMainLLVMModule	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Module* getMainLLVMModule() const$/;"	f	class:SVF::LLVMModuleSet
getMakredProcs	svf/include/MTA/TCT.h	/^    inline const FunSet& getMakredProcs() const$/;"	f	class:SVF::TCT
getMarkedFlag	svf/include/MTA/MHP.h	/^    inline ValDomain getMarkedFlag(const CxtStmt& cs)$/;"	f	class:SVF::ForkJoinAnalysis
getMaxBudget	svf/include/Util/DPItem.h	/^    static inline u32_t getMaxBudget()$/;"	f	class:SVF::DPItem
getMaxCxtSize	svf/include/MTA/TCT.h	/^    inline u32_t getMaxCxtSize() const$/;"	f	class:SVF::TCT
getMaxFieldOffsetLimit	svf/include/SVFIR/ObjTypeInfo.h	/^    inline u32_t getMaxFieldOffsetLimit()$/;"	f	class:SVF::ObjTypeInfo
getMaxFieldOffsetLimit	svf/include/SVFIR/SVFVariables.h	/^    u32_t getMaxFieldOffsetLimit() const$/;"	f	class:SVF::BaseObjVar
getMaxPathLen	svf/include/Util/DPItem.h	/^    inline u32_t getMaxPathLen() const$/;"	f	class:SVF::ContextCond
getMaxStructSize	svf/include/Graphs/IRGraph.h	/^    inline u32_t getMaxStructSize() const$/;"	f	class:SVF::IRGraph
getMemToFieldsMap	svf/include/SVFIR/SVFIR.h	/^    inline MemObjToFieldsMap& getMemToFieldsMap()$/;"	f	class:SVF::SVFIR
getMemUsage	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    inline std::string getMemUsage()$/;"	f	class:SVF::AEStat
getMemUsage	svf/include/SABER/SaberCondAllocator.h	/^    inline std::string getMemUsage()$/;"	f	class:SVF::SaberCondAllocator
getMemoryUsageKB	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::getMemoryUsageKB(u32_t* vmrss_kb, u32_t* vmsize_kb)$/;"	f	class:SVFUtil
getModInfoForCall	svf/lib/MSSA/MemRegion.cpp	/^NodeBS MRGenerator::getModInfoForCall(const CallICFGNode* cs)$/;"	f	class:MRGenerator
getModRefInfo	svf/lib/MSSA/MemRegion.cpp	/^ModRefInfo MRGenerator::getModRefInfo(const CallICFGNode* cs)$/;"	f	class:MRGenerator
getModRefInfo	svf/lib/MSSA/MemRegion.cpp	/^ModRefInfo MRGenerator::getModRefInfo(const CallICFGNode* cs, const SVFVar* V)$/;"	f	class:MRGenerator
getModRefInfo	svf/lib/MSSA/MemRegion.cpp	/^ModRefInfo MRGenerator::getModRefInfo(const CallICFGNode* cs1, const CallICFGNode* cs2)$/;"	f	class:MRGenerator
getModRefInfo	svf/lib/WPA/WPAPass.cpp	/^ModRefInfo WPAPass::getModRefInfo(const CallICFGNode* callInst)$/;"	f	class:WPAPass
getModRefInfo	svf/lib/WPA/WPAPass.cpp	/^ModRefInfo WPAPass::getModRefInfo(const CallICFGNode* callInst1, const CallICFGNode* callInst2)$/;"	f	class:WPAPass
getModSideEffectOfCallSite	svf/include/MSSA/MemRegion.h	/^    inline const NodeBS& getModSideEffectOfCallSite(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
getModSideEffectOfFunction	svf/include/MSSA/MemRegion.h	/^    inline const NodeBS& getModSideEffectOfFunction(const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
getModule	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Module *getModule(u32_t idx) const$/;"	f	class:SVF::LLVMModuleSet
getModuleIdentifier	svf/include/SVFIR/SVFIR.h	/^    inline const std::string& getModuleIdentifier() const$/;"	f	class:SVF::SVFIR
getModuleNum	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    u32_t getModuleNum() const$/;"	f	class:SVF::LLVMModuleSet
getModuleRef	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    Module &getModuleRef(u32_t idx) const$/;"	f	class:SVF::LLVMModuleSet
getModulusOffset	svf/lib/Graphs/IRGraph.cpp	/^APOffset IRGraph::getModulusOffset(const BaseObjVar *baseObj, const APOffset &apOffset)$/;"	f	class:IRGraph
getMutDFPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline MutDFPTDataTy* getMutDFPTDataTy() const$/;"	f	class:SVF::BVDataPTAImpl
getMutPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline MutPTDataTy* getMutPTDataTy() const$/;"	f	class:SVF::CondPTAImpl
getName	svf-llvm/include/SVF-LLVM/DCHG.h	/^    virtual const std::string& getName() const$/;"	f	class:SVF::DCHNode
getName	svf/include/Graphs/CHG.h	/^    virtual const std::string& getName() const$/;"	f	class:SVF::CHNode
getName	svf/include/SVFIR/SVFType.h	/^    const std::string& getName()$/;"	f	class:SVF::SVFStructType
getName	svf/include/SVFIR/SVFValue.h	/^    virtual const std::string& getName() const$/;"	f	class:SVF::SVFValue
getName	svf/lib/Graphs/CallGraph.cpp	/^const std::string &CallGraphNode::getName() const$/;"	f	class:CallGraphNode
getNextCollapseNode	svf/include/Graphs/ConsG.h	/^    inline NodeID getNextCollapseNode()$/;"	f	class:SVF::ConstraintGraph
getNextInsts	svf-llvm/lib/LLVMUtil.cpp	/^void LLVMUtil::getNextInsts(const Instruction* curInst, std::vector<const Instruction*>& instList)$/;"	f	class:LLVMUtil
getNode	svf-llvm/include/SVF-LLVM/DCHG.h	/^    DCHNode* getNode(const DIType* type)$/;"	f	class:SVF::DCHGraph
getNode	svf/include/Graphs/GenericGraph.h	/^    static NodeType* getNode(GenericGraphTy *G, SVF::NodeID id)$/;"	f	struct:SVF::GenericGraphTraits
getNode	svf/include/SABER/SrcSnkSolver.h	/^    inline GNODE* getNode(NodeID id) const$/;"	f	class:SVF::SrcSnkSolver
getNode	svf/include/Util/GraphReachSolver.h	/^    inline GNODE* getNode(NodeID id) const$/;"	f	class:SVF::GraphReachSolver
getNode	svf/lib/Graphs/CHG.cpp	/^CHNode *CHGraph::getNode(const string name) const$/;"	f	class:CHGraph
getNodeAttributes	svf/include/Graphs/CDG.h	/^    static std::string getNodeAttributes(NodeType *node, SVF::CDG *)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getNodeAttributes(const void *,$/;"	f	struct:SVF::DefaultDOTGraphTraits
getNodeAttributes	svf/lib/Graphs/CFLGraph.cpp	/^    static std::string getNodeAttributes(CFLNode *node, CFLGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/CHG.cpp	/^    static std::string getNodeAttributes(CHNode *node, CHGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/CallGraph.cpp	/^    static std::string getNodeAttributes(CallGraphNode*node, CallGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/ConsG.cpp	/^    static std::string getNodeAttributes(NodeType *n, ConstraintGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/ICFG.cpp	/^    static std::string getNodeAttributes(NodeType *node, ICFG*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/IRGraph.cpp	/^    static std::string getNodeAttributes(SVFVar *node, IRGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/SVFG.cpp	/^    static std::string getNodeAttributes(NodeType *node, SVFG *graph)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/Graphs/VFG.cpp	/^    static std::string getNodeAttributes(NodeType *node, VFG*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeAttributes	svf/lib/MTA/TCT.cpp	/^    static std::string getNodeAttributes(TCTNode *node, TCT *tct)$/;"	f	struct:SVF::DOTGraphTraits
getNodeDescription	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getNodeDescription(const void *, const GraphType &)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getNodeID	svf/include/Graphs/GenericGraph.h	/^    static inline unsigned getNodeID(NodeType* N)$/;"	f	struct:SVF::GenericGraphTraits
getNodeID	svf/include/Graphs/GenericGraph.h	/^    static inline unsigned getNodeID(const NodeType* N)$/;"	f	struct:SVF::GenericGraphTraits
getNodeIDFromItem	svf/include/SABER/SrcSnkSolver.h	/^    virtual inline NodeID getNodeIDFromItem(const DPIm& item) const$/;"	f	class:SVF::SrcSnkSolver
getNodeIDFromItem	svf/include/Util/GraphReachSolver.h	/^    virtual inline NodeID getNodeIDFromItem(const DPIm& item) const$/;"	f	class:SVF::GraphReachSolver
getNodeIdentifierLabel	svf/include/Graphs/DOTGraphTraits.h	/^    static std::string getNodeIdentifierLabel(const void *, const GraphType &)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getNodeKind	svf/include/SVFIR/SVFValue.h	/^    inline GNodeK getNodeKind() const$/;"	f	class:SVF::SVFValue
getNodeLabel	svf/include/Graphs/CDG.h	/^    std::string getNodeLabel(NodeType *node, SVF::CDG *graph)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/include/Graphs/DOTGraphTraits.h	/^    std::string getNodeLabel(const void *, const GraphType &)$/;"	f	struct:SVF::DefaultDOTGraphTraits
getNodeLabel	svf/lib/Graphs/CFLGraph.cpp	/^    static std::string getNodeLabel(CFLNode *node, CFLGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/CHG.cpp	/^    static std::string getNodeLabel(CHNode *node, CHGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/CallGraph.cpp	/^    static std::string getNodeLabel(CallGraphNode*node, CallGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/ConsG.cpp	/^    static std::string getNodeLabel(NodeType *n, ConstraintGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/ICFG.cpp	/^    std::string getNodeLabel(NodeType *node, ICFG *graph)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/IRGraph.cpp	/^    static std::string getNodeLabel(SVFVar *node, IRGraph*)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/SVFG.cpp	/^    std::string getNodeLabel(NodeType *node, SVFG *graph)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/Graphs/VFG.cpp	/^    std::string getNodeLabel(NodeType *node, VFG *graph)$/;"	f	struct:SVF::DOTGraphTraits
getNodeLabel	svf/lib/MTA/TCT.cpp	/^    static std::string getNodeLabel(TCTNode *node, TCT *graph)$/;"	f	struct:SVF::DOTGraphTraits
getNodeMapping	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::MappingPtr PointsTo::getNodeMapping() const$/;"	f	class:SVF::PointsTo
getNodeNumAfterPAGBuild	svf/include/Graphs/IRGraph.h	/^    inline u32_t getNodeNumAfterPAGBuild() const$/;"	f	class:SVF::IRGraph
getNode_h	svf/include/CFL/CFLSolver.h	/^    TreeNode* getNode_h(NodeID src, NodeID dst)$/;"	f	class:SVF::POCRHybridSolver
getNonterminals	svf/include/CFL/CFGrammar.h	/^             inline Map<std::string, Kind>& getNonterminals()$/;"	f	class:SVF::GrammarBase
getNullPtr	svf/include/Graphs/IRGraph.h	/^    inline NodeID getNullPtr() const$/;"	f	class:SVF::IRGraph
getNumArgOperands	svf/include/Graphs/ICFGNode.h	/^    inline u32_t getNumArgOperands() const$/;"	f	class:SVF::CallICFGNode
getNumFields	svf-llvm/include/SVF-LLVM/DCHG.h	/^    unsigned getNumFields(const DIType *base)$/;"	f	class:SVF::DCHGraph
getNumObjects	svf/include/Util/NodeIDAllocator.h	/^    NodeID getNumObjects(void) const$/;"	f	class:SVF::NodeIDAllocator
getNumOfCxtLocks	svf/include/MTA/LockAnalysis.h	/^    inline u32_t getNumOfCxtLocks()$/;"	f	class:SVF::LockAnalysis
getNumOfElements	svf-llvm/lib/LLVMUtil.cpp	/^u32_t LLVMUtil::getNumOfElements(const Type* ety)$/;"	f	class:LLVMUtil
getNumOfElements	svf-llvm/lib/SymbolTableBuilder.cpp	/^u32_t SymbolTableBuilder::getNumOfElements(const Type* ety)$/;"	f	class:SymbolTableBuilder
getNumOfElements	svf/include/SVFIR/ObjTypeInfo.h	/^    inline u32_t getNumOfElements() const$/;"	f	class:SVF::ObjTypeInfo
getNumOfElements	svf/include/SVFIR/SVFVariables.h	/^    u32_t getNumOfElements() const$/;"	f	class:SVF::BaseObjVar
getNumOfFlattenElements	svf-llvm/lib/SymbolTableBuilder.cpp	/^u32_t SymbolTableBuilder::getNumOfFlattenElements(const Type* T)$/;"	f	class:SymbolTableBuilder
getNumOfFlattenElements	svf/include/SVFIR/SVFType.h	/^    inline u32_t getNumOfFlattenElements() const$/;"	f	class:SVF::StInfo
getNumOfFlattenElements	svf/lib/Graphs/IRGraph.cpp	/^u32_t IRGraph::getNumOfFlattenElements(const SVFType *T)$/;"	f	class:IRGraph
getNumOfFlattenFields	svf/include/SVFIR/SVFType.h	/^    inline u32_t getNumOfFlattenFields() const$/;"	f	class:SVF::StInfo
getNumOfForksite	svf/include/Graphs/ThreadCallGraph.h	/^    inline u32_t getNumOfForksite() const$/;"	f	class:SVF::ThreadCallGraph
getNumOfJoinsite	svf/include/Graphs/ThreadCallGraph.h	/^    inline u32_t getNumOfJoinsite() const$/;"	f	class:SVF::ThreadCallGraph
getNumOfOOBQuery	svf/lib/DDA/DDAStat.cpp	/^void DDAStat::getNumOfOOBQuery()$/;"	f	class:DDAStat
getNumOfParForSite	svf/include/Graphs/ThreadCallGraph.h	/^    inline u32_t getNumOfParForSite() const$/;"	f	class:SVF::ThreadCallGraph
getNumOfResolvedIndCallEdge	svf/include/Graphs/CallGraph.h	/^    inline u32_t getNumOfResolvedIndCallEdge() const$/;"	f	class:SVF::CallGraph
getNumOfResolvedIndCallEdge	svf/include/MemoryModel/PointerAnalysis.h	/^    inline u32_t getNumOfResolvedIndCallEdge() const$/;"	f	class:SVF::PointerAnalysis
getNumSuccessors	svf/include/Graphs/BasicBlockG.h	/^    u32_t getNumSuccessors() const$/;"	f	class:SVF::SVFBasicBlock
getNumSuccessors	svf/include/Graphs/VFGNode.h	/^    u32_t getNumSuccessors() const$/;"	f	class:SVF::BranchVFGNode
getNumSuccessors	svf/include/SVFIR/SVFStatements.h	/^    u32_t getNumSuccessors() const$/;"	f	class:SVF::BranchStmt
getNumeral	svf/include/AE/Core/IntervalValue.h	/^    s64_t getNumeral() const$/;"	f	class:SVF::IntervalValue
getNumeral	svf/include/AE/Core/NumericValue.h	/^    inline s64_t getNumeral() const$/;"	f	class:SVF::BoundedDouble
getNumeral	svf/include/AE/Core/NumericValue.h	/^    inline s64_t getNumeral() const$/;"	f	class:SVF::BoundedInt
getOStream	svf/include/Graphs/GraphWriter.h	/^    std::ofstream &getOStream()$/;"	f	class:SVF::GraphWriter
getObjNodeNum	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline u32_t getObjNodeNum() const$/;"	f	class:SVF::LLVMModuleSet
getObjTypeInfo	svf/include/Graphs/IRGraph.h	/^    inline ObjTypeInfo* getObjTypeInfo(NodeID id) const$/;"	f	class:SVF::IRGraph
getObjVarOfValVar	svf/lib/Util/SVFUtil.cpp	/^const ObjVar* SVFUtil::getObjVarOfValVar(const SVF::ValVar* valVar)$/;"	f	class:SVFUtil
getObject	svf/include/Graphs/SVFGNode.h	/^    NodeID getObject(void) const$/;"	f	class:SVF::DummyVersionPropSVFGNode
getObjectNode	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline NodeID getObjectNode(const Value* V)$/;"	f	class:SVF::SVFIRBuilder
getObjectNode	svf-llvm/lib/LLVMModule.cpp	/^NodeID LLVMModuleSet::getObjectNode(const Value *llvm_value)$/;"	f	class:LLVMModuleSet
getObjectNodeNum	svf/lib/Graphs/IRGraph.cpp	/^u32_t IRGraph::getObjectNodeNum()$/;"	f	class:IRGraph
getOffsetVarAndGepTypePairVec	svf/include/SVFIR/SVFStatements.h	/^    inline const AccessPath::IdxOperandPairs getOffsetVarAndGepTypePairVec() const$/;"	f	class:SVF::GepStmt
getOpICFGNode	svf/include/SVFIR/SVFStatements.h	/^    inline const ICFGNode* getOpICFGNode(u32_t op_idx) const$/;"	f	class:SVF::PhiStmt
getOpIncomingBB	svf/include/Graphs/VFGNode.h	/^    inline const ICFGNode* getOpIncomingBB(u32_t pos) const$/;"	f	class:SVF::IntraPHIVFGNode
getOpVar	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getOpVar() const$/;"	f	class:SVF::UnaryOPVFGNode
getOpVar	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getOpVar() const$/;"	f	class:SVF::UnaryOPStmt
getOpVar	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getOpVar(u32_t pos) const$/;"	f	class:SVF::MultiOpndStmt
getOpVarID	svf/lib/SVFIR/SVFStatements.cpp	/^NodeID MultiOpndStmt::getOpVarID(u32_t pos) const$/;"	f	class:MultiOpndStmt
getOpVarID	svf/lib/SVFIR/SVFStatements.cpp	/^NodeID UnaryOPStmt::getOpVarID() const$/;"	f	class:UnaryOPStmt
getOpVarNum	svf/include/SVFIR/SVFStatements.h	/^    inline u32_t getOpVarNum() const$/;"	f	class:SVF::MultiOpndStmt
getOpVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getOpVer(u32_t pos) const$/;"	f	class:SVF::MSSAPHISVFGNode
getOpVer	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getOpVer(u32_t pos) const$/;"	f	class:SVF::BinaryOPVFGNode
getOpVer	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getOpVer(u32_t pos) const$/;"	f	class:SVF::CmpVFGNode
getOpVer	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getOpVer(u32_t pos) const$/;"	f	class:SVF::PHIVFGNode
getOpVer	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getOpVer(u32_t pos) const$/;"	f	class:SVF::UnaryOPVFGNode
getOpVer	svf/include/MSSA/MSSAMuChi.h	/^    inline MRVer* getOpVer() const$/;"	f	class:SVF::MSSACHI
getOpVer	svf/include/MSSA/MSSAMuChi.h	/^    inline const MRVer* getOpVer(u32_t pos) const$/;"	f	class:SVF::MSSAPHI
getOpVerNum	svf/include/Graphs/SVFGNode.h	/^    inline u32_t getOpVerNum() const$/;"	f	class:SVF::MSSAPHISVFGNode
getOpVerNum	svf/include/Graphs/VFGNode.h	/^    inline u32_t getOpVerNum() const$/;"	f	class:SVF::BinaryOPVFGNode
getOpVerNum	svf/include/Graphs/VFGNode.h	/^    inline u32_t getOpVerNum() const$/;"	f	class:SVF::CmpVFGNode
getOpVerNum	svf/include/Graphs/VFGNode.h	/^    inline u32_t getOpVerNum() const$/;"	f	class:SVF::PHIVFGNode
getOpVerNum	svf/include/Graphs/VFGNode.h	/^    inline u32_t getOpVerNum() const$/;"	f	class:SVF::UnaryOPVFGNode
getOpVerNum	svf/include/MSSA/MSSAMuChi.h	/^    inline u32_t getOpVerNum() const$/;"	f	class:SVF::MSSAPHI
getOpcode	svf/include/SVFIR/SVFStatements.h	/^    u32_t getOpcode() const$/;"	f	class:SVF::BinaryOPStmt
getOpcode	svf/include/SVFIR/SVFStatements.h	/^    u32_t getOpcode() const$/;"	f	class:SVF::UnaryOPStmt
getOperand	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    Value* getOperand() const$/;"	f	class:llvm::generic_bridge_gep_type_iterator
getOpndVars	svf/include/SVFIR/SVFStatements.h	/^    inline const OPVars& getOpndVars() const$/;"	f	class:SVF::MultiOpndStmt
getOption	svf/include/Util/CommandLine.h	/^    static OptionBase *getOption(const std::string optName)$/;"	f	class:OptionBase
getOptionsMap	svf/include/Util/CommandLine.h	/^    static std::map<std::string, OptionBase *> &getOptionsMap(void)$/;"	f	class:OptionBase
getOrAddSVFTypeInfo	svf-llvm/lib/SymbolTableBuilder.cpp	/^StInfo* SymbolTableBuilder::getOrAddSVFTypeInfo(const Type* T)$/;"	f	class:SymbolTableBuilder
getOrCreateNode	svf-llvm/lib/DCHG.cpp	/^DCHNode *DCHGraph::getOrCreateNode(const DIType *type)$/;"	f	class:DCHGraph
getOrCreateTCTNode	svf/include/MTA/TCT.h	/^    inline TCTNode* getOrCreateTCTNode(const CallStrCxt& cxt, const ICFGNode* fork,const CallStrCxt& oldCxt, const FunObjVar* routine)$/;"	f	class:SVF::TCT
getOriginalElemType	svf/lib/Graphs/IRGraph.cpp	/^const SVFType *IRGraph::getOriginalElemType(const SVFType *baseType, u32_t origId) const$/;"	f	class:IRGraph
getOriginalElemType	svf/lib/SVFIR/SVFValue.cpp	/^const SVFType* StInfo::getOriginalElemType(u32_t fldIdx) const$/;"	f	class:StInfo
getOutEdgeWithTy	svf/include/Graphs/CFLGraph.h	/^    inline const CFLEdge::CFLEdgeSetTy& getOutEdgeWithTy(GrammarBase::Symbol s)$/;"	f	class:SVF::CFLNode
getOutEdges	svf/include/Graphs/GenericGraph.h	/^    inline const GEdgeSetTy& getOutEdges() const$/;"	f	class:SVF::GenericNode
getOutgoingEdges	svf/include/SVFIR/SVFVariables.h	/^    inline SVFStmt::SVFStmtSetTy& getOutgoingEdges(SVFStmt::PEDGEK kind)$/;"	f	class:SVF::SVFVar
getOutgoingEdgesBegin	svf/include/SVFIR/SVFVariables.h	/^    inline SVFStmt::SVFStmtSetTy::iterator getOutgoingEdgesBegin(SVFStmt::PEDGEK kind) const$/;"	f	class:SVF::SVFVar
getOutgoingEdgesEnd	svf/include/SVFIR/SVFVariables.h	/^    inline SVFStmt::SVFStmtSetTy::iterator getOutgoingEdgesEnd(SVFStmt::PEDGEK kind) const$/;"	f	class:SVF::SVFVar
getPAG	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    SVFIR* getPAG() const$/;"	f	class:SVF::SVFIRBuilder
getPAG	svf/include/Graphs/VFG.h	/^    inline SVFIR* getPAG() const$/;"	f	class:SVF::VFG
getPAG	svf/include/MemoryModel/PointerAnalysis.h	/^    inline SVFIR* getPAG() const$/;"	f	class:SVF::PointerAnalysis
getPAG	svf/include/SABER/SrcSnkDDA.h	/^    SVFIR* getPAG() const$/;"	f	class:SVF::SrcSnkDDA
getPAG	svf/include/SVFIR/PAGBuilderFromFile.h	/^    SVFIR* getPAG() const$/;"	f	class:SVF::PAGBuilderFromFile
getPAG	svf/include/SVFIR/SVFIR.h	/^    static inline SVFIR* getPAG(bool buildFromFile = false)$/;"	f	class:SVF::SVFIR
getPAG	svf/lib/MSSA/MemSSA.cpp	/^SVFIR* MemSSA::getPAG()$/;"	f	class:MemSSA
getPAGDstNode	svf/include/Graphs/VFGNode.h	/^    inline PAGNode* getPAGDstNode() const$/;"	f	class:SVF::StmtVFGNode
getPAGDstNodeID	svf/include/Graphs/VFGNode.h	/^    inline NodeID getPAGDstNodeID() const$/;"	f	class:SVF::StmtVFGNode
getPAGEdge	svf/include/Graphs/VFGNode.h	/^    inline const PAGEdge* getPAGEdge() const$/;"	f	class:SVF::StmtVFGNode
getPAGEdgeNum	svf/include/Graphs/IRGraph.h	/^    inline u32_t getPAGEdgeNum() const$/;"	f	class:SVF::IRGraph
getPAGEdgeSet	svf/include/Graphs/ConsG.h	/^    SVFStmt::SVFStmtSetTy& getPAGEdgeSet(SVFStmt::PEDGEK kind)$/;"	f	class:SVF::ConstraintGraph
getPAGEdgeSet	svf/include/Graphs/VFG.h	/^    virtual inline SVFStmt::SVFStmtSetTy& getPAGEdgeSet(SVFStmt::PEDGEK kind)$/;"	f	class:SVF::VFG
getPAGEdgesFromInst	svf/lib/MSSA/MemRegion.cpp	/^SVFIR::SVFStmtList& MRGenerator::getPAGEdgesFromInst(const ICFGNode* node)$/;"	f	class:MRGenerator
getPAGNode	svf/include/Graphs/VFGNode.h	/^    const PAGNode* getPAGNode() const$/;"	f	class:SVF::NullPtrVFGNode
getPAGNodeNum	svf/include/Graphs/IRGraph.h	/^    inline u32_t getPAGNodeNum() const$/;"	f	class:SVF::IRGraph
getPAGSrcNode	svf/include/Graphs/VFGNode.h	/^    inline PAGNode* getPAGSrcNode() const$/;"	f	class:SVF::StmtVFGNode
getPAGSrcNodeID	svf/include/Graphs/VFGNode.h	/^    inline NodeID getPAGSrcNodeID() const$/;"	f	class:SVF::StmtVFGNode
getPHIComplementCond	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::getPHIComplementCond(const SVFBasicBlock* BB1, const SVFBasicBlock* BB2, const SVFBasicBlock* BB0)$/;"	f	class:SaberCondAllocator
getPHISet	svf/include/MSSA/MemSSA.h	/^    inline PHISet& getPHISet(const SVFBasicBlock* bb)$/;"	f	class:SVF::MemSSA
getPTA	svf/include/Graphs/SVFG.h	/^    inline PointerAnalysis* getPTA() const$/;"	f	class:SVF::SVFG
getPTA	svf/include/MSSA/MemSSA.h	/^    inline BVDataPTAImpl* getPTA() const$/;"	f	class:SVF::MemSSA
getPTA	svf/include/MTA/TCT.h	/^    inline PointerAnalysis* getPTA() const$/;"	f	class:SVF::TCT
getPTA	svf/lib/DDA/DDAStat.cpp	/^PointerAnalysis* DDAStat::getPTA() const$/;"	f	class:DDAStat
getPTAPAGEdgeNum	svf/include/Graphs/IRGraph.h	/^    inline u32_t getPTAPAGEdgeNum() const$/;"	f	class:SVF::IRGraph
getPTASVFStmtList	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmtList& getPTASVFStmtList(const ICFGNode* inst)$/;"	f	class:SVF::SVFIR
getPTASVFStmtSet	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmt::SVFStmtSetTy& getPTASVFStmtSet(SVFStmt::PEDGEK kind)$/;"	f	class:SVF::SVFIR
getPTDTY	svf/include/MemoryModel/AbstractPointsToDS.h	/^    inline PTDataTy getPTDTY() const$/;"	f	class:SVF::PTData
getPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline PTDataTy* getPTDataTy() const$/;"	f	class:SVF::BVDataPTAImpl
getPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline PTDataTy* getPTDataTy() const$/;"	f	class:SVF::CondPTAImpl
getParam	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getParam() const$/;"	f	class:SVF::ActualParmVFGNode
getParam	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getParam() const$/;"	f	class:SVF::FormalParmVFGNode
getParamTypes	svf/include/SVFIR/SVFType.h	/^    const std::vector<const SVFType*>& getParamTypes() const$/;"	f	class:SVF::SVFFunctionType
getParent	svf/include/Graphs/BasicBlockG.h	/^    inline const FunObjVar* getParent() const$/;"	f	class:SVF::SVFBasicBlock
getParent	svf/include/Graphs/ICFGNode.h	/^    inline const SVFBasicBlock* getParent() const$/;"	f	class:SVF::CallICFGNode
getParent	svf/lib/SVFIR/SVFVariables.cpp	/^const FunObjVar* ArgValVar::getParent() const$/;"	f	class:ArgValVar
getParentThread	svf/include/MTA/TCT.h	/^    inline NodeID getParentThread(NodeID tid) const$/;"	f	class:SVF::TCT
getParentsBegin	svf/include/MTA/TCT.h	/^    inline ThreadCreateEdgeSet::const_iterator getParentsBegin(const TCTNode* node) const$/;"	f	class:SVF::TCT
getParentsEnd	svf/include/MTA/TCT.h	/^    inline ThreadCreateEdgeSet::const_iterator getParentsEnd(const TCTNode* node) const$/;"	f	class:SVF::TCT
getPassName	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    llvm::StringRef getPassName() const$/;"	f	class:SVF::BreakConstantGEPs
getPassName	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    llvm::StringRef getPassName() const$/;"	f	class:SVF::MergeFunctionRets
getPassName	svf/include/DDA/DDAPass.h	/^    virtual inline std::string getPassName() const$/;"	f	class:SVF::DDAPass
getPassName	svf/include/WPA/WPAPass.h	/^    virtual inline std::string getPassName() const$/;"	f	class:SVF::WPAPass
getPointeeElement	svf/lib/AE/Core/AbstractState.cpp	/^const SVFType* AbstractState::getPointeeElement(NodeID id)$/;"	f	class:AbstractState
getPointsTo	svf/include/Graphs/SVFGEdge.h	/^    inline const NodeBS& getPointsTo() const$/;"	f	class:SVF::IndirectSVFGEdge
getPointsTo	svf/include/Graphs/SVFGNode.h	/^    inline const NodeBS& getPointsTo() const$/;"	f	class:SVF::MRSVFGNode
getPointsTo	svf/include/MSSA/MemRegion.h	/^    inline const NodeBS &getPointsTo() const$/;"	f	class:SVF::MemRegion
getPointsToList	svf/include/MSSA/MemRegion.h	/^    inline PointsToList& getPointsToList(const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
getPostDomTreeMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline Map<const SVFBasicBlock*,BBSet>& getPostDomTreeMap()$/;"	f	class:SVF::SVFLoopAndDomInfo
getPostDomTreeMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const Map<const SVFBasicBlock*,BBSet>& getPostDomTreeMap() const$/;"	f	class:SVF::SVFLoopAndDomInfo
getPredMap	svf/include/CFL/CFLSolver.h	/^    inline DataMap& getPredMap()$/;"	f	class:SVF::POCRSolver
getPredMap	svf/include/CFL/CFLSolver.h	/^    inline TypeMap& getPredMap(const NodeID key)$/;"	f	class:SVF::POCRSolver
getPredecessors	svf/include/Graphs/BasicBlockG.h	/^    inline std::vector<const SVFBasicBlock*> getPredecessors() const$/;"	f	class:SVF::SVFBasicBlock
getPredicate	svf/include/SVFIR/SVFStatements.h	/^    u32_t getPredicate() const$/;"	f	class:SVF::CmpStmt
getPreds	svf/include/CFL/CFLSolver.h	/^    inline NodeBS& getPreds(const NodeID key, const Label ty)$/;"	f	class:SVF::POCRSolver
getProc	svf/include/Util/CxtStmt.h	/^    inline const FunObjVar* getProc() const$/;"	f	class:SVF::CxtProc
getProdsFromFirstRHS	svf/include/CFL/CFGrammar.h	/^    const Productions& getProdsFromFirstRHS(const Symbol sym) const$/;"	f	class:SVF::CFGrammar
getProdsFromSecondRHS	svf/include/CFL/CFGrammar.h	/^    const Productions& getProdsFromSecondRHS(const Symbol sym) const$/;"	f	class:SVF::CFGrammar
getProdsFromSingleRHS	svf/include/CFL/CFGrammar.h	/^    const Productions& getProdsFromSingleRHS(const Symbol sym) const$/;"	f	class:SVF::CFGrammar
getProgEntryFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const Function* getProgEntryFunction(Module& module)$/;"	f	namespace:SVF::LLVMUtil
getProgEntryFunction	svf/lib/Util/SVFUtil.cpp	/^const FunObjVar* SVFUtil::getProgEntryFunction()$/;"	f	class:SVFUtil
getProgFunction	svf-llvm/lib/LLVMUtil.cpp	/^const Function* LLVMUtil::getProgFunction(const std::string& funName)$/;"	f	class:LLVMUtil
getProgFunction	svf/lib/Util/SVFUtil.cpp	/^const FunObjVar* SVFUtil::getProgFunction(const std::string& funName)$/;"	f	class:SVFUtil
getPropaPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline DataSet &getPropaPts(Key &var)$/;"	f	class:SVF::MutableDiffPTData
getPtCache	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline PersistentPointsToCache<PointsTo> &getPtCache()$/;"	f	class:SVF::BVDataPTAImpl
getPtrElementType	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^static inline Type* getPtrElementType(const PointerType* pty)$/;"	f	namespace:SVF::LLVMUtil
getPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline PointsTo& getPts(NodeID ptr)$/;"	f	class:SVF::CondPTAImpl
getPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline const CPtSet& getPts(CVar id)$/;"	f	class:SVF::CondPTAImpl
getPts	svf/include/WPA/Andersen.h	/^    virtual inline const PointsTo& getPts(NodeID id)$/;"	f	class:SVF::Andersen
getPts	svf/lib/WPA/WPAPass.cpp	/^const PointsTo& WPAPass::getPts(NodeID var)$/;"	f	class:WPAPass
getPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual inline const PtsMap& getPtsMap() const$/;"	f	class:SVF::MutableDFPTData
getPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual inline const PtsMap& getPtsMap() const$/;"	f	class:SVF::MutableDiffPTData
getPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual inline const PtsMap& getPtsMap() const$/;"	f	class:SVF::MutablePTData
getPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline const typename MutPTDataTy::PtsMap& getPtsMap() const$/;"	f	class:SVF::CondPTAImpl
getPtsSubSetMap	svf/include/MSSA/MemPartition.h	/^    inline PtsToSubPtsMap& getPtsSubSetMap(const FunObjVar* func)$/;"	f	class:SVF::IntraDisjointMRG
getPtsSubSetMap	svf/include/MSSA/MemPartition.h	/^    inline const PtsToSubPtsMap& getPtsSubSetMap(const FunObjVar* func) const$/;"	f	class:SVF::IntraDisjointMRG
getRHSVar	svf/include/SVFIR/SVFStatements.h	/^    inline SVFVar* getRHSVar() const$/;"	f	class:SVF::AssignStmt
getRHSVarID	svf/include/SVFIR/SVFStatements.h	/^    inline NodeID getRHSVarID() const$/;"	f	class:SVF::AssignStmt
getRangeLimitFromType	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^IntervalValue AbsExtAPI::getRangeLimitFromType(const SVFType* type)$/;"	f	class:AbsExtAPI
getRawProductions	svf/include/CFL/CFGrammar.h	/^    inline SymbolMap<Symbol, Productions>& getRawProductions()$/;"	f	class:SVF::GrammarBase
getReachableBBs	svf/include/SVFIR/SVFVariables.h	/^    inline const std::vector<const SVFBasicBlock*>& getReachableBBs() const$/;"	f	class:SVF::FunObjVar
getReachableBBs	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline const BBList& getReachableBBs() const$/;"	f	class:SVF::SVFLoopAndDomInfo
getRealDefFun	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline const Function* getRealDefFun(const Function* fun) const$/;"	f	class:SVF::LLVMModuleSet
getRealNumeral	svf/include/AE/Core/IntervalValue.h	/^    double getRealNumeral() const$/;"	f	class:SVF::IntervalValue
getRealNumeral	svf/include/AE/Core/NumericValue.h	/^    inline double getRealNumeral() const$/;"	f	class:SVF::BoundedDouble
getRealNumeral	svf/include/AE/Core/NumericValue.h	/^    inline double getRealNumeral() const$/;"	f	class:SVF::BoundedInt
getRefInfoForCall	svf/lib/MSSA/MemRegion.cpp	/^NodeBS MRGenerator::getRefInfoForCall(const CallICFGNode* cs)$/;"	f	class:MRGenerator
getRefSideEffectOfCallSite	svf/include/MSSA/MemRegion.h	/^    inline const NodeBS& getRefSideEffectOfCallSite(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
getRefSideEffectOfFunction	svf/include/MSSA/MemRegion.h	/^    inline const NodeBS& getRefSideEffectOfFunction(const FunObjVar* fun)$/;"	f	class:SVF::MRGenerator
getRegionSize	svf/include/MSSA/MemRegion.h	/^    inline u32_t getRegionSize() const$/;"	f	class:SVF::MemRegion
getReliantVersions	svf/lib/WPA/VersionedFlowSensitive.cpp	/^std::vector<Version> &VersionedFlowSensitive::getReliantVersions(const NodeID o, const Version v)$/;"	f	class:VersionedFlowSensitive
getRemovedSUVFEdges	svf/include/SABER/ProgSlice.h	/^    const SVFGNodeToSVFGNodeSetMap& getRemovedSUVFEdges() const$/;"	f	class:SVF::ProgSlice
getRemovedSUVFEdges	svf/include/SABER/SaberCondAllocator.h	/^    SVFGNodeToSVFGNodeSetMap & getRemovedSUVFEdges()$/;"	f	class:SVF::SaberCondAllocator
getRep	svf/include/Graphs/ConsG.h	/^    inline NodeID getRep(NodeID node)$/;"	f	class:SVF::ConstraintGraph
getRepNode	svf/include/Graphs/ICFG.h	/^    const ICFGNode* getRepNode(const ICFGNode* node) const$/;"	f	class:SVF::ICFG
getRepNodes	svf/include/Graphs/SCC.h	/^    inline const NodeBS &getRepNodes() const$/;"	f	class:SVF::SCCDetection
getRepPointsTo	svf/include/MSSA/MemRegion.h	/^    inline const NodeBS& getRepPointsTo(const NodeBS& cpts) const$/;"	f	class:SVF::MRGenerator
getRepr	svf/include/SVFIR/SVFType.h	/^    const std::string& getRepr()$/;"	f	class:SVF::SVFOtherType
getRes	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getRes() const$/;"	f	class:SVF::BinaryOPVFGNode
getRes	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getRes() const$/;"	f	class:SVF::CmpVFGNode
getRes	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getRes() const$/;"	f	class:SVF::PHIVFGNode
getRes	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getRes() const$/;"	f	class:SVF::UnaryOPVFGNode
getRes	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getRes() const$/;"	f	class:SVF::MultiOpndStmt
getRes	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getRes() const$/;"	f	class:SVF::UnaryOPStmt
getResID	svf/lib/SVFIR/SVFStatements.cpp	/^NodeID MultiOpndStmt::getResID() const$/;"	f	class:MultiOpndStmt
getResID	svf/lib/SVFIR/SVFStatements.cpp	/^NodeID UnaryOPStmt::getResID() const$/;"	f	class:UnaryOPStmt
getResVer	svf/include/Graphs/SVFGNode.h	/^    inline const MRVer* getResVer() const$/;"	f	class:SVF::MSSAPHISVFGNode
getResVer	svf/include/MSSA/MSSAMuChi.h	/^    inline MRVer* getResVer() const$/;"	f	class:SVF::MSSADEF
getRet	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getRet() const$/;"	f	class:SVF::FormalRetVFGNode
getRetBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline RetICFGNode* getRetBlock(const Instruction* cs)$/;"	f	class:SVF::LLVMModuleSet
getRetICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline RetICFGNode* getRetICFGNode(const Instruction*  cs)$/;"	f	class:SVF::ICFGBuilder
getRetICFGNode	svf-llvm/lib/LLVMModule.cpp	/^RetICFGNode* LLVMModuleSet::getRetICFGNode(const Instruction* inst)$/;"	f	class:LLVMModuleSet
getRetICFGNode	svf/include/Graphs/ICFGNode.h	/^    inline const RetICFGNode* getRetICFGNode() const$/;"	f	class:SVF::CallICFGNode
getRetPE	svf/include/Graphs/ICFGEdge.h	/^    inline const RetPE* getRetPE() const$/;"	f	class:SVF::RetCFGEdge
getRetParmAtJoinedSite	svf/lib/Util/ThreadAPI.cpp	/^const SVFVar* ThreadAPI::getRetParmAtJoinedSite(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
getRetSite	svf/lib/SABER/ProgSlice.cpp	/^const CallICFGNode* ProgSlice::getRetSite(const SVFGEdge* edge) const$/;"	f	class:ProgSlice
getReturnMuSet	svf/include/MSSA/MemSSA.h	/^    inline MUSet& getReturnMuSet(const FunObjVar * fun)$/;"	f	class:SVF::MemSSA
getReturnNode	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    NodeID getReturnNode(const Function *func) const$/;"	f	class:SVF::LLVMModuleSet
getReturnNode	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline NodeID getReturnNode(const FunObjVar *func)$/;"	f	class:SVF::SVFIRBuilder
getReturnNode	svf/include/Graphs/ConsG.h	/^    inline NodeID getReturnNode(const FunObjVar* value) const$/;"	f	class:SVF::ConstraintGraph
getReturnNode	svf/lib/Graphs/IRGraph.cpp	/^NodeID IRGraph::getReturnNode(const FunObjVar *func) const$/;"	f	class:IRGraph
getReturnType	svf/include/SVFIR/SVFType.h	/^    const SVFType* getReturnType() const$/;"	f	class:SVF::SVFFunctionType
getReturnType	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFType* getReturnType() const$/;"	f	class:SVF::FunObjVar
getRev	svf/include/Graphs/VFGNode.h	/^    inline const PAGNode* getRev() const$/;"	f	class:SVF::ActualRetVFGNode
getRevPts	svf/include/CFL/CFLAlias.h	/^    virtual const NodeSet& getRevPts(NodeID nodeId)$/;"	f	class:SVF::CFLAlias
getRevPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline NodeSet& getRevPts(NodeID obj)$/;"	f	class:SVF::CondPTAImpl
getRevPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline const Set<CVar>& getRevPts(CVar nodeId)$/;"	f	class:SVF::CondPTAImpl
getReverseNodeMapping	svf/lib/Util/NodeIDAllocator.cpp	/^std::vector<NodeID> NodeIDAllocator::Clusterer::getReverseNodeMapping(const std::vector<NodeID> &nodeMapping)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
getSCCDetector	svf/include/WPA/WPASolver.h	/^    inline SCC* getSCCDetector() const$/;"	f	class:SVF::WPASolver
getSCCRep	svf/lib/Graphs/SVFGStat.cpp	/^NodeID SVFGStat::getSCCRep(SVFGSCC* scc, NodeID id) const$/;"	f	class:SVFGStat
getSExtValue	svf/include/SVFIR/SVFVariables.h	/^    s64_t getSExtValue() const$/;"	f	class:SVF::ConstIntObjVar
getSExtValue	svf/include/SVFIR/SVFVariables.h	/^    s64_t getSExtValue() const$/;"	f	class:SVF::ConstIntValVar
getSSAVersion	svf/include/MSSA/MSSAMuChi.h	/^    inline MRVERSION getSSAVersion() const$/;"	f	class:SVF::MRVer
getSVFBasicBlock	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    SVFBasicBlock* getSVFBasicBlock(const BasicBlock* bb)$/;"	f	class:SVF::LLVMModuleSet
getSVFG	svf/include/DDA/DDAVFSolver.h	/^    inline SVFG* getSVFG() const$/;"	f	class:SVF::DDAVFSolver
getSVFG	svf/include/MSSA/SVFGBuilder.h	/^    inline SVFG* getSVFG() const$/;"	f	class:SVF::SVFGBuilder
getSVFG	svf/include/SABER/ProgSlice.h	/^    inline const SVFG* getSVFG() const$/;"	f	class:SVF::ProgSlice
getSVFG	svf/include/SABER/SrcSnkDDA.h	/^    inline const SVFG* getSVFG() const$/;"	f	class:SVF::SrcSnkDDA
getSVFG	svf/include/WPA/FlowSensitive.h	/^    inline SVFG* getSVFG() const$/;"	f	class:SVF::FlowSensitive
getSVFG	svf/lib/DDA/DDAStat.cpp	/^SVFG* DDAStat::getSVFG() const$/;"	f	class:DDAStat
getSVFGNode	svf/include/Graphs/SVFG.h	/^    inline SVFGNode* getSVFGNode(NodeID id) const$/;"	f	class:SVF::SVFG
getSVFGNodeBB	svf/include/SABER/ProgSlice.h	/^    inline const SVFBasicBlock* getSVFGNodeBB(const SVFGNode* node) const$/;"	f	class:SVF::ProgSlice
getSVFGNodeNum	svf/include/Graphs/SVFG.h	/^    inline u32_t getSVFGNodeNum() const$/;"	f	class:SVF::SVFG
getSVFGSCC	svf/include/DDA/DDAVFSolver.h	/^    inline SVFGSCC* getSVFGSCC() const$/;"	f	class:SVF::DDAVFSolver
getSVFGSCCRepNode	svf/include/DDA/DDAVFSolver.h	/^    inline NodeID getSVFGSCCRepNode(NodeID id)$/;"	f	class:SVF::DDAVFSolver
getSVFInt8Type	svf/include/SVFIR/SVFType.h	/^    inline static SVFType* getSVFInt8Type()$/;"	f	class:SVF::SVFType
getSVFLoops	svf/include/Graphs/ICFG.h	/^    inline SVFLoopVec& getSVFLoops(const ICFGNode *node)$/;"	f	class:SVF::ICFG
getSVFPtrType	svf/include/SVFIR/SVFType.h	/^    inline static SVFType* getSVFPtrType()$/;"	f	class:SVF::SVFType
getSVFStmtList	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmtList& getSVFStmtList(const ICFGNode* inst)$/;"	f	class:SVF::SVFIR
getSVFStmtSet	svf/include/SVFIR/SVFIR.h	/^    inline SVFStmt::SVFStmtSetTy& getSVFStmtSet(SVFStmt::PEDGEK kind)$/;"	f	class:SVF::SVFIR
getSVFStmts	svf/include/Graphs/ICFGNode.h	/^    inline const SVFStmtList& getSVFStmts() const$/;"	f	class:SVF::ICFGNode
getSVFType	svf-llvm/lib/LLVMModule.cpp	/^SVFType* LLVMModuleSet::getSVFType(const Type* T)$/;"	f	class:LLVMModuleSet
getSVFTypes	svf/include/Graphs/IRGraph.h	/^    inline const SVFTypeSet& getSVFTypes() const$/;"	f	class:SVF::IRGraph
getSaberCondAllocator	svf/include/SABER/SrcSnkDDA.h	/^    SaberCondAllocator* getSaberCondAllocator() const$/;"	f	class:SVF::SrcSnkDDA
getSecondRHSSymbol	svf/include/CFL/CFGrammar.h	/^    const Symbol& getSecondRHSSymbol(const Production& prod) const$/;"	f	class:SVF::CFGrammar
getSecondRHSToProds	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions>& getSecondRHSToProds()$/;"	f	class:SVF::CFGrammar
getSiblingThread	svf/include/MTA/TCT.h	/^    inline const NodeBS getSiblingThread(NodeID tid) const$/;"	f	class:SVF::TCT
getSimpleNodeLabel	svf/include/Graphs/CDG.h	/^    static std::string getSimpleNodeLabel(NodeType *node, SVF::CDG *)$/;"	f	struct:SVF::DOTGraphTraits
getSimpleNodeLabel	svf/lib/Graphs/ICFG.cpp	/^    static std::string getSimpleNodeLabel(NodeType *node, ICFG*)$/;"	f	struct:SVF::DOTGraphTraits
getSimpleNodeLabel	svf/lib/Graphs/SVFG.cpp	/^    static std::string getSimpleNodeLabel(NodeType *node, SVFG*)$/;"	f	struct:SVF::DOTGraphTraits
getSimpleNodeLabel	svf/lib/Graphs/VFG.cpp	/^    static std::string getSimpleNodeLabel(NodeType *node, VFG*)$/;"	f	struct:SVF::DOTGraphTraits
getSimplifiedValue	svf/include/Util/Casting.h	/^    static RetType getSimplifiedValue(const From& Val)$/;"	f	struct:SVF::SVFUtil::simplify_type
getSimplifiedValue	svf/include/Util/Casting.h	/^    static SimpleType &getSimplifiedValue(From &Val)$/;"	f	struct:SVF::SVFUtil::simplify_type
getSingleRHSToProds	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions>& getSingleRHSToProds()$/;"	f	class:SVF::CFGrammar
getSinks	svf/include/SABER/ProgSlice.h	/^    inline const SVFGNodeSet& getSinks() const$/;"	f	class:SVF::ProgSlice
getSinks	svf/include/SABER/SrcSnkDDA.h	/^    inline const SVFGNodeSet& getSinks() const$/;"	f	class:SVF::SrcSnkDDA
getSolver	svf/lib/Util/Z3Expr.cpp	/^z3::solver &Z3Expr::getSolver()$/;"	f	class:SVF::Z3Expr
getSource	svf/include/SABER/ProgSlice.h	/^    inline const SVFGNode* getSource() const$/;"	f	class:SVF::ProgSlice
getSourceLoc	svf-llvm/lib/LLVMUtil.cpp	/^const std::string LLVMUtil::getSourceLoc(const Value* val )$/;"	f	class:LLVMUtil
getSourceLoc	svf/include/SVFIR/SVFValue.h	/^    virtual const std::string getSourceLoc() const$/;"	f	class:SVF::SVFValue
getSourceLoc	svf/lib/Graphs/ICFG.cpp	/^const std::string FunEntryICFGNode::getSourceLoc() const$/;"	f	class:FunEntryICFGNode
getSourceLoc	svf/lib/Graphs/ICFG.cpp	/^const std::string FunExitICFGNode::getSourceLoc() const$/;"	f	class:FunExitICFGNode
getSourceLocOfFunction	svf-llvm/lib/LLVMUtil.cpp	/^const std::string LLVMUtil::getSourceLocOfFunction(const Function* F)$/;"	f	class:LLVMUtil
getSources	svf/include/SABER/SrcSnkDDA.h	/^    inline const SVFGNodeSet& getSources() const$/;"	f	class:SVF::SrcSnkDDA
getSpanfromCxtLock	svf/include/MTA/LockAnalysis.h	/^    inline LockSpan& getSpanfromCxtLock(const CxtLock& cl)$/;"	f	class:SVF::LockAnalysis
getSrcCSID	svf/include/SABER/LeakChecker.h	/^    inline const CallICFGNode* getSrcCSID(const SVFGNode* src)$/;"	f	class:SVF::LeakChecker
getSrcID	svf/include/Graphs/GenericGraph.h	/^    inline NodeID getSrcID() const$/;"	f	class:SVF::GenericEdge
getSrcNode	svf/include/Graphs/GenericGraph.h	/^    NodeType* getSrcNode() const$/;"	f	class:SVF::GenericEdge
getStInfos	svf/include/Graphs/IRGraph.h	/^    inline const Set<const StInfo*>& getStInfos() const$/;"	f	class:SVF::IRGraph
getStartKind	svf/include/CFL/CFGrammar.h	/^    inline Kind getStartKind()$/;"	f	class:SVF::GrammarBase
getStartKind	svf/lib/Graphs/CFLGraph.cpp	/^CFLGraph::Kind CFLGraph::getStartKind() const$/;"	f	class:CFLGraph
getStartRoutineOfCxtThread	svf/include/MTA/TCT.h	/^    const FunObjVar* getStartRoutineOfCxtThread(const CxtThread& ct) const$/;"	f	class:SVF::TCT
getStat	svf/include/Graphs/SVFG.h	/^    inline SVFGStat* getStat() const$/;"	f	class:SVF::SVFG
getStat	svf/include/MemoryModel/PointerAnalysis.h	/^    inline PTAStat* getStat() const$/;"	f	class:SVF::PointerAnalysis
getStmt	svf/include/Util/CxtStmt.h	/^    inline const ICFGNode* getStmt() const$/;"	f	class:SVF::CxtStmt
getStmtReliance	svf/lib/WPA/VersionedFlowSensitive.cpp	/^NodeBS &VersionedFlowSensitive::getStmtReliance(const NodeID o, const Version v)$/;"	f	class:VersionedFlowSensitive
getStmtVFGNode	svf/include/Graphs/VFG.h	/^    inline StmtVFGNode* getStmtVFGNode(const PAGEdge* pagEdge) const$/;"	f	class:SVF::VFG
getStoreCGEdges	svf/include/Graphs/ConsG.h	/^    inline ConstraintEdge::ConstraintEdgeSetTy& getStoreCGEdges()$/;"	f	class:SVF::ConstraintGraph
getStoreChiNum	svf/lib/MSSA/MemSSA.cpp	/^u32_t MemSSA::getStoreChiNum() const$/;"	f	class:MemSSA
getStoreInEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getStoreInEdges() const$/;"	f	class:SVF::ConstraintNode
getStoreMRSet	svf/include/MSSA/MemRegion.h	/^    inline MRSet& getStoreMRSet(const StoreStmt* store)$/;"	f	class:SVF::MRGenerator
getStoreOutEdges	svf/include/Graphs/ConsGNode.h	/^    inline const ConstraintEdge::ConstraintEdgeSetTy& getStoreOutEdges() const$/;"	f	class:SVF::ConstraintNode
getStoreStmt	svf/include/MSSA/MSSAMuChi.h	/^    inline const StoreStmt* getStoreStmt() const$/;"	f	class:SVF::StoreCHI
getStoreToChiSetMap	svf/include/MSSA/MemSSA.h	/^    inline StoreToChiSetMap& getStoreToChiSetMap()$/;"	f	class:SVF::MemSSA
getStride	svf/include/SVFIR/SVFType.h	/^    inline u32_t getStride() const$/;"	f	class:SVF::StInfo
getStrlen	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^IntervalValue AbsExtAPI::getStrlen(AbstractState& as, const SVF::SVFVar *strValue)$/;"	f	class:AbsExtAPI
getStrongUpdateStores	svf/include/DDA/DDAStat.h	/^    inline NodeBS& getStrongUpdateStores()$/;"	f	class:SVF::DDAStat
getStructFieldOffset	svf/lib/MemoryModel/AccessPath.cpp	/^u32_t AccessPath::getStructFieldOffset(const SVFVar* idxOperandVar, const SVFStructType* idxOperandType) const$/;"	f	class:AccessPath
getSubNodes	svf/include/Graphs/ICFG.h	/^    const std::vector<const ICFGNode*>& getSubNodes(const ICFGNode* node) const$/;"	f	class:SVF::ICFG
getSubNodes	svf/include/WPA/Steensgaard.h	/^    inline Set<NodeID>& getSubNodes(NodeID id)$/;"	f	class:SVF::Steensgaard
getSubs	svf/include/Graphs/ConsG.h	/^    inline NodeBS& getSubs(NodeID node)$/;"	f	class:SVF::ConstraintGraph
getSuccMap	svf/include/CFL/CFLSolver.h	/^    inline DataMap& getSuccMap()$/;"	f	class:SVF::POCRSolver
getSuccMap	svf/include/CFL/CFLSolver.h	/^    inline TypeMap& getSuccMap(const NodeID key)$/;"	f	class:SVF::POCRSolver
getSuccessor	svf/include/Graphs/VFGNode.h	/^    const ICFGNode* getSuccessor (u32_t i) const$/;"	f	class:SVF::BranchVFGNode
getSuccessor	svf/include/SVFIR/SVFStatements.h	/^    const ICFGNode* getSuccessor(u32_t i) const$/;"	f	class:SVF::BranchStmt
getSuccessorCondValue	svf/include/Graphs/ICFGEdge.h	/^    s64_t getSuccessorCondValue() const$/;"	f	class:SVF::IntraCFGEdge
getSuccessorCondValue	svf/include/SVFIR/SVFStatements.h	/^    s64_t getSuccessorCondValue(u32_t i) const$/;"	f	class:SVF::BranchStmt
getSuccessors	svf/include/Graphs/BasicBlockG.h	/^    inline std::vector<const SVFBasicBlock*> getSuccessors() const$/;"	f	class:SVF::SVFBasicBlock
getSuccessors	svf/include/Graphs/VFGNode.h	/^    const BranchStmt::SuccAndCondPairVec& getSuccessors() const$/;"	f	class:SVF::BranchVFGNode
getSuccessors	svf/include/SVFIR/SVFStatements.h	/^    const SuccAndCondPairVec& getSuccessors() const$/;"	f	class:SVF::BranchStmt
getSuccs	svf/include/CFL/CFLSolver.h	/^    inline NodeBS& getSuccs(const NodeID key, const Label ty)$/;"	f	class:SVF::POCRSolver
getSymbol	svf/include/CFL/CFGrammar.h	/^    Symbol getSymbol(const Production& prod, u32_t pos)$/;"	f	class:SVF::GrammarBase
getTCG	svf/include/MTA/LockAnalysis.h	/^    inline ThreadCallGraph* getTCG() const$/;"	f	class:SVF::LockAnalysis
getTCG	svf/include/MTA/MHP.h	/^    inline ThreadCallGraph* getTCG() const$/;"	f	class:SVF::ForkJoinAnalysis
getTCT	svf/include/MTA/LockAnalysis.h	/^    TCT* getTCT()$/;"	f	class:SVF::LockAnalysis
getTCT	svf/include/MTA/MHP.h	/^    inline TCT* getTCT() const$/;"	f	class:SVF::MHP
getTCTEdgeNum	svf/include/MTA/TCT.h	/^    inline u32_t getTCTEdgeNum() const$/;"	f	class:SVF::TCT
getTCTNode	svf/include/MTA/TCT.h	/^    inline TCTNode* getTCTNode(NodeID id) const$/;"	f	class:SVF::TCT
getTCTNode	svf/include/MTA/TCT.h	/^    inline TCTNode* getTCTNode(const CxtThread& ct) const$/;"	f	class:SVF::TCT
getTCTNodeNum	svf/include/MTA/TCT.h	/^    inline u32_t getTCTNodeNum() const$/;"	f	class:SVF::TCT
getTerminals	svf/include/CFL/CFGrammar.h	/^    inline Map<std::string, Kind>& getTerminals()$/;"	f	class:SVF::GrammarBase
getThread	svf/include/Util/CxtStmt.h	/^    inline const ICFGNode* getThread() const$/;"	f	class:SVF::CxtThread
getThreadAPI	svf/include/Graphs/ThreadCallGraph.h	/^    inline ThreadAPI* getThreadAPI() const$/;"	f	class:SVF::ThreadCallGraph
getThreadAPI	svf/include/Util/ThreadAPI.h	/^    static ThreadAPI* getThreadAPI()$/;"	f	class:SVF::ThreadAPI
getThreadCallGraph	svf/include/MTA/MHP.h	/^    inline ThreadCallGraph* getThreadCallGraph() const$/;"	f	class:SVF::MHP
getThreadCallGraph	svf/include/MTA/TCT.h	/^    inline ThreadCallGraph* getThreadCallGraph() const$/;"	f	class:SVF::TCT
getThreadStmtSet	svf/include/MTA/MHP.h	/^    inline const CxtThreadStmtSet& getThreadStmtSet(const ICFGNode* inst) const$/;"	f	class:SVF::MHP
getThunkTarget	svf-llvm/lib/CppUtil.cpp	/^const Function* cppUtil::getThunkTarget(const Function* F)$/;"	f	class:cppUtil
getTid	svf/include/Util/CxtStmt.h	/^    inline NodeID getTid() const$/;"	f	class:SVF::CxtThreadProc
getTid	svf/include/Util/CxtStmt.h	/^    inline NodeID getTid() const$/;"	f	class:SVF::CxtThreadStmt
getTopStackVer	svf/include/MSSA/MemSSA.h	/^    inline MRVer* getTopStackVer(const MemRegion* mr)$/;"	f	class:SVF::MemSSA
getTotalCallSiteNumber	svf/include/Graphs/CallGraph.h	/^    inline u32_t getTotalCallSiteNumber() const$/;"	f	class:SVF::CallGraph
getTotalEdgeNum	svf/include/Graphs/GenericGraph.h	/^    inline u32_t getTotalEdgeNum() const$/;"	f	class:SVF::GenericGraph
getTotalKind	svf/include/CFL/CFGrammar.h	/^    inline Kind getTotalKind()$/;"	f	class:SVF::GrammarBase
getTotalNodeNum	svf/include/Graphs/GenericGraph.h	/^    inline u32_t getTotalNodeNum() const$/;"	f	class:SVF::GenericGraph
getTotalSymNum	svf/include/Graphs/IRGraph.h	/^    inline u32_t getTotalSymNum() const$/;"	f	class:SVF::IRGraph
getTrueCond	svf/include/SABER/ProgSlice.h	/^    inline Condition getTrueCond() const$/;"	f	class:SVF::ProgSlice
getTrueCond	svf/include/SABER/SaberCondAllocator.h	/^    inline Condition getTrueCond() const$/;"	f	class:SVF::SaberCondAllocator
getTrueCond	svf/include/Util/Z3Expr.h	/^    static inline Z3Expr getTrueCond()$/;"	f	class:SVF::Z3Expr
getTrueValue	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getTrueValue() const$/;"	f	class:SVF::SelectStmt
getType	svf/include/MSSA/MSSAMuChi.h	/^    inline DEFTYPE getType() const$/;"	f	class:SVF::MSSADEF
getType	svf/include/MSSA/MSSAMuChi.h	/^    inline MUTYPE getType() const$/;"	f	class:SVF::MSSAMU
getType	svf/include/SABER/SaberCheckerAPI.h	/^    inline CHECKER_TYPE getType(const FunObjVar* F) const$/;"	f	class:SVF::SaberCheckerAPI
getType	svf/include/SVFIR/ObjTypeInfo.h	/^    inline const SVFType* getType() const$/;"	f	class:SVF::ObjTypeInfo
getType	svf/include/SVFIR/SVFValue.h	/^    virtual const SVFType* getType() const$/;"	f	class:SVF::SVFValue
getType	svf/include/SVFIR/SVFVariables.h	/^    const SVFType* getType() const$/;"	f	class:SVF::BaseObjVar
getType	svf/include/SVFIR/SVFVariables.h	/^    inline const SVFType* getType() const$/;"	f	class:SVF::GepValVar
getType	svf/lib/SVFIR/SVFVariables.cpp	/^const SVFType *GepObjVar::getType() const$/;"	f	class:GepObjVar
getType	svf/lib/Util/ThreadAPI.cpp	/^ThreadAPI::TD_TYPE ThreadAPI::getType(const FunObjVar* F) const$/;"	f	class:ThreadAPI
getTypeInference	svf-llvm/lib/LLVMModule.cpp	/^ObjTypeInference* LLVMModuleSet::getTypeInference()$/;"	f	class:LLVMModuleSet
getTypeInference	svf-llvm/lib/SymbolTableBuilder.cpp	/^ObjTypeInference *SymbolTableBuilder::getTypeInference()$/;"	f	class:SymbolTableBuilder
getTypeInfo	svf/include/SVFIR/SVFType.h	/^    inline StInfo* getTypeInfo()$/;"	f	class:SVF::SVFType
getTypeInfo	svf/include/SVFIR/SVFType.h	/^    inline const StInfo* getTypeInfo() const$/;"	f	class:SVF::SVFType
getTypeInfo	svf/lib/Graphs/IRGraph.cpp	/^const StInfo *IRGraph::getTypeInfo(const SVFType *T) const$/;"	f	class:IRGraph
getTypeLocSetsMap	svf/include/SVFIR/SVFIR.h	/^    inline SVFTypeLocSetsPair& getTypeLocSetsMap(NodeID argId)$/;"	f	class:SVF::SVFIR
getTypeOfElement	svf/include/SVFIR/SVFType.h	/^    const SVFType* getTypeOfElement() const$/;"	f	class:SVF::SVFArrayType
getTypedefs	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const Set<const DIDerivedType *> &getTypedefs(void) const$/;"	f	class:SVF::DCHNode
getUnaryOPVFGNode	svf/include/Graphs/VFG.h	/^    inline UnaryOPVFGNode* getUnaryOPVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
getUnifyExit	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    inline UnifyFunctionExitNodes* getUnifyExit(const Function& fn)$/;"	f	class:SVF::MergeFunctionRets
getUtils	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    AbsExtAPI* getUtils()$/;"	f	class:SVF::AbstractInterpretation
getVCallIdx	svf-llvm/lib/CppUtil.cpp	/^s32_t cppUtil::getVCallIdx(const CallBase* cs)$/;"	f	class:cppUtil
getVCallThisPtr	svf-llvm/lib/CppUtil.cpp	/^const Value* cppUtil::getVCallThisPtr(const CallBase* cs)$/;"	f	class:cppUtil
getVCallVtblPtr	svf-llvm/lib/CppUtil.cpp	/^const Value* cppUtil::getVCallVtblPtr(const CallBase* cs)$/;"	f	class:cppUtil
getVFCond	svf/include/SABER/ProgSlice.h	/^    inline Condition getVFCond(const SVFGNode* node) const$/;"	f	class:SVF::ProgSlice
getVFGNode	svf/include/Graphs/VFG.h	/^    inline VFGNode* getVFGNode(NodeID id) const$/;"	f	class:SVF::VFG
getVFGNodeBegin	svf/include/Graphs/VFG.h	/^    inline VFGNodeSet::const_iterator getVFGNodeBegin(const FunObjVar *fun) const$/;"	f	class:SVF::VFG
getVFGNodeEnd	svf/include/Graphs/VFG.h	/^    inline VFGNodeSet::const_iterator getVFGNodeEnd(const FunObjVar *fun) const$/;"	f	class:SVF::VFG
getVFGNodes	svf/include/Graphs/ICFGNode.h	/^    inline const VFGNodeList& getVFGNodes() const$/;"	f	class:SVF::ICFGNode
getVFGNodes	svf/include/Graphs/VFG.h	/^    inline VFGNodeSet& getVFGNodes(const FunObjVar *fun)$/;"	f	class:SVF::VFG
getVFnsFromCHA	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::getVFnsFromCHA(const CallICFGNode* cs, VFunSet &vfns)$/;"	f	class:PointerAnalysis
getVFnsFromPts	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::getVFnsFromPts(const CallICFGNode* cs, const PointsTo &target, VFunSet &vfns)$/;"	f	class:PointerAnalysis
getVFnsFromVtbls	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::getVFnsFromVtbls(const CallICFGNode* callsite, const VTableSet &vtbls, VFunSet &virtualFunctions)$/;"	f	class:DCHGraph
getVFnsFromVtbls	svf/lib/Graphs/CHG.cpp	/^void CHGraph::getVFnsFromVtbls(const CallICFGNode* callsite, const VTableSet &vtbls, VFunSet &virtualFunctions)$/;"	f	class:CHGraph
getVTable	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const GlobalObjVar *getVTable() const$/;"	f	class:SVF::DCHNode
getVTable	svf/include/Graphs/CHG.h	/^    const GlobalObjVar *getVTable() const$/;"	f	class:SVF::CHNode
getVals	svf/include/AE/Core/AddressValue.h	/^    const AddrSet &getVals() const$/;"	f	class:SVF::AddressValue
getValue	svf/include/Graphs/VFGNode.h	/^    virtual const SVFVar* getValue() const$/;"	f	class:SVF::VFGNode
getValue	svf/include/SVFIR/SVFStatements.h	/^    inline const SVFVar* getValue() const$/;"	f	class:SVF::SVFStmt
getValue	svf/lib/Graphs/VFG.cpp	/^const SVFVar* ArgumentVFGNode::getValue() const$/;"	f	class:ArgumentVFGNode
getValue	svf/lib/Graphs/VFG.cpp	/^const SVFVar* BinaryOPVFGNode::getValue() const$/;"	f	class:BinaryOPVFGNode
getValue	svf/lib/Graphs/VFG.cpp	/^const SVFVar* CmpVFGNode::getValue() const$/;"	f	class:CmpVFGNode
getValue	svf/lib/Graphs/VFG.cpp	/^const SVFVar* PHIVFGNode::getValue() const$/;"	f	class:PHIVFGNode
getValue	svf/lib/Graphs/VFG.cpp	/^const SVFVar* StmtVFGNode::getValue() const$/;"	f	class:StmtVFGNode
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::ArgValVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::BaseObjVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::DummyObjVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::DummyValVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::GepObjVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::GepValVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::HeapObjVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::StackObjVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    inline const std::string getValueName() const$/;"	f	class:SVF::ValVar
getValueName	svf/include/SVFIR/SVFVariables.h	/^    virtual const std::string getValueName() const$/;"	f	class:SVF::ObjVar
getValueName	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string RetValPN::getValueName() const$/;"	f	class:RetValPN
getValueName	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string VarArgValPN::getValueName() const$/;"	f	class:VarArgValPN
getValueNode	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    NodeID getValueNode(const Value* V)$/;"	f	class:SVF::SVFIRBuilder
getValueNode	svf-llvm/lib/LLVMModule.cpp	/^NodeID LLVMModuleSet::getValueNode(const Value *llvm_value)$/;"	f	class:LLVMModuleSet
getValueNodeNum	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline u32_t getValueNodeNum() const$/;"	f	class:SVF::LLVMModuleSet
getValueNodeNum	svf/lib/Graphs/IRGraph.cpp	/^u32_t IRGraph::getValueNodeNum()$/;"	f	class:IRGraph
getVarToVal	svf/include/AE/Core/AbstractState.h	/^    const VarToAbsValMap&getVarToVal() const$/;"	f	class:SVF::AbstractState
getVarToVal	svf/include/AE/Core/RelExeState.h	/^    const VarToValMap &getVarToVal() const$/;"	f	class:SVF::RelExeState
getVarargNode	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    NodeID getVarargNode(const Function *func) const$/;"	f	class:SVF::LLVMModuleSet
getVarargNode	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline NodeID getVarargNode(const FunObjVar *func)$/;"	f	class:SVF::SVFIRBuilder
getVarargNode	svf/include/Graphs/ConsG.h	/^    inline NodeID getVarargNode(const FunObjVar* value) const$/;"	f	class:SVF::ConstraintGraph
getVarargNode	svf/lib/Graphs/IRGraph.cpp	/^NodeID IRGraph::getVarargNode(const FunObjVar *func) const$/;"	f	class:IRGraph
getVariabledKind	svf/include/CFL/CFGrammar.h	/^    inline static Kind getVariabledKind(VariableAttribute variableAttribute, Kind kind)$/;"	f	class:SVF::GrammarBase
getVersion	svf/include/Graphs/SVFGNode.h	/^    Version getVersion(void) const$/;"	f	class:SVF::DummyVersionPropSVFGNode
getVersion	svf/lib/WPA/VersionedFlowSensitive.cpp	/^Version VersionedFlowSensitive::getVersion(const NodeID l, const NodeID o, const LocVersionMap &lvm) const$/;"	f	class:VersionedFlowSensitive
getVersionedPTDataTy	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline VersionedPTDataTy* getVersionedPTDataTy() const$/;"	f	class:SVF::BVDataPTAImpl
getVfnVector	svf-llvm/include/SVF-LLVM/DCHG.h	/^    std::vector<const Function* > &getVfnVector(unsigned n)$/;"	f	class:SVF::DCHNode
getVfnVectors	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const std::vector<std::vector<const Function* >> &getVfnVectors(void) const$/;"	f	class:SVF::DCHNode
getVirtualFunctionBasedonID	svf/include/Graphs/CHG.h	/^    inline const FunObjVar* getVirtualFunctionBasedonID(u32_t id) const$/;"	f	class:SVF::CHGraph
getVirtualFunctionID	svf/include/Graphs/CHG.h	/^    inline u32_t getVirtualFunctionID(const FunObjVar* vfn) const$/;"	f	class:SVF::CHGraph
getVirtualFunctionVectors	svf/include/Graphs/CHG.h	/^    const std::vector<FuncVector> &getVirtualFunctionVectors() const$/;"	f	class:SVF::CHNode
getVirtualFunctions	svf/lib/Graphs/CHG.cpp	/^void CHNode::getVirtualFunctions(u32_t idx, FuncVector &virtualFunctions) const$/;"	f	class:CHNode
getVirtualMemAddress	svf/include/AE/Core/AbstractState.h	/^    static inline u32_t getVirtualMemAddress(u32_t idx)$/;"	f	class:SVF::AbstractState
getVirtualMemAddress	svf/include/AE/Core/AddressValue.h	/^    static inline u32_t getVirtualMemAddress(u32_t idx)$/;"	f	class:SVF::AddressValue
getVirtualMemAddress	svf/include/AE/Core/RelExeState.h	/^    static inline u32_t getVirtualMemAddress(u32_t idx)$/;"	f	class:SVF::RelExeState
getVtablePtr	svf/include/Graphs/ICFGNode.h	/^    inline const SVFVar* getVtablePtr() const$/;"	f	class:SVF::CallICFGNode
getVtblStruct	svf-llvm/lib/CppUtil.cpp	/^const ConstantStruct *cppUtil::getVtblStruct(const GlobalValue *vtbl)$/;"	f	class:cppUtil
getWTOComponents	svf/include/Graphs/WTO.h	/^    const WTOComponentRefList& getWTOComponents() const$/;"	f	class:SVF::WTO
getWTOComponents	svf/include/Graphs/WTO.h	/^    const WTOComponentRefList& getWTOComponents() const$/;"	f	class:SVF::final
getYield	svf/lib/WPA/VersionedFlowSensitive.cpp	/^Version VersionedFlowSensitive::getYield(const NodeID l, const NodeID o) const$/;"	f	class:VersionedFlowSensitive
getZ3Expr	svf/include/AE/Core/RelExeState.h	/^    virtual inline Z3Expr &getZ3Expr(u32_t varId)$/;"	f	class:SVF::RelExeState
getZExtValue	svf/include/SVFIR/SVFVariables.h	/^    u64_t getZExtValue() const$/;"	f	class:SVF::ConstIntObjVar
getZExtValue	svf/include/SVFIR/SVFVariables.h	/^    u64_t getZExtValue() const$/;"	f	class:SVF::ConstIntValVar
get_alloc_arg_pos	svf-llvm/lib/LLVMModule.cpp	/^s32_t LLVMModuleSet::get_alloc_arg_pos(const Function* F)$/;"	f	class:LLVMModuleSet
get_alloc_arg_pos	svf/lib/Util/ExtAPI.cpp	/^s32_t ExtAPI::get_alloc_arg_pos(const FunObjVar* F)$/;"	f	class:ExtAPI
get_answer	z3.obj/bin/python/z3/z3.py	/^    def get_answer(self):$/;"	m	class:Fixedpoint
get_answer	z3.obj/include/z3++.h	/^        expr get_answer() { Z3_ast r = Z3_fixedpoint_get_answer(ctx(), m_fp); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::fixedpoint
get_array_item	svf/lib/Util/cJSON.cpp	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_as_array_func	z3.obj/bin/python/z3/z3.py	/^def get_as_array_func(n):$/;"	f
get_assertions	z3.obj/bin/python/z3/z3.py	/^    def get_assertions(self):$/;"	m	class:Fixedpoint
get_cond	svf/include/MemoryModel/ConditionalPT.h	/^    inline const Cond& get_cond() const$/;"	f	class:SVF::CondVar
get_const_decl	z3.obj/include/z3++.h	/^        func_decl get_const_decl(unsigned i) const { Z3_func_decl r = Z3_model_get_const_decl(ctx(), m_model, i); check_error(); return func_decl(ctx(), r); }$/;"	f	class:z3::model
get_const_interp	z3.obj/include/z3++.h	/^        expr get_const_interp(func_decl c) const {$/;"	f	class:z3::model
get_cover_delta	z3.obj/bin/python/z3/z3.py	/^    def get_cover_delta(self, level, predicate):$/;"	m	class:Fixedpoint
get_cover_delta	z3.obj/include/z3++.h	/^        expr get_cover_delta(int level, func_decl& p) {$/;"	f	class:z3::fixedpoint
get_ctx	z3.obj/bin/python/z3/z3.py	/^def get_ctx(ctx):$/;"	f
get_decimal_point	svf/lib/Util/cJSON.cpp	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_decimal_string	z3.obj/include/z3++.h	/^        std::string get_decimal_string(int precision) const {$/;"	f	class:z3::expr
get_default_fp_sort	z3.obj/bin/python/z3/z3.py	/^def get_default_fp_sort(ctx=None):$/;"	f
get_default_rounding_mode	z3.obj/bin/python/z3/z3.py	/^def get_default_rounding_mode(ctx=None):$/;"	f
get_documentation	z3.obj/bin/python/z3/z3.py	/^    def get_documentation(self, n):$/;"	m	class:ParamDescrsRef
get_escaped_string	z3.obj/include/z3++.h	/^        std::string get_escaped_string() const {            $/;"	f	class:z3::expr
get_fpa_pretty	z3.obj/bin/python/z3/z3printer.py	/^def get_fpa_pretty():$/;"	f
get_full_version	z3.obj/bin/python/z3/z3.py	/^def get_full_version():$/;"	f
get_func_decl	z3.obj/include/z3++.h	/^        func_decl get_func_decl(unsigned i) const { Z3_func_decl r = Z3_model_get_func_decl(ctx(), m_model, i); check_error(); return func_decl(ctx(), r); }$/;"	f	class:z3::model
get_func_interp	z3.obj/include/z3++.h	/^        func_interp get_func_interp(func_decl f) const {$/;"	f	class:z3::model
get_ground_sat_answer	z3.obj/bin/python/z3/z3.py	/^    def get_ground_sat_answer(self):$/;"	m	class:Fixedpoint
get_id	svf/include/MemoryModel/ConditionalPT.h	/^    inline NodeID get_id() const$/;"	f	class:SVF::CondVar
get_id	z3.obj/bin/python/z3/z3.py	/^    def get_id(self):$/;"	m	class:AstRef
get_id	z3.obj/bin/python/z3/z3.py	/^    def get_id(self):$/;"	m	class:ExprRef
get_id	z3.obj/bin/python/z3/z3.py	/^    def get_id(self):$/;"	m	class:FuncDeclRef
get_id	z3.obj/bin/python/z3/z3.py	/^    def get_id(self):$/;"	m	class:PatternRef
get_id	z3.obj/bin/python/z3/z3.py	/^    def get_id(self):$/;"	m	class:QuantifierRef
get_id	z3.obj/bin/python/z3/z3.py	/^    def get_id(self):$/;"	m	class:SortRef
get_interp	z3.obj/bin/python/z3/z3.py	/^    def get_interp(self, decl):$/;"	m	class:ModelRef
get_key_value	z3.obj/bin/python/z3/z3.py	/^    def get_key_value(self, key):$/;"	m	class:Statistics
get_kind	z3.obj/bin/python/z3/z3.py	/^    def get_kind(self, n):$/;"	m	class:ParamDescrsRef
get_map_func	z3.obj/bin/python/z3/z3.py	/^def get_map_func(a):$/;"	f
get_model	z3.obj/include/z3++.h	/^        model get_model() const { Z3_model m = Z3_optimize_get_model(ctx(), m_opt); check_error(); return model(ctx(), m); }$/;"	f	class:z3::optimize
get_model	z3.obj/include/z3++.h	/^        model get_model() const { Z3_model m = Z3_solver_get_model(ctx(), m_solver); check_error(); return model(ctx(), m); }$/;"	f	class:z3::solver
get_model	z3.obj/include/z3++.h	/^        model get_model() const {$/;"	f	class:z3::goal
get_models	z3.obj/bin/python/z3/z3util.py	/^def get_models(f,k):$/;"	f
get_name	z3.obj/bin/python/z3/z3.py	/^    def get_name(self, i):$/;"	m	class:ParamDescrsRef
get_num_levels	z3.obj/bin/python/z3/z3.py	/^    def get_num_levels(self, predicate):$/;"	m	class:Fixedpoint
get_num_levels	z3.obj/include/z3++.h	/^        unsigned get_num_levels(func_decl& p) { unsigned r = Z3_fixedpoint_get_num_levels(ctx(), m_fp, p); check_error(); return r; }$/;"	f	class:z3::fixedpoint
get_numeral_int	svf/include/Util/Z3Expr.h	/^    inline int get_numeral_int() const$/;"	f	class:SVF::Z3Expr
get_numeral_int	z3.obj/include/z3++.h	/^        int get_numeral_int() const {$/;"	f	class:z3::expr
get_numeral_int64	svf/include/Util/Z3Expr.h	/^    inline int64_t get_numeral_int64() const$/;"	f	class:SVF::Z3Expr
get_numeral_int64	z3.obj/include/z3++.h	/^        int64_t get_numeral_int64() const {$/;"	f	class:z3::expr
get_numeral_uint	z3.obj/include/z3++.h	/^        unsigned get_numeral_uint() const {$/;"	f	class:z3::expr
get_numeral_uint64	z3.obj/include/z3++.h	/^        uint64_t get_numeral_uint64() const {$/;"	f	class:z3::expr
get_object_item	svf/lib/Util/cJSON.cpp	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
get_param	z3.obj/bin/python/z3/z3.py	/^def get_param(name):$/;"	f
get_param_descrs	z3.obj/include/z3++.h	/^        param_descrs get_param_descrs() { return param_descrs(ctx(), Z3_fixedpoint_get_param_descrs(ctx(), m_fp)); }$/;"	f	class:z3::fixedpoint
get_param_descrs	z3.obj/include/z3++.h	/^        param_descrs get_param_descrs() { return param_descrs(ctx(), Z3_solver_get_param_descrs(ctx(), m_solver)); }$/;"	f	class:z3::solver
get_param_descrs	z3.obj/include/z3++.h	/^        param_descrs get_param_descrs() { return param_descrs(ctx(), Z3_tactic_get_param_descrs(ctx(), m_tactic)); }$/;"	f	class:z3::tactic
get_precedence	z3.obj/bin/python/z3/z3printer.py	/^    def get_precedence(self, a):$/;"	m	class:Formatter
get_precedence	z3.obj/bin/python/z3/z3printer.py	/^    def get_precedence(self, a):$/;"	m	class:HTMLFormatter
get_rule_names_along_trace	z3.obj/bin/python/z3/z3.py	/^    def get_rule_names_along_trace(self):$/;"	m	class:Fixedpoint
get_rules	z3.obj/bin/python/z3/z3.py	/^    def get_rules(self):$/;"	m	class:Fixedpoint
get_rules_along_trace	z3.obj/bin/python/z3/z3.py	/^    def get_rules_along_trace(self):$/;"	m	class:Fixedpoint
get_sort	svf/include/Util/Z3Expr.h	/^    z3::sort get_sort() const$/;"	f	class:SVF::Z3Expr
get_sort	z3.obj/bin/python/z3/z3.py	/^    def get_sort(self, idx):$/;"	m	class:ModelRef
get_sort	z3.obj/include/z3++.h	/^        sort get_sort() const { Z3_sort s = Z3_get_sort(*m_ctx, m_ast); check_error(); return sort(*m_ctx, s); }$/;"	f	class:z3::expr
get_string	z3.obj/include/z3++.h	/^        std::string get_string() const {$/;"	f	class:z3::expr
get_universe	z3.obj/bin/python/z3/z3.py	/^    def get_universe(self, s):$/;"	m	class:ModelRef
get_var_index	z3.obj/bin/python/z3/z3.py	/^def get_var_index(a):$/;"	f
get_vars	z3.obj/bin/python/z3/z3util.py	/^def get_vars(f,rs=[]):$/;"	f
get_version	z3.obj/bin/python/z3/z3.py	/^def get_version():$/;"	f
get_version_string	z3.obj/bin/python/z3/z3.py	/^def get_version_string():$/;"	f
get_z3_version	z3.obj/bin/python/z3/z3util.py	/^def get_z3_version(as_str=False):$/;"	f
getcwd	svf-llvm/lib/extapi.c	/^char *getcwd(char *buf, unsigned long size)$/;"	f
getenv	svf-llvm/lib/extapi.c	/^char *getenv(const char *name)$/;"	f
getgrgid	svf-llvm/lib/extapi.c	/^struct group *getgrgid(unsigned int gid)$/;"	f
getgrnam	svf-llvm/lib/extapi.c	/^struct group *getgrnam(const char *name)$/;"	f
gethostbyaddr	svf-llvm/lib/extapi.c	/^struct hostent *gethostbyaddr(const void *addr, unsigned int len, int type)$/;"	f
gethostbyname	svf-llvm/lib/extapi.c	/^struct hostent *gethostbyname(const char *name)$/;"	f
gethostbyname2	svf-llvm/lib/extapi.c	/^struct hostent *gethostbyname2(const char *name, int af)$/;"	f
getlogin	svf-llvm/lib/extapi.c	/^char *getlogin(void)$/;"	f
getmntent	svf-llvm/lib/extapi.c	/^struct mntent *getmntent(void *stream)$/;"	f
getmntent_r	svf-llvm/lib/extapi.c	/^struct mntent *getmntent_r(void *fp, struct mntent *mntbuf, char *buf, int buflen)$/;"	f
getpass	svf-llvm/lib/extapi.c	/^char *getpass(const char *prompt)$/;"	f
getprotobyname	svf-llvm/lib/extapi.c	/^struct protoent *getprotobyname(const char *name)$/;"	f
getprotobynumber	svf-llvm/lib/extapi.c	/^struct protoent *getprotobynumber(int proto)$/;"	f
getpwent	svf-llvm/lib/extapi.c	/^struct passwd *getpwent(void)$/;"	f
getpwnam	svf-llvm/lib/extapi.c	/^struct passwd *getpwnam(const char *name)$/;"	f
getpwnam_r	svf-llvm/lib/extapi.c	/^int getpwnam_r(const char *name, void *pwd, char *buf, unsigned long buflen, void **result)$/;"	f
getpwuid	svf-llvm/lib/extapi.c	/^struct passwd *getpwuid(unsigned int uid)$/;"	f
getpwuid_r	svf-llvm/lib/extapi.c	/^int getpwuid_r(unsigned int uid, void *pwd, char *buf, unsigned long buflen, void **result)$/;"	f
gets	svf-llvm/lib/extapi.c	/^char* gets(char *str)$/;"	f
getservbyname	svf-llvm/lib/extapi.c	/^struct servent *getservbyname(const char *name, const char *proto)$/;"	f
getservbyport	svf-llvm/lib/extapi.c	/^struct servent *getservbyport(int port, const char *proto)$/;"	f
getspnam	svf-llvm/lib/extapi.c	/^struct spwd *getspnam(const char *name)$/;"	f
gettext	svf-llvm/lib/extapi.c	/^char * gettext(const char * msgid)$/;"	f
globSVFGNodes	svf/include/SABER/SaberSVFGBuilder.h	/^    SVFGNodeSet globSVFGNodes;$/;"	m	class:SVF::SaberSVFGBuilder
globSVFStmtSet	svf/include/SVFIR/SVFIR.h	/^    SVFStmtSet globSVFStmtSet;	\/\/\/< Global PAGEdges without control flow information$/;"	m	class:SVF::SVFIR
globalBlockNode	svf/include/Graphs/ICFG.h	/^    GlobalICFGNode* globalBlockNode; \/\/\/< unique basic block for all globals$/;"	m	class:SVF::ICFG
globalVFGNodes	svf/include/Graphs/VFG.h	/^    GlobalVFGNodeSet globalVFGNodes;	\/\/\/< set of global store VFG nodes$/;"	m	class:SVF::VFG
global_error	svf/lib/Util/cJSON.cpp	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	svf/lib/Util/cJSON.cpp	/^static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };$/;"	v	file:
globs	svf/include/SABER/SaberSVFGBuilder.h	/^    PointsTo globs;$/;"	m	class:SVF::SaberSVFGBuilder
gmtime	svf-llvm/lib/extapi.c	/^struct tm *gmtime(const void *timer)$/;"	f
gmtime_r	svf-llvm/lib/extapi.c	/^struct tm *gmtime_r(const void *timer, struct tm *buf)$/;"	f
gnu_get_libc_version	svf-llvm/lib/extapi.c	/^const char *gnu_get_libc_version(void)$/;"	f
gnutls_check_version	svf-llvm/lib/extapi.c	/^const char * gnutls_check_version(const char * req_version)$/;"	f
gnutls_pkcs12_bag_init	svf-llvm/lib/extapi.c	/^int gnutls_pkcs12_bag_init(void *a)$/;"	f
gnutls_pkcs12_init	svf-llvm/lib/extapi.c	/^int gnutls_pkcs12_init(void *a)$/;"	f
gnutls_strerror	svf-llvm/lib/extapi.c	/^const char * gnutls_strerror(int error)$/;"	f
gnutls_x509_crt_init	svf-llvm/lib/extapi.c	/^int gnutls_x509_crt_init(void *a)$/;"	f
gnutls_x509_privkey_init	svf-llvm/lib/extapi.c	/^int gnutls_x509_privkey_init(void *a)$/;"	f
goal	z3.obj/include/z3++.h	/^        goal(context & c, Z3_goal s):object(c) { init(s); }$/;"	f	class:z3::goal
goal	z3.obj/include/z3++.h	/^        goal(context & c, bool models=true, bool unsat_cores=false, bool proofs=false):object(c) { init(Z3_mk_goal(c, models, unsat_cores, proofs)); }$/;"	f	class:z3::goal
goal	z3.obj/include/z3++.h	/^        goal(goal const & s):object(s) { init(s.m_goal); }$/;"	f	class:z3::goal
goal	z3.obj/include/z3++.h	/^    class goal : public object {$/;"	c	namespace:z3
gpg_strerror	svf-llvm/lib/extapi.c	/^const char *gpg_strerror(unsigned int a)$/;"	f
grammar	svf/include/CFL/CFLBase.h	/^    CFGrammar* grammar;$/;"	m	class:SVF::CFLBase
grammar	svf/include/CFL/CFLSolver.h	/^    CFGrammar* grammar;$/;"	m	class:SVF::CFLSolver
grammar	svf/include/CFL/GrammarBuilder.h	/^    GrammarBase *grammar;$/;"	m	class:SVF::GrammarBuilder
grammarBase	svf/include/CFL/CFLBase.h	/^    GrammarBase* grammarBase;$/;"	m	class:SVF::CFLBase
graph	svf/include/CFL/CFLBase.h	/^    CFLGraph* graph;$/;"	m	class:SVF::CFLBase
graph	svf/include/CFL/CFLSolver.h	/^    CFLGraph* graph;$/;"	m	class:SVF::CFLSolver
graph	svf/include/Graphs/SCC.h	/^    const inline GraphType & graph()$/;"	f	class:SVF::SCCDetection
graph	svf/include/Graphs/SVFGStat.h	/^    SVFG* graph;$/;"	m	class:SVF::SVFGStat
graph	svf/include/SABER/SrcSnkSolver.h	/^    const inline GraphType graph() const$/;"	f	class:SVF::SrcSnkSolver
graph	svf/include/Util/GraphReachSolver.h	/^    const inline GraphType graph() const$/;"	f	class:SVF::GraphReachSolver
graph	svf/include/WPA/WPASolver.h	/^    const inline GraphType graph()$/;"	f	class:SVF::WPASolver
graphSize	svf/include/Graphs/GenericGraph.h	/^    static unsigned graphSize(GenericGraphTy* G)$/;"	f	struct:SVF::GenericGraphTraits
group	z3.obj/bin/python/z3/z3printer.py	/^def group(arg):$/;"	f
gzdopen	svf-llvm/lib/extapi.c	/^void *gzdopen(int fd, const char *mode)$/;"	f
gzerror	svf-llvm/lib/extapi.c	/^const char * gzerror(void* file, int * errnum)$/;"	f
gzgets	svf-llvm/lib/extapi.c	/^char * gzgets(void* file, char * buf, int len)$/;"	f
h	z3.obj/include/z3++.h	/^            unsigned h() const { return m_h; }$/;"	f	class:z3::optimize::handle
handle	z3.obj/include/z3++.h	/^            handle(unsigned h): m_h(h) {}$/;"	f	class:z3::optimize::handle
handle	z3.obj/include/z3++.h	/^        class handle {$/;"	c	class:z3::optimize
handleBKCondition	svf/include/DDA/DDAVFSolver.h	/^    virtual inline bool handleBKCondition(DPIm&, const SVFGEdge*)$/;"	f	class:SVF::DDAVFSolver
handleBKCondition	svf/lib/DDA/ContextDDA.cpp	/^bool ContextDDA::handleBKCondition(CxtLocDPItem& dpm, const SVFGEdge* edge)$/;"	f	class:ContextDDA
handleBKCondition	svf/lib/DDA/FlowDDA.cpp	/^bool FlowDDA::handleBKCondition(LocDPItem& dpm, const SVFGEdge* edge)$/;"	f	class:FlowDDA
handleBlackHole	svf/lib/SVFIR/SVFIR.cpp	/^void SVFIR::handleBlackHole(bool b)$/;"	f	class:SVFIR
handleCE	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::handleCE(const Value* val)$/;"	f	class:SymbolTableBuilder
handleCall	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::handleCall(const CxtStmt& cts)$/;"	f	class:LockAnalysis
handleCall	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::handleCall(const CxtStmt& cts, NodeID rootTid)$/;"	f	class:ForkJoinAnalysis
handleCall	svf/lib/MTA/MHP.cpp	/^void MHP::handleCall(const CxtThreadStmt& cts, NodeID rootTid)$/;"	f	class:MHP
handleCallRelation	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::handleCallRelation(CxtLockProc& clp, const CallGraphEdge* cgEdge, const CallICFGNode* cs)$/;"	f	class:LockAnalysis
handleCallRelation	svf/lib/MTA/TCT.cpp	/^void TCT::handleCallRelation(CxtThreadProc& ctp, const CallGraphEdge* cgEdge, const CallICFGNode* cs)$/;"	f	class:TCT
handleCallSite	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleCallSite(const ICFGNode* node)$/;"	f	class:AbstractInterpretation
handleCallsiteModRef	svf/lib/MSSA/MemRegion.cpp	/^bool MRGenerator::handleCallsiteModRef(NodeBS& mod, NodeBS& ref, const CallICFGNode* cs, const FunObjVar* callee)$/;"	f	class:MRGenerator
handleCopyGep	svf/lib/WPA/Andersen.cpp	/^void Andersen::handleCopyGep(ConstraintNode* node)$/;"	f	class:Andersen
handleCopyGep	svf/lib/WPA/AndersenSCD.cpp	/^void AndersenSCD::handleCopyGep(ConstraintNode* node)$/;"	f	class:AndersenSCD
handleCycleWTO	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleCycleWTO(const ICFGCycleWTO*cycle)$/;"	f	class:AbstractInterpretation
handleDIBasicType	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::handleDIBasicType(const DIBasicType *basicType)$/;"	f	class:DCHGraph
handleDICompositeType	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::handleDICompositeType(const DICompositeType *compositeType)$/;"	f	class:DCHGraph
handleDIDerivedType	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::handleDIDerivedType(const DIDerivedType *derivedType)$/;"	f	class:DCHGraph
handleDISubroutineType	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::handleDISubroutineType(const DISubroutineType *subroutineType)$/;"	f	class:DCHGraph
handleDirectCall	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::handleDirectCall(CallBase* cs, const Function *F)$/;"	f	class:SVFIRBuilder
handleExtAPI	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^void AbsExtAPI::handleExtAPI(const CallICFGNode *call)$/;"	f	class:AbsExtAPI
handleExtCall	svf-llvm/lib/SVFIRExtAPI.cpp	/^void SVFIRBuilder::handleExtCall(const CallBase* cs, const Function* callee)$/;"	f	class:SVFIRBuilder
handleFork	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::handleFork(const CxtStmt& cts)$/;"	f	class:LockAnalysis
handleFork	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::handleFork(const CxtStmt& cts, NodeID rootTid)$/;"	f	class:ForkJoinAnalysis
handleFork	svf/lib/MTA/MHP.cpp	/^void MHP::handleFork(const CxtThreadStmt& cts, NodeID rootTid)$/;"	f	class:MHP
handleGlobalCE	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::handleGlobalCE(const GlobalVariable* G)$/;"	f	class:SymbolTableBuilder
handleGlobalInitializerCE	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::handleGlobalInitializerCE(const Constant* C)$/;"	f	class:SymbolTableBuilder
handleGlobalNode	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleGlobalNode()$/;"	f	class:AbstractInterpretation
handleIndCall	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::handleIndCall(CallBase* cs)$/;"	f	class:SVFIRBuilder
handleInterValueFlow	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::handleInterValueFlow()$/;"	f	class:SVFGOPT
handleIntra	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::handleIntra(const CxtStmt& cts)$/;"	f	class:LockAnalysis
handleIntra	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::handleIntra(const CxtStmt& cts)$/;"	f	class:ForkJoinAnalysis
handleIntra	svf/lib/MTA/MHP.cpp	/^void MHP::handleIntra(const CxtThreadStmt& cts)$/;"	f	class:MHP
handleIntraValueFlow	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::handleIntraValueFlow()$/;"	f	class:SVFGOPT
handleJoin	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::handleJoin(const CxtStmt& cts, NodeID rootTid)$/;"	f	class:ForkJoinAnalysis
handleJoin	svf/lib/MTA/MHP.cpp	/^void MHP::handleJoin(const CxtThreadStmt& cts, NodeID rootTid)$/;"	f	class:MHP
handleLoad	svf/lib/WPA/AndersenWaveDiff.cpp	/^bool AndersenWaveDiff::handleLoad(NodeID nodeId, const ConstraintEdge* edge)$/;"	f	class:AndersenWaveDiff
handleLoadStore	svf/lib/WPA/Andersen.cpp	/^void Andersen::handleLoadStore(ConstraintNode *node)$/;"	f	class:Andersen
handleLoadStore	svf/lib/WPA/AndersenSCD.cpp	/^void AndersenSCD::handleLoadStore(ConstraintNode* node)$/;"	f	class:AndersenSCD
handleMemcpy	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^void AbsExtAPI::handleMemcpy(AbstractState& as, const SVF::SVFVar *dst, const SVF::SVFVar *src, IntervalValue len,  u32_t start_idx)$/;"	f	class:AbsExtAPI
handleMemset	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^void AbsExtAPI::handleMemset(AbstractState& as, const SVF::SVFVar *dst, IntervalValue elem, IntervalValue len)$/;"	f	class:AbsExtAPI
handleNonCandidateFun	svf/lib/MTA/MHP.cpp	/^void MHP::handleNonCandidateFun(const CxtThreadStmt& cts)$/;"	f	class:MHP
handleOutOfBudgetDpm	svf/include/DDA/DDAVFSolver.h	/^    inline void handleOutOfBudgetDpm(const DPIm& dpm) {}$/;"	f	class:SVF::DDAVFSolver
handleOutOfBudgetDpm	svf/lib/DDA/ContextDDA.cpp	/^void ContextDDA::handleOutOfBudgetDpm(const CxtLocDPItem& dpm)$/;"	f	class:ContextDDA
handleOutOfBudgetDpm	svf/lib/DDA/FlowDDA.cpp	/^void FlowDDA::handleOutOfBudgetDpm(const LocDPItem& dpm)$/;"	f	class:FlowDDA
handleRet	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::handleRet(const CxtStmt& cts)$/;"	f	class:LockAnalysis
handleRet	svf/lib/MTA/MHP.cpp	/^void ForkJoinAnalysis::handleRet(const CxtStmt& cts)$/;"	f	class:ForkJoinAnalysis
handleRet	svf/lib/MTA/MHP.cpp	/^void MHP::handleRet(const CxtThreadStmt& cts)$/;"	f	class:MHP
handleSVFStatement	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleSVFStatement(const SVFStmt *stmt)$/;"	f	class:AbstractInterpretation
handleSingleStatement	svf/include/DDA/DDAVFSolver.h	/^    virtual void handleSingleStatement(const DPIm& dpm, CPtSet& pts)$/;"	f	class:SVF::DDAVFSolver
handleSingletonWTO	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleSingletonWTO(const ICFGSingletonWTO *icfgSingletonWto)$/;"	f	class:AbstractInterpretation
handleStatement	svf/include/DDA/DDAClient.h	/^    virtual inline void handleStatement(const SVFGNode*, NodeID) {}$/;"	f	class:SVF::DDAClient
handleStore	svf/lib/WPA/AndersenWaveDiff.cpp	/^bool AndersenWaveDiff::handleStore(NodeID nodeId, const ConstraintEdge* edge)$/;"	f	class:AndersenWaveDiff
handleStrcat	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^void AbsExtAPI::handleStrcat(const SVF::CallICFGNode *call)$/;"	f	class:AbsExtAPI
handleStrcpy	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^void AbsExtAPI::handleStrcpy(const CallICFGNode *call)$/;"	f	class:AbsExtAPI
handleStubFunctions	svf/lib/AE/Svfexe/AEDetector.cpp	/^void BufOverflowDetector::handleStubFunctions(const SVF::CallICFGNode* callNode)$/;"	f	class:BufOverflowDetector
handleThunkFunction	svf-llvm/lib/CppUtil.cpp	/^static void handleThunkFunction(cppUtil::DemangledName& dname)$/;"	f	file:
handleTypedef	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::handleTypedef(const DIType *typedefType)$/;"	f	class:DCHGraph
handleWTOComponent	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleWTOComponent(const SVF::ICFGWTOComp* wtoNode)$/;"	f	class:AbstractInterpretation
handleWTOComponents	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::handleWTOComponents(const std::list<const ICFGWTOComp*>& wtoComps)$/;"	f	class:AbstractInterpretation
hasAbsStateFromTrace	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    bool hasAbsStateFromTrace(const ICFGNode* node)$/;"	f	class:SVF::AbstractInterpretation
hasActualINSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline bool hasActualINSVFGNodes(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFG
hasActualOUTSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline bool hasActualOUTSVFGNodes(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFG
hasAddressTaken	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasAddressTaken() const$/;"	f	class:SVF::FunObjVar
hasAllCxtInLockSpan	svf/include/MTA/LockAnalysis.h	/^    inline bool hasAllCxtInLockSpan(const ICFGNode *I, LockSpan lspan) const$/;"	f	class:SVF::LockAnalysis
hasBasicBlock	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasBasicBlock() const$/;"	f	class:SVF::FunObjVar
hasBlackHoleConstObjAddrAsDef	svf/include/Graphs/VFG.h	/^    inline bool hasBlackHoleConstObjAddrAsDef(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
hasCDGEdge	svf/include/Graphs/CDG.h	/^    bool hasCDGEdge(CDGNode *src, CDGNode *dst)$/;"	f	class:SVF::CDG
hasCDGNode	svf/include/Graphs/CDG.h	/^    inline bool hasCDGNode(NodeID id) const$/;"	f	class:SVF::CDG
hasCHI	svf/include/MSSA/MemSSA.h	/^    inline bool hasCHI(const CallICFGNode* cs) const$/;"	f	class:SVF::MemSSA
hasCHI	svf/include/MSSA/MemSSA.h	/^    inline bool hasCHI(const PAGEdge* inst) const$/;"	f	class:SVF::MemSSA
hasCPtsList	svf/include/MSSA/MemRegion.h	/^    inline bool hasCPtsList(const FunObjVar* fun) const$/;"	f	class:SVF::MRGenerator
hasCallGraphEdge	svf/include/Graphs/CallGraph.h	/^    inline bool hasCallGraphEdge(const CallICFGNode* inst) const$/;"	f	class:SVF::CallGraph
hasCallSiteArgsMap	svf/include/SVFIR/SVFIR.h	/^    inline bool hasCallSiteArgsMap(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFIR
hasCallSiteChi	svf/include/Graphs/SVFG.h	/^    inline bool hasCallSiteChi(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFG
hasCallSiteID	svf/include/Graphs/CallGraph.h	/^    inline bool hasCallSiteID(const CallICFGNode* cs, const FunObjVar* callee) const$/;"	f	class:SVF::CallGraph
hasCallSiteMu	svf/include/Graphs/SVFG.h	/^    inline bool hasCallSiteMu(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFG
hasConstantBinaryOrUnaryOp	svf-llvm/lib/BreakConstantExpr.cpp	/^hasConstantBinaryOrUnaryOp (Value*  V)$/;"	f	file:
hasConstantExpr	svf-llvm/lib/BreakConstantExpr.cpp	/^hasConstantExpr (Value*  V)$/;"	f	file:
hasConstantGEP	svf-llvm/lib/BreakConstantExpr.cpp	/^hasConstantGEP (Value*  V)$/;"	f	file:
hasConstraintNode	svf/include/Graphs/ConsG.h	/^    inline bool hasConstraintNode(NodeID id) const$/;"	f	class:SVF::ConstraintGraph
hasCxtLock	svf/include/MTA/LockAnalysis.h	/^    inline bool hasCxtLock(const CxtLock& cxtLock) const$/;"	f	class:SVF::LockAnalysis
hasCxtLockfromCxtStmt	svf/include/MTA/LockAnalysis.h	/^    inline bool hasCxtLockfromCxtStmt(const CxtStmt& cts) const$/;"	f	class:SVF::LockAnalysis
hasCxtStmtfromInst	svf/include/MTA/LockAnalysis.h	/^    inline bool hasCxtStmtfromInst(const ICFGNode* inst) const$/;"	f	class:SVF::LockAnalysis
hasDRCheckFlag	svf/include/Util/Annotator.h	/^    inline bool hasDRCheckFlag(Instruction* inst) const$/;"	f	class:SVF::Annotator
hasDRCheckFlag	svf/include/Util/Annotator.h	/^    inline bool hasDRCheckFlag(const Instruction* inst) const$/;"	f	class:SVF::Annotator
hasDRNotCheckFlag	svf/include/Util/Annotator.h	/^    inline bool hasDRNotCheckFlag(Instruction* inst) const$/;"	f	class:SVF::Annotator
hasDRNotCheckFlag	svf/include/Util/Annotator.h	/^    inline bool hasDRNotCheckFlag(const Instruction* inst) const$/;"	f	class:SVF::Annotator
hasDef	svf/include/Graphs/SVFG.h	/^    inline bool hasDef(const PAGNode* pagNode) const$/;"	f	class:SVF::SVFG
hasDef	svf/include/Graphs/VFG.h	/^    inline bool hasDef(const PAGNode* pagNode) const$/;"	f	class:SVF::VFG
hasDefSVFGNode	svf/include/Graphs/SVFG.h	/^    inline bool hasDefSVFGNode(const PAGNode* pagNode) const$/;"	f	class:SVF::SVFG
hasEdge	svf-llvm/lib/DCHG.cpp	/^DCHEdge *DCHGraph::hasEdge(const DIType *t1, const DIType *t2, DCHEdge::GEdgeKind et)$/;"	f	class:DCHGraph
hasEdge	svf/include/CFL/CFLSolver.h	/^    inline bool hasEdge(const NodeID src, const NodeID dst, const Label ty)$/;"	f	class:SVF::POCRSolver
hasEdge	svf/include/Graphs/ConsG.h	/^    inline bool hasEdge(ConstraintNode* src, ConstraintNode* dst, ConstraintEdge::ConstraintEdgeK kind)$/;"	f	class:SVF::ConstraintGraph
hasEdge	svf/lib/Graphs/CFLGraph.cpp	/^const CFLEdge* CFLGraph::hasEdge(CFLNode* src, CFLNode* dst, CFLEdge::GEdgeFlag label)$/;"	f	class:CFLGraph
hasEdge	svf/lib/Graphs/CHG.cpp	/^static bool hasEdge(const CHNode *src, const CHNode *dst,$/;"	f	file:
hasEdgeDestLabels	svf/include/Graphs/DOTGraphTraits.h	/^    static bool hasEdgeDestLabels()$/;"	f	struct:SVF::DefaultDOTGraphTraits
hasExtFuncAnnotation	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::hasExtFuncAnnotation(const Function* fun, const std::string& funcAnnotation)$/;"	f	class:LLVMModuleSet
hasExtFuncAnnotation	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::hasExtFuncAnnotation(const FunObjVar *fun, const std::string &funcAnnotation)$/;"	f	class:ExtAPI
hasFlag	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline bool hasFlag(CLASSATTR mask) const$/;"	f	class:SVF::DCHNode
hasFlag	svf/include/Graphs/CHG.h	/^    inline bool hasFlag(CLASSATTR mask) const$/;"	f	class:SVF::CHNode
hasFlag	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool hasFlag(MEMTYPE mask)$/;"	f	class:SVF::ObjTypeInfo
hasFormalINSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline bool hasFormalINSVFGNodes(const FunObjVar* fun) const$/;"	f	class:SVF::SVFG
hasFormalOUTSVFGNodes	svf/include/Graphs/SVFG.h	/^    inline bool hasFormalOUTSVFGNodes(const FunObjVar* fun) const$/;"	f	class:SVF::SVFG
hasFunArgsList	svf/include/SVFIR/SVFIR.h	/^    inline bool hasFunArgsList(const FunObjVar* func) const$/;"	f	class:SVF::SVFIR
hasFuncEntryChi	svf/include/Graphs/SVFG.h	/^    inline bool hasFuncEntryChi(const FunObjVar*  func) const$/;"	f	class:SVF::SVFG
hasFuncEntryChi	svf/include/MSSA/MemSSA.h	/^    inline bool hasFuncEntryChi(const FunObjVar * fun) const$/;"	f	class:SVF::MemSSA
hasFuncRetMu	svf/include/Graphs/SVFG.h	/^    inline bool hasFuncRetMu(const FunObjVar*  func) const$/;"	f	class:SVF::SVFG
hasGNode	svf/include/Graphs/GenericGraph.h	/^    inline bool hasGNode(NodeID id) const$/;"	f	class:SVF::GenericGraph
hasGepObjOffsetFromBase	svf/include/AE/Svfexe/AEDetector.h	/^    bool hasGepObjOffsetFromBase(const GepObjVar* obj) const$/;"	f	class:SVF::BufOverflowDetector
hasGlobalRep	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    bool hasGlobalRep(const GlobalVariable* val) const$/;"	f	class:SVF::LLVMModuleSet
hasGraphEdge	svf/lib/Graphs/CallGraph.cpp	/^CallGraphEdge* CallGraph::hasGraphEdge(CallGraphNode* src,$/;"	f	class:CallGraph
hasGraphEdge	svf/lib/MTA/TCT.cpp	/^TCTEdge* TCT::hasGraphEdge(TCTNode* src, TCTNode* dst, TCTEdge::CEDGEK kind) const$/;"	f	class:TCT
hasICFGNode	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline bool hasICFGNode(const Instruction* inst)$/;"	f	class:SVF::ICFGBuilder
hasICFGNode	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::hasICFGNode(const Instruction* inst)$/;"	f	class:LLVMModuleSet
hasICFGNode	svf/include/Graphs/ICFG.h	/^    inline bool hasICFGNode(NodeID id) const$/;"	f	class:SVF::ICFG
hasIncomingEdge	svf/include/Graphs/GenericGraph.h	/^    inline EdgeType* hasIncomingEdge(EdgeType* edge) const$/;"	f	class:SVF::GenericNode
hasIncomingEdge	svf/include/Graphs/GenericGraph.h	/^    inline bool hasIncomingEdge() const$/;"	f	class:SVF::GenericNode
hasIncomingEdges	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasIncomingEdges(SVFStmt::PEDGEK kind) const$/;"	f	class:SVF::SVFVar
hasIncomingVariantGepEdge	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasIncomingVariantGepEdge() const$/;"	f	class:SVF::SVFVar
hasIndCSCallees	svf/include/Graphs/CallGraph.h	/^    inline bool hasIndCSCallees(const CallICFGNode* cs) const$/;"	f	class:SVF::CallGraph
hasIndCSCallees	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool hasIndCSCallees(const CallICFGNode* cs) const$/;"	f	class:SVF::PointerAnalysis
hasInd_h	svf/lib/CFL/CFLSolver.cpp	/^bool POCRHybridSolver::hasInd_h(NodeID src, NodeID dst)$/;"	f	class:POCRHybridSolver
hasInterICFGEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::hasInterICFGEdge(ICFGNode* src, ICFGNode* dst, ICFGEdge::ICFGEdgeK kind)$/;"	f	class:ICFG
hasInterVFGEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::hasInterVFGEdge(VFGNode* src, VFGNode* dst, VFGEdge::VFGEdgeK kind,CallSiteID csId)$/;"	f	class:VFG
hasInterleavingThreads	svf/include/MTA/MHP.h	/^    inline bool hasInterleavingThreads(const CxtThreadStmt& cts) const$/;"	f	class:SVF::MHP
hasIntersect	svf/include/AE/Core/AddressValue.h	/^    bool hasIntersect(const AddressValue &other)$/;"	f	class:SVF::AddressValue
hasIntraICFGEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::hasIntraICFGEdge(ICFGNode* src, ICFGNode* dst, ICFGEdge::ICFGEdgeK kind)$/;"	f	class:ICFG
hasIntraVFGEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::hasIntraVFGEdge(VFGNode* src, VFGNode* dst, VFGEdge::VFGEdgeK kind)$/;"	f	class:VFG
hasJoinInSymmetricLoop	svf/include/MTA/MHP.h	/^    inline bool hasJoinInSymmetricLoop(const CxtStmt& cs) const$/;"	f	class:SVF::ForkJoinAnalysis
hasJoinInSymmetricLoop	svf/lib/MTA/MHP.cpp	/^bool MHP::hasJoinInSymmetricLoop(const CallStrCxt& cxt, const ICFGNode* call) const$/;"	f	class:MHP
hasJoinLoop	svf/include/MTA/MHP.h	/^    inline bool hasJoinLoop(const CallICFGNode* inst)$/;"	f	class:SVF::ForkJoinAnalysis
hasJoinLoop	svf/include/MTA/TCT.h	/^    inline bool hasJoinLoop(const CallICFGNode* join) const$/;"	f	class:SVF::TCT
hasLabeledEdge	svf/lib/Graphs/IRGraph.cpp	/^SVFStmt* IRGraph::hasLabeledEdge(SVFVar* src, SVFVar* dst, SVFStmt::PEDGEK kind, const ICFGNode* callInst)$/;"	f	class:IRGraph
hasLabeledEdge	svf/lib/Graphs/IRGraph.cpp	/^SVFStmt* IRGraph::hasLabeledEdge(SVFVar* src, SVFVar* op1, SVFStmt::PEDGEK kind, const SVFVar* op2)$/;"	f	class:IRGraph
hasLoop	svf/include/MTA/TCT.h	/^    bool hasLoop(const ICFGNode* inst) const$/;"	f	class:SVF::TCT
hasLoop	svf/include/MTA/TCT.h	/^    bool hasLoop(const SVFBasicBlock* bb) const$/;"	f	class:SVF::TCT
hasLoopInfo	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasLoopInfo(const SVFBasicBlock* bb) const$/;"	f	class:SVF::FunObjVar
hasLoopInfo	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline bool hasLoopInfo(const SVFBasicBlock* bb) const$/;"	f	class:SVF::SVFLoopAndDomInfo
hasMU	svf/include/MSSA/MemSSA.h	/^    inline bool hasMU(const CallICFGNode* cs) const$/;"	f	class:SVF::MemSSA
hasMU	svf/include/MSSA/MemSSA.h	/^    inline bool hasMU(const PAGEdge* inst) const$/;"	f	class:SVF::MemSSA
hasModMRSet	svf/include/MSSA/MemRegion.h	/^    inline bool hasModMRSet(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
hasModSideEffectOfCallSite	svf/include/MSSA/MemRegion.h	/^    inline bool hasModSideEffectOfCallSite(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
hasNode	svf-llvm/include/SVF-LLVM/DCHG.h	/^    bool hasNode(const DIType* type)$/;"	f	class:SVF::DCHGraph
hasNodesToBeCollapsed	svf/include/Graphs/ConsG.h	/^    inline bool hasNodesToBeCollapsed() const$/;"	f	class:SVF::ConstraintGraph
hasNonlabeledEdge	svf/lib/Graphs/IRGraph.cpp	/^SVFStmt* IRGraph::hasNonlabeledEdge(SVFVar* src, SVFVar* dst, SVFStmt::PEDGEK kind)$/;"	f	class:IRGraph
hasOneCxtInLockSpan	svf/include/MTA/LockAnalysis.h	/^    inline bool hasOneCxtInLockSpan(const ICFGNode *I, LockSpan lspan) const$/;"	f	class:SVF::LockAnalysis
hasOutgoingEdge	svf/include/Graphs/GenericGraph.h	/^    inline EdgeType* hasOutgoingEdge(EdgeType* edge) const$/;"	f	class:SVF::GenericNode
hasOutgoingEdge	svf/include/Graphs/GenericGraph.h	/^    inline bool hasOutgoingEdge() const$/;"	f	class:SVF::GenericNode
hasOutgoingEdges	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasOutgoingEdges(SVFStmt::PEDGEK kind) const$/;"	f	class:SVF::SVFVar
hasPHISet	svf/include/MSSA/MemSSA.h	/^    inline bool hasPHISet(const SVFBasicBlock* bb) const$/;"	f	class:SVF::MemSSA
hasPTASVFStmtList	svf/include/SVFIR/SVFIR.h	/^    inline bool hasPTASVFStmtList(const ICFGNode* inst) const$/;"	f	class:SVF::SVFIR
hasParentThread	svf/include/MTA/TCT.h	/^    inline bool hasParentThread(NodeID tid) const$/;"	f	class:SVF::TCT
hasPointsTo	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool hasPointsTo(Cond cond) const$/;"	f	class:SVF::CondPointsToSet
hasProdsFromFirstRHS	svf/include/CFL/CFGrammar.h	/^    const bool hasProdsFromFirstRHS(const Symbol sym) const$/;"	f	class:SVF::CFGrammar
hasProdsFromSecondRHS	svf/include/CFL/CFGrammar.h	/^    const bool hasProdsFromSecondRHS(const Symbol sym) const$/;"	f	class:SVF::CFGrammar
hasProdsFromSingleRHS	svf/include/CFL/CFGrammar.h	/^    const bool hasProdsFromSingleRHS(const Symbol sym) const$/;"	f	class:SVF::CFGrammar
hasPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline bool hasPtsMap(void) const$/;"	f	class:SVF::CondPTAImpl
hasRefMRSet	svf/include/MSSA/MemRegion.h	/^    inline bool hasRefMRSet(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
hasRefSideEffectOfCallSite	svf/include/MSSA/MemRegion.h	/^    inline bool hasRefSideEffectOfCallSite(const CallICFGNode* cs)$/;"	f	class:SVF::MRGenerator
hasReturn	svf/include/SVFIR/SVFVariables.h	/^    inline bool hasReturn() const$/;"	f	class:SVF::FunObjVar
hasReturnMu	svf/include/MSSA/MemSSA.h	/^    inline bool hasReturnMu(const FunObjVar * fun) const$/;"	f	class:SVF::MemSSA
hasSBSinkFlag	svf/include/Util/Annotator.h	/^    inline bool hasSBSinkFlag(Instruction* inst) const$/;"	f	class:SVF::Annotator
hasSBSourceFlag	svf/include/Util/Annotator.h	/^    inline bool hasSBSourceFlag(Instruction* inst) const$/;"	f	class:SVF::Annotator
hasSVFGNode	svf/include/Graphs/SVFG.h	/^    inline bool hasSVFGNode(NodeID id) const$/;"	f	class:SVF::SVFG
hasSVFStmtList	svf/include/SVFIR/SVFIR.h	/^    inline bool hasSVFStmtList(const ICFGNode* inst) const$/;"	f	class:SVF::SVFIR
hasSVFStmtList	svf/lib/MSSA/MemRegion.cpp	/^bool MRGenerator::hasSVFStmtList(const ICFGNode* node)$/;"	f	class:MRGenerator
hasSVFTypeInfo	svf/include/Graphs/IRGraph.h	/^    inline bool hasSVFTypeInfo(const SVFType* T)$/;"	f	class:SVF::IRGraph
hasSpanfromCxtLock	svf/include/MTA/LockAnalysis.h	/^    inline bool hasSpanfromCxtLock(const CxtLock& cl)$/;"	f	class:SVF::LockAnalysis
hasTCTNode	svf/include/MTA/TCT.h	/^    inline bool hasTCTNode(const CxtThread& ct) const$/;"	f	class:SVF::TCT
hasThreadForkEdge	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool hasThreadForkEdge(const CallICFGNode* cs) const$/;"	f	class:SVF::ThreadCallGraph
hasThreadICFGEdge	svf/lib/Graphs/ICFG.cpp	/^ICFGEdge* ICFG::hasThreadICFGEdge(ICFGNode* src, ICFGNode* dst, ICFGEdge::ICFGEdgeK kind)$/;"	f	class:ICFG
hasThreadJoinEdge	svf/include/Graphs/ThreadCallGraph.h	/^    inline ThreadJoinEdge* hasThreadJoinEdge(const CallICFGNode* call, CallGraphNode* joinFunNode, CallGraphNode* threadRoutineFunNode, CallSiteID csId) const$/;"	f	class:SVF::ThreadCallGraph
hasThreadJoinEdge	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool hasThreadJoinEdge(const CallICFGNode* cs) const$/;"	f	class:SVF::ThreadCallGraph
hasThreadStmtSet	svf/include/MTA/MHP.h	/^    inline bool hasThreadStmtSet(const ICFGNode* inst) const$/;"	f	class:SVF::MHP
hasThreadVFGEdge	svf/lib/Graphs/VFG.cpp	/^VFGEdge* VFG::hasThreadVFGEdge(VFGNode* src, VFGNode* dst, VFGEdge::VFGEdgeK kind)$/;"	f	class:VFG
hasVFGNode	svf/include/Graphs/VFG.h	/^    inline bool hasVFGNode(NodeID id) const$/;"	f	class:SVF::VFG
hasVFGNodes	svf/include/Graphs/VFG.h	/^    inline bool hasVFGNodes(const FunObjVar *fun) const$/;"	f	class:SVF::VFG
hasValueNode	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::hasValueNode(const Value *val)$/;"	f	class:LLVMModuleSet
has_edgetype	svf/include/Graphs/WTO.h	/^struct has_edgetype<T, std::void_t<typename T::EdgeType>> : std::true_type$/;"	s	namespace:SVF
has_edgetype	svf/include/Graphs/WTO.h	/^template <typename T, typename = void> struct has_edgetype : std::false_type$/;"	s	namespace:SVF
has_interp	z3.obj/include/z3++.h	/^        bool has_interp(func_decl f) const {$/;"	f	class:z3::model
has_nodetype	svf/include/Graphs/WTO.h	/^struct has_nodetype<T, std::void_t<typename T::NodeType>> : std::true_type$/;"	s	namespace:SVF
has_nodetype	svf/include/Graphs/WTO.h	/^template <typename T, typename = void> struct has_nodetype : std::false_type$/;"	s	namespace:SVF
hash	svf/include/AE/Core/RelExeState.h	/^    u32_t hash() const$/;"	f	class:SVF::RelExeState
hash	svf/include/AE/Core/RelExeState.h	/^struct std::hash<SVF::RelExeState>$/;"	s	class:std
hash	svf/include/MemoryModel/AccessPath.h	/^template <> struct std::hash<SVF::AccessPath>$/;"	s	class:std
hash	svf/include/MemoryModel/ConditionalPT.h	/^struct std::hash<SVF::CondStdSet<Element>>$/;"	s	class:std
hash	svf/include/MemoryModel/ConditionalPT.h	/^struct std::hash<SVF::CondVar<Cond>>$/;"	s	class:std
hash	svf/include/MemoryModel/ConditionalPT.h	/^struct std::hash<const SVF::CondVar<Cond>>$/;"	s	class:std
hash	svf/include/MemoryModel/PointsTo.h	/^struct std::hash<SVF::PointsTo>$/;"	s	class:std
hash	svf/include/SVFIR/SVFType.h	/^template <> struct std::hash<SVF::NodePair>$/;"	s	class:std
hash	svf/include/SVFIR/SVFType.h	/^template <typename T> struct std::hash<std::vector<T>>$/;"	s	class:std
hash	svf/include/SVFIR/SVFType.h	/^template <unsigned N> struct std::hash<SVF::SparseBitVector<N>>$/;"	s	class:std
hash	svf/include/Util/CxtStmt.h	/^template <> struct std::hash<SVF::CxtProc>$/;"	s	class:std
hash	svf/include/Util/CxtStmt.h	/^template <> struct std::hash<SVF::CxtStmt>$/;"	s	class:std
hash	svf/include/Util/CxtStmt.h	/^template <> struct std::hash<SVF::CxtThread>$/;"	s	class:std
hash	svf/include/Util/CxtStmt.h	/^template <> struct std::hash<SVF::CxtThreadProc>$/;"	s	class:std
hash	svf/include/Util/CxtStmt.h	/^template <> struct std::hash<SVF::CxtThreadStmt>$/;"	s	class:std
hash	svf/include/Util/DPItem.h	/^struct std::hash<SVF::ContextCond>$/;"	s	class:std
hash	svf/include/Util/DPItem.h	/^struct std::hash<SVF::CxtDPItem>$/;"	s	class:std
hash	svf/include/Util/DPItem.h	/^struct std::hash<SVF::CxtStmtDPItem<LocCond>>$/;"	s	class:std
hash	svf/include/Util/DPItem.h	/^struct std::hash<SVF::StmtDPItem<LocCond>>$/;"	s	class:std
hash	svf/include/Util/DPItem.h	/^struct std::hash<const SVF::ContextCond>$/;"	s	class:std
hash	svf/include/Util/Z3Expr.h	/^    inline u32_t hash() const$/;"	f	class:SVF::Z3Expr
hash	svf/include/Util/Z3Expr.h	/^struct std::hash<SVF::Z3Expr>$/;"	s	class:std
hash	svf/lib/AE/Core/AbstractState.cpp	/^u32_t AbstractState::hash() const$/;"	f	class:AbstractState
hash	svf/lib/MemoryModel/PointsTo.cpp	/^size_t PointsTo::hash() const$/;"	f	class:SVF::PointsTo
hash	svf/lib/Util/CoreBitVector.cpp	/^size_t CoreBitVector::hash(void) const$/;"	f	class:SVF::CoreBitVector
hash	z3.obj/bin/python/z3/z3.py	/^    def hash(self):$/;"	m	class:AstRef
hash	z3.obj/include/z3++.h	/^        unsigned hash() const { unsigned r = Z3_get_ast_hash(ctx(), m_ast); check_error(); return r; }$/;"	f	class:z3::ast
hclustMethodToString	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::hclustMethodToString(hclust_fast_methods method)$/;"	f	class:SVFUtil
hclust_fast	svf/lib/FastCluster/fastcluster.cpp	/^int hclust_fast(int n, double* distmat, int method, int* merge, double* height)$/;"	f
hclust_fast_methods	svf/include/FastCluster/fastcluster.h	/^enum hclust_fast_methods$/;"	g
head	svf/include/Graphs/WTO.h	/^    const WTONode<GraphT>* head() const$/;"	f	class:SVF::final
head	svf/include/Util/WorkList.h	/^    Node *head;$/;"	m	class:SVF::List
headBegin	svf/include/Graphs/WTO.h	/^    typename NodeRefToWTOCycleMap::const_iterator headBegin() const$/;"	f	class:SVF::WTO
headEnd	svf/include/Graphs/WTO.h	/^    typename NodeRefToWTOCycleMap::const_iterator headEnd() const$/;"	f	class:SVF::WTO
headRefToCycle	svf/include/Graphs/WTO.h	/^    NodeRefToWTOCycleMap headRefToCycle;$/;"	m	class:SVF::WTO
heapAllocatorViaIndCall	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::heapAllocatorViaIndCall(const CallICFGNode* cs)$/;"	f	class:CFLAlias
heapAllocatorViaIndCall	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::heapAllocatorViaIndCall(const CallICFGNode* cs, NodePairSet &cpySrcNodes)$/;"	f	class:AndersenBase
help	z3.obj/bin/python/z3/z3.py	/^    def help(self):$/;"	m	class:Fixedpoint
help	z3.obj/bin/python/z3/z3.py	/^    def help(self):$/;"	m	class:Optimize
help	z3.obj/bin/python/z3/z3.py	/^    def help(self):$/;"	m	class:Solver
help	z3.obj/bin/python/z3/z3.py	/^    def help(self):$/;"	m	class:Tactic
help	z3.obj/include/z3++.h	/^        std::string help() const { char const * r = Z3_optimize_get_help(ctx(), m_opt); check_error();  return r; }$/;"	f	class:z3::optimize
help	z3.obj/include/z3++.h	/^        std::string help() const { char const * r = Z3_tactic_get_help(ctx(), m_tactic); check_error();  return r; }$/;"	f	class:z3::tactic
help	z3.obj/include/z3++.h	/^        std::string help() const { return Z3_fixedpoint_get_help(ctx(), m_fp); }$/;"	f	class:z3::fixedpoint
help_simplify	z3.obj/bin/python/z3/z3.py	/^def help_simplify():$/;"	f
hi	z3.obj/include/z3++.h	/^        unsigned hi() const { assert (is_app() && Z3_get_decl_num_parameters(ctx(), decl()) == 2); return static_cast<unsigned>(Z3_get_decl_int_parameter(ctx(), decl(), 0)); }$/;"	f	class:z3::expr
hooks	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	v
hooks	svf/lib/Util/cJSON.cpp	/^    internal_hooks hooks;$/;"	m	struct:__anon16	file:
hooks	svf/lib/Util/cJSON.cpp	/^    internal_hooks hooks;$/;"	m	struct:__anon17	file:
icfg	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    ICFG* icfg;$/;"	m	class:SVF::ICFGBuilder
icfg	svf/include/AE/Svfexe/AbsExtAPI.h	/^    ICFG* icfg; \/\/\/< Pointer to the interprocedural control flow graph.$/;"	m	class:SVF::AbsExtAPI
icfg	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    ICFG* icfg;$/;"	m	class:SVF::AbstractInterpretation
icfg	svf/include/Graphs/ICFGStat.h	/^    ICFG *icfg;$/;"	m	class:SVF::ICFGStat
icfg	svf/include/MemoryModel/PointerAnalysis.h	/^    ICFG* icfg;$/;"	m	class:SVF::PointerAnalysis
icfg	svf/include/SVFIR/SVFIR.h	/^    ICFG* icfg; \/\/ ICFG$/;"	m	class:SVF::SVFIR
icfgNode	svf/include/Graphs/VFGNode.h	/^    const ICFGNode* icfgNode;$/;"	m	class:SVF::VFGNode
icfgNode	svf/include/SVFIR/SVFStatements.h	/^    ICFGNode* icfgNode;              \/\/\/< ICFGNode$/;"	m	class:SVF::SVFStmt
icfgNode	svf/include/SVFIR/SVFVariables.h	/^    const ICFGNode* icfgNode; \/\/ icfgnode related to valvar$/;"	m	class:SVF::ValVar
icfgNode	svf/include/SVFIR/SVFVariables.h	/^    const ICFGNode* icfgNode; \/\/\/ ICFGNode related to the creation of this object$/;"	m	class:SVF::BaseObjVar
icfgNode2PTASVFStmtsMap	svf/include/SVFIR/SVFIR.h	/^    ICFGNode2SVFStmtsMap icfgNode2PTASVFStmtsMap;	\/\/\/< Map an ICFGNode to its PointerAnalysis related SVFStmts$/;"	m	class:SVF::SVFIR
icfgNode2SVFStmtsMap	svf/include/SVFIR/SVFIR.h	/^    ICFGNode2SVFStmtsMap icfgNode2SVFStmtsMap;	\/\/\/< Map an ICFGNode to its SVFStmts$/;"	m	class:SVF::SVFIR
icfgNodeToSVFLoopVec	svf/include/Graphs/ICFG.h	/^    ICFGNodeToSVFLoopVec icfgNodeToSVFLoopVec; \/\/\/< map ICFG node to the SVF loops where it resides$/;"	m	class:SVF::ICFG
icfgNodes	svf/include/MemoryModel/SVFLoop.h	/^    ICFGNodeSet icfgNodes;$/;"	m	class:SVF::SVFLoop
iconv	svf-llvm/lib/extapi.c	/^unsigned long iconv(void* cd, char **restrict inbuf, unsigned long *restrict inbytesleft, char **restrict outbuf, unsigned long *restrict outbytesleft)$/;"	f
iconv_open	svf-llvm/lib/extapi.c	/^void *iconv_open(const char *tocode, const char *fromcode)$/;"	f
id	svf/include/CFL/CFLSolver.h	/^        NodeID id;$/;"	m	struct:SVF::POCRHybridSolver::TreeNode
id	svf/include/SVFIR/SVFValue.h	/^    NodeID id;		\/\/\/< Node ID$/;"	m	class:SVF::SVFValue
id	svf/include/Util/Z3Expr.h	/^    inline u32_t id() const$/;"	f	class:SVF::Z3Expr
id	z3.obj/include/z3++.h	/^        unsigned id() const { unsigned r = Z3_get_ast_id(ctx(), m_ast); check_error(); return r; }$/;"	f	class:z3::expr
id	z3.obj/include/z3++.h	/^        unsigned id() const { unsigned r = Z3_get_func_decl_id(ctx(), *this); check_error(); return r; }$/;"	f	class:z3::func_decl
id	z3.obj/include/z3++.h	/^        unsigned id() const { unsigned r = Z3_get_sort_id(ctx(), *this); check_error(); return r; }$/;"	f	class:z3::sort
idCounter	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PointsToID idCounter;$/;"	m	class:SVF::PersistentPointsToCache
idToCSMap	svf/include/Graphs/CallGraph.h	/^    static IdToCallSiteMap idToCSMap;	\/\/\/< Map a callsite ID to a pair of call instruction and callee$/;"	m	class:SVF::CallGraph
idToCSMap	svf/lib/Graphs/CallGraph.cpp	/^CallGraph::IdToCallSiteMap CallGraph::idToCSMap;$/;"	m	class:CallGraph	file:
idToObjTypeInfoMap	svf/include/Graphs/IRGraph.h	/^    inline IDToTypeInfoMapTy& idToObjTypeInfoMap()$/;"	f	class:SVF::IRGraph
idToObjTypeInfoMap	svf/include/Graphs/IRGraph.h	/^    inline const IDToTypeInfoMapTy& idToObjTypeInfoMap() const$/;"	f	class:SVF::IRGraph
idToPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    std::vector<std::unique_ptr<Data>> idToPts;$/;"	m	class:SVF::PersistentPointsToCache
idToTermInstMap	svf/include/SABER/SaberCondAllocator.h	/^    IndexToTermInstMap idToTermInstMap;     \/\/\/key: z3 expression id, value: instruction$/;"	m	class:SVF::SaberCondAllocator
idxOperandPairs	svf/include/MemoryModel/AccessPath.h	/^    IdxOperandPairs idxOperandPairs;	\/\/\/< a vector of actual offset in the form of <SVF Var, iterator type>$/;"	m	class:SVF::AccessPath
implies	z3.obj/include/z3++.h	/^    inline expr implies(bool a, expr const & b) { return implies(b.ctx().bool_val(a), b); }$/;"	f	namespace:z3
implies	z3.obj/include/z3++.h	/^    inline expr implies(expr const & a, bool b) { return implies(a, a.ctx().bool_val(b)); }$/;"	f	namespace:z3
implies	z3.obj/include/z3++.h	/^    inline expr implies(expr const & a, expr const & b) {$/;"	f	namespace:z3
import_model_converter	z3.obj/bin/python/z3/z3.py	/^    def import_model_converter(self, other):$/;"	m	class:Solver
inAddrToAddrsTable	svf/include/AE/Core/AbstractState.h	/^    inline bool inAddrToAddrsTable(u32_t id) const$/;"	f	class:SVF::AbstractState
inAddrToValTable	svf/include/AE/Core/AbstractState.h	/^    inline virtual bool inAddrToValTable(u32_t id) const$/;"	f	class:SVF::AbstractState
inBackwardSlice	svf/include/Graphs/SVFGStat.h	/^    inline bool inBackwardSlice(const SVFGNode* node) const$/;"	f	class:SVF::SVFGStat
inBackwardSlice	svf/include/SABER/ProgSlice.h	/^    inline bool inBackwardSlice(const SVFGNode* node)$/;"	f	class:SVF::ProgSlice
inCFLEdges	svf/include/Graphs/CFLGraph.h	/^    CFLEdgeDataTy inCFLEdges;$/;"	m	class:SVF::CFLNode
inEdgesBegin	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator inEdgesBegin()$/;"	f	class:SVF::SVFLoop
inEdgesEnd	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator inEdgesEnd()$/;"	f	class:SVF::SVFLoop
inForwardSlice	svf/include/Graphs/SVFGStat.h	/^    inline bool inForwardSlice(const SVFGNode* node) const$/;"	f	class:SVF::SVFGStat
inForwardSlice	svf/include/SABER/ProgSlice.h	/^    inline bool inForwardSlice(const SVFGNode* node)$/;"	f	class:SVF::ProgSlice
inICFGEdges	svf/include/MemoryModel/SVFLoop.h	/^    ICFGEdgeSet entryICFGEdges, backICFGEdges, inICFGEdges, outICFGEdges;$/;"	m	class:SVF::SVFLoop
inRecurJoinSites	svf/include/MTA/TCT.h	/^    Set<const ICFGNode*>  inRecurJoinSites;	\/\/\/< Fork or Join sites in recursions$/;"	m	class:SVF::TCT
inSCC	svf/include/Graphs/SCC.h	/^        inline bool inSCC(void)   const$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
inSCC	svf/include/Graphs/SCC.h	/^        inline void inSCC(bool v)$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
inSCC	svf/include/Graphs/SCC.h	/^    inline bool inSCC(NodeID n)$/;"	f	class:SVF::SCCDetection
inSameCallGraphSCC	svf/include/MTA/TCT.h	/^    inline bool inSameCallGraphSCC(const CallGraphNode* src,const CallGraphNode* dst)$/;"	f	class:SVF::TCT
inSameCallGraphSCC	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool inSameCallGraphSCC(const FunObjVar* fun1,const FunObjVar* fun2)$/;"	f	class:SVF::PointerAnalysis
inUpdatedVarMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    UpdatedVarMap inUpdatedVarMap;$/;"	m	class:SVF::MutableIncDFPTData
inUpdatedVarMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    UpdatedVarMap inUpdatedVarMap;$/;"	m	class:SVF::PersistentIncDFPTData
inVarToAddrsTable	svf/include/AE/Core/AbstractState.h	/^    inline bool inVarToAddrsTable(u32_t id) const$/;"	f	class:SVF::AbstractState
inVarToValTable	svf/include/AE/Core/AbstractState.h	/^    inline virtual bool inVarToValTable(u32_t id) const$/;"	f	class:SVF::AbstractState
in_cycleDepth_table	svf/include/Graphs/WTO.h	/^    inline bool in_cycleDepth_table(const NodeT* n) const$/;"	f	class:SVF::WTO
in_html_mode	z3.obj/bin/python/z3/z3printer.py	/^def in_html_mode():$/;"	f
in_re	z3.obj/include/z3++.h	/^    inline expr in_re(expr const& s, expr const& re) {$/;"	f	namespace:z3
inc	z3.obj/include/z3++.h	/^            void inc() {$/;"	f	class:z3::solver::cube_iterator
incEdgeNum	svf/include/Graphs/GenericGraph.h	/^    inline void incEdgeNum()$/;"	f	class:SVF::GenericGraph
incNodeNum	svf/include/Graphs/GenericGraph.h	/^    inline void incNodeNum()$/;"	f	class:SVF::GenericGraph
incomingAddrEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy& incomingAddrEdges()$/;"	f	class:SVF::ConstraintNode
incomingAddrsBegin	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator incomingAddrsBegin() const$/;"	f	class:SVF::ConstraintNode
incomingAddrsEnd	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator incomingAddrsEnd() const$/;"	f	class:SVF::ConstraintNode
incomingLoadsBegin	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator incomingLoadsBegin() const$/;"	f	class:SVF::ConstraintNode
incomingLoadsEnd	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator incomingLoadsEnd() const$/;"	f	class:SVF::ConstraintNode
incomingStoresBegin	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator incomingStoresBegin() const$/;"	f	class:SVF::ConstraintNode
incomingStoresEnd	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator incomingStoresEnd() const$/;"	f	class:SVF::ConstraintNode
inconsistent	z3.obj/bin/python/z3/z3.py	/^    def inconsistent(self):$/;"	m	class:Goal
inconsistent	z3.obj/include/z3++.h	/^        bool inconsistent() const { return Z3_goal_inconsistent(ctx(), m_goal); }$/;"	f	class:z3::goal
increaseNumOfObjAndNodes	svf/include/Util/NodeIDAllocator.h	/^    inline void increaseNumOfObjAndNodes()$/;"	f	class:SVF::NodeIDAllocator
increaseStackSize	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::increaseStackSize()$/;"	f	class:SVFUtil
incycle	svf/include/Util/CxtStmt.h	/^    bool incycle;$/;"	m	class:SVF::CxtThread
indCallSiteToFunPtrMap	svf/include/SVFIR/SVFIR.h	/^    CallSiteToFunPtrMap indCallSiteToFunPtrMap; \/\/\/< Map an indirect callsite to its function pointer$/;"	m	class:SVF::SVFIR
indMap	svf/include/CFL/CFLSolver.h	/^    Map<NodeID, std::unordered_map<NodeID, TreeNode*>> indMap;   \/\/ indMap[v][u] points to node v in tree(u)$/;"	m	class:SVF::POCRHybridSolver
indVFEdgeEnd	svf/include/Graphs/SVFGStat.h	/^    void indVFEdgeEnd()$/;"	f	class:SVF::SVFGStat
indVFEdgeStart	svf/include/Graphs/SVFGStat.h	/^    void indVFEdgeStart()$/;"	f	class:SVF::SVFGStat
indent	svf-llvm/lib/DCHG.cpp	/^static std::string indent(size_t n)$/;"	f	file:
indent	z3.obj/bin/python/z3/z3printer.py	/^def indent(i, arg):$/;"	f
index	svf-llvm/lib/extapi.c	/^char* index(const char *s, int c)$/;"	f
index	svf/include/Util/SparseBitVector.h	/^    unsigned index() const$/;"	f	struct:SVF::SparseBitVectorElement
index	svf/include/WPA/VersionedFlowSensitive.h	/^            int index;$/;"	m	struct:SVF::VersionedFlowSensitive::SCC::NodeData
indexForBit	svf/lib/Util/CoreBitVector.cpp	/^size_t CoreBitVector::indexForBit(u32_t bit) const$/;"	f	class:SVF::CoreBitVector
indexof	z3.obj/include/z3++.h	/^    inline expr indexof(expr const& s, expr const& substr, expr const& offset) {$/;"	f	namespace:z3
indirectCallFunPass	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::indirectCallFunPass(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
indirectCallMap	svf/include/Graphs/CallGraph.h	/^    CallEdgeMap indirectCallMap;$/;"	m	class:SVF::CallGraph
indirectCalls	svf/include/Graphs/CallGraph.h	/^    CallInstSet indirectCalls;$/;"	m	class:SVF::CallGraphEdge
indirectCallsBegin	svf/include/Graphs/CallGraph.h	/^    inline CallInstSet::const_iterator indirectCallsBegin() const$/;"	f	class:SVF::CallGraphEdge
indirectCallsEnd	svf/include/Graphs/CallGraph.h	/^    inline CallInstSet::const_iterator indirectCallsEnd() const$/;"	f	class:SVF::CallGraphEdge
indirectPropaTime	svf/include/WPA/FlowSensitive.h	/^    double indirectPropaTime; \/\/\/< time of points-to propagation of top-level pointers$/;"	m	class:SVF::FlowSensitive
inet_ntoa	svf-llvm/lib/extapi.c	/^char *inet_ntoa(unsigned int in)$/;"	f
inet_ntop	svf-llvm/lib/extapi.c	/^const char *inet_ntop(int af, const void *restrict src,  char *restrict dst, unsigned int size)$/;"	f
inferFieldIdxFromByteOffset	svf-llvm/lib/SVFIRBuilder.cpp	/^u32_t SVFIRBuilder::inferFieldIdxFromByteOffset(const llvm::GEPOperator* gepOp, DataLayout *dl, AccessPath& ap, APOffset idx)$/;"	f	class:SVFIRBuilder
inferObjType	svf-llvm/lib/ObjTypeInference.cpp	/^const Type *ObjTypeInference::inferObjType(const Value *var)$/;"	f	class:ObjTypeInference
inferObjType	svf-llvm/lib/SymbolTableBuilder.cpp	/^const Type* SymbolTableBuilder::inferObjType(const Value *startValue)$/;"	f	class:SymbolTableBuilder
inferPointsToType	svf-llvm/lib/ObjTypeInference.cpp	/^const Type *ObjTypeInference::inferPointsToType(const Value *var)$/;"	f	class:ObjTypeInference
inferThisPtrClsName	svf-llvm/lib/ObjTypeInference.cpp	/^Set<std::string> &ObjTypeInference::inferThisPtrClsName(const Value *thisPtr)$/;"	f	class:ObjTypeInference
inferTypeOfHeapObjOrStaticObj	svf-llvm/lib/SymbolTableBuilder.cpp	/^const Type* SymbolTableBuilder::inferTypeOfHeapObjOrStaticObj(const Instruction *inst)$/;"	f	class:SymbolTableBuilder
infersiteToType	svf-llvm/lib/ObjTypeInference.cpp	/^const Type *infersiteToType(const Value *val)$/;"	f
infix_args	z3.obj/bin/python/z3/z3printer.py	/^    def infix_args(self, a, d, xs):$/;"	m	class:Formatter
infix_args_core	z3.obj/bin/python/z3/z3printer.py	/^    def infix_args_core(self, a, d, xs, r):$/;"	m	class:Formatter
info_arch	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_extensions_default	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_extensions_default	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_standard_default	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v
info_language_standard_default	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v
info_platform	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version_internal	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
info_version_internal	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
init	svf/include/Graphs/WTO.h	/^    void init()$/;"	f	class:SVF::WTO
init	svf/lib/SABER/SaberCheckerAPI.cpp	/^void SaberCheckerAPI::init()$/;"	f	class:SaberCheckerAPI
init	svf/lib/Util/ThreadAPI.cpp	/^void ThreadAPI::init()$/;"	f	class:ThreadAPI
init	z3.obj/include/z3++.h	/^        void init(Z3_apply_result s) {$/;"	f	class:z3::apply_result
init	z3.obj/include/z3++.h	/^        void init(Z3_ast_vector v) { Z3_ast_vector_inc_ref(ctx(), v); m_vector = v; }$/;"	f	class:z3::ast_vector_tpl
init	z3.obj/include/z3++.h	/^        void init(Z3_func_entry e) {$/;"	f	class:z3::func_entry
init	z3.obj/include/z3++.h	/^        void init(Z3_func_interp e) {$/;"	f	class:z3::func_interp
init	z3.obj/include/z3++.h	/^        void init(Z3_goal s) {$/;"	f	class:z3::goal
init	z3.obj/include/z3++.h	/^        void init(Z3_model m) {$/;"	f	class:z3::model
init	z3.obj/include/z3++.h	/^        void init(Z3_probe s) {$/;"	f	class:z3::probe
init	z3.obj/include/z3++.h	/^        void init(Z3_solver s) {$/;"	f	class:z3::solver
init	z3.obj/include/z3++.h	/^        void init(Z3_stats e) {$/;"	f	class:z3::stats
init	z3.obj/include/z3++.h	/^        void init(Z3_tactic s) {$/;"	f	class:z3::tactic
init	z3.obj/include/z3++.h	/^        void init(config & c) {$/;"	f	class:z3::context
initCxtInsensitiveEdges	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::initCxtInsensitiveEdges(PointerAnalysis* pta, const SVFG* svfg,const SVFGSCC* svfgSCC, SVFGEdgeSet& insensitveEdges)$/;"	f	class:DDAPass
initDefault	svf/lib/DDA/DDAStat.cpp	/^void DDAStat::initDefault()$/;"	f	class:DDAStat
initDomTree	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::initDomTree(FunObjVar* svffun, const Function* fun)$/;"	f	class:SVFIRBuilder
initExtAPIBufOverflowCheckRules	svf/lib/AE/Svfexe/AEDetector.cpp	/^void BufOverflowDetector::initExtAPIBufOverflowCheckRules()$/;"	f	class:BufOverflowDetector
initExtFunMap	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^void AbsExtAPI::initExtFunMap()$/;"	f	class:AbsExtAPI
initFunObjVar	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::initFunObjVar()$/;"	f	class:SVFIRBuilder
initFunObjVar	svf/lib/SVFIR/SVFVariables.cpp	/^void FunObjVar::initFunObjVar(bool decl, bool intrinc, bool addr, bool uncalled, bool notret, bool vararg,$/;"	f	class:FunObjVar
initObjVar	svf/lib/AE/Core/AbstractState.cpp	/^void AbstractState::initObjVar(ObjVar* objVar)$/;"	f	class:AbstractState
initSVFBasicBlock	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::initSVFBasicBlock(const Function* func)$/;"	f	class:SVFIRBuilder
initSnks	svf/lib/SABER/LeakChecker.cpp	/^void LeakChecker::initSnks()$/;"	f	class:LeakChecker
initSrcs	svf/lib/SABER/LeakChecker.cpp	/^void LeakChecker::initSrcs()$/;"	f	class:LeakChecker
initStats	svf/include/MemoryModel/PersistentPointsToCache.h	/^    inline void initStats(void)$/;"	f	class:SVF::PersistentPointsToCache
initTypeInfo	svf-llvm/lib/SymbolTableBuilder.cpp	/^void SymbolTableBuilder::initTypeInfo(ObjTypeInfo* typeinfo, const Value* val,$/;"	f	class:SymbolTableBuilder
initWTO	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::initWTO()$/;"	f	class:AbstractInterpretation
initWorklist	svf/include/WPA/Andersen.h	/^    virtual void initWorklist() {}$/;"	f	class:SVF::Andersen
initWorklist	svf/include/WPA/WPASolver.h	/^    virtual inline void initWorklist()$/;"	f	class:SVF::WPASolver
initialWorkList	svf/include/Graphs/SVFGOPT.h	/^    inline void initialWorkList()$/;"	f	class:SVF::SVFGOPT
initialise	svf/include/DDA/DDAClient.h	/^    virtual inline void initialise() {}$/;"	f	class:SVF::DDAClient
initialiseBaseObjVars	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::initialiseBaseObjVars()$/;"	f	class:SVFIRBuilder
initialiseCandidatePointers	svf/lib/SVFIR/SVFIR.cpp	/^void SVFIR::initialiseCandidatePointers()$/;"	f	class:SVFIR
initialiseNodes	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::initialiseNodes()$/;"	f	class:SVFIRBuilder
initialiseValVars	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::initialiseValVars()$/;"	f	class:SVFIRBuilder
initialize	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::initialize()$/;"	f	class:CFLAlias
initialize	svf/lib/CFL/CFLSolver.cpp	/^void CFLSolver::initialize()$/;"	f	class:CFLSolver
initialize	svf/lib/CFL/CFLSolver.cpp	/^void POCRHybridSolver::initialize()$/;"	f	class:POCRHybridSolver
initialize	svf/lib/CFL/CFLSolver.cpp	/^void POCRSolver::initialize()$/;"	f	class:POCRSolver
initialize	svf/lib/CFL/CFLVF.cpp	/^void CFLVF::initialize()$/;"	f	class:CFLVF
initialize	svf/lib/DDA/ContextDDA.cpp	/^void ContextDDA::initialize()$/;"	f	class:ContextDDA
initialize	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::initialize()$/;"	f	class:PointerAnalysis
initialize	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::initialize()$/;"	f	class:SrcSnkDDA
initialize	svf/lib/WPA/Andersen.cpp	/^void Andersen::initialize()$/;"	f	class:Andersen
initialize	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::initialize()$/;"	f	class:AndersenBase
initialize	svf/lib/WPA/AndersenSFR.cpp	/^void AndersenSFR::initialize()$/;"	f	class:AndersenSFR
initialize	svf/lib/WPA/AndersenWaveDiff.cpp	/^void AndersenWaveDiff::initialize()$/;"	f	class:AndersenWaveDiff
initialize	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::initialize()$/;"	f	class:FlowSensitive
initialize	svf/lib/WPA/TypeAnalysis.cpp	/^void TypeAnalysis::initialize()$/;"	f	class:TypeAnalysis
initialize	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::initialize()$/;"	f	class:VersionedFlowSensitive
initializeSolver	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::initializeSolver()$/;"	f	class:CFLAlias
initializeSolver	svf/lib/CFL/CFLAlias.cpp	/^void POCRAlias::initializeSolver()$/;"	f	class:POCRAlias
initializeSolver	svf/lib/CFL/CFLAlias.cpp	/^void POCRHybrid::initializeSolver()$/;"	f	class:POCRHybrid
initscr	svf-llvm/lib/extapi.c	/^void *initscr(void)$/;"	f
inloop	svf/include/Util/CxtStmt.h	/^    bool inloop;$/;"	m	class:SVF::CxtThread
insensitveEdges	svf/include/DDA/ContextDDA.h	/^    ConstSVFGEdgeSet insensitveEdges;\/\/\/< insensitive call-return edges$/;"	m	class:SVF::ContextDDA
insert	svf/include/AE/Core/AddressValue.h	/^    std::pair<AddressValue::AddrSet::iterator, bool> insert(u32_t id)$/;"	f	class:SVF::AddressValue
insert	z3.obj/bin/python/z3/z3.py	/^    def insert(self, *args):$/;"	m	class:Fixedpoint
insert	z3.obj/bin/python/z3/z3.py	/^    def insert(self, *args):$/;"	m	class:Goal
insert	z3.obj/bin/python/z3/z3.py	/^    def insert(self, *args):$/;"	m	class:Solver
insertAttribute	svf/lib/CFL/CFGrammar.cpp	/^void GrammarBase::insertAttribute(Kind kind, Attribute attribute)$/;"	f	class:GrammarBase
insertBranchCondition	svf/include/Graphs/CDG.h	/^    void insertBranchCondition(const SVFVar *pNode, s32_t branchID)$/;"	f	class:SVF::CDGEdge
insertEBNFSigns	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Symbol GrammarBase::insertEBNFSigns(std::string symbolStr)$/;"	f	class:GrammarBase
insertEdge_h	svf/include/CFL/CFLSolver.h	/^    void insertEdge_h(TreeNode* u, TreeNode* v)$/;"	f	class:SVF::POCRHybridSolver
insertKey	svf/include/Util/SVFUtil.h	/^inline void insertKey(const Key &key, KeySet &keySet)$/;"	f	namespace:SVF::SVFUtil
insertKey	svf/include/Util/SVFUtil.h	/^inline void insertKey(const NodeID &key, NodeBS &keySet)$/;"	f	namespace:SVF::SVFUtil
insertNonTerminalSymbol	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Symbol GrammarBase::insertNonTerminalSymbol(std::string symbolStr)$/;"	f	class:GrammarBase
insertNonterminalKind	svf/lib/CFL/CFGrammar.cpp	/^inline GrammarBase::Kind GrammarBase::insertNonterminalKind(std::string const kindStr)$/;"	f	class:GrammarBase
insertPHI	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::insertPHI(const FunObjVar& fun)$/;"	f	class:MemSSA
insertSymbol	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Symbol GrammarBase::insertSymbol(std::string symbolStr)$/;"	f	class:GrammarBase
insertTerminalKind	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Kind GrammarBase::insertTerminalKind(std::string kindStr)$/;"	f	class:GrammarBase
insertTerminalSymbol	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Symbol GrammarBase::insertTerminalSymbol(std::string symbolStr)$/;"	f	class:GrammarBase
insertToCFLGrammar	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::insertToCFLGrammar(CFGrammar *grammar, GrammarBase::Production &prod)$/;"	f	class:CFGNormalizer
insert_line_breaks	z3.obj/bin/python/z3/z3printer.py	/^def insert_line_breaks(s, width):$/;"	f
inst	svf/include/MSSA/MSSAMuChi.h	/^    const LoadStmt* inst;$/;"	m	class:SVF::LoadMU
inst	svf/include/MSSA/MSSAMuChi.h	/^    const StoreStmt* inst;$/;"	m	class:SVF::StoreCHI
inst	svf/include/Util/CxtStmt.h	/^    const ICFGNode* inst;$/;"	m	class:SVF::CxtStmt
inst2LabelMap	svf/include/SVFIR/SVFStatements.h	/^    static Inst2LabelMap inst2LabelMap; \/\/\/< Call site Instruction to label map$/;"	m	class:SVF::SVFStmt
inst2LabelMap	svf/lib/SVFIR/SVFStatements.cpp	/^SVFStmt::Inst2LabelMap SVFStmt::inst2LabelMap;$/;"	m	class:SVFStmt	file:
instCILocksMap	svf/include/MTA/LockAnalysis.h	/^    InstToInstSetMap instCILocksMap;$/;"	m	class:SVF::LockAnalysis
instToCxtStmtSet	svf/include/MTA/LockAnalysis.h	/^    InstToCxtStmtSet instToCxtStmtSet;$/;"	m	class:SVF::LockAnalysis
instToTSMap	svf/include/MTA/MHP.h	/^    InstToThreadStmtSetMap instToTSMap; \/\/\/< Map an instruction to its ThreadStmtSet$/;"	m	class:SVF::MHP
instTocondCILocksMap	svf/include/MTA/LockAnalysis.h	/^    InstToInstSetMap instTocondCILocksMap;$/;"	m	class:SVF::LockAnalysis
inst_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::inst_iterator inst_iterator;$/;"	t	namespace:SVF
int2bv	svf/include/Util/Z3Expr.h	/^    friend Z3Expr int2bv(u32_t n, const Z3Expr &e)$/;"	f	class:SVF::Z3Expr
int2bv	z3.obj/include/z3++.h	/^    inline expr int2bv(unsigned n, expr const& a) { Z3_ast r = Z3_mk_int2bv(a.ctx(), n, a); a.check_error(); return expr(a.ctx(), r); }$/;"	f	namespace:z3
int8Type	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    inline const IntegerType *int8Type()$/;"	f	class:SVF::ObjTypeInference
int_const	z3.obj/include/z3++.h	/^    inline expr context::int_const(char const * name) { return constant(name, int_sort()); }$/;"	f	class:z3::context
int_sort	z3.obj/include/z3++.h	/^    inline sort context::int_sort() { Z3_sort s = Z3_mk_int_sort(m_ctx); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
int_symbol	z3.obj/include/z3++.h	/^    inline symbol context::int_symbol(int n) { Z3_symbol r = Z3_mk_int_symbol(m_ctx, n); check_error(); return symbol(*this, r); }$/;"	f	class:z3::context
int_val	z3.obj/include/z3++.h	/^    inline expr context::int_val(char const * n) { Z3_ast r = Z3_mk_numeral(m_ctx, n, int_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
int_val	z3.obj/include/z3++.h	/^    inline expr context::int_val(int n) { Z3_ast r = Z3_mk_int(m_ctx, n, int_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
int_val	z3.obj/include/z3++.h	/^    inline expr context::int_val(int64_t n) { Z3_ast r = Z3_mk_int64(m_ctx, n, int_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
int_val	z3.obj/include/z3++.h	/^    inline expr context::int_val(uint64_t n) { Z3_ast r = Z3_mk_unsigned_int64(m_ctx, n, int_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
int_val	z3.obj/include/z3++.h	/^    inline expr context::int_val(unsigned n) { Z3_ast r = Z3_mk_unsigned_int(m_ctx, n, int_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
interleavingQueriesTime	svf/include/MTA/MHP.h	/^    double interleavingQueriesTime;$/;"	m	class:SVF::MHP
interleavingTime	svf/include/MTA/MHP.h	/^    double interleavingTime;$/;"	m	class:SVF::MHP
internal_free	svf/lib/Util/cJSON.cpp	/^static void CJSON_CDECL internal_free(void *pointer)$/;"	f	file:
internal_free	svf/lib/Util/cJSON.cpp	180;"	d	file:
internal_hooks	svf/lib/Util/cJSON.cpp	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	svf/lib/Util/cJSON.cpp	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
internal_malloc	svf/lib/Util/cJSON.cpp	/^static void * CJSON_CDECL internal_malloc(size_t size)$/;"	f	file:
internal_malloc	svf/lib/Util/cJSON.cpp	179;"	d	file:
internal_realloc	svf/lib/Util/cJSON.cpp	/^static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)$/;"	f	file:
internal_realloc	svf/lib/Util/cJSON.cpp	181;"	d	file:
interrupt	z3.obj/bin/python/z3/z3.py	/^    def interrupt(self):$/;"	m	class:Context
interrupt	z3.obj/include/z3++.h	/^        void interrupt() { Z3_interrupt(m_ctx); }$/;"	f	class:z3::context
inters	svf/include/MSSA/MemPartition.h	/^    PointsToList inters;$/;"	m	class:SVF::InterDisjointMRG
intersect	svf/include/MTA/LockAnalysis.h	/^    bool intersect(CxtLockSet& tgrlockset, const CxtLockSet& srclockset)$/;"	f	class:SVF::LockAnalysis
intersectPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PointsToID intersectPts(PointsToID lhs, PointsToID rhs)$/;"	f	class:SVF::PersistentPointsToCache
intersectWith	svf/include/Util/SparseBitVector.h	/^    bool intersectWith(const SparseBitVectorElement &RHS,$/;"	f	struct:SVF::SparseBitVectorElement
intersectWithComplement	svf/include/MemoryModel/ConditionalPT.h	/^    void intersectWithComplement(const CondPointsToSet<Cond>& cpts1)$/;"	f	class:SVF::CondPointsToSet
intersectWithComplement	svf/include/MemoryModel/ConditionalPT.h	/^    void intersectWithComplement(const CondPointsToSet<Cond>& cpts1, const CondPointsToSet<Cond>& cpts2)$/;"	f	class:SVF::CondPointsToSet
intersectWithComplement	svf/include/Util/SparseBitVector.h	/^    bool intersectWithComplement(const SparseBitVector &RHS)$/;"	f	class:SVF::SparseBitVector
intersectWithComplement	svf/include/Util/SparseBitVector.h	/^    bool intersectWithComplement(const SparseBitVector<ElementSize> *RHS) const$/;"	f	class:SVF::SparseBitVector
intersectWithComplement	svf/include/Util/SparseBitVector.h	/^    bool intersectWithComplement(const SparseBitVectorElement &RHS,$/;"	f	struct:SVF::SparseBitVectorElement
intersectWithComplement	svf/include/Util/SparseBitVector.h	/^    void intersectWithComplement(const SparseBitVector<ElementSize> &RHS1,$/;"	f	class:SVF::SparseBitVector
intersectWithComplement	svf/include/Util/SparseBitVector.h	/^    void intersectWithComplement(const SparseBitVector<ElementSize> *RHS1,$/;"	f	class:SVF::SparseBitVector
intersectWithComplement	svf/include/Util/SparseBitVector.h	/^    void intersectWithComplement(const SparseBitVectorElement &RHS1,$/;"	f	struct:SVF::SparseBitVectorElement
intersectWithComplement	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::intersectWithComplement(const PointsTo &rhs)$/;"	f	class:SVF::PointsTo
intersectWithComplement	svf/lib/MemoryModel/PointsTo.cpp	/^void PointsTo::intersectWithComplement(const PointsTo &lhs, const PointsTo &rhs)$/;"	f	class:SVF::PointsTo
intersectWithComplement	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::intersectWithComplement(const CoreBitVector &rhs)$/;"	f	class:SVF::CoreBitVector
intersectWithComplement	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::intersectWithComplement(const CoreBitVector &lhs, const CoreBitVector &rhs)$/;"	f	class:SVF::CoreBitVector
intersectionCache	svf/include/MemoryModel/PersistentPointsToCache.h	/^    OpCache intersectionCache;$/;"	m	class:SVF::PersistentPointsToCache
intersects	svf/include/MTA/LockAnalysis.h	/^    inline bool intersects(const CxtLockSet& lockset1,const CxtLockSet& lockset2) const$/;"	f	class:SVF::LockAnalysis
intersects	svf/include/MemoryModel/AccessPath.h	/^    inline bool intersects(const AccessPath& RHS) const$/;"	f	class:SVF::AccessPath
intersects	svf/include/MemoryModel/ConditionalPT.h	/^    bool intersects(const CondPointsToSet<Cond>* rhs) const$/;"	f	class:SVF::CondPointsToSet
intersects	svf/include/MemoryModel/ConditionalPT.h	/^    bool intersects(const CondStdSet<Element>& rhs) const$/;"	f	class:SVF::CondStdSet
intersects	svf/include/Util/SparseBitVector.h	/^    bool intersects(const SparseBitVector<ElementSize> &RHS) const$/;"	f	class:SVF::SparseBitVector
intersects	svf/include/Util/SparseBitVector.h	/^    bool intersects(const SparseBitVector<ElementSize> *RHS) const$/;"	f	class:SVF::SparseBitVector
intersects	svf/include/Util/SparseBitVector.h	/^    bool intersects(const SparseBitVectorElement &RHS) const$/;"	f	struct:SVF::SparseBitVectorElement
intersects	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::intersects(const PointsTo &rhs) const$/;"	f	class:SVF::PointsTo
intersects	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::intersects(const CoreBitVector &rhs) const$/;"	f	class:SVF::CoreBitVector
interval	svf/include/AE/Core/AbstractValue.h	/^    IntervalValue interval;$/;"	m	class:SVF::AbstractValue
intraBackwardTraverse	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::intraBackwardTraverse(const InstSet& unlockSet, InstSet& backwardInsts)$/;"	f	class:LockAnalysis
intraForwardTraverse	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::intraForwardTraverse(const ICFGNode* lockSite, InstSet& unlockSet, InstSet& forwardInsts)$/;"	f	class:LockAnalysis
intrinsic	svf/include/SVFIR/SVFVariables.h	/^    bool intrinsic; \/\/\/ return true if this function is an intrinsic function (e.g., llvm.dbg), which does not reside in the application code$/;"	m	class:SVF::FunObjVar
inv_child_iterator	svf/include/SABER/SrcSnkSolver.h	/^    typedef typename InvGTraits::ChildIteratorType inv_child_iterator;$/;"	t	class:SVF::SrcSnkSolver
inv_child_iterator	svf/include/Util/GraphReachSolver.h	/^    typedef typename InvGTraits::ChildIteratorType inv_child_iterator;$/;"	t	class:SVF::GraphReachSolver
invalidVersion	svf/include/WPA/VersionedFlowSensitive.h	/^    static const Version invalidVersion;$/;"	m	class:SVF::VersionedFlowSensitive
invalidVersion	svf/lib/WPA/VersionedFlowSensitive.cpp	/^const Version VersionedFlowSensitive::invalidVersion = 0;$/;"	m	class:VersionedFlowSensitive	file:
inverse_children	svf/include/Graphs/GraphTraits.h	/^        inverse_children(const typename GenericGraphTraits<GraphType>::NodeRef &G)$/;"	f	namespace:SVF
inverse_nodes	svf/include/Graphs/GraphTraits.h	/^        inverse_nodes(const GraphType &G)$/;"	f	namespace:SVF
isActualOUTPHI	svf/include/Graphs/SVFGNode.h	/^    inline bool isActualOUTPHI() const$/;"	f	class:SVF::InterMSSAPHISVFGNode
isActualRetPHI	svf/include/Graphs/VFGNode.h	/^    inline bool isActualRetPHI() const$/;"	f	class:SVF::InterPHIVFGNode
isAddr	svf/include/AE/Core/AbstractValue.h	/^    inline bool isAddr() const$/;"	f	class:SVF::AbstractValue
isAddrTaken	svf/include/SVFIR/SVFVariables.h	/^    bool isAddrTaken; \/\/\/ return true if this function is address-taken (for indirect call purposes)$/;"	m	class:SVF::FunObjVar
isAgg	svf-llvm/lib/DCHG.cpp	/^bool DCHGraph::isAgg(const DIType *t)$/;"	f	class:DCHGraph
isAliasedForkJoin	svf/include/MTA/MHP.h	/^    bool isAliasedForkJoin(const CallICFGNode* forkSite, const CallICFGNode* joinSite)$/;"	f	class:SVF::ForkJoinAnalysis
isAliasedLocks	svf/include/MTA/LockAnalysis.h	/^    bool isAliasedLocks(const CxtLock& cl1, const CxtLock& cl2)$/;"	f	class:SVF::LockAnalysis
isAliasedLocks	svf/include/MTA/LockAnalysis.h	/^    bool isAliasedLocks(const ICFGNode* i1, const ICFGNode* i2)$/;"	f	class:SVF::LockAnalysis
isAliasedMR	svf/include/MSSA/MemRegion.h	/^    virtual inline bool isAliasedMR(const NodeBS& cpts, const MemRegion* mr)$/;"	f	class:SVF::MRGenerator
isAllPathReachable	svf/include/SABER/SaberCondAllocator.h	/^    inline bool isAllPathReachable(Condition& condition)$/;"	f	class:SVF::SaberCondAllocator
isAllPathReachable	svf/include/SABER/SrcSnkDDA.h	/^    virtual bool isAllPathReachable()$/;"	f	class:SVF::SrcSnkDDA
isAllReachable	svf/include/SABER/ProgSlice.h	/^    inline bool isAllReachable() const$/;"	f	class:SVF::ProgSlice
isAlloc	svf-llvm/lib/ObjTypeInference.cpp	/^bool ObjTypeInference::isAlloc(const SVF::Value *val)$/;"	f	class:ObjTypeInference
isArgOfUncalledFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isArgOfUncalledFunction (const Value*  val)$/;"	f	namespace:SVF::LLVMUtil
isArgOfUncalledFunction	svf/lib/SVFIR/SVFVariables.cpp	/^bool ArgValVar::isArgOfUncalledFunction() const$/;"	f	class:ArgValVar
isArgOfUncalledFunction	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isArgOfUncalledFunction(const SVFVar* svfvar)$/;"	f	class:SVFUtil
isArgumentVFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isArgumentVFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isArray	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isArray()$/;"	f	class:SVF::ObjTypeInfo
isArray	svf/include/SVFIR/SVFVariables.h	/^    bool isArray() const$/;"	f	class:SVF::BaseObjVar
isArrayCondMemObj	svf/include/DDA/DDAVFSolver.h	/^    inline bool isArrayCondMemObj(const CVar& var) const$/;"	f	class:SVF::DDAVFSolver
isArrayMemObj	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool isArrayMemObj(NodeID id) const$/;"	f	class:SVF::PointerAnalysis
isArrayTy	svf/include/SVFIR/SVFType.h	/^    inline bool isArrayTy() const$/;"	f	class:SVF::SVFType
isBBCallsProgExit	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isBBCallsProgExit(const SVFBasicBlock* bb)$/;"	f	class:SaberCondAllocator
isBackICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline bool isBackICFGEdge(const ICFGEdge *edge) const$/;"	f	class:SVF::SVFLoop
isBarrierWaitCall	svf/include/Util/SVFUtil.h	/^inline bool isBarrierWaitCall(const CallICFGNode* cs)$/;"	f	namespace:SVF::SVFUtil
isBase	svf-llvm/lib/DCHG.cpp	/^bool DCHGraph::isBase(const DIType *a, const DIType *b, bool firstField)$/;"	f	class:DCHGraph
isBaseObjVarKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isBaseObjVarKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isBinaryConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isBinaryConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isBitCast	svf/include/SVFIR/SVFStatements.h	/^    inline bool isBitCast() const$/;"	f	class:SVF::CopyStmt
isBlackHoleObj	svf/lib/SVFIR/SVFVariables.cpp	/^bool BaseObjVar::isBlackHoleObj() const$/;"	f	class:BaseObjVar
isBlackholeSym	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isBlackholeSym(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isBlkObj	svf/include/Graphs/IRGraph.h	/^    static inline bool isBlkObj(NodeID id)$/;"	f	class:SVF::IRGraph
isBlkObjOrConstantObj	svf/include/Graphs/ConsG.h	/^    inline bool isBlkObjOrConstantObj(NodeID id)$/;"	f	class:SVF::ConstraintGraph
isBlkObjOrConstantObj	svf/include/Graphs/IRGraph.h	/^    static inline bool isBlkObjOrConstantObj(NodeID id)$/;"	f	class:SVF::IRGraph
isBlkObjOrConstantObj	svf/include/MemoryModel/PointerAnalysis.h	/^    virtual inline bool isBlkObjOrConstantObj(NodeID ptd) const$/;"	f	class:SVF::PointerAnalysis
isBlkObjOrConstantObj	svf/include/SVFIR/SVFIR.h	/^    inline bool isBlkObjOrConstantObj(NodeID id) const$/;"	f	class:SVF::SVFIR
isBlkPtr	svf/include/Graphs/IRGraph.h	/^    static inline bool isBlkPtr(NodeID id)$/;"	f	class:SVF::IRGraph
isBool	svf/include/Util/CommandLine.h	/^    virtual bool isBool(void) const$/;"	f	class:OptionBase
isBottom	svf/include/AE/Core/AddressValue.h	/^    inline bool isBottom() const$/;"	f	class:SVF::AddressValue
isBottom	svf/include/AE/Core/IntervalValue.h	/^    bool isBottom() const$/;"	f	class:SVF::IntervalValue
isBranchFeasible	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isBranchFeasible(const IntraCFGEdge* intraEdge,$/;"	f	class:AbstractInterpretation
isBuiltFromFile	svf/include/Graphs/IRGraph.h	/^    inline bool isBuiltFromFile()$/;"	f	class:SVF::IRGraph
isCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    inline bool isCFGEdge() const$/;"	f	class:SVF::ICFGEdge
isCPPThunkFunction	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isCPPThunkFunction(const Function* F)$/;"	f	class:cppUtil
isCallCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    inline bool isCallCFGEdge() const$/;"	f	class:SVF::ICFGEdge
isCallDirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isCallDirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isCallIndirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isCallIndirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isCallSite	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isCallSite(const Instruction* inst)$/;"	f	namespace:SVF::LLVMUtil
isCallSite	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isCallSite(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isCallSite	svf/include/MTA/LockAnalysis.h	/^    inline bool isCallSite(const ICFGNode* inst)$/;"	f	class:SVF::LockAnalysis
isCallSite	svf/include/MTA/TCT.h	/^    inline bool isCallSite(const ICFGNode* inst)$/;"	f	class:SVF::TCT
isCallSite	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isCallSite(const ICFGNode* inst)$/;"	f	class:SVFUtil
isCallSiteRetSVFGNode	svf/lib/Graphs/SVFG.cpp	/^const CallICFGNode* SVFG::isCallSiteRetSVFGNode(const SVFGNode* node) const$/;"	f	class:SVFG
isCallVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isCallVFGEdge() const$/;"	f	class:SVF::VFGEdge
isCandidateFun	svf/include/MTA/TCT.h	/^    inline bool isCandidateFun(const CallGraph::FunctionSet& callees) const$/;"	f	class:SVF::TCT
isCandidateFun	svf/include/MTA/TCT.h	/^    inline bool isCandidateFun(const FunObjVar* fun) const$/;"	f	class:SVF::TCT
isCastConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isCastConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isClsNameSource	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isClsNameSource(const Value *val)$/;"	f	class:cppUtil
isCmpBranchFeasible	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isCmpBranchFeasible(const CmpStmt* cmpStmt, s64_t succ,$/;"	f	class:AbstractInterpretation
isCmpConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isCmpConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isConcreteCxt	svf/include/Util/DPItem.h	/^    inline bool isConcreteCxt() const$/;"	f	class:SVF::ContextCond
isCondCompatible	svf/lib/DDA/ContextDDA.cpp	/^bool ContextDDA::isCondCompatible(const ContextCond& cxt1, const ContextCond& cxt2, bool singleton) const$/;"	f	class:ContextDDA
isConditional	svf/lib/SVFIR/SVFStatements.cpp	/^bool BranchStmt::isConditional() const$/;"	f	class:BranchStmt
isConnectedfromMain	svf/lib/MTA/MHP.cpp	/^bool MHP::isConnectedfromMain(const FunObjVar* fun)$/;"	f	class:MHP
isConnectingTwoCallSites	svf/lib/Graphs/SVFGOPT.cpp	/^bool SVFGOPT::isConnectingTwoCallSites(const SVFGNode* node) const$/;"	f	class:SVFGOPT
isConstDataOrAggData	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isConstDataOrAggData(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isConstDataOrAggData	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isConstDataOrAggData()$/;"	f	class:SVF::ObjTypeInfo
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggData() const$/;"	f	class:SVF::ConstAggObjVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggData() const$/;"	f	class:SVF::ConstAggValVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggData() const$/;"	f	class:SVF::ConstDataObjVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggData() const$/;"	f	class:SVF::ConstDataValVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggData() const$/;"	f	class:SVF::SVFVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual inline bool isConstDataOrAggData() const$/;"	f	class:SVF::BaseObjVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual inline bool isConstDataOrAggData() const$/;"	f	class:SVF::GepObjVar
isConstDataOrAggData	svf/include/SVFIR/SVFVariables.h	/^    virtual inline bool isConstDataOrAggData() const$/;"	f	class:SVF::GepValVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::BlackHoleValVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::ConstAggObjVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::ConstAggValVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::ConstDataObjVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::ConstDataValVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::ConstNullPtrObjVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::ConstNullPtrValVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::GepObjVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::GepValVar
isConstDataOrAggDataButNotNullPtr	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isConstDataOrAggDataButNotNullPtr() const$/;"	f	class:SVF::SVFVar
isConstDataOrConstGlobal	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isConstDataOrConstGlobal()$/;"	f	class:SVF::ObjTypeInfo
isConstDataOrConstGlobal	svf/include/SVFIR/SVFVariables.h	/^    bool isConstDataOrConstGlobal() const$/;"	f	class:SVF::BaseObjVar
isConstantArray	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isConstantArray()$/;"	f	class:SVF::ObjTypeInfo
isConstantArray	svf/include/SVFIR/SVFVariables.h	/^    bool isConstantArray() const$/;"	f	class:SVF::BaseObjVar
isConstantByteSize	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isConstantByteSize() const$/;"	f	class:SVF::ObjTypeInfo
isConstantByteSize	svf/include/SVFIR/SVFVariables.h	/^    bool isConstantByteSize() const$/;"	f	class:SVF::BaseObjVar
isConstantDataObjVarKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isConstantDataObjVarKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isConstantDataValVar	svf/include/SVFIR/SVFValue.h	/^    static inline bool isConstantDataValVar(GNodeK n)$/;"	f	class:SVF::SVFValue
isConstantObj	svf/include/SVFIR/SVFIR.h	/^    inline bool isConstantObj(NodeID id) const$/;"	f	class:SVF::SVFIR
isConstantObjSym	svf-llvm/lib/CppUtil.cpp	/^bool LLVMUtil::isConstantObjSym(const Value* val)$/;"	f	class:LLVMUtil
isConstantOffset	svf/include/SVFIR/SVFStatements.h	/^    inline bool isConstantOffset() const$/;"	f	class:SVF::GepStmt
isConstantOffset	svf/lib/MemoryModel/AccessPath.cpp	/^bool AccessPath::isConstantOffset() const$/;"	f	class:AccessPath
isConstantStruct	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isConstantStruct()$/;"	f	class:SVF::ObjTypeInfo
isConstantStruct	svf/include/SVFIR/SVFVariables.h	/^    bool isConstantStruct() const$/;"	f	class:SVF::BaseObjVar
isConstantSym	svf/include/Graphs/IRGraph.h	/^    static inline bool isConstantSym(NodeID id)$/;"	f	class:SVF::IRGraph
isConstructor	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isConstructor(const Function* F)$/;"	f	class:cppUtil
isDecl	svf/include/SVFIR/SVFVariables.h	/^    bool isDecl;   \/\/\/ return true if this function does not have a body$/;"	m	class:SVF::FunObjVar
isDeclaration	svf/include/SVFIR/SVFVariables.h	/^    inline bool isDeclaration() const$/;"	f	class:SVF::FunObjVar
isDefOfAInFOut	svf/include/Graphs/SVFGOPT.h	/^    inline bool isDefOfAInFOut(const SVFGNode* node)$/;"	f	class:SVF::SVFGOPT
isDestructor	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isDestructor(const Function* F)$/;"	f	class:cppUtil
isDirectCall	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isDirectCall(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
isDirectCallEdge	svf/include/Graphs/CallGraph.h	/^    inline bool isDirectCallEdge() const$/;"	f	class:SVF::CallGraphEdge
isDirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isDirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isDynCast	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isDynCast(const Function *foo)$/;"	f	class:cppUtil
isEQCmp	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isEQCmp(const CmpStmt *cmp) const$/;"	f	class:SaberCondAllocator
isEdgeInRecursion	svf/include/DDA/ContextDDA.h	/^    inline virtual bool isEdgeInRecursion(CallSiteID csId)$/;"	f	class:SVF::ContextDDA
isEntryICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline bool isEntryICFGEdge(const ICFGEdge *edge) const$/;"	f	class:SVF::SVFLoop
isEquivalentBranchCond	svf/include/SABER/ProgSlice.h	/^    inline bool isEquivalentBranchCond(const Condition &lhs, const Condition &rhs) const$/;"	f	class:SVF::ProgSlice
isEquivalentBranchCond	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isEquivalentBranchCond(const Condition &lhs,$/;"	f	class:SaberCondAllocator
isExplicitlySet	svf/include/Util/CommandLine.h	/^    bool isExplicitlySet;$/;"	m	class:Option
isExplicitlySet	svf/include/Util/CommandLine.h	/^    bool isExplicitlySet;$/;"	m	class:OptionMap
isExtCall	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isExtCall(const Function* fun)$/;"	f	class:LLVMUtil
isExtCall	svf/include/MTA/LockAnalysis.h	/^    inline bool isExtCall(const ICFGNode* inst)$/;"	f	class:SVF::LockAnalysis
isExtCall	svf/include/MTA/TCT.h	/^    inline bool isExtCall(const ICFGNode* inst)$/;"	f	class:SVF::TCT
isExtCall	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isExtCall(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
isExtCall	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isExtCall(const CallICFGNode* cs)$/;"	f	class:SVFUtil
isExtCall	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isExtCall(const FunObjVar* fun)$/;"	f	class:SVFUtil
isExtCall	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isExtCall(const ICFGNode* node)$/;"	f	class:SVFUtil
isFClose	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isFClose(const CallICFGNode* cs) const$/;"	f	class:SVF::SaberCheckerAPI
isFClose	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isFClose(const FunObjVar* fun) const$/;"	f	class:SVF::SaberCheckerAPI
isFIObjNode	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool isFIObjNode(NodeID id) const$/;"	f	class:SVF::PointerAnalysis
isFOpen	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isFOpen(const CallICFGNode* cs) const$/;"	f	class:SVF::SaberCheckerAPI
isFOpen	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isFOpen(const FunObjVar* fun) const$/;"	f	class:SVF::SaberCheckerAPI
isFieldInsenCondMemObj	svf/include/DDA/DDAVFSolver.h	/^    inline bool isFieldInsenCondMemObj(const CVar& var) const$/;"	f	class:SVF::DDAVFSolver
isFieldInsensitive	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool isFieldInsensitive(NodeID id) const$/;"	f	class:SVF::PointerAnalysis
isFieldInsensitive	svf/include/SVFIR/SVFVariables.h	/^    bool isFieldInsensitive() const$/;"	f	class:SVF::BaseObjVar
isFieldOf	svf-llvm/lib/DCHG.cpp	/^bool DCHGraph::isFieldOf(const DIType *f, const DIType *b)$/;"	f	class:DCHGraph
isFirstField	svf-llvm/lib/DCHG.cpp	/^bool DCHGraph::isFirstField(const DIType *f, const DIType *b)$/;"	f	class:DCHGraph
isForksite	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool isForksite(const CallICFGNode* csInst)$/;"	f	class:SVF::ThreadCallGraph
isFormalINPHI	svf/include/Graphs/SVFGNode.h	/^    inline bool isFormalINPHI() const$/;"	f	class:SVF::InterMSSAPHISVFGNode
isFormalParmPHI	svf/include/Graphs/VFGNode.h	/^    inline bool isFormalParmPHI() const$/;"	f	class:SVF::InterPHIVFGNode
isFullJoin	svf/include/MTA/MHP.h	/^    inline bool isFullJoin(NodeID tid1, NodeID tid2)$/;"	f	class:SVF::ForkJoinAnalysis
isFunEntrySVFGNode	svf/lib/Graphs/SVFG.cpp	/^const FunObjVar* SVFG::isFunEntrySVFGNode(const SVFGNode* node) const$/;"	f	class:SVFG
isFunEntryVFGNode	svf/lib/Graphs/VFG.cpp	/^const FunObjVar* VFG::isFunEntryVFGNode(const VFGNode* node) const$/;"	f	class:VFG
isFunPtr	svf/include/SVFIR/SVFIR.h	/^    inline bool isFunPtr(NodeID id) const$/;"	f	class:SVF::SVFIR
isFunction	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isFunction()$/;"	f	class:SVF::ObjTypeInfo
isFunction	svf/include/SVFIR/SVFVariables.h	/^    bool isFunction() const$/;"	f	class:SVF::BaseObjVar
isFunctionRetPhi	svf/lib/SVFIR/SVFStatements.cpp	/^bool PhiStmt::isFunctionRetPhi() const$/;"	f	class:PhiStmt
isGepConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isGepConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isGlobalObj	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isGlobalObj()$/;"	f	class:SVF::ObjTypeInfo
isGlobalObj	svf/include/SVFIR/SVFVariables.h	/^    bool isGlobalObj() const$/;"	f	class:SVF::BaseObjVar
isGlobalSVFGNode	svf/include/SABER/SaberSVFGBuilder.h	/^    inline bool isGlobalSVFGNode(const SVFGNode* node) const$/;"	f	class:SVF::SaberSVFGBuilder
isGlobalSVFGNode	svf/include/SABER/SrcSnkDDA.h	/^    inline bool isGlobalSVFGNode(const SVFGNode* node) const$/;"	f	class:SVF::SrcSnkDDA
isHBPair	svf/include/MTA/MHP.h	/^    inline bool isHBPair(NodeID tid1, NodeID tid2)$/;"	f	class:SVF::ForkJoinAnalysis
isHBPair	svf/lib/MTA/MHP.cpp	/^bool MHP::isHBPair(NodeID tid1, NodeID tid2)$/;"	f	class:MHP
isHead	svf/include/Graphs/WTO.h	/^    bool isHead(const NodeT* node) const$/;"	f	class:SVF::WTO
isHeap	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isHeap()$/;"	f	class:SVF::ObjTypeInfo
isHeap	svf/include/SVFIR/SVFVariables.h	/^    bool isHeap() const$/;"	f	class:SVF::BaseObjVar
isHeapAllocExtCall	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isHeapAllocExtCall(const Instruction *inst)$/;"	f	namespace:SVF::LLVMUtil
isHeapAllocExtCall	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isHeapAllocExtCall(const ICFGNode* cs)$/;"	f	class:SVFUtil
isHeapAllocExtCallViaArg	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isHeapAllocExtCallViaArg(const Instruction* inst)$/;"	f	class:LLVMUtil
isHeapAllocExtCallViaArg	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isHeapAllocExtCallViaArg(const CallICFGNode* cs)$/;"	f	class:SVFUtil
isHeapAllocExtCallViaRet	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isHeapAllocExtCallViaRet(const Instruction* inst)$/;"	f	class:LLVMUtil
isHeapAllocExtCallViaRet	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isHeapAllocExtCallViaRet(const CallICFGNode* cs)$/;"	f	class:SVFUtil
isHeapAllocExtFunViaArg	svf/include/Util/SVFUtil.h	/^inline bool isHeapAllocExtFunViaArg(const FunObjVar* fun)$/;"	f	namespace:SVF::SVFUtil
isHeapAllocExtFunViaRet	svf/include/Util/SVFUtil.h	/^inline bool isHeapAllocExtFunViaRet(const FunObjVar* fun)$/;"	f	namespace:SVF::SVFUtil
isHeapCondMemObj	svf/include/DDA/DDAVFSolver.h	/^    virtual inline bool isHeapCondMemObj(const CVar& var, const StoreSVFGNode*)$/;"	f	class:SVF::DDAVFSolver
isHeapCondMemObj	svf/lib/DDA/ContextDDA.cpp	/^bool ContextDDA::isHeapCondMemObj(const CxtVar& var, const StoreSVFGNode*)$/;"	f	class:ContextDDA
isHeapCondMemObj	svf/lib/DDA/FlowDDA.cpp	/^bool FlowDDA::isHeapCondMemObj(const NodeID& var, const StoreSVFGNode*)$/;"	f	class:FlowDDA
isHeapMemObj	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool isHeapMemObj(NodeID id) const$/;"	f	class:SVF::PointerAnalysis
isHeapObj	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isHeapObj(const Value* val)$/;"	f	class:LLVMUtil
isHelpName	svf/include/Util/CommandLine.h	/^    static bool isHelpName(const std::string name)$/;"	f	class:OptionBase
isICFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isICFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isIRFile	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isIRFile(const std::string &filename)$/;"	f	class:LLVMUtil
isInAWrapper	svf/lib/SABER/SrcSnkDDA.cpp	/^bool SrcSnkDDA::isInAWrapper(const SVFGNode* src, CallSiteSet& csIdSet)$/;"	f	class:SrcSnkDDA
isInCurBackwardSlice	svf/include/SABER/SrcSnkDDA.h	/^    inline bool isInCurBackwardSlice(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
isInCurForwardSlice	svf/include/SABER/SrcSnkDDA.h	/^    inline bool isInCurForwardSlice(const SVFGNode* node)$/;"	f	class:SVF::SrcSnkDDA
isInCurrentSCC	svf/include/WPA/WPAFSSolver.h	/^    inline bool isInCurrentSCC(NodeID node)$/;"	f	class:SVF::WPASCCSolver
isInCycle	svf/include/Graphs/SCC.h	/^    inline bool isInCycle(NodeID n) const$/;"	f	class:SVF::SCCDetection
isInICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline bool isInICFGEdge(const ICFGEdge *edge) const$/;"	f	class:SVF::SVFLoop
isInLoop	svf/include/Graphs/ICFG.h	/^    inline bool isInLoop(const ICFGNode *node)$/;"	f	class:SVF::ICFG
isInLoop	svf/include/MemoryModel/SVFLoop.h	/^    inline bool isInLoop(const ICFGNode *icfgNode) const$/;"	f	class:SVF::SVFLoop
isInLoopInstruction	svf/lib/MTA/TCT.cpp	/^bool TCT::isInLoopInstruction(const ICFGNode* inst)$/;"	f	class:TCT
isInRecursion	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool isInRecursion(const FunObjVar* fun) const$/;"	f	class:SVF::PointerAnalysis
isInRecursion	svf/lib/MTA/TCT.cpp	/^bool TCT::isInRecursion(const ICFGNode* inst) const$/;"	f	class:TCT
isInSCC	svf/include/Graphs/SCC.h	/^    inline bool isInSCC(NodeID n)$/;"	f	class:SVF::SCCDetection
isInSameCISpan	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isInSameCISpan(const ICFGNode *i1, const ICFGNode *i2) const$/;"	f	class:LockAnalysis
isInSameCSSpan	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isInSameCSSpan(const CxtStmt& cxtStmt1, const CxtStmt& cxtStmt2) const$/;"	f	class:LockAnalysis
isInSameCSSpan	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isInSameCSSpan(const ICFGNode *I1, const ICFGNode *I2) const$/;"	f	class:LockAnalysis
isInSameSpan	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isInSameSpan(const ICFGNode *i1, const ICFGNode *i2)$/;"	f	class:LockAnalysis
isInWorklist	svf/include/CFL/CFLSolver.h	/^    inline bool isInWorklist(const CFLEdge* item)$/;"	f	class:SVF::CFLSolver
isInWorklist	svf/include/SABER/SrcSnkSolver.h	/^    inline bool isInWorklist(DPIm& item)$/;"	f	class:SVF::SrcSnkSolver
isInWorklist	svf/include/Util/GraphReachSolver.h	/^    inline bool isInWorklist(DPIm& item)$/;"	f	class:SVF::GraphReachSolver
isInWorklist	svf/include/WPA/WPASolver.h	/^    inline bool isInWorklist(NodeID id)$/;"	f	class:SVF::WPASolver
isIncycle	svf/include/MTA/TCT.h	/^    inline bool isIncycle() const$/;"	f	class:SVF::TCTNode
isIncycle	svf/include/Util/CxtStmt.h	/^    inline bool isIncycle() const$/;"	f	class:SVF::CxtThread
isIndirectCall	svf/include/Graphs/ICFGNode.h	/^    inline bool isIndirectCall() const$/;"	f	class:SVF::CallICFGNode
isIndirectCall	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isIndirectCall(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
isIndirectCallEdge	svf/include/Graphs/CallGraph.h	/^    inline bool isIndirectCallEdge() const$/;"	f	class:SVF::CallGraphEdge
isIndirectCallSites	svf/include/SVFIR/SVFIR.h	/^    inline bool isIndirectCallSites(const CallICFGNode* cs) const$/;"	f	class:SVF::SVFIR
isIndirectEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool isIndirectEdge(ConstraintEdge::ConstraintEdgeK kind)$/;"	f	class:SVF::ConstraintNode
isIndirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isIndirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isInf	z3.obj/bin/python/z3/z3.py	/^    def isInf(self):$/;"	m	class:FPNumRef
isInloop	svf/include/MTA/TCT.h	/^    inline bool isInloop() const$/;"	f	class:SVF::TCTNode
isInloop	svf/include/Util/CxtStmt.h	/^    inline bool isInloop() const$/;"	f	class:SVF::CxtThread
isInsensitiveCallRet	svf/include/DDA/ContextDDA.h	/^    bool isInsensitiveCallRet(const SVFGEdge* edge)$/;"	f	class:SVF::ContextDDA
isInsideCondIntraLock	svf/include/MTA/LockAnalysis.h	/^    inline bool isInsideCondIntraLock(const ICFGNode* stmt) const$/;"	f	class:SVF::LockAnalysis
isInsideIntraLock	svf/include/MTA/LockAnalysis.h	/^    inline bool isInsideIntraLock(const ICFGNode* stmt) const$/;"	f	class:SVF::LockAnalysis
isInt2Ptr	svf/include/SVFIR/SVFStatements.h	/^    inline bool isInt2Ptr() const$/;"	f	class:SVF::CopyStmt
isInt2PtrConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isInt2PtrConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isInterICFGNodeKind	svf/include/SVFIR/SVFValue.h	/^    static inline bool isInterICFGNodeKind(GNodeK n)$/;"	f	class:SVF::SVFValue
isInterestedPAGNode	svf/include/Graphs/VFG.h	/^    virtual inline bool isInterestedPAGNode(const SVFVar* node) const$/;"	f	class:SVF::VFG
isInterval	svf/include/AE/Core/AbstractValue.h	/^    inline bool isInterval() const$/;"	f	class:SVF::AbstractValue
isIntraCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    inline bool isIntraCFGEdge() const$/;"	f	class:SVF::ICFGEdge
isIntraLock	svf/include/MTA/LockAnalysis.h	/^    inline bool isIntraLock(const ICFGNode* lock) const$/;"	f	class:SVF::LockAnalysis
isIntraVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isIntraVFGEdge() const$/;"	f	class:SVF::VFGEdge
isIntrinsic	svf/include/SVFIR/SVFVariables.h	/^    inline bool isIntrinsic() const$/;"	f	class:SVF::FunObjVar
isIntrinsicFun	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isIntrinsicFun(const Function* func)$/;"	f	class:LLVMUtil
isIntrinsicInst	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isIntrinsicInst(const Instruction* inst)$/;"	f	class:LLVMUtil
isIntrinsicInst	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isIntrinsicInst(const ICFGNode* inst)$/;"	f	class:SVFUtil
isIsolatedNode	svf/lib/SVFIR/SVFVariables.cpp	/^bool FunObjVar::isIsolatedNode() const$/;"	f	class:FunObjVar
isIsolatedNode	svf/lib/SVFIR/SVFVariables.cpp	/^bool SVFVar::isIsolatedNode() const$/;"	f	class:SVFVar
isJoinMustExecutedInLoop	svf/lib/MTA/TCT.cpp	/^bool TCT::isJoinMustExecutedInLoop(const LoopBBs& lp,const ICFGNode* join)$/;"	f	class:TCT
isJoinSiteInRecursion	svf/include/MTA/TCT.h	/^    inline bool isJoinSiteInRecursion(const CallICFGNode* join) const$/;"	f	class:SVF::TCT
isJoinsite	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool isJoinsite(const CallICFGNode* csInst)$/;"	f	class:SVF::ThreadCallGraph
isLoad	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::isLoad(const NodeID l) const$/;"	f	class:VersionedFlowSensitive
isLoadMap	svf/include/WPA/VersionedFlowSensitive.h	/^    std::vector<bool> isLoadMap;$/;"	m	class:SVF::VersionedFlowSensitive
isLocalCVarInRecursion	svf/include/DDA/DDAVFSolver.h	/^    virtual inline bool isLocalCVarInRecursion(const CVar& var) const$/;"	f	class:SVF::DDAVFSolver
isLocalVarInRecursiveFun	svf/lib/MemoryModel/PointerAnalysis.cpp	/^bool PointerAnalysis::isLocalVarInRecursiveFun(NodeID id) const$/;"	f	class:PointerAnalysis
isLockAquireCall	svf/include/Util/SVFUtil.h	/^inline bool isLockAquireCall(const CallICFGNode* cs)$/;"	f	namespace:SVF::SVFUtil
isLockCandidateFun	svf/include/MTA/LockAnalysis.h	/^    inline bool isLockCandidateFun(const FunObjVar* fun) const$/;"	f	class:SVF::LockAnalysis
isLockReleaseCall	svf/include/Util/SVFUtil.h	/^inline bool isLockReleaseCall(const CallICFGNode* cs)$/;"	f	namespace:SVF::SVFUtil
isLoopExitOfJoinLoop	svf/lib/MTA/TCT.cpp	/^bool TCT::isLoopExitOfJoinLoop(const SVFBasicBlock* bb)$/;"	f	class:TCT
isLoopHeader	svf/include/SVFIR/SVFVariables.h	/^    inline bool isLoopHeader(const SVFBasicBlock* bb) const$/;"	f	class:SVF::FunObjVar
isLoopHeader	svf/lib/SVFIR/SVFValue.cpp	/^bool SVFLoopAndDomInfo::isLoopHeader(const SVFBasicBlock* bb) const$/;"	f	class:SVFLoopAndDomInfo
isLoopHeaderOfJoinLoop	svf/lib/MTA/TCT.cpp	/^bool TCT::isLoopHeaderOfJoinLoop(const SVFBasicBlock* bb)$/;"	f	class:TCT
isMRSVFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isMRSVFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isMSSAPHISVFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isMSSAPHISVFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isMemAlloc	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isMemAlloc(const CallICFGNode* cs) const$/;"	f	class:SVF::SaberCheckerAPI
isMemAlloc	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isMemAlloc(const FunObjVar* fun) const$/;"	f	class:SVF::SaberCheckerAPI
isMemDealloc	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isMemDealloc(const CallICFGNode* cs) const$/;"	f	class:SVF::SaberCheckerAPI
isMemDealloc	svf/include/SABER/SaberCheckerAPI.h	/^    inline bool isMemDealloc(const FunObjVar* fun) const$/;"	f	class:SVF::SaberCheckerAPI
isMemcpyExtFun	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isMemcpyExtFun(const Function *fun)$/;"	f	class:LLVMUtil
isMemsetExtFun	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isMemsetExtFun(const Function* fun)$/;"	f	class:LLVMUtil
isMultiForkedThread	svf/include/MTA/MHP.h	/^    inline bool isMultiForkedThread(NodeID curTid)$/;"	f	class:SVF::MHP
isMultiInheritance	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline bool isMultiInheritance() const$/;"	f	class:SVF::DCHNode
isMultiInheritance	svf/include/Graphs/CHG.h	/^    inline bool isMultiInheritance() const$/;"	f	class:SVF::CHNode
isMultiforked	svf/include/MTA/TCT.h	/^    inline bool isMultiforked() const$/;"	f	class:SVF::TCTNode
isMultiple	svf/include/Util/CommandLine.h	/^    virtual bool isMultiple(void) const$/;"	f	class:OptionBase
isMustAlias	svf/include/DDA/DDAVFSolver.h	/^    virtual bool isMustAlias(const DPIm&, const DPIm&)$/;"	f	class:SVF::DDAVFSolver
isMustJoin	svf/lib/MTA/MHP.cpp	/^bool MHP::isMustJoin(NodeID curTid, const ICFGNode* joinsite)$/;"	f	class:MHP
isNECmp	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isNECmp(const CmpStmt *cmp) const$/;"	f	class:SaberCondAllocator
isNaN	z3.obj/bin/python/z3/z3.py	/^    def isNaN(self):$/;"	m	class:FPNumRef
isNegCond	svf/include/SABER/SaberCondAllocator.h	/^    bool isNegCond(u32_t id) const$/;"	f	class:SVF::SaberCondAllocator
isNegative	z3.obj/bin/python/z3/z3.py	/^    def isNegative(self):$/;"	m	class:FPNumRef
isNoCallerFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isNoCallerFunction(const Function* fun)$/;"	f	namespace:SVF::LLVMUtil
isNoPrecessorBasicBlock	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isNoPrecessorBasicBlock(const BasicBlock* bb)$/;"	f	namespace:SVF::LLVMUtil
isNodeHidden	svf/include/Graphs/DOTGraphTraits.h	/^    static bool isNodeHidden(const void *, const GraphType &)$/;"	f	struct:SVF::DefaultDOTGraphTraits
isNodeHidden	svf/include/Graphs/GraphWriter.h	/^    bool isNodeHidden(NodeRef Node)$/;"	f	class:SVF::GraphWriter
isNodeHidden	svf/lib/Graphs/ConsG.cpp	/^    static bool isNodeHidden(NodeType *n, ConstraintGraph *)$/;"	f	struct:SVF::DOTGraphTraits
isNodeHidden	svf/lib/Graphs/ICFG.cpp	/^    static bool isNodeHidden(ICFGNode *node, ICFG *)$/;"	f	struct:SVF::DOTGraphTraits
isNodeHidden	svf/lib/Graphs/IRGraph.cpp	/^    static bool isNodeHidden(SVFVar *node, IRGraph *)$/;"	f	struct:SVF::DOTGraphTraits
isNodeHidden	svf/lib/Graphs/SVFG.cpp	/^    static bool isNodeHidden(SVFGNode *node, SVFG *)$/;"	f	struct:SVF::DOTGraphTraits
isNonInstricCallSite	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isNonInstricCallSite(const Instruction* inst)$/;"	f	class:LLVMUtil
isNonInstricCallSite	svf/include/Util/SVFUtil.h	/^inline bool isNonInstricCallSite(const ICFGNode* inst)$/;"	f	namespace:SVF::SVFUtil
isNonLocalObject	svf/lib/MSSA/MemRegion.cpp	/^bool MRGenerator::isNonLocalObject(NodeID id, const FunObjVar* curFun) const$/;"	f	class:MRGenerator
isNormal	z3.obj/bin/python/z3/z3.py	/^    def isNormal(self):$/;"	m	class:FPNumRef
isNotRet	svf/include/SVFIR/SVFVariables.h	/^    bool isNotRet;   \/\/\/ return true if this function never returns$/;"	m	class:SVF::FunObjVar
isNullPtr	svf/include/AE/Core/AbstractState.h	/^    static inline bool isNullPtr(u32_t addr)$/;"	f	class:SVF::AbstractState
isNullPtr	svf/include/Graphs/IRGraph.h	/^    static inline bool isNullPtr(NodeID id)$/;"	f	class:SVF::IRGraph
isNullPtrSym	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isNullPtrSym(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isObjVarKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isObjVarKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isObject	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isObject(const Value*  ref)$/;"	f	class:LLVMUtil
isOperOverload	svf-llvm/lib/CppUtil.cpp	/^static bool isOperOverload(const std::string& name)$/;"	f	file:
isOutICFGEdge	svf/include/MemoryModel/SVFLoop.h	/^    inline bool isOutICFGEdge(const ICFGEdge *edge) const$/;"	f	class:SVF::SVFLoop
isOutOfBudgetDpm	svf/include/DDA/DDAVFSolver.h	/^    inline bool isOutOfBudgetDpm(const DPIm& dpm) const$/;"	f	class:SVF::DDAVFSolver
isOutOfBudgetQuery	svf/include/DDA/DDAVFSolver.h	/^    inline bool isOutOfBudgetQuery() const$/;"	f	class:SVF::DDAVFSolver
isPHIVFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isPHIVFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isPTAEdge	svf/lib/SVFIR/SVFStatements.cpp	/^bool SVFStmt::isPTAEdge() const$/;"	f	class:SVFStmt
isPTANode	svf/include/Graphs/VFGNode.h	/^    inline bool isPTANode() const$/;"	f	class:SVF::ArgumentVFGNode
isPTANode	svf/include/Graphs/VFGNode.h	/^    inline bool isPTANode() const$/;"	f	class:SVF::NullPtrVFGNode
isPTANode	svf/include/Graphs/VFGNode.h	/^    inline bool isPTANode() const$/;"	f	class:SVF::PHIVFGNode
isPTANode	svf/include/Graphs/VFGNode.h	/^    inline bool isPTANode() const$/;"	f	class:SVF::StmtVFGNode
isPWCNode	svf/include/Graphs/ConsG.h	/^    inline bool isPWCNode(NodeID nodeId)$/;"	f	class:SVF::ConstraintGraph
isPWCNode	svf/include/Graphs/ConsGNode.h	/^    inline bool isPWCNode() const$/;"	f	class:SVF::ConstraintNode
isParForSite	svf/include/Graphs/ThreadCallGraph.h	/^    inline bool isParForSite(const CallICFGNode* csInst)$/;"	f	class:SVF::ThreadCallGraph
isPartialReachable	svf/include/SABER/ProgSlice.h	/^    inline bool isPartialReachable() const$/;"	f	class:SVF::ProgSlice
isPhiCopyEdge	svf/include/Graphs/VFG.h	/^    inline bool isPhiCopyEdge(const PAGEdge* copy) const$/;"	f	class:SVF::VFG
isPhiNode	svf/include/SVFIR/SVFIR.h	/^    inline bool isPhiNode(const SVFVar* node) const$/;"	f	class:SVF::SVFIR
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isPointer() const$/;"	f	class:SVF::DummyObjVar
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isPointer() const$/;"	f	class:SVF::DummyValVar
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isPointer() const$/;"	f	class:SVF::FunValVar
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isPointer() const$/;"	f	class:SVF::GepObjVar
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isPointer() const$/;"	f	class:SVF::GepValVar
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual bool isPointer() const$/;"	f	class:SVF::VarArgValPN
isPointer	svf/include/SVFIR/SVFVariables.h	/^    virtual inline bool isPointer() const$/;"	f	class:SVF::SVFVar
isPointer	svf/lib/SVFIR/SVFVariables.cpp	/^bool ArgValVar::isPointer() const$/;"	f	class:ArgValVar
isPointer	svf/lib/SVFIR/SVFVariables.cpp	/^bool RetValPN::isPointer() const$/;"	f	class:RetValPN
isPointerTy	svf/include/SVFIR/SVFType.h	/^    inline bool isPointerTy() const$/;"	f	class:SVF::SVFType
isPositive	z3.obj/bin/python/z3/z3.py	/^    def isPositive(self):$/;"	m	class:FPNumRef
isProgEntryFunction	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isProgEntryFunction(const Function* fun)$/;"	f	namespace:SVF::LLVMUtil
isProgEntryFunction	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isProgEntryFunction(const FunObjVar* funObjVar)$/;"	f	class:SVFUtil
isProgExitCall	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isProgExitCall(const CallICFGNode* cs)$/;"	f	class:SVFUtil
isProgExitFunction	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isProgExitFunction(const FunObjVar *fun)$/;"	f	class:SVFUtil
isProtectedByCommonCILock	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isProtectedByCommonCILock(const ICFGNode *i1, const ICFGNode *i2)$/;"	f	class:LockAnalysis
isProtectedByCommonCxtLock	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isProtectedByCommonCxtLock(const CxtStmt& cxtStmt1, const CxtStmt& cxtStmt2)$/;"	f	class:LockAnalysis
isProtectedByCommonCxtLock	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isProtectedByCommonCxtLock(const ICFGNode *i1, const ICFGNode *i2)$/;"	f	class:LockAnalysis
isProtectedByCommonLock	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::isProtectedByCommonLock(const ICFGNode *i1, const ICFGNode *i2)$/;"	f	class:LockAnalysis
isPtr2Int	svf/include/SVFIR/SVFStatements.h	/^    inline bool isPtr2Int() const$/;"	f	class:SVF::CopyStmt
isPtr2IntConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isPtr2IntConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isPtrInUncalledFunction	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isPtrInUncalledFunction (const Value*  value)$/;"	f	class:LLVMUtil
isPtrOnlySVFG	svf/include/Graphs/VFG.h	/^    inline bool isPtrOnlySVFG() const$/;"	f	class:SVF::VFG
isPureAbstract	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline bool isPureAbstract() const$/;"	f	class:SVF::DCHNode
isPureAbstract	svf/include/Graphs/CHG.h	/^    inline bool isPureAbstract() const$/;"	f	class:SVF::CHNode
isReachGlobal	svf/include/SABER/ProgSlice.h	/^    inline bool isReachGlobal() const$/;"	f	class:SVF::ProgSlice
isReachableBetweenFunctions	svf/lib/Graphs/CallGraph.cpp	/^bool CallGraph::isReachableBetweenFunctions(const FunObjVar* srcFn, const FunObjVar* dstFn) const$/;"	f	class:CallGraph
isReachableFromProgEntry	svf/lib/Graphs/CallGraph.cpp	/^bool CallGraphNode::isReachableFromProgEntry(Map<NodeID, bool> &reachableFromEntry, NodeBS &visitedNodes) const$/;"	f	class:CallGraphNode
isReallocExtCall	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isReallocExtCall(const CallICFGNode* cs)$/;"	f	class:SVFUtil
isReallocExtFun	svf/include/Util/SVFUtil.h	/^inline bool isReallocExtFun(const FunObjVar* fun)$/;"	f	namespace:SVF::SVFUtil
isRecurFullJoin	svf/lib/MTA/MHP.cpp	/^bool MHP::isRecurFullJoin(NodeID parentTid, NodeID curTid)$/;"	f	class:MHP
isRecursiveCall	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isRecursiveCall(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
isRet	svf/include/Graphs/ICFGNode.h	/^    bool isRet;$/;"	m	class:SVF::IntraICFGNode
isRetCFGEdge	svf/include/Graphs/ICFGEdge.h	/^    inline bool isRetCFGEdge() const$/;"	f	class:SVF::ICFGEdge
isRetDirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isRetDirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isRetIndirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isRetIndirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isRetInst	svf/include/Graphs/ICFGNode.h	/^    inline bool isRetInst() const$/;"	f	class:SVF::IntraICFGNode
isRetInstNode	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::isRetInstNode(const ICFGNode* node)$/;"	f	class:SVFUtil
isRetVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isRetVFGEdge() const$/;"	f	class:SVF::VFGEdge
isSVFGNodeInCycle	svf/include/DDA/DDAVFSolver.h	/^    inline bool isSVFGNodeInCycle(const SVFGNode* node)$/;"	f	class:SVF::DDAVFSolver
isSVFVarKind	svf/include/SVFIR/SVFValue.h	/^    static inline bool isSVFVarKind(GNodeK n)$/;"	f	class:SVF::SVFValue
isSameSCEV	svf/lib/MTA/MHP.cpp	/^bool ForkJoinAnalysis::isSameSCEV(const ICFGNode* forkSite, const ICFGNode* joinSite)$/;"	f	class:ForkJoinAnalysis
isSameThisPtrInConstructor	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isSameThisPtrInConstructor(const Argument* thisPtr1,$/;"	f	class:cppUtil
isSameVar	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    bool isSameVar(const CVar& var1, const CVar& var2) const$/;"	f	class:SVF::CondPTAImpl
isSatisfiable	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isSatisfiable(const Condition &condition)$/;"	f	class:SaberCondAllocator
isSatisfiableForAll	svf/lib/SABER/ProgSlice.cpp	/^bool ProgSlice::isSatisfiableForAll()$/;"	f	class:ProgSlice
isSatisfiableForPairs	svf/lib/SABER/ProgSlice.cpp	/^bool ProgSlice::isSatisfiableForPairs()$/;"	f	class:ProgSlice
isScalar	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline bool isScalar() const$/;"	f	class:SVF::DCHNode
isSelectConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isSelectConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isSext	svf/include/SVFIR/SVFStatements.h	/^    inline bool isSext() const$/;"	f	class:SVF::CopyStmt
isSigned	svf/include/SVFIR/SVFType.h	/^    bool isSigned() const$/;"	f	class:SVF::SVFIntegerType
isSimple	svf/include/Graphs/DOTGraphTraits.h	/^    bool isSimple()$/;"	f	struct:SVF::DefaultDOTGraphTraits
isSingleFieldObj	svf/include/Graphs/ConsG.h	/^    inline bool isSingleFieldObj(NodeID id) const$/;"	f	class:SVF::ConstraintGraph
isSingleValTy	svf/include/SVFIR/SVFType.h	/^    bool isSingleValTy; \/\/\/< The type represents a single value, not struct or$/;"	m	class:SVF::SVFType
isSingleValueType	svf/include/SVFIR/SVFType.h	/^    inline bool isSingleValueType() const$/;"	f	class:SVF::SVFType
isSink	svf/include/Graphs/SVFGStat.h	/^    inline bool isSink(const SVFGNode* node) const$/;"	f	class:SVF::SVFGStat
isSink	svf/include/SABER/SrcSnkDDA.h	/^    bool isSink(const SVFGNode* node) const$/;"	f	class:SVF::SrcSnkDDA
isSinkLikeFun	svf/include/SABER/FileChecker.h	/^    inline bool isSinkLikeFun(const FunObjVar* fun)$/;"	f	class:SVF::FileChecker
isSinkLikeFun	svf/include/SABER/SrcSnkDDA.h	/^    virtual bool isSinkLikeFun(const FunObjVar* fun)$/;"	f	class:SVF::SrcSnkDDA
isSomePathReachable	svf/include/SABER/SrcSnkDDA.h	/^    virtual bool isSomePathReachable()$/;"	f	class:SVF::SrcSnkDDA
isSource	svf/include/Graphs/SVFGStat.h	/^    inline bool isSource(const SVFGNode* node) const$/;"	f	class:SVF::SVFGStat
isSource	svf/include/SABER/SrcSnkDDA.h	/^    bool isSource(const SVFGNode* node) const$/;"	f	class:SVF::SrcSnkDDA
isSourceLikeFun	svf/include/SABER/FileChecker.h	/^    inline bool isSourceLikeFun(const FunObjVar* fun)$/;"	f	class:SVF::FileChecker
isSourceLikeFun	svf/include/SABER/SrcSnkDDA.h	/^    virtual bool isSourceLikeFun(const FunObjVar* fun)$/;"	f	class:SVF::SrcSnkDDA
isSpuriousVFEdgeAtIndCallSite	svf/include/MSSA/SVFGBuilder.h	/^    inline bool isSpuriousVFEdgeAtIndCallSite(const SVFGEdge* edge)$/;"	f	class:SVF::SVFGBuilder
isStack	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isStack()$/;"	f	class:SVF::ObjTypeInfo
isStack	svf/include/SVFIR/SVFVariables.h	/^    bool isStack() const$/;"	f	class:SVF::BaseObjVar
isStackAllocExtCall	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline bool isStackAllocExtCall(const Instruction *inst)$/;"	f	namespace:SVF::LLVMUtil
isStackAllocExtCallViaRet	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isStackAllocExtCallViaRet(const Instruction *inst)$/;"	f	class:LLVMUtil
isStackObj	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isStackObj(const Value* val)$/;"	f	class:LLVMUtil
isStaticObj	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isStaticObj()$/;"	f	class:SVF::ObjTypeInfo
isStaticObj	svf/include/SVFIR/SVFVariables.h	/^    bool isStaticObj() const$/;"	f	class:SVF::BaseObjVar
isStmtVFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isStmtVFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isStore	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::isStore(const NodeID l) const$/;"	f	class:VersionedFlowSensitive
isStoreMap	svf/include/WPA/VersionedFlowSensitive.h	/^    std::vector<bool> isStoreMap;$/;"	m	class:SVF::VersionedFlowSensitive
isStrongUpdate	svf/include/DDA/DDAVFSolver.h	/^    virtual bool isStrongUpdate(const CPtSet& dstCPSet, const StoreSVFGNode* store)$/;"	f	class:SVF::DDAVFSolver
isStrongUpdate	svf/lib/SABER/SaberSVFGBuilder.cpp	/^bool SaberSVFGBuilder::isStrongUpdate(const SVFGNode* node, NodeID& singleton, BVDataPTAImpl* pta)$/;"	f	class:SaberSVFGBuilder
isStrongUpdate	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::isStrongUpdate(const SVFGNode* node, NodeID& singleton)$/;"	f	class:FlowSensitive
isStruct	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isStruct()$/;"	f	class:SVF::ObjTypeInfo
isStruct	svf/include/SVFIR/SVFVariables.h	/^    bool isStruct() const$/;"	f	class:SVF::BaseObjVar
isStructTy	svf/include/SVFIR/SVFType.h	/^    inline bool isStructTy() const$/;"	f	class:SVF::SVFType
isSubnormal	z3.obj/bin/python/z3/z3.py	/^    def isSubnormal(self):$/;"	m	class:FPNumRef
isSubset	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool isSubset(const CondPointsToSet<Cond>& rhs) const$/;"	f	class:SVF::CondPointsToSet
isSwitchBranchFeasible	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::isSwitchBranchFeasible(const SVFVar* var, s64_t succ,$/;"	f	class:AbstractInterpretation
isTDAcquire	svf/include/MTA/LockAnalysis.h	/^    inline bool isTDAcquire(const ICFGNode* call)$/;"	f	class:SVF::LockAnalysis
isTDAcquire	svf/lib/Util/ThreadAPI.cpp	/^bool ThreadAPI::isTDAcquire(const CallICFGNode* inst) const$/;"	f	class:ThreadAPI
isTDBarWait	svf/lib/Util/ThreadAPI.cpp	/^bool ThreadAPI::isTDBarWait(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
isTDExit	svf/lib/Util/ThreadAPI.cpp	/^bool ThreadAPI::isTDExit(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
isTDFork	svf/include/MTA/LockAnalysis.h	/^    inline bool isTDFork(const ICFGNode* call)$/;"	f	class:SVF::LockAnalysis
isTDFork	svf/include/MTA/MHP.h	/^    inline bool isTDFork(const ICFGNode* call)$/;"	f	class:SVF::ForkJoinAnalysis
isTDFork	svf/include/MTA/MHP.h	/^    inline bool isTDFork(const ICFGNode* call)$/;"	f	class:SVF::MHP
isTDFork	svf/lib/Util/ThreadAPI.cpp	/^bool ThreadAPI::isTDFork(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
isTDJoin	svf/include/MTA/MHP.h	/^    inline bool isTDJoin(const ICFGNode* call)$/;"	f	class:SVF::ForkJoinAnalysis
isTDJoin	svf/include/MTA/MHP.h	/^    inline bool isTDJoin(const ICFGNode* call)$/;"	f	class:SVF::MHP
isTDJoin	svf/lib/Util/ThreadAPI.cpp	/^bool ThreadAPI::isTDJoin(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
isTDRelease	svf/include/MTA/LockAnalysis.h	/^    inline bool isTDRelease(const ICFGNode* call)$/;"	f	class:SVF::LockAnalysis
isTDRelease	svf/lib/Util/ThreadAPI.cpp	/^bool ThreadAPI::isTDRelease(const CallICFGNode *inst) const$/;"	f	class:ThreadAPI
isTemplate	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline bool isTemplate() const$/;"	f	class:SVF::DCHNode
isTemplate	svf/include/Graphs/CHG.h	/^    inline bool isTemplate() const$/;"	f	class:SVF::CHNode
isTemplateFunc	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isTemplateFunc(const Function *foo)$/;"	f	class:cppUtil
isTestContainsNullAndTheValue	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isTestContainsNullAndTheValue(const CmpStmt *cmp) const$/;"	f	class:SaberCondAllocator
isTestNotNullExpr	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isTestNotNullExpr(const ICFGNode* test) const$/;"	f	class:SaberCondAllocator
isTestNullExpr	svf/lib/SABER/SaberCondAllocator.cpp	/^bool SaberCondAllocator::isTestNullExpr(const ICFGNode* test) const$/;"	f	class:SaberCondAllocator
isThreadExitCall	svf/include/Util/SVFUtil.h	/^inline bool isThreadExitCall(const CallICFGNode* cs)$/;"	f	namespace:SVF::SVFUtil
isThreadForkCall	svf/include/Util/SVFUtil.h	/^inline bool isThreadForkCall(const CallICFGNode *inst)$/;"	f	namespace:SVF::SVFUtil
isThreadJoinCall	svf/include/Util/SVFUtil.h	/^inline bool isThreadJoinCall(const CallICFGNode* cs)$/;"	f	namespace:SVF::SVFUtil
isThreadMHPIndirectVFGEdge	svf/include/Graphs/VFGEdge.h	/^    inline bool isThreadMHPIndirectVFGEdge() const$/;"	f	class:SVF::VFGEdge
isThunkFunc	svf-llvm/include/SVF-LLVM/CppUtil.h	/^    bool isThunkFunc;$/;"	m	struct:SVF::cppUtil::DemangledName
isTop	svf/include/AE/Core/AddressValue.h	/^    inline bool isTop() const$/;"	f	class:SVF::AddressValue
isTop	svf/include/AE/Core/IntervalValue.h	/^    bool isTop() const$/;"	f	class:SVF::IntervalValue
isTopLevelPtrStmt	svf/include/DDA/DDAVFSolver.h	/^    inline bool isTopLevelPtrStmt(const SVFGNode* stmt)$/;"	f	class:SVF::DDAVFSolver
isTruncConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isTruncConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isUnaryConstantExpr	svf-llvm/include/SVF-LLVM/LLVMUtil.h	/^inline const ConstantExpr* isUnaryConstantExpr(const Value* val)$/;"	f	namespace:SVF::LLVMUtil
isUncalled	svf/include/SVFIR/SVFVariables.h	/^    bool isUncalled;    \/\/\/ return true if this function is never called$/;"	m	class:SVF::FunObjVar
isUncalledFunction	svf-llvm/lib/LLVMUtil.cpp	/^bool LLVMUtil::isUncalledFunction (const Function*  fun)$/;"	f	class:LLVMUtil
isUncalledFunction	svf/include/SVFIR/SVFVariables.h	/^    inline bool isUncalledFunction() const$/;"	f	class:SVF::FunObjVar
isUnconditional	svf/lib/SVFIR/SVFStatements.cpp	/^bool BranchStmt::isUnconditional() const$/;"	f	class:BranchStmt
isUnreachable	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline bool isUnreachable(const SVFBasicBlock* bb) const$/;"	f	class:SVF::SVFLoopAndDomInfo
isVFGNodeKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isVFGNodeKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isValVarKinds	svf/include/SVFIR/SVFValue.h	/^    static inline bool isValVarKinds(GNodeK n)$/;"	f	class:SVF::SVFValue
isValVtbl	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isValVtbl(const Value* val)$/;"	f	class:cppUtil
isValidPointer	svf/lib/SVFIR/SVFIR.cpp	/^bool SVFIR::isValidPointer(NodeID nodeId) const$/;"	f	class:SVFIR
isValidTopLevelPtr	svf/lib/SVFIR/SVFIR.cpp	/^bool SVFIR::isValidTopLevelPtr(const SVFVar* node)$/;"	f	class:SVFIR
isValueCopy	svf/include/SVFIR/SVFStatements.h	/^    inline bool isValueCopy() const$/;"	f	class:SVF::CopyStmt
isVarArg	svf/include/Graphs/ICFGNode.h	/^    inline bool isVarArg() const$/;"	f	class:SVF::CallICFGNode
isVarArg	svf/include/SVFIR/SVFType.h	/^    bool isVarArg() const$/;"	f	class:SVF::SVFFunctionType
isVarArg	svf/include/SVFIR/SVFVariables.h	/^    inline bool isVarArg() const$/;"	f	class:SVF::FunObjVar
isVarArray	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isVarArray()$/;"	f	class:SVF::ObjTypeInfo
isVarArray	svf/include/SVFIR/SVFVariables.h	/^    bool isVarArray() const$/;"	f	class:SVF::BaseObjVar
isVarStruct	svf/include/SVFIR/ObjTypeInfo.h	/^    inline bool isVarStruct()$/;"	f	class:SVF::ObjTypeInfo
isVarStruct	svf/include/SVFIR/SVFVariables.h	/^    bool isVarStruct() const$/;"	f	class:SVF::BaseObjVar
isVariantFieldGep	svf/include/SVFIR/SVFStatements.h	/^    inline bool isVariantFieldGep() const$/;"	f	class:SVF::GepStmt
isVirCallInst	svf/include/Graphs/ICFGNode.h	/^    bool isVirCallInst;             \/\/\/ is virtual call inst$/;"	m	class:SVF::CallICFGNode
isVirtualCall	svf/include/Graphs/ICFGNode.h	/^    inline bool isVirtualCall() const$/;"	f	class:SVF::CallICFGNode
isVirtualCallSite	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::isVirtualCallSite(const CallBase* cs)$/;"	f	class:cppUtil
isVirtualMemAddress	svf/include/AE/Core/AbstractState.h	/^    static inline bool isVirtualMemAddress(u32_t val)$/;"	f	class:SVF::AbstractState
isVirtualMemAddress	svf/include/AE/Core/AddressValue.h	/^    static inline bool isVirtualMemAddress(u32_t val)$/;"	f	class:SVF::AddressValue
isVirtualMemAddress	svf/include/AE/Core/RelExeState.h	/^    static inline bool isVirtualMemAddress(u32_t val)$/;"	f	class:SVF::RelExeState
isVisited	svf/include/WPA/CSC.h	/^    bool isVisited(NodeID nId)$/;"	f	class:SVF::CSC
isVisitedCTPs	svf/include/MTA/LockAnalysis.h	/^    inline bool isVisitedCTPs(const CxtLockProc& clp) const$/;"	f	class:SVF::LockAnalysis
isVisitedCTPs	svf/include/MTA/TCT.h	/^    inline bool isVisitedCTPs(const CxtThreadProc& ctp) const$/;"	f	class:SVF::TCT
isWorklistEmpty	svf/include/CFL/CFLSolver.h	/^    virtual inline bool isWorklistEmpty()$/;"	f	class:SVF::CFLSolver
isWorklistEmpty	svf/include/SABER/SrcSnkSolver.h	/^    inline bool isWorklistEmpty()$/;"	f	class:SVF::SrcSnkSolver
isWorklistEmpty	svf/include/Util/GraphReachSolver.h	/^    inline bool isWorklistEmpty()$/;"	f	class:SVF::GraphReachSolver
isWorklistEmpty	svf/include/WPA/WPASolver.h	/^    inline bool isWorklistEmpty()$/;"	f	class:SVF::WPASolver
isZero	svf/include/AE/Core/NumericValue.h	/^    static bool isZero(const BoundedDouble& expr)$/;"	f	class:SVF::BoundedDouble
isZero	svf/include/AE/Core/NumericValue.h	/^    static bool isZero(const BoundedInt& expr)$/;"	f	class:SVF::BoundedInt
isZero	z3.obj/bin/python/z3/z3.py	/^    def isZero(self):$/;"	m	class:FPNumRef
isZeroOffsettedGepCGEdge	svf/include/Graphs/ConsG.h	/^    inline bool isZeroOffsettedGepCGEdge(ConstraintEdge *edge) const$/;"	f	class:SVF::ConstraintGraph
isZext	svf/include/SVFIR/SVFStatements.h	/^    inline bool isZext() const$/;"	f	class:SVF::CopyStmt
is_K	z3.obj/bin/python/z3/z3.py	/^def is_K(a):$/;"	f
is_add	z3.obj/bin/python/z3/z3.py	/^def is_add(a):$/;"	f
is_algebraic	z3.obj/include/z3++.h	/^        bool is_algebraic() const { return Z3_is_algebraic_number(ctx(), m_ast); }$/;"	f	class:z3::expr
is_algebraic_value	z3.obj/bin/python/z3/z3.py	/^def is_algebraic_value(a):$/;"	f
is_alloc	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_alloc(const Function* F)$/;"	f	class:LLVMModuleSet
is_alloc	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_alloc(const FunObjVar* F)$/;"	f	class:ExtAPI
is_alloc_stack_ret	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_alloc_stack_ret(const Function* F)$/;"	f	class:LLVMModuleSet
is_alloc_stack_ret	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_alloc_stack_ret(const FunObjVar* F)$/;"	f	class:ExtAPI
is_and	z3.obj/bin/python/z3/z3.py	/^def is_and(a):$/;"	f
is_and	z3.obj/include/z3++.h	/^        bool is_and() const { return is_app() && Z3_OP_AND == decl().decl_kind(); }$/;"	f	class:z3::expr
is_app	z3.obj/bin/python/z3/z3.py	/^def is_app(a):$/;"	f
is_app	z3.obj/include/z3++.h	/^        bool is_app() const { return kind() == Z3_APP_AST || kind() == Z3_NUMERAL_AST; }$/;"	f	class:z3::expr
is_app_of	z3.obj/bin/python/z3/z3.py	/^def is_app_of(a, k):$/;"	f
is_arg_alloc	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_arg_alloc(const Function* F)$/;"	f	class:LLVMModuleSet
is_arg_alloc	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_arg_alloc(const FunObjVar* F)$/;"	f	class:ExtAPI
is_arith	z3.obj/bin/python/z3/z3.py	/^def is_arith(a):$/;"	f
is_arith	z3.obj/include/z3++.h	/^        bool is_arith() const { return get_sort().is_arith(); }$/;"	f	class:z3::expr
is_arith	z3.obj/include/z3++.h	/^        bool is_arith() const { return is_int() || is_real(); }$/;"	f	class:z3::sort
is_arith_sort	z3.obj/bin/python/z3/z3.py	/^def is_arith_sort(s):$/;"	f
is_array	z3.obj/bin/python/z3/z3.py	/^def is_array(a):$/;"	f
is_array	z3.obj/include/z3++.h	/^        bool is_array() const { return get_sort().is_array(); }$/;"	f	class:z3::expr
is_array	z3.obj/include/z3++.h	/^        bool is_array() const { return sort_kind() == Z3_ARRAY_SORT; }$/;"	f	class:z3::sort
is_array_sort	z3.obj/bin/python/z3/z3.py	/^def is_array_sort(a):$/;"	f
is_as_array	z3.obj/bin/python/z3/z3.py	/^def is_as_array(n):$/;"	f
is_assoc	z3.obj/bin/python/z3/z3printer.py	/^    def is_assoc(self, k):$/;"	m	class:Formatter
is_assoc	z3.obj/bin/python/z3/z3printer.py	/^    def is_assoc(self, k):$/;"	m	class:HTMLFormatter
is_ast	z3.obj/bin/python/z3/z3.py	/^def is_ast(a):$/;"	f
is_bool	svf/include/Util/Z3Expr.h	/^    inline bool is_bool() const$/;"	f	class:SVF::Z3Expr
is_bool	z3.obj/bin/python/z3/z3.py	/^    def is_bool(self):$/;"	m	class:BoolSortRef
is_bool	z3.obj/bin/python/z3/z3.py	/^def is_bool(a):$/;"	f
is_bool	z3.obj/include/z3++.h	/^        bool is_bool() const { return get_sort().is_bool(); }$/;"	f	class:z3::expr
is_bool	z3.obj/include/z3++.h	/^        bool is_bool() const { return sort_kind() == Z3_BOOL_SORT; }$/;"	f	class:z3::sort
is_bv	z3.obj/bin/python/z3/z3.py	/^def is_bv(a):$/;"	f
is_bv	z3.obj/include/z3++.h	/^        bool is_bv() const { return get_sort().is_bv(); }$/;"	f	class:z3::expr
is_bv	z3.obj/include/z3++.h	/^        bool is_bv() const { return sort_kind() == Z3_BV_SORT; }$/;"	f	class:z3::sort
is_bv_sort	z3.obj/bin/python/z3/z3.py	/^def is_bv_sort(s):$/;"	f
is_bv_value	z3.obj/bin/python/z3/z3.py	/^def is_bv_value(a):$/;"	f
is_choice	z3.obj/bin/python/z3/z3printer.py	/^    def is_choice(sef):$/;"	m	class:ChoiceFormatObject
is_choice	z3.obj/bin/python/z3/z3printer.py	/^    def is_choice(self):$/;"	m	class:FormatObject
is_compose	z3.obj/bin/python/z3/z3printer.py	/^    def is_compose(sef):$/;"	m	class:ComposeFormatObject
is_compose	z3.obj/bin/python/z3/z3printer.py	/^    def is_compose(self):$/;"	m	class:FormatObject
is_const	z3.obj/bin/python/z3/z3.py	/^def is_const(a):$/;"	f
is_const	z3.obj/include/z3++.h	/^        bool is_const() const { return arity() == 0; }$/;"	f	class:z3::func_decl
is_const	z3.obj/include/z3++.h	/^        bool is_const() const { return is_app() && num_args() == 0; }$/;"	f	class:z3::expr
is_const_array	z3.obj/bin/python/z3/z3.py	/^def is_const_array(a):$/;"	f
is_contradiction	z3.obj/bin/python/z3/z3util.py	/^def is_contradiction(claim,verbose=0):$/;"	f
is_datatype	z3.obj/include/z3++.h	/^        bool is_datatype() const { return get_sort().is_datatype(); }$/;"	f	class:z3::expr
is_datatype	z3.obj/include/z3++.h	/^        bool is_datatype() const { return sort_kind() == Z3_DATATYPE_SORT; }$/;"	f	class:z3::sort
is_decided_sat	z3.obj/include/z3++.h	/^        bool is_decided_sat() const { return Z3_goal_is_decided_sat(ctx(), m_goal); }$/;"	f	class:z3::goal
is_decided_unsat	z3.obj/include/z3++.h	/^        bool is_decided_unsat() const { return Z3_goal_is_decided_unsat(ctx(), m_goal); }$/;"	f	class:z3::goal
is_default	z3.obj/bin/python/z3/z3.py	/^def is_default(a):$/;"	f
is_distinct	z3.obj/bin/python/z3/z3.py	/^def is_distinct(a):$/;"	f
is_distinct	z3.obj/include/z3++.h	/^        bool is_distinct() const { return is_app() && Z3_OP_DISTINCT == decl().decl_kind(); }$/;"	f	class:z3::expr
is_div	z3.obj/bin/python/z3/z3.py	/^def is_div(a):$/;"	f
is_double	z3.obj/include/z3++.h	/^        bool is_double(unsigned i) const { bool r = Z3_stats_is_double(ctx(), m_stats, i); check_error(); return r; }$/;"	f	class:z3::stats
is_eq	z3.obj/bin/python/z3/z3.py	/^def is_eq(a):$/;"	f
is_eq	z3.obj/include/z3++.h	/^        bool is_eq() const { return is_app() && Z3_OP_EQ == decl().decl_kind(); }$/;"	f	class:z3::expr
is_exists	z3.obj/bin/python/z3/z3.py	/^    def is_exists(self):$/;"	m	class:QuantifierRef
is_exists	z3.obj/include/z3++.h	/^        bool is_exists() const { return Z3_is_quantifier_exists(ctx(), m_ast); }$/;"	f	class:z3::expr
is_expr	z3.obj/bin/python/z3/z3.py	/^def is_expr(a):$/;"	f
is_expr_val	z3.obj/bin/python/z3/z3util.py	/^def is_expr_val(v):$/;"	f
is_expr_var	z3.obj/bin/python/z3/z3util.py	/^def is_expr_var(v):$/;"	f
is_ext	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_ext(const Function* F)$/;"	f	class:LLVMModuleSet
is_ext	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_ext(const FunObjVar *F)$/;"	f	class:ExtAPI
is_false	z3.obj/bin/python/z3/z3.py	/^def is_false(a):$/;"	f
is_false	z3.obj/include/z3++.h	/^        bool is_false() const { return is_app() && Z3_OP_FALSE == decl().decl_kind(); }$/;"	f	class:z3::expr
is_finite_domain	z3.obj/bin/python/z3/z3.py	/^def is_finite_domain(a):$/;"	f
is_finite_domain	z3.obj/include/z3++.h	/^        bool is_finite_domain() const { return get_sort().is_finite_domain(); }$/;"	f	class:z3::expr
is_finite_domain	z3.obj/include/z3++.h	/^        bool is_finite_domain() const { return sort_kind() == Z3_FINITE_DOMAIN_SORT; }$/;"	f	class:z3::sort
is_finite_domain_sort	z3.obj/bin/python/z3/z3.py	/^def is_finite_domain_sort(s):$/;"	f
is_finite_domain_value	z3.obj/bin/python/z3/z3.py	/^def is_finite_domain_value(a):$/;"	f
is_forall	z3.obj/bin/python/z3/z3.py	/^    def is_forall(self):$/;"	m	class:QuantifierRef
is_forall	z3.obj/include/z3++.h	/^        bool is_forall() const { return Z3_is_quantifier_forall(ctx(), m_ast); }$/;"	f	class:z3::expr
is_fp	z3.obj/bin/python/z3/z3.py	/^def is_fp(a):$/;"	f
is_fp_sort	z3.obj/bin/python/z3/z3.py	/^def is_fp_sort(s):$/;"	f
is_fp_value	z3.obj/bin/python/z3/z3.py	/^def is_fp_value(a):$/;"	f
is_fpa	z3.obj/include/z3++.h	/^        bool is_fpa() const { return get_sort().is_fpa(); }$/;"	f	class:z3::expr
is_fpa	z3.obj/include/z3++.h	/^        bool is_fpa() const { return sort_kind() == Z3_FLOATING_POINT_SORT; }$/;"	f	class:z3::sort
is_fprm	z3.obj/bin/python/z3/z3.py	/^def is_fprm(a):$/;"	f
is_fprm_sort	z3.obj/bin/python/z3/z3.py	/^def is_fprm_sort(s):$/;"	f
is_fprm_value	z3.obj/bin/python/z3/z3.py	/^def is_fprm_value(a):$/;"	f
is_func_decl	z3.obj/bin/python/z3/z3.py	/^def is_func_decl(a):$/;"	f
is_ge	z3.obj/bin/python/z3/z3.py	/^def is_ge(a):$/;"	f
is_gt	z3.obj/bin/python/z3/z3.py	/^def is_gt(a):$/;"	f
is_idiv	z3.obj/bin/python/z3/z3.py	/^def is_idiv(a):$/;"	f
is_implies	z3.obj/bin/python/z3/z3.py	/^def is_implies(a):$/;"	f
is_implies	z3.obj/include/z3++.h	/^        bool is_implies() const { return is_app() && Z3_OP_IMPLIES  == decl().decl_kind(); }$/;"	f	class:z3::expr
is_indent	z3.obj/bin/python/z3/z3printer.py	/^    def is_indent(self):$/;"	m	class:FormatObject
is_indent	z3.obj/bin/python/z3/z3printer.py	/^    def is_indent(self):$/;"	m	class:IndentFormatObject
is_infinite	svf/include/AE/Core/IntervalValue.h	/^    bool is_infinite() const$/;"	f	class:SVF::IntervalValue
is_infinite	svf/include/AE/Core/IntervalValue.h	/^    static bool is_infinite(const BoundedInt &e)$/;"	f	class:SVF::IntervalValue
is_infinity	svf/include/AE/Core/NumericValue.h	/^    bool is_infinity() const$/;"	f	class:SVF::BoundedDouble
is_infinity	svf/include/AE/Core/NumericValue.h	/^    bool is_infinity() const$/;"	f	class:SVF::BoundedInt
is_infix	z3.obj/bin/python/z3/z3printer.py	/^    def is_infix(self, a):$/;"	m	class:Formatter
is_infix	z3.obj/bin/python/z3/z3printer.py	/^    def is_infix(self, a):$/;"	m	class:HTMLFormatter
is_infix_compact	z3.obj/bin/python/z3/z3printer.py	/^    def is_infix_compact(self, a):$/;"	m	class:Formatter
is_infix_unary	z3.obj/bin/python/z3/z3printer.py	/^    def is_infix_unary(self, a):$/;"	m	class:Formatter
is_int	svf/include/AE/Core/IntervalValue.h	/^    bool is_int() const$/;"	f	class:SVF::IntervalValue
is_int	svf/include/AE/Core/NumericValue.h	/^    inline bool is_int() const$/;"	f	class:SVF::BoundedDouble
is_int	z3.obj/bin/python/z3/z3.py	/^    def is_int(self):$/;"	m	class:ArithRef
is_int	z3.obj/bin/python/z3/z3.py	/^    def is_int(self):$/;"	m	class:ArithSortRef
is_int	z3.obj/bin/python/z3/z3.py	/^    def is_int(self):$/;"	m	class:BoolSortRef
is_int	z3.obj/bin/python/z3/z3.py	/^    def is_int(self):$/;"	m	class:RatNumRef
is_int	z3.obj/bin/python/z3/z3.py	/^def is_int(a):$/;"	f
is_int	z3.obj/include/z3++.h	/^        bool is_int() const { return get_sort().is_int(); }$/;"	f	class:z3::expr
is_int	z3.obj/include/z3++.h	/^        bool is_int() const { return sort_kind() == Z3_INT_SORT; }$/;"	f	class:z3::sort
is_int	z3.obj/include/z3++.h	/^    inline expr is_int(expr const& e) { _Z3_MK_UN_(e, Z3_mk_is_int); }$/;"	f	namespace:z3
is_int_value	z3.obj/bin/python/z3/z3.py	/^    def is_int_value(self):$/;"	m	class:RatNumRef
is_int_value	z3.obj/bin/python/z3/z3.py	/^def is_int_value(a):$/;"	f
is_integer	z3.obj/bin/python/z3/z3num.py	/^    def is_integer(self):$/;"	m	class:Numeral
is_irrational	z3.obj/bin/python/z3/z3num.py	/^    def is_irrational(self):$/;"	m	class:Numeral
is_is_int	z3.obj/bin/python/z3/z3.py	/^def is_is_int(a):$/;"	f
is_ite	z3.obj/include/z3++.h	/^        bool is_ite() const { return is_app() && Z3_OP_ITE == decl().decl_kind(); }$/;"	f	class:z3::expr
is_iterable	svf/include/Util/SVFUtil.h	/^struct is_iterable<T, void_t<decltype(std::begin(std::declval<T&>()) !=$/;"	s	namespace:SVF::SVFUtil
is_iterable	svf/include/Util/SVFUtil.h	/^template <typename T, typename = void> struct is_iterable : std::false_type {};$/;"	s	namespace:SVF::SVFUtil
is_iterable_v	svf/include/Util/SVFUtil.h	/^template <typename T> constexpr bool is_iterable_v = is_iterable<T>::value;$/;"	m	namespace:SVF::SVFUtil
is_lambda	z3.obj/bin/python/z3/z3.py	/^    def is_lambda(self):$/;"	m	class:QuantifierRef
is_lambda	z3.obj/include/z3++.h	/^        bool is_lambda() const { return Z3_is_lambda(ctx(), m_ast); }$/;"	f	class:z3::expr
is_le	z3.obj/bin/python/z3/z3.py	/^def is_le(a):$/;"	f
is_left_assoc	z3.obj/bin/python/z3/z3printer.py	/^    def is_left_assoc(self, k):$/;"	m	class:Formatter
is_left_assoc	z3.obj/bin/python/z3/z3printer.py	/^    def is_left_assoc(self, k):$/;"	m	class:HTMLFormatter
is_linebreak	z3.obj/bin/python/z3/z3printer.py	/^    def is_linebreak(self):$/;"	m	class:FormatObject
is_linebreak	z3.obj/bin/python/z3/z3printer.py	/^    def is_linebreak(self):$/;"	m	class:LineBreakFormatObject
is_lt	z3.obj/bin/python/z3/z3.py	/^def is_lt(a):$/;"	f
is_map	svf/include/Util/SVFUtil.h	/^struct is_map<std::unordered_map<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_map	svf/include/Util/SVFUtil.h	/^template <typename T> struct is_map : std::false_type {};$/;"	s	namespace:SVF::SVFUtil
is_map	svf/include/Util/SVFUtil.h	/^template <typename... Ts> struct is_map<std::map<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_map	z3.obj/bin/python/z3/z3.py	/^def is_map(a):$/;"	f
is_map_v	svf/include/Util/SVFUtil.h	/^template <typename... Ts> constexpr bool is_map_v = is_map<Ts...>::value;$/;"	m	namespace:SVF::SVFUtil
is_memcpy	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_memcpy(const Function *F)$/;"	f	class:LLVMModuleSet
is_memcpy	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_memcpy(const FunObjVar *F)$/;"	f	class:ExtAPI
is_memset	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_memset(const Function *F)$/;"	f	class:LLVMModuleSet
is_memset	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_memset(const FunObjVar *F)$/;"	f	class:ExtAPI
is_minus_infinity	svf/include/AE/Core/NumericValue.h	/^    bool is_minus_infinity() const$/;"	f	class:SVF::BoundedDouble
is_minus_infinity	svf/include/AE/Core/NumericValue.h	/^    bool is_minus_infinity() const$/;"	f	class:SVF::BoundedInt
is_mod	z3.obj/bin/python/z3/z3.py	/^def is_mod(a):$/;"	f
is_mul	z3.obj/bin/python/z3/z3.py	/^def is_mul(a):$/;"	f
is_neg	z3.obj/bin/python/z3/z3num.py	/^    def is_neg(self):$/;"	m	class:Numeral
is_nil	z3.obj/bin/python/z3/z3printer.py	/^    def is_nil(self):$/;"	m	class:FormatObject
is_not	z3.obj/bin/python/z3/z3.py	/^def is_not(a):$/;"	f
is_not	z3.obj/include/z3++.h	/^        bool is_not() const { return is_app() && Z3_OP_NOT == decl().decl_kind(); }$/;"	f	class:z3::expr
is_numeral	svf/include/AE/Core/IntervalValue.h	/^    bool is_numeral() const$/;"	f	class:SVF::IntervalValue
is_numeral	svf/include/Util/Z3Expr.h	/^    inline bool is_numeral() const$/;"	f	class:SVF::Z3Expr
is_numeral	z3.obj/include/z3++.h	/^        bool is_numeral() const { return kind() == Z3_NUMERAL_AST; }$/;"	f	class:z3::expr
is_numeral	z3.obj/include/z3++.h	/^        bool is_numeral(double& d) const { if (!is_numeral()) return false; d = Z3_get_numeral_double(ctx(), m_ast); check_error(); return true; }$/;"	f	class:z3::expr
is_numeral	z3.obj/include/z3++.h	/^        bool is_numeral(std::string& s) const { if (!is_numeral()) return false; s = Z3_get_numeral_string(ctx(), m_ast); check_error(); return true; }$/;"	f	class:z3::expr
is_numeral	z3.obj/include/z3++.h	/^        bool is_numeral(std::string& s, unsigned precision) const { if (!is_numeral()) return false; s = Z3_get_numeral_decimal_string(ctx(), m_ast, precision); check_error(); return true; }$/;"	f	class:z3::expr
is_numeral_i	z3.obj/include/z3++.h	/^        bool is_numeral_i(int& i) const { bool r = Z3_get_numeral_int(ctx(), m_ast, &i); check_error(); return r;}$/;"	f	class:z3::expr
is_numeral_i64	z3.obj/include/z3++.h	/^        bool is_numeral_i64(int64_t& i) const { bool r = Z3_get_numeral_int64(ctx(), m_ast, &i); check_error(); return r;}$/;"	f	class:z3::expr
is_numeral_u	z3.obj/include/z3++.h	/^        bool is_numeral_u(unsigned& i) const { bool r = Z3_get_numeral_uint(ctx(), m_ast, &i); check_error(); return r;}$/;"	f	class:z3::expr
is_numeral_u64	z3.obj/include/z3++.h	/^        bool is_numeral_u64(uint64_t& i) const { bool r = Z3_get_numeral_uint64(ctx(), m_ast, &i); check_error(); return r;}$/;"	f	class:z3::expr
is_or	z3.obj/bin/python/z3/z3.py	/^def is_or(a):$/;"	f
is_or	z3.obj/include/z3++.h	/^        bool is_or() const  { return is_app() && Z3_OP_OR  == decl().decl_kind(); }$/;"	f	class:z3::expr
is_pattern	z3.obj/bin/python/z3/z3.py	/^def is_pattern(a):$/;"	f
is_plus_infinity	svf/include/AE/Core/NumericValue.h	/^    bool is_plus_infinity() const$/;"	f	class:SVF::BoundedDouble
is_plus_infinity	svf/include/AE/Core/NumericValue.h	/^    bool is_plus_infinity() const$/;"	f	class:SVF::BoundedInt
is_pos	z3.obj/bin/python/z3/z3num.py	/^    def is_pos(self):$/;"	m	class:Numeral
is_probe	z3.obj/bin/python/z3/z3.py	/^def is_probe(p):$/;"	f
is_quantifier	z3.obj/bin/python/z3/z3.py	/^def is_quantifier(a):$/;"	f
is_quantifier	z3.obj/include/z3++.h	/^        bool is_quantifier() const { return kind() == Z3_QUANTIFIER_AST; }$/;"	f	class:z3::expr
is_rational	z3.obj/bin/python/z3/z3num.py	/^    def is_rational(self):$/;"	m	class:Numeral
is_rational_value	z3.obj/bin/python/z3/z3.py	/^def is_rational_value(a):$/;"	f
is_re	z3.obj/bin/python/z3/z3.py	/^def is_re(s):$/;"	f
is_re	z3.obj/include/z3++.h	/^        bool is_re() const { return get_sort().is_re(); }$/;"	f	class:z3::expr
is_re	z3.obj/include/z3++.h	/^        bool is_re() const { return sort_kind() == Z3_RE_SORT; }$/;"	f	class:z3::sort
is_real	svf/include/AE/Core/IntervalValue.h	/^    bool is_real() const$/;"	f	class:SVF::IntervalValue
is_real	svf/include/AE/Core/NumericValue.h	/^    bool is_real() const$/;"	f	class:SVF::BoundedInt
is_real	svf/include/AE/Core/NumericValue.h	/^    inline bool is_real() const$/;"	f	class:SVF::BoundedDouble
is_real	z3.obj/bin/python/z3/z3.py	/^    def is_real(self):$/;"	m	class:ArithRef
is_real	z3.obj/bin/python/z3/z3.py	/^    def is_real(self):$/;"	m	class:ArithSortRef
is_real	z3.obj/bin/python/z3/z3.py	/^    def is_real(self):$/;"	m	class:RatNumRef
is_real	z3.obj/bin/python/z3/z3.py	/^def is_real(a):$/;"	f
is_real	z3.obj/include/z3++.h	/^        bool is_real() const { return get_sort().is_real(); }$/;"	f	class:z3::expr
is_real	z3.obj/include/z3++.h	/^        bool is_real() const { return sort_kind() == Z3_REAL_SORT; }$/;"	f	class:z3::sort
is_realloc	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::is_realloc(const Function* F)$/;"	f	class:LLVMModuleSet
is_realloc	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::is_realloc(const FunObjVar* F)$/;"	f	class:ExtAPI
is_relation	z3.obj/include/z3++.h	/^        bool is_relation() const { return get_sort().is_relation(); }$/;"	f	class:z3::expr
is_relation	z3.obj/include/z3++.h	/^        bool is_relation() const { return sort_kind() == Z3_RELATION_SORT; }$/;"	f	class:z3::sort
is_select	z3.obj/bin/python/z3/z3.py	/^def is_select(a):$/;"	f
is_seq	z3.obj/bin/python/z3/z3.py	/^def is_seq(a):$/;"	f
is_seq	z3.obj/include/z3++.h	/^        bool is_seq() const { return get_sort().is_seq(); }$/;"	f	class:z3::expr
is_seq	z3.obj/include/z3++.h	/^        bool is_seq() const { return sort_kind() == Z3_SEQ_SORT; }$/;"	f	class:z3::sort
is_sequence_container	svf/include/Util/SVFUtil.h	/^struct is_sequence_container<std::deque<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_sequence_container	svf/include/Util/SVFUtil.h	/^struct is_sequence_container<std::list<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_sequence_container	svf/include/Util/SVFUtil.h	/^struct is_sequence_container<std::vector<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_sequence_container	svf/include/Util/SVFUtil.h	/^template <typename T> struct is_sequence_container : std::false_type {};$/;"	s	namespace:SVF::SVFUtil
is_sequence_container_v	svf/include/Util/SVFUtil.h	/^constexpr bool is_sequence_container_v = is_sequence_container<Ts...>::value;$/;"	m	namespace:SVF::SVFUtil
is_set	svf/include/Util/SVFUtil.h	/^struct is_set<std::unordered_set<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_set	svf/include/Util/SVFUtil.h	/^template <typename T> struct is_set : std::false_type {};$/;"	s	namespace:SVF::SVFUtil
is_set	svf/include/Util/SVFUtil.h	/^template <typename... Ts> struct is_set<std::set<Ts...>> : std::true_type {};$/;"	s	namespace:SVF::SVFUtil
is_set_v	svf/include/Util/SVFUtil.h	/^template <typename... Ts> constexpr bool is_set_v = is_set<Ts...>::value;$/;"	m	namespace:SVF::SVFUtil
is_simple_type	svf/include/Util/Casting.h	/^template <class X> struct is_simple_type$/;"	s	namespace:SVF::SVFUtil
is_sort	z3.obj/bin/python/z3/z3.py	/^def is_sort(s):$/;"	f
is_store	z3.obj/bin/python/z3/z3.py	/^def is_store(a):$/;"	f
is_string	z3.obj/bin/python/z3/z3.py	/^    def is_string(self):$/;"	m	class:SeqRef
is_string	z3.obj/bin/python/z3/z3.py	/^    def is_string(self):$/;"	m	class:SeqSortRef
is_string	z3.obj/bin/python/z3/z3.py	/^def is_string(a):$/;"	f
is_string	z3.obj/bin/python/z3/z3printer.py	/^    def is_string(self):$/;"	m	class:FormatObject
is_string	z3.obj/bin/python/z3/z3printer.py	/^    def is_string(self):$/;"	m	class:StringFormatObject
is_string_value	z3.obj/bin/python/z3/z3.py	/^    def is_string_value(self):$/;"	m	class:SeqRef
is_string_value	z3.obj/bin/python/z3/z3.py	/^def is_string_value(a):$/;"	f
is_string_value	z3.obj/include/z3++.h	/^        bool is_string_value() const { return Z3_is_string(ctx(), m_ast); }$/;"	f	class:z3::expr
is_sub	z3.obj/bin/python/z3/z3.py	/^def is_sub(a):$/;"	f
is_tautology	z3.obj/bin/python/z3/z3util.py	/^def is_tautology(claim,verbose=0):$/;"	f
is_to_int	z3.obj/bin/python/z3/z3.py	/^def is_to_int(a):$/;"	f
is_to_real	z3.obj/bin/python/z3/z3.py	/^def is_to_real(a):$/;"	f
is_true	svf/include/AE/Core/NumericValue.h	/^    inline bool is_true() const$/;"	f	class:SVF::BoundedDouble
is_true	svf/include/AE/Core/NumericValue.h	/^    inline bool is_true() const$/;"	f	class:SVF::BoundedInt
is_true	z3.obj/bin/python/z3/z3.py	/^def is_true(a):$/;"	f
is_true	z3.obj/include/z3++.h	/^        bool is_true() const { return is_app() && Z3_OP_TRUE == decl().decl_kind(); }$/;"	f	class:z3::expr
is_uint	z3.obj/include/z3++.h	/^        bool is_uint(unsigned i) const { bool r = Z3_stats_is_uint(ctx(), m_stats, i); check_error(); return r; }$/;"	f	class:z3::stats
is_unary	z3.obj/bin/python/z3/z3printer.py	/^    def is_unary(self, a):$/;"	m	class:Formatter
is_unary	z3.obj/bin/python/z3/z3printer.py	/^    def is_unary(self, a):$/;"	m	class:HTMLFormatter
is_var	z3.obj/bin/python/z3/z3.py	/^def is_var(a):$/;"	f
is_var	z3.obj/include/z3++.h	/^        bool is_var() const { return kind() == Z3_VAR_AST; }$/;"	f	class:z3::expr
is_well_sorted	z3.obj/include/z3++.h	/^        bool is_well_sorted() const { bool r = Z3_is_well_sorted(ctx(), m_ast); check_error(); return r; }$/;"	f	class:z3::expr
is_xor	z3.obj/include/z3++.h	/^        bool is_xor() const { return is_app() && Z3_OP_XOR  == decl().decl_kind(); }$/;"	f	class:z3::expr
is_zero	svf/include/AE/Core/IntervalValue.h	/^    bool is_zero() const$/;"	f	class:SVF::IntervalValue
is_zero	svf/include/AE/Core/NumericValue.h	/^    bool is_zero() const$/;"	f	class:SVF::BoundedDouble
is_zero	svf/include/AE/Core/NumericValue.h	/^    bool is_zero() const$/;"	f	class:SVF::BoundedInt
is_zero	z3.obj/bin/python/z3/z3num.py	/^    def is_zero(self):$/;"	m	class:Numeral
isa	svf/include/Util/Casting.h	/^LLVM_NODISCARD inline bool isa(const Y &Val)$/;"	f	namespace:SVF::SVFUtil
isa	svf/include/Util/Casting.h	/^template <class X, class Y> LLVM_NODISCARD inline bool isa(const Y &Val)$/;"	f	namespace:SVF::SVFUtil
isa_impl	svf/include/Util/Casting.h	/^struct isa_impl$/;"	s	namespace:SVF::SVFUtil
isa_impl	svf/include/Util/Casting.h	/^struct isa_impl<To, From, std::enable_if_t<std::is_base_of<To, From>::value>>$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^struct isa_impl_cl<To, const std::unique_ptr<From>>$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^template <typename To, typename From> struct isa_impl_cl$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, From*>$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, From*const>$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From*>$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From*const>$/;"	s	namespace:SVF::SVFUtil
isa_impl_cl	svf/include/Util/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From>$/;"	s	namespace:SVF::SVFUtil
isa_impl_wrap	svf/include/Util/Casting.h	/^struct isa_impl_wrap$/;"	s	namespace:SVF::SVFUtil
isa_impl_wrap	svf/include/Util/Casting.h	/^struct isa_impl_wrap<To, FromTy, FromTy>$/;"	s	namespace:SVF::SVFUtil
isalnum	svf-llvm/lib/extapi.c	/^int isalnum(int character)$/;"	f
isalpha	svf-llvm/lib/extapi.c	/^int isalpha(int character)$/;"	f
isbkVisited	svf/include/DDA/DDAVFSolver.h	/^    inline bool isbkVisited(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
isblank	svf-llvm/lib/extapi.c	/^int isblank(int character)$/;"	f
iscntrl	svf-llvm/lib/extapi.c	/^int iscntrl(int c)$/;"	f
isdigit	svf-llvm/lib/extapi.c	/^int isdigit(int c)$/;"	f
isdirectEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool isdirectEdge(ConstraintEdge::ConstraintEdgeK kind)$/;"	f	class:SVF::ConstraintNode
isgraph	svf-llvm/lib/extapi.c	/^int isgraph(int c)$/;"	f
isinf	svf/lib/Util/cJSON.cpp	74;"	d	file:
islower	svf-llvm/lib/extapi.c	/^int islower( int arg )$/;"	f
isnan	svf/lib/Util/cJSON.cpp	77;"	d	file:
isolate_roots	z3.obj/bin/python/z3/z3num.py	/^def isolate_roots(p, vs=[]):$/;"	f
isprint	svf-llvm/lib/extapi.c	/^int isprint(int c)$/;"	f
ispunct	svf-llvm/lib/extapi.c	/^int ispunct(int argument)$/;"	f
isspace	svf-llvm/lib/extapi.c	/^int isspace(char c)$/;"	f
isupper	svf-llvm/lib/extapi.c	/^int isupper(int c)$/;"	f
isvararg	svf/include/Graphs/ICFGNode.h	/^    bool isvararg;                  \/\/\/ is variable argument$/;"	m	class:SVF::CallICFGNode
isxdigit	svf-llvm/lib/extapi.c	/^int isxdigit(int c)$/;"	f
ite	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble ite(const BoundedDouble& cond,$/;"	f	class:SVF::BoundedDouble
ite	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt ite(const BoundedInt& cond, const BoundedInt& lhs,$/;"	f	class:SVF::BoundedInt
ite	svf/include/Util/Z3Expr.h	/^    friend Z3Expr ite(const Z3Expr &cond, const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
ite	z3.obj/include/z3++.h	/^    inline expr ite(expr const & c, expr const & t, expr const & e) {$/;"	f	namespace:z3
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item);$/;"	v
item	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item);$/;"	v
iter_adaptor_base	svf/include/Util/iterator.h	/^    explicit iter_adaptor_base(WrappedIteratorT u) : I(std::move(u))$/;"	f	class:SVF::iter_adaptor_base
iter_adaptor_base	svf/include/Util/iterator.h	/^class iter_adaptor_base$/;"	c	namespace:SVF
iter_facade_base	svf/include/Util/iterator.h	/^class iter_facade_base$/;"	c	namespace:SVF
iter_range	svf/include/Util/iterator_range.h	/^    iter_range(Container &&c)$/;"	f	class:SVF::iter_range
iter_range	svf/include/Util/iterator_range.h	/^    iter_range(IteratorT begin_iterator, IteratorT end_iterator)$/;"	f	class:SVF::iter_range
iter_range	svf/include/Util/iterator_range.h	/^class iter_range$/;"	c	namespace:SVF
iterationForPrintStat	svf/include/WPA/WPASolver.h	/^    u32_t iterationForPrintStat;$/;"	m	class:SVF::WPASolver
iterator	svf/include/CFL/CFLSolver.h	/^    typedef typename DataMap::iterator iterator;                    \/\/ iterator for each node$/;"	t	class:SVF::POCRSolver
iterator	svf/include/Graphs/CDG.h	/^    typedef CDGEdge::CDGEdgeSetTy::iterator iterator;$/;"	t	class:SVF::CDGNode
iterator	svf/include/Graphs/CDG.h	/^    typedef CDGNodeIDToNodeMapTy::iterator iterator;$/;"	t	class:SVF::CDG
iterator	svf/include/Graphs/ConsGNode.h	/^    typedef ConstraintEdge::ConstraintEdgeSetTy::iterator iterator;$/;"	t	class:SVF::ConstraintNode
iterator	svf/include/Graphs/GenericGraph.h	/^    typedef typename GEdgeSetTy::iterator iterator;$/;"	t	class:SVF::GenericNode
iterator	svf/include/Graphs/GenericGraph.h	/^    typedef typename IDToNodeMapTy::iterator iterator;$/;"	t	class:SVF::GenericGraph
iterator	svf/include/Graphs/ICFG.h	/^    typedef ICFGNodeIDToNodeMapTy::iterator iterator;$/;"	t	class:SVF::ICFG
iterator	svf/include/Graphs/ICFGNode.h	/^    typedef ICFGEdge::ICFGEdgeSetTy::iterator iterator;$/;"	t	class:SVF::ICFGNode
iterator	svf/include/Graphs/VFG.h	/^    typedef VFGNodeIDToNodeMapTy::iterator iterator;$/;"	t	class:SVF::VFG
iterator	svf/include/Graphs/VFGNode.h	/^    typedef VFGEdge::VFGEdgeSetTy::iterator iterator;$/;"	t	class:SVF::VFGNode
iterator	svf/include/MemoryModel/ConditionalPT.h	/^    typedef CondPtsSetIterator iterator;$/;"	t	class:SVF::CondPointsToSet
iterator	svf/include/MemoryModel/ConditionalPT.h	/^    typedef typename OrderedSet<Element>::iterator iterator;$/;"	t	class:SVF::CondStdSet
iterator	svf/include/MemoryModel/MutablePointsToDS.h	/^    typedef typename DataSet::iterator iterator;$/;"	t	class:SVF::MutablePTData
iterator	svf/include/MemoryModel/PointsTo.h	/^    typedef const_iterator iterator;$/;"	t	class:SVF::PointsTo
iterator	svf/include/Util/CoreBitVector.h	/^    typedef const_iterator iterator;$/;"	t	class:SVF::CoreBitVector
iterator	svf/include/WPA/CSC.h	/^    typedef typename IdToIdMap::iterator iterator;$/;"	t	class:SVF::CSC
iterator	z3.obj/include/z3++.h	/^            iterator(ast_vector_tpl const* v, unsigned i): m_vector(v), m_index(i) {}$/;"	f	class:z3::ast_vector_tpl::iterator
iterator	z3.obj/include/z3++.h	/^            iterator(iterator const& other): m_vector(other.m_vector), m_index(other.m_index) {}$/;"	f	class:z3::ast_vector_tpl::iterator
iterator	z3.obj/include/z3++.h	/^        class iterator {$/;"	c	class:z3::ast_vector_tpl
itos	z3.obj/include/z3++.h	/^        expr itos() const {$/;"	f	class:z3::expr
joinSiteToLoopMap	svf/include/MTA/TCT.h	/^    InstToLoopMap joinSiteToLoopMap; \/\/\/< map an inloop join to its loop class$/;"	m	class:SVF::TCT
joinWith	svf/lib/AE/Core/AbstractState.cpp	/^void AbstractState::joinWith(const AbstractState& other)$/;"	f	class:AbstractState
join_with	svf/include/AE/Core/AbstractValue.h	/^    void join_with(const AbstractValue &other)$/;"	f	class:SVF::AbstractValue
join_with	svf/include/AE/Core/AddressValue.h	/^    bool join_with(const AddressValue &other)$/;"	f	class:SVF::AddressValue
join_with	svf/include/AE/Core/IntervalValue.h	/^    void join_with(const IntervalValue &other)$/;"	f	class:SVF::IntervalValue
joinsites	svf/include/Graphs/ThreadCallGraph.h	/^    CallSiteSet joinsites; \/\/\/< all thread fork sites$/;"	m	class:SVF::ThreadCallGraph
joinsitesBegin	svf/include/Graphs/ThreadCallGraph.h	/^    inline CallSiteSet::const_iterator joinsitesBegin() const$/;"	f	class:SVF::ThreadCallGraph
joinsitesEnd	svf/include/Graphs/ThreadCallGraph.h	/^    inline CallSiteSet::const_iterator joinsitesEnd() const$/;"	f	class:SVF::ThreadCallGraph
jpeg_std_error	svf-llvm/lib/extapi.c	/^struct jpeg_error_mgr *jpeg_std_error(struct jpeg_error_mgr * a)$/;"	f
json	svf/lib/Util/cJSON.cpp	/^    const unsigned char *json;$/;"	m	struct:__anon15	file:
keepActualOutFormalIn	svf/include/Graphs/SVFGOPT.h	/^    bool keepActualOutFormalIn;$/;"	m	class:SVF::SVFGOPT
keepAllSelfCycle	svf/include/Graphs/SVFGOPT.h	/^    bool keepAllSelfCycle;$/;"	m	class:SVF::SVFGOPT
keepContextSelfCycle	svf/include/Graphs/SVFGOPT.h	/^    bool keepContextSelfCycle;$/;"	m	class:SVF::SVFGOPT
key	z3.obj/include/z3++.h	/^        std::string key(unsigned i) const { Z3_string s = Z3_stats_get_key(ctx(), m_stats, i); check_error(); return s; }$/;"	f	class:z3::stats
keys	z3.obj/bin/python/z3/z3.py	/^    def keys(self):$/;"	m	class:AstMap
keys	z3.obj/bin/python/z3/z3.py	/^    def keys(self):$/;"	m	class:Statistics
kind	svf/include/AE/Svfexe/AEDetector.h	/^    DetectorKind kind; \/\/\/< The kind of the detector.$/;"	m	class:SVF::AEDetector
kind	svf/include/CFL/CFGrammar.h	/^        Kind kind: 8;$/;"	m	struct:SVF::GrammarBase::Symbol
kind	svf/include/Graphs/CHG.h	/^    CHGKind kind;$/;"	m	class:SVF::CommonCHGraph
kind	svf/include/Graphs/CallGraph.h	/^    CGEK kind;$/;"	m	class:SVF::CallGraph
kind	svf/include/Graphs/VFG.h	/^    VFGK kind;$/;"	m	class:SVF::VFG
kind	svf/include/SVFIR/SVFType.h	/^    GNodeK kind; \/\/\/< used for classof$/;"	m	class:SVF::SVFType
kind	z3.obj/bin/python/z3/z3.py	/^    def kind(self):$/;"	m	class:FuncDeclRef
kind	z3.obj/bin/python/z3/z3.py	/^    def kind(self):$/;"	m	class:SortRef
kind	z3.obj/include/z3++.h	/^        Z3_ast_kind kind() const { Z3_ast_kind r = Z3_get_ast_kind(ctx(), m_ast); check_error(); return r; }$/;"	f	class:z3::ast
kind	z3.obj/include/z3++.h	/^        Z3_param_kind kind(symbol const& s) { return Z3_param_descrs_get_kind(ctx(), m_descrs, s); }$/;"	f	class:z3::param_descrs
kind	z3.obj/include/z3++.h	/^        Z3_symbol_kind kind() const { return Z3_get_symbol_kind(ctx(), m_sym); }$/;"	f	class:z3::symbol
kindToAttrsMap	svf/include/CFL/CFGrammar.h	/^    Map<Kind,  Set<Attribute>> kindToAttrsMap;$/;"	m	class:SVF::GrammarBase
kindToAttrsMap	svf/include/CFL/CFLGraphBuilder.h	/^    Map<CFGrammar::Kind,  Set<CFGrammar::Attribute>> kindToAttrsMap;$/;"	m	class:SVF::CFLGraphBuilder
kindToLabelMap	svf/include/CFL/CFLGraphBuilder.h	/^    Map<Kind, std::string> kindToLabelMap;$/;"	m	class:SVF::CFLGraphBuilder
kindToStr	svf/lib/CFL/CFGrammar.cpp	/^std::string GrammarBase::kindToStr(Kind kind) const$/;"	f	class:GrammarBase
labelToKindMap	svf/include/CFL/CFLGraphBuilder.h	/^    Map<std::string, Kind> labelToKindMap;$/;"	m	class:SVF::CFLGraphBuilder
lalloc	svf-llvm/lib/extapi.c	/^void *lalloc(unsigned long size, int a)$/;"	f
lalloc_clear	svf-llvm/lib/extapi.c	/^void *lalloc_clear(unsigned long size, int a)$/;"	f
lambda	z3.obj/include/z3++.h	/^    inline expr lambda(expr const & x, expr const & b) {$/;"	f	namespace:z3
lambda	z3.obj/include/z3++.h	/^    inline expr lambda(expr const & x1, expr const & x2, expr const & b) {$/;"	f	namespace:z3
lambda	z3.obj/include/z3++.h	/^    inline expr lambda(expr const & x1, expr const & x2, expr const & x3, expr const & b) {$/;"	f	namespace:z3
lambda	z3.obj/include/z3++.h	/^    inline expr lambda(expr const & x1, expr const & x2, expr const & x3, expr const & x4, expr const & b) {$/;"	f	namespace:z3
lambda	z3.obj/include/z3++.h	/^    inline expr lambda(expr_vector const & xs, expr const & b) {$/;"	f	namespace:z3
last_indexof	z3.obj/include/z3++.h	/^    inline expr last_indexof(expr const& s, expr const& substr) {$/;"	f	namespace:z3
lb	svf/include/AE/Core/IntervalValue.h	/^    const BoundedInt &lb() const$/;"	f	class:SVF::IntervalValue
lds	z3.obj/bin/python/z3/z3core.py	/^    lds = lp.split(';') if sys.platform in ('win32') else lp.split(':')$/;"	v
length	svf/lib/Util/cJSON.cpp	/^    size_t length;$/;"	m	struct:__anon16	file:
length	svf/lib/Util/cJSON.cpp	/^    size_t length;$/;"	m	struct:__anon17	file:
length	z3.obj/include/z3++.h	/^        expr length() const {$/;"	f	class:z3::expr
leq	svf/include/AE/Core/IntervalValue.h	/^    bool leq(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
leq	svf/include/AE/Core/NumericValue.h	/^    bool leq(const BoundedDouble& rhs) const$/;"	f	class:SVF::BoundedDouble
leq	svf/include/AE/Core/NumericValue.h	/^    bool leq(const BoundedInt& rhs) const$/;"	f	class:SVF::BoundedInt
lessThanVarToValMap	svf/include/AE/Core/AbstractState.h	/^    static bool lessThanVarToValMap(const VarToAbsValMap&lhs, const VarToAbsValMap&rhs)$/;"	f	class:SVF::AbstractState
lessThanVarToValMap	svf/lib/AE/Core/RelExeState.cpp	/^bool RelExeState::lessThanVarToValMap(const VarToValMap &lhs, const VarToValMap &rhs) const$/;"	f	class:RelExeState
line_break	z3.obj/bin/python/z3/z3printer.py	/^def line_break():$/;"	f
linear_order	z3.obj/include/z3++.h	/^    inline func_decl linear_order(sort const& a, unsigned index) {$/;"	f	namespace:z3
llvm	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^namespace llvm$/;"	n
llvmModuleSet	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    inline LLVMModuleSet* llvmModuleSet()$/;"	f	class:SVF::ICFGBuilder
llvmModuleSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    static LLVMModuleSet* llvmModuleSet;$/;"	m	class:SVF::LLVMModuleSet
llvmModuleSet	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    LLVMModuleSet* llvmModuleSet()$/;"	f	class:SVF::SVFIRBuilder
llvmModuleSet	svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h	/^    inline LLVMModuleSet* llvmModuleSet()$/;"	f	class:SVF::SymbolTableBuilder
llvmModuleSet	svf-llvm/lib/CHGBuilder.cpp	/^LLVMModuleSet* CHGBuilder::llvmModuleSet()$/;"	f	class:CHGBuilder
llvm_memcpy	svf-llvm/lib/extapi.c	/^void llvm_memcpy(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memcpy_p0_p0_i32	svf-llvm/lib/extapi.c	/^void llvm_memcpy_p0_p0_i32(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memcpy_p0_p0_i64	svf-llvm/lib/extapi.c	/^void llvm_memcpy_p0_p0_i64(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memcpy_p0i8_p0i8_i32	svf-llvm/lib/extapi.c	/^void llvm_memcpy_p0i8_p0i8_i32(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memcpy_p0i8_p0i8_i64	svf-llvm/lib/extapi.c	/^void llvm_memcpy_p0i8_p0i8_i64(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memmove	svf-llvm/lib/extapi.c	/^void llvm_memmove(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memmove_p0_p0_i32	svf-llvm/lib/extapi.c	/^void llvm_memmove_p0_p0_i32(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memmove_p0_p0_i64	svf-llvm/lib/extapi.c	/^void llvm_memmove_p0_p0_i64(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memmove_p0i8_p0i8_i32	svf-llvm/lib/extapi.c	/^void llvm_memmove_p0i8_p0i8_i32(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memmove_p0i8_p0i8_i64	svf-llvm/lib/extapi.c	/^void llvm_memmove_p0i8_p0i8_i64(char* dst, char* src, int sz, int flag){}$/;"	f
llvm_memset	svf-llvm/lib/extapi.c	/^void llvm_memset(char* dst, char elem, int sz, int flag){}$/;"	f
llvm_memset_p0_i32	svf-llvm/lib/extapi.c	/^void llvm_memset_p0_i32(char* dst, char elem, int sz, int flag){}$/;"	f
llvm_memset_p0_i64	svf-llvm/lib/extapi.c	/^void llvm_memset_p0_i64(char* dst, char elem, int sz, int flag){}$/;"	f
llvm_memset_p0i8_i32	svf-llvm/lib/extapi.c	/^void llvm_memset_p0i8_i32(char* dst, char elem, int sz, int flag){}$/;"	f
llvm_memset_p0i8_i64	svf-llvm/lib/extapi.c	/^void llvm_memset_p0i8_i64(char* dst, char elem, int sz, int flag){}$/;"	f
llvm_stacksave	svf-llvm/lib/extapi.c	/^void* llvm_stacksave()$/;"	f
lo	z3.obj/include/z3++.h	/^        unsigned lo() const { assert (is_app() && Z3_get_decl_num_parameters(ctx(), decl()) == 2); return static_cast<unsigned>(Z3_get_decl_int_parameter(ctx(), decl(), 1)); }$/;"	f	class:z3::expr
load	svf/include/AE/Core/AbstractState.h	/^    inline virtual AbstractValue &load(u32_t addr)$/;"	f	class:SVF::AbstractState
load	svf/include/AE/Core/RelExeState.h	/^    inline Z3Expr &load(u32_t objId)$/;"	f	class:SVF::RelExeState
load	svf/lib/AE/Core/RelExeState.cpp	/^Z3Expr &RelExeState::load(const Z3Expr &loc)$/;"	f	class:RelExeState
load2MuSetMap	svf/include/MSSA/MemSSA.h	/^    LoadToMUSetMap load2MuSetMap;$/;"	m	class:SVF::MemSSA
loadExtAPIModules	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::loadExtAPIModules()$/;"	f	class:LLVMModuleSet
loadInEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy loadInEdges; \/\/\/< all incoming load edge of this node$/;"	m	class:SVF::ConstraintNode
loadModules	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::loadModules(const std::vector<std::string> &moduleNameVec)$/;"	f	class:LLVMModuleSet
loadOutEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy loadOutEdges; \/\/\/< all outgoing load edge of this node$/;"	m	class:SVF::ConstraintNode
loadSrcNodes	svf/include/DDA/DDAClient.h	/^    PAGNodeSet loadSrcNodes;$/;"	m	class:SVF::AliasDDAClient
loadTime	svf/include/WPA/FlowSensitive.h	/^    double loadTime;	\/\/\/< time of load edges$/;"	m	class:SVF::FlowSensitive
loadToPTCVarMap	svf/include/DDA/DDAVFSolver.h	/^    DPMToCVarMap loadToPTCVarMap;	\/\/\/< map a load dpm to its cvar pointed by its pointer operand$/;"	m	class:SVF::DDAVFSolver
loadValue	svf/lib/AE/Core/AbstractState.cpp	/^AbstractValue AbstractState::loadValue(NodeID varId)$/;"	f	class:AbstractState
loadWordProductions	svf/lib/CFL/GrammarBuilder.cpp	/^const inline std::vector<std::string> GrammarBuilder::loadWordProductions() const$/;"	f	class:SVF::GrammarBuilder
loadsToMRsMap	svf/include/MSSA/MemRegion.h	/^    LoadsToMRsMap loadsToMRsMap;$/;"	m	class:SVF::MRGenerator
loadsToPointsToMap	svf/include/MSSA/MemRegion.h	/^    LoadsToPointsToMap loadsToPointsToMap;$/;"	m	class:SVF::MRGenerator
locToDpmSetMap	svf/include/DDA/DDAVFSolver.h	/^    LocToDPMVecMap locToDpmSetMap;	\/\/\/< map location to its dpms$/;"	m	class:SVF::DDAVFSolver
localVarInRecursion	svf/include/Util/PTAStat.h	/^    NodeBS localVarInRecursion;$/;"	m	class:SVF::PTAStat
localeconv	svf-llvm/lib/extapi.c	/^struct lconv *localeconv(void)$/;"	f
localtime	svf-llvm/lib/extapi.c	/^struct tm *localtime(const void *timer)$/;"	f
localtime_r	svf-llvm/lib/extapi.c	/^struct tm *localtime_r(const void *timep, struct tm *result)$/;"	f
lockQueriesTime	svf/include/MTA/LockAnalysis.h	/^    double lockQueriesTime;$/;"	m	class:SVF::LockAnalysis
lockTime	svf/include/MTA/LockAnalysis.h	/^    double lockTime;$/;"	m	class:SVF::LockAnalysis
lockcandidateFuncSet	svf/include/MTA/LockAnalysis.h	/^    FunSet lockcandidateFuncSet;$/;"	m	class:SVF::LockAnalysis
locksites	svf/include/MTA/LockAnalysis.h	/^    InstSet locksites;$/;"	m	class:SVF::LockAnalysis
lookupComplements	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t lookupComplements;$/;"	m	class:SVF::PersistentPointsToCache
lookupIntersections	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t lookupIntersections;$/;"	m	class:SVF::PersistentPointsToCache
lookupUnions	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t lookupUnions;$/;"	m	class:SVF::PersistentPointsToCache
loop	z3.obj/include/z3++.h	/^        expr loop(unsigned lo) {$/;"	f	class:z3::expr
loop	z3.obj/include/z3++.h	/^        expr loop(unsigned lo, unsigned hi) {$/;"	f	class:z3::expr
loopAndDom	svf/include/SVFIR/SVFVariables.h	/^    SVFLoopAndDomInfo* loopAndDom;  \/\/\/ the loop and dominate information$/;"	m	class:SVF::FunObjVar
loopBound	svf/include/MemoryModel/SVFLoop.h	/^    u32_t loopBound;$/;"	m	class:SVF::SVFLoop
loopContainsBB	svf/include/SVFIR/SVFVariables.h	/^    inline bool loopContainsBB(const BBList& lp, const SVFBasicBlock* bb) const$/;"	f	class:SVF::FunObjVar
loopContainsBB	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline bool loopContainsBB(const LoopBBs& lp, const SVFBasicBlock* bb) const$/;"	f	class:SVF::SVFLoopAndDomInfo
lower	z3.obj/bin/python/z3/z3.py	/^    def lower(self):$/;"	m	class:OptimizeObjective
lower	z3.obj/bin/python/z3/z3.py	/^    def lower(self, obj):$/;"	m	class:Optimize
lower	z3.obj/bin/python/z3/z3num.py	/^    def lower(self, precision=10):$/;"	m	class:Numeral
lower	z3.obj/include/z3++.h	/^        expr lower(handle const& h) {$/;"	f	class:z3::optimize
lower_values	z3.obj/bin/python/z3/z3.py	/^    def lower_values(self):$/;"	m	class:OptimizeObjective
lower_values	z3.obj/bin/python/z3/z3.py	/^    def lower_values(self, obj):$/;"	m	class:Optimize
lowlink	svf/include/WPA/VersionedFlowSensitive.h	/^            int lowlink;$/;"	m	struct:SVF::VersionedFlowSensitive::SCC::NodeData
lp	z3.obj/bin/python/z3/z3core.py	/^    lp = os.environ[v];$/;"	v
lsa	svf/include/MTA/MTA.h	/^    LockAnalysis* lsa;$/;"	m	class:SVF::MTA
lshr	z3.obj/include/z3++.h	/^    inline expr lshr(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvlshr(a.ctx(), a, b)); }$/;"	f	namespace:z3
lshr	z3.obj/include/z3++.h	/^    inline expr lshr(expr const & a, int b) { return lshr(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
lshr	z3.obj/include/z3++.h	/^    inline expr lshr(int a, expr const & b) { return lshr(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
m_apply_result	z3.obj/include/z3++.h	/^        Z3_apply_result m_apply_result;$/;"	m	class:z3::apply_result
m_array	z3.obj/include/z3++.h	/^        T *      m_array;$/;"	m	class:z3::array
m_ast	z3.obj/include/z3++.h	/^        Z3_ast    m_ast;$/;"	m	class:z3::ast
m_cfg	z3.obj/include/z3++.h	/^        Z3_config    m_cfg;$/;"	m	class:z3::config
m_cond	svf/include/MemoryModel/ConditionalPT.h	/^    Cond	m_cond;$/;"	m	class:SVF::CondVar
m_ctx	z3.obj/include/z3++.h	/^        Z3_context m_ctx;$/;"	m	class:z3::context
m_ctx	z3.obj/include/z3++.h	/^        context * m_ctx;$/;"	m	class:z3::object
m_cube	z3.obj/include/z3++.h	/^            expr_vector  m_cube;$/;"	m	class:z3::solver::cube_iterator
m_cutoff	z3.obj/include/z3++.h	/^            unsigned     m_cutoff;$/;"	m	class:z3::solver::cube_generator
m_cutoff	z3.obj/include/z3++.h	/^            unsigned&    m_cutoff;$/;"	m	class:z3::solver::cube_iterator
m_default_vars	z3.obj/include/z3++.h	/^            expr_vector  m_default_vars;$/;"	m	class:z3::solver::cube_generator
m_descrs	z3.obj/include/z3++.h	/^        Z3_param_descrs m_descrs;$/;"	m	class:z3::param_descrs
m_empty	z3.obj/include/z3++.h	/^            bool         m_empty;$/;"	m	class:z3::solver::cube_iterator
m_enable_exceptions	z3.obj/include/z3++.h	/^        bool       m_enable_exceptions;$/;"	m	class:z3::context
m_end	z3.obj/include/z3++.h	/^            bool         m_end;$/;"	m	class:z3::solver::cube_iterator
m_entry	z3.obj/include/z3++.h	/^        Z3_func_entry m_entry;$/;"	m	class:z3::func_entry
m_fp	z3.obj/include/z3++.h	/^        Z3_fixedpoint m_fp;$/;"	m	class:z3::fixedpoint
m_goal	z3.obj/include/z3++.h	/^        Z3_goal m_goal;$/;"	m	class:z3::goal
m_h	z3.obj/include/z3++.h	/^            unsigned m_h;$/;"	m	class:z3::optimize::handle
m_id	svf/include/MemoryModel/ConditionalPT.h	/^    NodeID	m_id;$/;"	m	class:SVF::CondVar
m_index	z3.obj/include/z3++.h	/^            unsigned m_index;$/;"	m	class:z3::ast_vector_tpl::iterator
m_interp	z3.obj/include/z3++.h	/^        Z3_func_interp m_interp;$/;"	m	class:z3::func_interp
m_model	z3.obj/include/z3++.h	/^        Z3_model m_model;$/;"	m	class:z3::model
m_msg	z3.obj/include/z3++.h	/^        std::string m_msg;$/;"	m	class:z3::exception
m_opt	z3.obj/include/z3++.h	/^        Z3_optimize m_opt;$/;"	m	class:z3::optimize
m_params	z3.obj/include/z3++.h	/^        Z3_params m_params;$/;"	m	class:z3::params
m_probe	z3.obj/include/z3++.h	/^        Z3_probe m_probe;$/;"	m	class:z3::probe
m_rounding_mode	z3.obj/include/z3++.h	/^        rounding_mode m_rounding_mode;$/;"	m	class:z3::context
m_size	z3.obj/include/z3++.h	/^        unsigned m_size;$/;"	m	class:z3::array
m_solver	z3.obj/include/z3++.h	/^            solver&      m_solver;$/;"	m	class:z3::solver::cube_generator
m_solver	z3.obj/include/z3++.h	/^            solver&      m_solver;$/;"	m	class:z3::solver::cube_iterator
m_solver	z3.obj/include/z3++.h	/^        Z3_solver m_solver;$/;"	m	class:z3::solver
m_stats	z3.obj/include/z3++.h	/^        Z3_stats m_stats;$/;"	m	class:z3::stats
m_sym	z3.obj/include/z3++.h	/^        Z3_symbol m_sym;$/;"	m	class:z3::symbol
m_tactic	z3.obj/include/z3++.h	/^        Z3_tactic m_tactic;$/;"	m	class:z3::tactic
m_vars	z3.obj/include/z3++.h	/^            expr_vector& m_vars;$/;"	m	class:z3::solver::cube_generator
m_vars	z3.obj/include/z3++.h	/^            expr_vector& m_vars;$/;"	m	class:z3::solver::cube_iterator
m_vector	z3.obj/include/z3++.h	/^            ast_vector_tpl const* m_vector;$/;"	m	class:z3::ast_vector_tpl::iterator
m_vector	z3.obj/include/z3++.h	/^        Z3_ast_vector m_vector;$/;"	m	class:z3::ast_vector_tpl
main	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	svf-llvm/tools/AE/ae.cpp	/^int main(int argc, char** argv)$/;"	f
main	svf-llvm/tools/CFL/cfl.cpp	/^int main(int argc, char ** argv)$/;"	f
main	svf-llvm/tools/DDA/dda.cpp	/^int main(int argc, char ** argv)$/;"	f
main	svf-llvm/tools/Example/svf-ex.cpp	/^int main(int argc, char ** argv)$/;"	f
main	svf-llvm/tools/LLVM2SVF/llvm2svf.cpp	/^int main(int argc, char** argv)$/;"	f
main	svf-llvm/tools/MTA/mta.cpp	/^int main(int argc, char ** argv)$/;"	f
main	svf-llvm/tools/SABER/saber.cpp	/^int main(int argc, char ** argv)$/;"	f
main	svf-llvm/tools/WPA/wpa.cpp	/^int main(int argc, char** argv)$/;"	f
main	z3.obj/bin/python/z3/z3printer.py	/^    def main(self, a):$/;"	m	class:Formatter
main_ctx	z3.obj/bin/python/z3/z3.py	/^def main_ctx():$/;"	f
makeEdgeFlagWithAddionalOpnd	svf/include/SVFIR/SVFStatements.h	/^    static inline GEdgeFlag makeEdgeFlagWithAddionalOpnd(GEdgeKind k,$/;"	f	class:SVF::SVFStmt
makeEdgeFlagWithCallInst	svf/include/SVFIR/SVFStatements.h	/^    static inline GEdgeFlag makeEdgeFlagWithCallInst(GEdgeKind k,$/;"	f	class:SVF::SVFStmt
makeEdgeFlagWithInvokeID	svf/include/Graphs/CallGraph.h	/^    static inline GEdgeFlag makeEdgeFlagWithInvokeID(GEdgeKind k, CallSiteID cs)$/;"	f	class:SVF::CallGraphEdge
makeEdgeFlagWithInvokeID	svf/include/Graphs/ICFGEdge.h	/^    static inline GEdgeFlag makeEdgeFlagWithInvokeID(GEdgeKind k, CallSiteID cs)$/;"	f	class:SVF::ICFGEdge
makeEdgeFlagWithInvokeID	svf/include/Graphs/VFGEdge.h	/^    static inline GEdgeFlag makeEdgeFlagWithInvokeID(GEdgeKind k, CallSiteID cs)$/;"	f	class:SVF::VFGEdge
makeEdgeFlagWithStoreInst	svf/include/SVFIR/SVFStatements.h	/^    static inline GEdgeFlag makeEdgeFlagWithStoreInst(GEdgeKind k,$/;"	f	class:SVF::SVFStmt
make_pointee_range	svf/include/Util/iterator.h	/^                                        make_pointee_range(RangeT &&Range)$/;"	f	namespace:SVF
make_pointer_range	svf/include/Util/iterator.h	/^        make_pointer_range(RangeT &&Range)$/;"	f	namespace:SVF
make_range	svf/include/Util/iterator_range.h	/^template <class T> iter_range<T> make_range(T x, T y)$/;"	f	namespace:SVF
make_range	svf/include/Util/iterator_range.h	/^template <typename T> iter_range<T> make_range(std::pair<T, T> p)$/;"	f	namespace:SVF
make_void	svf/include/Util/SVFUtil.h	/^template <typename... Ts> struct make_void$/;"	s	namespace:SVF::SVFUtil
malloc	svf-llvm/lib/extapi.c	/^void *malloc(unsigned long size)$/;"	f
malloc_fn	svf/include/Util/cJSON.h	/^    void *(CJSON_CDECL *malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
map_iter	svf/include/Graphs/GenericGraph.h	/^inline mapped_iter<ItTy, FuncTy> map_iter(ItTy I, FuncTy F)$/;"	f	namespace:SVF
mapped_iter	svf/include/Graphs/GenericGraph.h	/^    mapped_iter(ItTy U, FuncTy F)$/;"	f	class:SVF::mapped_iter
mapped_iter	svf/include/Graphs/GenericGraph.h	/^class mapped_iter$/;"	c	namespace:SVF
markCxtStmtFlag	svf/include/MTA/LockAnalysis.h	/^    void markCxtStmtFlag(const CxtStmt& tgr, const CxtStmt& src)$/;"	f	class:SVF::LockAnalysis
markCxtStmtFlag	svf/include/MTA/MHP.h	/^    void markCxtStmtFlag(const CxtStmt& tgr, ValDomain flag)$/;"	f	class:SVF::ForkJoinAnalysis
markCxtStmtFlag	svf/include/MTA/MHP.h	/^    void markCxtStmtFlag(const CxtStmt& tgr, const CxtStmt& src)$/;"	f	class:SVF::ForkJoinAnalysis
markRelProcs	svf/lib/MTA/TCT.cpp	/^void TCT::markRelProcs()$/;"	f	class:TCT
markRelProcs	svf/lib/MTA/TCT.cpp	/^void TCT::markRelProcs(const FunObjVar* svffun)$/;"	f	class:TCT
markValidVFEdge	svf/include/MSSA/SVFGBuilder.h	/^    inline void markValidVFEdge(SVFGEdgeSet& edges)$/;"	f	class:SVF::SVFGBuilder
markbkVisited	svf/include/DDA/DDAVFSolver.h	/^    inline void markbkVisited(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
matchArgs	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::matchArgs(const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:SVFUtil
matchContext	svf/include/Util/DPItem.h	/^    inline bool matchContext(NodeID cxt)$/;"	f	class:SVF::CxtStmtDPItem
matchContext	svf/include/Util/DPItem.h	/^    inline virtual bool matchContext(NodeID ctx)$/;"	f	class:SVF::ContextCond
matchContext	svf/include/Util/DPItem.h	/^    inline virtual bool matchContext(NodeID cxt)$/;"	f	class:SVF::CxtDPItem
matchCxt	svf/include/MTA/MHP.h	/^    inline bool matchCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:SVF::ForkJoinAnalysis
matchCxt	svf/include/MTA/MHP.h	/^    inline bool matchCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:SVF::MHP
matchCxt	svf/lib/MTA/LockAnalysis.cpp	/^bool LockAnalysis::matchCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:LockAnalysis
matchCxt	svf/lib/MTA/TCT.cpp	/^bool TCT::matchCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:TCT
matchesLabel	svf-llvm/lib/CppUtil.cpp	/^bool cppUtil::matchesLabel(const std::string &foo, const std::string &label)$/;"	f	class:cppUtil
max	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble max(const BoundedDouble& lhs, const BoundedDouble& rhs)$/;"	f	class:SVF::BoundedDouble
max	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt max(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
max	svf/include/AE/Core/NumericValue.h	/^    static BoundedDouble max(std::vector<BoundedDouble>& _l)$/;"	f	class:SVF::BoundedDouble
max	svf/include/AE/Core/NumericValue.h	/^    static BoundedInt max(std::vector<BoundedInt>& _l)$/;"	f	class:SVF::BoundedInt
max	z3.obj/include/z3++.h	/^    inline expr max(expr const& a, expr const& b) { $/;"	f	namespace:z3
max	z3.obj/include/z3++.h	32;"	d
maxInDegree	svf/include/Graphs/SVFGStat.h	/^    u32_t maxInDegree;	\/\/\/< max in degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
maxIndInDegree	svf/include/Graphs/SVFGStat.h	/^    u32_t maxIndInDegree;	\/\/\/< max indirect in degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
maxIndOutDegree	svf/include/Graphs/SVFGStat.h	/^    u32_t maxIndOutDegree;	\/\/\/< max indirect out degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
maxOffsetLimit	svf/include/SVFIR/ObjTypeInfo.h	/^    u32_t maxOffsetLimit;$/;"	m	class:SVF::ObjTypeInfo
maxOutDegree	svf/include/Graphs/SVFGStat.h	/^    u32_t maxOutDegree;	\/\/\/< max out degrees of SVFG nodes.$/;"	m	class:SVF::SVFGStat
maxSCCSize	svf/include/WPA/FlowSensitive.h	/^    u32_t maxSCCSize;$/;"	m	class:SVF::FlowSensitive
maxStSize	svf/include/Graphs/IRGraph.h	/^    u32_t maxStSize;$/;"	m	class:SVF::IRGraph
maxStruct	svf/include/Graphs/IRGraph.h	/^    const SVFType* maxStruct;$/;"	m	class:SVF::IRGraph
maximize	z3.obj/bin/python/z3/z3.py	/^    def maximize(self, arg):$/;"	m	class:Optimize
maximize	z3.obj/include/z3++.h	/^        handle maximize(expr const& e) {$/;"	f	class:z3::optimize
maximumBudget	svf/include/Util/DPItem.h	/^    static u64_t maximumBudget;$/;"	m	class:SVF::DPItem
maximumCxt	svf/include/Util/DPItem.h	/^    static u32_t maximumCxt;$/;"	m	class:SVF::ContextCond
maximumCxt	svf/lib/SABER/SaberCondAllocator.cpp	/^u32_t ContextCond::maximumCxt = 0;$/;"	m	class:ContextCond	file:
maximumCxtLen	svf/include/Util/DPItem.h	/^    static u32_t maximumCxtLen;$/;"	m	class:SVF::ContextCond
maximumCxtLen	svf/lib/SABER/SaberCondAllocator.cpp	/^u32_t ContextCond::maximumCxtLen = 0;$/;"	m	class:ContextCond	file:
maximumPath	svf/include/Util/DPItem.h	/^    static u32_t maximumPath;$/;"	m	class:SVF::ContextCond
maximumPath	svf/lib/SABER/SaberCondAllocator.cpp	/^u32_t ContextCond::maximumPath = 0;$/;"	m	class:ContextCond	file:
maximumPathLen	svf/include/Util/DPItem.h	/^    static u32_t maximumPathLen;$/;"	m	class:SVF::ContextCond
maximumPathLen	svf/lib/SABER/SaberCondAllocator.cpp	/^u32_t ContextCond::maximumPathLen = 0;$/;"	m	class:ContextCond	file:
mayHappenInParallel	svf/lib/MTA/MHP.cpp	/^bool MHP::mayHappenInParallel(const ICFGNode* i1, const ICFGNode* i2)$/;"	f	class:MHP
mayHappenInParallelCache	svf/lib/MTA/MHP.cpp	/^bool MHP::mayHappenInParallelCache(const ICFGNode* i1, const ICFGNode* i2)$/;"	f	class:MHP
mayHappenInParallelInst	svf/lib/MTA/MHP.cpp	/^bool MHP::mayHappenInParallelInst(const ICFGNode* i1, const ICFGNode* i2)$/;"	f	class:MHP
meetWith	svf/lib/AE/Core/AbstractState.cpp	/^void AbstractState::meetWith(const AbstractState& other)$/;"	f	class:AbstractState
meet_with	svf/include/AE/Core/AbstractValue.h	/^    void meet_with(const AbstractValue &other)$/;"	f	class:SVF::AbstractValue
meet_with	svf/include/AE/Core/AddressValue.h	/^    bool meet_with(const AddressValue &other)$/;"	f	class:SVF::AddressValue
meet_with	svf/include/AE/Core/IntervalValue.h	/^    void meet_with(const IntervalValue &other)$/;"	f	class:SVF::IntervalValue
meld	svf/lib/CFL/CFLSolver.cpp	/^void POCRHybridSolver::meld(NodeID x, TreeNode* uNode, TreeNode* vNode)$/;"	f	class:POCRHybridSolver
meld	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::meld(MeldVersion &mv1, const MeldVersion &mv2)$/;"	f	class:VersionedFlowSensitive
meldLabel	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::meldLabel(void)$/;"	f	class:VersionedFlowSensitive
meldLabelingTime	svf/include/WPA/VersionedFlowSensitive.h	/^    double meldLabelingTime; \/\/\/< Time to meld label SVFG.$/;"	m	class:SVF::VersionedFlowSensitive
meld_h	svf/lib/CFL/CFLSolver.cpp	/^void POCRHybridSolver::meld_h(NodeID x, TreeNode* uNode, TreeNode* vNode)$/;"	f	class:POCRHybridSolver
mem	svf/include/Util/SVFBugReport.h	/^    std::string mem;       \/\/ string memory (KB)$/;"	m	class:SVF::SVFBugReport
memRegSet	svf/include/MSSA/MemRegion.h	/^    MRSet memRegSet;$/;"	m	class:SVF::MRGenerator
memSSA	svf/include/CFL/CFLVF.h	/^    CFLSVFGBuilder memSSA;$/;"	m	class:SVF::CFLVF
memSSA	svf/include/SABER/SrcSnkDDA.h	/^    SaberSVFGBuilder memSSA;$/;"	m	class:SVF::SrcSnkDDA
memSSA	svf/include/WPA/FlowSensitive.h	/^    SVFGBuilder memSSA;$/;"	m	class:SVF::FlowSensitive
memToFieldsMap	svf/include/SVFIR/SVFIR.h	/^    MemObjToFieldsMap memToFieldsMap;	\/\/\/< Map a mem object id to all its fields$/;"	m	class:SVF::SVFIR
memUsage	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    std::string memUsage;$/;"	m	class:SVF::AEStat
mem_realloc	svf-llvm/lib/extapi.c	/^char *mem_realloc(void *ptr, unsigned long size)$/;"	f
memalign	svf-llvm/lib/extapi.c	/^void* memalign(unsigned long size1, unsigned long size2)$/;"	f
memccpy	svf-llvm/lib/extapi.c	/^void *memccpy( void * restrict dest, const void * restrict src, int c, unsigned long count)$/;"	f
memchr	svf-llvm/lib/extapi.c	/^void *memchr(const void *str, int c, unsigned long n)$/;"	f
memmem	svf-llvm/lib/extapi.c	/^void *memmem(const void *haystack, unsigned long haystacklen, const void *needle, unsigned long needlelen)$/;"	f
memmove	svf-llvm/lib/extapi.c	/^void *memmove(void *str1, const void *str2, unsigned long n)$/;"	f
memory_usage	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    std::string memory_usage;$/;"	m	class:SVF::AEStat
memrchr	svf-llvm/lib/extapi.c	/^void *memrchr(const void *str, int c, unsigned long n)$/;"	f
mergeNodeToRep	svf/lib/WPA/Andersen.cpp	/^void Andersen::mergeNodeToRep(NodeID nodeId,NodeID newRepId)$/;"	f	class:Andersen
mergePtsOccMaps	svf/include/Util/SVFUtil.h	/^void mergePtsOccMaps(Map<Data, unsigned> &to, const Map<Data, unsigned> from)$/;"	f	namespace:SVF::SVFUtil
mergeSccCycle	svf/lib/WPA/Andersen.cpp	/^void Andersen::mergeSccCycle()$/;"	f	class:Andersen
mergeSccNodes	svf/lib/WPA/Andersen.cpp	/^void Andersen::mergeSccNodes(NodeID repNodeId, const NodeBS& subNodes)$/;"	f	class:Andersen
mergeSrcToTgt	svf/lib/WPA/Andersen.cpp	/^bool Andersen::mergeSrcToTgt(NodeID nodeId, NodeID newRepId)$/;"	f	class:Andersen
mergeSrcToTgt	svf/lib/WPA/AndersenSFR.cpp	/^bool AndersenSFR::mergeSrcToTgt(NodeID nodeId, NodeID newRepId)$/;"	f	class:AndersenSFR
mergeStatesFromPredecessors	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^bool AbstractInterpretation::mergeStatesFromPredecessors(const ICFGNode * icfgNode)$/;"	f	class:AbstractInterpretation
metaSame	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::metaSame(const PointsTo &pt) const$/;"	f	class:SVF::PointsTo
mhp	svf/include/MTA/MTA.h	/^    MHP* mhp;$/;"	m	class:SVF::MTA
min	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble min(const BoundedDouble& lhs, const BoundedDouble& rhs)$/;"	f	class:SVF::BoundedDouble
min	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt min(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
min	svf/include/AE/Core/NumericValue.h	/^    static BoundedDouble min(std::vector<BoundedDouble>& _l)$/;"	f	class:SVF::BoundedDouble
min	svf/include/AE/Core/NumericValue.h	/^    static BoundedInt min(std::vector<BoundedInt>& _l)$/;"	f	class:SVF::BoundedInt
min	z3.obj/include/z3++.h	/^    inline expr min(expr const& a, expr const& b) { $/;"	f	namespace:z3
min	z3.obj/include/z3++.h	31;"	d
minify_string	svf/lib/Util/cJSON.cpp	/^static void minify_string(char **input, char **output)$/;"	f	file:
minimize	z3.obj/bin/python/z3/z3.py	/^    def minimize(self, arg):$/;"	m	class:Optimize
minimize	z3.obj/include/z3++.h	/^        handle minimize(expr const& e) {$/;"	f	class:z3::optimize
minus_infinity	svf/include/AE/Core/IntervalValue.h	/^    static BoundedInt minus_infinity()$/;"	f	class:SVF::IntervalValue
minus_infinity	svf/include/AE/Core/NumericValue.h	/^    static BoundedDouble minus_infinity()$/;"	f	class:SVF::BoundedDouble
minus_infinity	svf/include/AE/Core/NumericValue.h	/^    static BoundedInt minus_infinity()$/;"	f	class:SVF::BoundedInt
mk_and	z3.obj/include/z3++.h	/^    inline expr mk_and(expr_vector const& args) {$/;"	f	namespace:z3
mk_not	z3.obj/bin/python/z3/z3.py	/^def mk_not(a):$/;"	f
mk_or	z3.obj/include/z3++.h	/^    inline expr mk_or(expr_vector const& args) {$/;"	f	namespace:z3
mk_solver	z3.obj/include/z3++.h	/^        solver mk_solver() const { Z3_solver r = Z3_mk_solver_from_tactic(ctx(), m_tactic); check_error(); return solver(ctx(), r);  }$/;"	f	class:z3::tactic
mk_var	z3.obj/bin/python/z3/z3util.py	/^def mk_var(name,vsort):$/;"	f
mmap	svf-llvm/lib/extapi.c	/^void *mmap(void *addr, unsigned long len, int prot, int flags, int fildes, long off)$/;"	f
mmap64	svf-llvm/lib/extapi.c	/^void *mmap64(void *addr, unsigned long len, int prot, int flags, int fildes, long off)$/;"	f
mod	z3.obj/include/z3++.h	/^    inline expr mod(expr const & a, int b) { return mod(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
mod	z3.obj/include/z3++.h	/^    inline expr mod(expr const& a, expr const& b) { $/;"	f	namespace:z3
mod	z3.obj/include/z3++.h	/^    inline expr mod(int a, expr const & b) { return mod(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
modRefAnalysis	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::modRefAnalysis(CallGraphNode* callGraphNode, WorkList& worklist)$/;"	f	class:MRGenerator
model	z3.obj/bin/python/z3/z3.py	/^    def model(self):$/;"	m	class:Optimize
model	z3.obj/bin/python/z3/z3.py	/^    def model(self):$/;"	m	class:Solver
model	z3.obj/include/z3++.h	/^        model(context & c):object(c) { init(Z3_mk_model(c)); }$/;"	f	class:z3::model
model	z3.obj/include/z3++.h	/^        model(context & c, Z3_model m):object(c) { init(m); }$/;"	f	class:z3::model
model	z3.obj/include/z3++.h	/^        model(model const & s):object(s) { init(s.m_model); }$/;"	f	class:z3::model
model	z3.obj/include/z3++.h	/^        model(model& src, context& dst, translate) : object(dst) { init(Z3_model_translate(src.ctx(), src, dst)); }$/;"	f	class:z3::model
model	z3.obj/include/z3++.h	/^    class model : public object {$/;"	c	namespace:z3
model_str	z3.obj/bin/python/z3/z3util.py	/^def model_str(m,as_str=True):$/;"	f
moduleFlagValue	svf-llvm/include/SVF-LLVM/CppUtil.h	/^const uint32_t moduleFlagValue = 1;$/;"	m	namespace:SVF::cppUtil::ctir
moduleIdentifier	svf/include/SVFIR/SVFIR.h	/^    std::string moduleIdentifier;$/;"	m	class:SVF::SVFIR
moduleName	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    std::string moduleName;$/;"	m	class:SVF::AbstractInterpretation
moduleName	svf/include/Util/SVFStat.h	/^    std::string moduleName;$/;"	m	class:SVF::SVFStat
modules	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    std::vector<std::reference_wrapper<Module>> modules;$/;"	m	class:SVF::LLVMModuleSet
move	svf/include/AE/Core/AddressValue.h	/^    AddressValue(AddressValue &&other) noexcept: _addrs(std::move(other._addrs)) {}$/;"	f	class:SVF::AddressValue
move	svf/include/AE/Core/RelExeState.h	/^        _addrToVal(std::move(rhs._addrToVal))$/;"	f	class:SVF::RelExeState
move	svf/include/Util/DPItem.h	/^    CxtDPItem(CxtDPItem &&dps) noexcept: DPItem(dps), context(std::move(dps.context))$/;"	f	class:SVF::CxtDPItem
move	svf/lib/MemoryModel/PointsTo.cpp	/^    reverseNodeMapping(std::move(pt.reverseNodeMapping))$/;"	f	namespace:SVF
moveEdgesToRepNode	svf/include/Graphs/ConsG.h	/^    inline bool moveEdgesToRepNode(ConstraintNode*node, ConstraintNode* rep )$/;"	f	class:SVF::ConstraintGraph
moveInEdgesToRepNode	svf/lib/Graphs/ConsG.cpp	/^bool ConstraintGraph::moveInEdgesToRepNode(ConstraintNode* node, ConstraintNode* rep )$/;"	f	class:ConstraintGraph
moveOutEdgesToRepNode	svf/lib/Graphs/ConsG.cpp	/^bool ConstraintGraph::moveOutEdgesToRepNode(ConstraintNode*node, ConstraintNode* rep )$/;"	f	class:ConstraintGraph
mr	svf/include/MSSA/MSSAMuChi.h	/^    const MemRegion* mr;$/;"	m	class:SVF::MRVer
mr	svf/include/MSSA/MSSAMuChi.h	/^    const MemRegion* mr;$/;"	m	class:SVF::MSSADEF
mr	svf/include/MSSA/MSSAMuChi.h	/^    const MemRegion* mr;$/;"	m	class:SVF::MSSAMU
mr2CounterMap	svf/include/MSSA/MemSSA.h	/^    MemRegToCounterMap mr2CounterMap;$/;"	m	class:SVF::MemSSA
mr2VerStackMap	svf/include/MSSA/MemSSA.h	/^    MemRegToVerStackMap mr2VerStackMap;$/;"	m	class:SVF::MemSSA
mrGen	svf/include/MSSA/MemSSA.h	/^    MRGenerator* mrGen;$/;"	m	class:SVF::MemSSA
mremap	svf-llvm/lib/extapi.c	/^void * mremap(void * old_address, unsigned long old_size, unsigned long new_size, int flags)$/;"	f
msg	z3.obj/include/z3++.h	/^        char const * msg() const { return m_msg.c_str(); }$/;"	f	class:z3::exception
msg_	svf/include/AE/Svfexe/AEDetector.h	/^    std::string msg_; \/\/\/< The error message.$/;"	m	class:SVF::AEException
mssa	svf/include/Graphs/SVFG.h	/^    std::unique_ptr<MemSSA> mssa;$/;"	m	class:SVF::SVFG
mssa	svf/include/Graphs/SVFGStat.h	/^    MemSSA* mssa;$/;"	m	class:SVF::MemSSAStat
multiOpndLabelCounter	svf/include/SVFIR/SVFStatements.h	/^    static u64_t multiOpndLabelCounter;  \/\/\/< MultiOpndStmt counter$/;"	m	class:SVF::SVFStmt
multiOpndLabelCounter	svf/lib/SVFIR/SVFStatements.cpp	/^u64_t SVFStmt::multiOpndLabelCounter = 0;$/;"	m	class:SVFStmt	file:
multiforked	svf/include/MTA/TCT.h	/^    bool multiforked;$/;"	m	class:SVF::TCTNode
mustAlias	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    inline bool mustAlias(const CVar& var1, const CVar& var2)$/;"	f	class:SVF::CondPTAImpl
mutPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutablePTData<Key, KeySet, Data, DataSet> mutPTData;$/;"	m	class:SVF::MutableDFPTData
mutPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutablePTData<Key, KeySet, Data, DataSet> mutPTData;$/;"	m	class:SVF::MutableDiffPTData
myAnd	z3.obj/bin/python/z3/z3util.py	/^def myAnd(*L): return myBinOp(Z3_OP_AND,*L)$/;"	f
myBinOp	z3.obj/bin/python/z3/z3util.py	/^def myBinOp(op,*L):$/;"	f
myImplies	z3.obj/bin/python/z3/z3util.py	/^def myImplies(a,b):return myBinOp(Z3_OP_IMPLIES,[a,b])$/;"	f
myOr	z3.obj/bin/python/z3/z3util.py	/^def myOr(*L): return myBinOp(Z3_OP_OR,*L)$/;"	f
n	svf/lib/SABER/SaberCheckerAPI.cpp	/^    const char *n;$/;"	m	struct:__anon13::ei_pair	file:
n	svf/lib/Util/ThreadAPI.cpp	/^    const char *n;$/;"	m	struct:__anon14::ei_pair	file:
name	svf/include/SVFIR/SVFType.h	/^    std::string name;$/;"	m	class:SVF::SVFStructType
name	svf/include/SVFIR/SVFValue.h	/^    std::string name;$/;"	m	class:SVF::SVFValue
name	svf/include/Util/CommandLine.h	/^    std::string name;$/;"	m	class:OptionBase
name	z3.obj/bin/python/z3/z3.py	/^    def name(self):$/;"	m	class:FuncDeclRef
name	z3.obj/bin/python/z3/z3.py	/^    def name(self):$/;"	m	class:SortRef
name	z3.obj/include/z3++.h	/^        symbol name() const { Z3_symbol s = Z3_get_decl_name(ctx(), *this); check_error(); return symbol(ctx(), s); }$/;"	f	class:z3::func_decl
name	z3.obj/include/z3++.h	/^        symbol name() const { Z3_symbol s = Z3_get_sort_name(ctx(), *this); check_error(); return symbol(ctx(), s); }$/;"	f	class:z3::sort
name	z3.obj/include/z3++.h	/^        symbol name(unsigned i) { return symbol(ctx(), Z3_param_descrs_get_name(ctx(), m_descrs, i)); }$/;"	f	class:z3::param_descrs
nand	z3.obj/include/z3++.h	/^    inline expr nand(expr const& a, expr const& b) { check_context(a, b); Z3_ast r = Z3_mk_bvnand(a.ctx(), a, b); return expr(a.ctx(), r); }$/;"	f	namespace:z3
narrow_with	svf/include/AE/Core/AbstractValue.h	/^    void narrow_with(const AbstractValue &other)$/;"	f	class:SVF::AbstractValue
narrow_with	svf/include/AE/Core/IntervalValue.h	/^    void narrow_with(const IntervalValue &other)$/;"	f	class:SVF::IntervalValue
narrowing	svf/lib/AE/Core/AbstractState.cpp	/^AbstractState AbstractState::narrowing(const AbstractState& other)$/;"	f	class:AbstractState
negConds	svf/include/SABER/SaberCondAllocator.h	/^    NodeBS negConds;                        \/\/\/bit vector for distinguish neg$/;"	m	class:SVF::SaberCondAllocator
newCond	svf/lib/SABER/SaberCondAllocator.cpp	/^SaberCondAllocator::Condition SaberCondAllocator::newCond(const ICFGNode* inst)$/;"	f	class:SaberCondAllocator
newCycle	svf/include/Graphs/WTO.h	/^    const WTOCycleT* newCycle(const WTONodeT* node,$/;"	f	class:SVF::WTO
newNode	svf/include/Graphs/WTO.h	/^    const WTONodeT* newNode(const NodeT* node)$/;"	f	class:SVF::WTO
newPointsToId	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PointsToID newPointsToId(void)$/;"	f	class:SVF::PersistentPointsToCache
newSSAName	svf/lib/MSSA/MemSSA.cpp	/^MRVer* MemSSA::newSSAName(const MemRegion* mr, MSSADEF* def)$/;"	f	class:MemSSA
newTerminalSubscript	svf/include/CFL/CFGrammar.h	/^    u32_t newTerminalSubscript;$/;"	m	class:SVF::CFGrammar
newwin	svf-llvm/lib/extapi.c	/^void *newwin(int nlines, int ncols, int begin_y, int begin_x)$/;"	f
next	svf/include/Util/WorkList.h	/^        ListNode *next;$/;"	m	class:SVF::List::ListNode
next	svf/include/Util/cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
nextSetIndex	svf/lib/Util/CoreBitVector.cpp	/^size_t CoreBitVector::nextSetIndex(const size_t start) const$/;"	f	class:SVF::CoreBitVector
ngettext	svf-llvm/lib/extapi.c	/^char * ngettext(const char * msgid, const char * msgid_plural, unsigned long int n)$/;"	f
nhalloc	svf-llvm/lib/extapi.c	/^long *nhalloc(unsigned int a, const char *b, int c)$/;"	f
nl_langinfo	svf-llvm/lib/extapi.c	/^char *nl_langinfo(int item)$/;"	f
no_pattern	z3.obj/bin/python/z3/z3.py	/^    def no_pattern(self, idx):$/;"	m	class:QuantifierRef
noalloc	svf/lib/Util/cJSON.cpp	/^    cJSON_bool noalloc;$/;"	m	struct:__anon17	file:
node	svf/include/Graphs/VFGNode.h	/^    const PAGNode* node;$/;"	m	class:SVF::NullPtrVFGNode
nodeInCycle	svf/lib/Graphs/SVFGStat.cpp	/^NodeID SVFGStat::nodeInCycle(SVFGSCC* scc, NodeID id) const$/;"	f	class:SVFGStat
nodeKind	svf/include/SVFIR/SVFValue.h	/^    GNodeK nodeKind;	\/\/\/< Node kind$/;"	m	class:SVF::SVFValue
nodeMapping	svf/include/MemoryModel/PointsTo.h	/^    MappingPtr nodeMapping;$/;"	m	class:SVF::PointsTo
nodeNum	svf/include/Graphs/GenericGraph.h	/^    u32_t nodeNum;		\/\/\/< total num of edge$/;"	m	class:SVF::GenericGraph
nodeNumAfterPAGBuild	svf/include/Graphs/IRGraph.h	/^    NodeID nodeNumAfterPAGBuild; \/\/\/< initial node number after building SVFIR, excluding later added nodes, e.g., gepobj nodes$/;"	m	class:SVF::IRGraph
nodeSet	svf/include/Util/WorkList.h	/^    DataSet nodeSet;$/;"	m	class:SVF::List
nodeStack	svf/include/WPA/WPAFSSolver.h	/^    NodeStack nodeStack;	\/\/\/< stack used for processing nodes.$/;"	m	class:SVF::WPAFSSolver
nodeToBugInfo	svf/include/AE/Svfexe/AEDetector.h	/^    Map<const ICFGNode*, std::string> nodeToBugInfo; \/\/\/< Maps ICFG nodes to bug information.$/;"	m	class:SVF::BufOverflowDetector
nodeToDPItemsMap	svf/include/SABER/SrcSnkDDA.h	/^    SVFGNodeToDPItemsMap nodeToDPItemsMap;	\/\/\/<  record forward visited dpitems$/;"	m	class:SVF::SrcSnkDDA
nodeToECMap	svf/include/WPA/Steensgaard.h	/^    NodeToEquivClassMap nodeToECMap;$/;"	m	class:SVF::Steensgaard
nodeToRepMap	svf/include/Graphs/ConsG.h	/^    NodeToRepMap nodeToRepMap;$/;"	m	class:SVF::ConstraintGraph
nodeToSubsMap	svf/include/Graphs/ConsG.h	/^    NodeToSubsMap nodeToSubsMap;$/;"	m	class:SVF::ConstraintGraph
nodeToSubsMap	svf/include/WPA/Steensgaard.h	/^    NodeToSubsMap nodeToSubsMap;$/;"	m	class:SVF::Steensgaard
node_iterator	svf/include/Graphs/SCC.h	/^    typedef typename GTraits::nodes_iterator node_iterator;$/;"	t	class:SVF::SCCDetection
node_iterator	svf/include/SABER/SrcSnkSolver.h	/^    typedef typename GTraits::nodes_iterator node_iterator;$/;"	t	class:SVF::SrcSnkSolver
node_iterator	svf/include/Util/GraphReachSolver.h	/^    typedef typename GTraits::nodes_iterator node_iterator;$/;"	t	class:SVF::GraphReachSolver
nodes	svf/include/Graphs/GraphTraits.h	/^nodes(const GraphType &G)$/;"	f	namespace:SVF
nodesToBeCollapsed	svf/include/Graphs/ConsG.h	/^    WorkList nodesToBeCollapsed;$/;"	m	class:SVF::ConstraintGraph
nodes_begin	svf/include/Graphs/GenericGraph.h	/^    static nodes_iterator nodes_begin(GenericGraphTy *G)$/;"	f	struct:SVF::GenericGraphTraits
nodes_end	svf/include/Graphs/GenericGraph.h	/^    static nodes_iterator nodes_end(GenericGraphTy *G)$/;"	f	struct:SVF::GenericGraphTraits
nodes_iterator	svf/include/Graphs/GenericGraph.h	/^    typedef mapped_iter<typename GenericGraphTy::iterator, decltype(&deref_val)> nodes_iterator;$/;"	t	struct:SVF::GenericGraphTraits
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponent& operator=(WTOComponent&&) noexcept = default;$/;"	m	class:SVF::WTOComponent
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponent& operator=(const WTOComponent&) noexcept = default;$/;"	m	class:SVF::WTOComponent
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponent(WTOComponent&&) noexcept = default;$/;"	m	class:SVF::WTOComponent
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponent(const WTOComponent&) noexcept = default;$/;"	m	class:SVF::WTOComponent
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponentVisitor& operator=(WTOComponentVisitor&&) noexcept = default;$/;"	m	class:SVF::WTOComponentVisitor
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponentVisitor& operator=(const WTOComponentVisitor&) noexcept =$/;"	m	class:SVF::WTOComponentVisitor
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponentVisitor(WTOComponentVisitor&&) noexcept = default;$/;"	m	class:SVF::WTOComponentVisitor
noexcept	svf/include/Graphs/WTO.h	/^    WTOComponentVisitor(const WTOComponentVisitor&) noexcept = default;$/;"	m	class:SVF::WTOComponentVisitor
noexcept	svf/include/MemoryModel/PointsTo.h	/^        PointsToIterator &operator=(PointsToIterator &&rhs) noexcept ;$/;"	m	class:SVF::PointsTo::PointsToIterator
noexcept	svf/include/MemoryModel/PointsTo.h	/^        PointsToIterator(PointsToIterator &&pt) noexcept ;$/;"	m	class:SVF::PointsTo::PointsToIterator
noexcept	svf/include/MemoryModel/PointsTo.h	/^    PointsTo &operator=(PointsTo &&rhs) noexcept ;$/;"	m	class:SVF::PointsTo
noexcept	svf/include/MemoryModel/PointsTo.h	/^    PointsTo(PointsTo &&pt) noexcept ;$/;"	m	class:SVF::PointsTo
nonCandidateFuncMHPRelMap	svf/include/MTA/MHP.h	/^    FuncPairToBool nonCandidateFuncMHPRelMap;$/;"	m	class:SVF::MHP
non_units	z3.obj/bin/python/z3/z3.py	/^    def non_units(self):$/;"	m	class:Solver
non_units	z3.obj/include/z3++.h	/^        expr_vector non_units() const { Z3_ast_vector r = Z3_solver_get_non_units(ctx(), m_solver); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::solver
nonterminals	svf/include/CFL/CFGrammar.h	/^    Map<std::string, Kind> nonterminals;$/;"	m	class:SVF::GrammarBase
nor	z3.obj/include/z3++.h	/^    inline expr nor(expr const& a, expr const& b) { check_context(a, b); Z3_ast r = Z3_mk_bvnor(a.ctx(), a, b); return expr(a.ctx(), r); }$/;"	f	namespace:z3
normalize	svf/lib/CFL/CFGNormalizer.cpp	/^CFGrammar* CFGNormalizer::normalize(GrammarBase *generalGrammar)$/;"	f	class:CFGNormalizer
normalizeCFLGrammar	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::normalizeCFLGrammar()$/;"	f	class:SVF::CFLBase
normalizePointsTo	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual void normalizePointsTo()$/;"	f	class:SVF::CondPTAImpl
normalizePointsTo	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::normalizePointsTo()$/;"	f	class:BVDataPTAImpl
normalizePointsTo	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::normalizePointsTo()$/;"	f	class:AndersenBase
normalized	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    bool normalized;$/;"	m	class:SVF::CondPTAImpl
nothingSet	svf/include/Util/CommandLine.h	/^    bool nothingSet(void) const$/;"	f	class:OptionMultiple
nth	z3.obj/include/z3++.h	/^        expr nth(expr const& index) const {$/;"	f	class:z3::expr
nullExpr	svf/include/Util/Z3Expr.h	/^    static z3::expr nullExpr()$/;"	f	class:SVF::Z3Expr
nullPointerId	svf/include/Util/NodeIDAllocator.h	/^    static const NodeID nullPointerId;$/;"	m	class:SVF::NodeIDAllocator
nullPointerId	svf/lib/Util/NodeIDAllocator.cpp	/^const NodeID NodeIDAllocator::nullPointerId = 3;$/;"	m	class:SVF::NodeIDAllocator	file:
nullPtrSymID	svf/include/Graphs/IRGraph.h	/^    inline NodeID nullPtrSymID() const$/;"	f	class:SVF::IRGraph
numEdgeDestLabels	svf/include/Graphs/DOTGraphTraits.h	/^    static unsigned numEdgeDestLabels(const void *)$/;"	f	struct:SVF::DefaultDOTGraphTraits
numElement	svf/include/MemoryModel/ConditionalPT.h	/^    inline unsigned numElement() const$/;"	f	class:SVF::CondPointsToSet
numNodes	svf/include/Util/NodeIDAllocator.h	/^    NodeID numNodes;$/;"	m	class:SVF::NodeIDAllocator
numObjects	svf/include/Util/NodeIDAllocator.h	/^    NodeID numObjects;$/;"	m	class:SVF::NodeIDAllocator
numOfActualIn	svf/include/Graphs/SVFGStat.h	/^    int numOfActualIn;	\/\/\/< number of actual in svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfActualOut	svf/include/Graphs/SVFGStat.h	/^    int numOfActualOut;	\/\/\/< number of actual out svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfActualParam	svf/include/Graphs/SVFGStat.h	/^    int numOfActualParam;$/;"	m	class:SVF::SVFGStat
numOfActualRet	svf/include/Graphs/SVFGStat.h	/^    int numOfActualRet;$/;"	m	class:SVF::SVFGStat
numOfAddr	svf/include/Graphs/SVFGStat.h	/^    int numOfAddr;$/;"	m	class:SVF::SVFGStat
numOfCallEdges	svf/include/Graphs/ICFGStat.h	/^    int numOfCallEdges;$/;"	m	class:SVF::ICFGStat
numOfCallNodes	svf/include/Graphs/ICFGStat.h	/^    int numOfCallNodes;$/;"	m	class:SVF::ICFGStat
numOfChecks	svf/include/CFL/CFLBase.h	/^    static double numOfChecks;                  \/\/ Number of checks$/;"	m	class:SVF::CFLBase
numOfChecks	svf/include/CFL/CFLSolver.h	/^    static double numOfChecks;$/;"	m	class:SVF::CFLSolver
numOfChecks	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::numOfChecks = 1;$/;"	m	class:SVF::CFLBase	file:
numOfChecks	svf/lib/CFL/CFLSolver.cpp	/^double CFLSolver::numOfChecks = 0;$/;"	m	class:CFLSolver	file:
numOfCopy	svf/include/Graphs/SVFGStat.h	/^    int numOfCopy;$/;"	m	class:SVF::SVFGStat
numOfEdges	svf/include/Graphs/ICFGStat.h	/^    int numOfEdges;$/;"	m	class:SVF::ICFGStat
numOfElement	svf/include/SVFIR/SVFType.h	/^    unsigned numOfElement; \/\/\/ For printing & debugging$/;"	m	class:SVF::SVFArrayType
numOfEntryNodes	svf/include/Graphs/ICFGStat.h	/^    int numOfEntryNodes;$/;"	m	class:SVF::ICFGStat
numOfExitNodes	svf/include/Graphs/ICFGStat.h	/^    int numOfExitNodes;$/;"	m	class:SVF::ICFGStat
numOfFieldExpand	svf/include/WPA/Andersen.h	/^    static u32_t numOfFieldExpand;$/;"	m	class:SVF::AndersenBase
numOfFieldExpand	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfFieldExpand = 0;$/;"	m	class:AndersenBase	file:
numOfFlattenElements	svf/include/SVFIR/SVFType.h	/^    u32_t numOfFlattenElements;$/;"	m	class:SVF::StInfo
numOfFlattenFields	svf/include/SVFIR/SVFType.h	/^    u32_t numOfFlattenFields;$/;"	m	class:SVF::StInfo
numOfFormalIn	svf/include/Graphs/SVFGStat.h	/^    int numOfFormalIn;	\/\/\/< number of formal in svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfFormalOut	svf/include/Graphs/SVFGStat.h	/^    int numOfFormalOut;	\/\/\/< number of formal out svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfFormalParam	svf/include/Graphs/SVFGStat.h	/^    int numOfFormalParam;$/;"	m	class:SVF::SVFGStat
numOfFormalRet	svf/include/Graphs/SVFGStat.h	/^    int numOfFormalRet;$/;"	m	class:SVF::SVFGStat
numOfGep	svf/include/Graphs/SVFGStat.h	/^    int numOfGep;$/;"	m	class:SVF::SVFGStat
numOfIntraEdges	svf/include/Graphs/ICFGStat.h	/^    int numOfIntraEdges;$/;"	m	class:SVF::ICFGStat
numOfIntraNodes	svf/include/Graphs/ICFGStat.h	/^    int numOfIntraNodes;$/;"	m	class:SVF::ICFGStat
numOfIteration	svf/include/CFL/CFLBase.h	/^    static double numOfIteration;                   \/\/ Number solving Iteration$/;"	m	class:SVF::CFLBase
numOfIteration	svf/include/WPA/WPASolver.h	/^    u32_t numOfIteration;$/;"	m	class:SVF::WPASolver
numOfIteration	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::numOfIteration = 1;$/;"	m	class:SVF::CFLBase	file:
numOfLoad	svf/include/Graphs/SVFGStat.h	/^    int numOfLoad;	\/\/\/< number of load svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfLockedQueries	svf/include/MTA/LockAnalysis.h	/^    u32_t numOfLockedQueries;$/;"	m	class:SVF::LockAnalysis
numOfMHPQueries	svf/include/MTA/MHP.h	/^    u32_t numOfMHPQueries;			\/\/\/< Number of queries are answered as may-happen-in-parallel$/;"	m	class:SVF::MHP
numOfMSSAPhi	svf/include/Graphs/SVFGStat.h	/^    int numOfMSSAPhi;	\/\/\/< number of mssa phi svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfNodes	svf/include/Graphs/ICFGStat.h	/^    int numOfNodes;$/;"	m	class:SVF::ICFGStat
numOfNodes	svf/include/Graphs/SVFGStat.h	/^    int numOfNodes;	\/\/\/< number of svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfNodesInSCC	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfNodesInSCC;$/;"	m	class:SVF::FlowSensitive
numOfNonterminalEdges	svf/include/CFL/CFLBase.h	/^    static double numOfNonterminalEdges;            \/\/ Number of nonterminal labeled edges$/;"	m	class:SVF::CFLBase
numOfNonterminalEdges	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::numOfNonterminalEdges = 0;$/;"	m	class:SVF::CFLBase	file:
numOfPhi	svf/include/Graphs/SVFGStat.h	/^    int numOfPhi;$/;"	m	class:SVF::SVFGStat
numOfProcessedActualParam	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedActualParam;	\/\/\/ Number of processed actual param node$/;"	m	class:SVF::FlowSensitive
numOfProcessedAddr	svf/include/WPA/Andersen.h	/^    static u32_t numOfProcessedAddr;   \/\/\/ Number of processed Addr edge$/;"	m	class:SVF::AndersenBase
numOfProcessedAddr	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedAddr;	\/\/\/ Number of processed Addr node$/;"	m	class:SVF::FlowSensitive
numOfProcessedCopy	svf/include/WPA/Andersen.h	/^    static u32_t numOfProcessedCopy;   \/\/\/ Number of processed Copy edge$/;"	m	class:SVF::AndersenBase
numOfProcessedCopy	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedCopy;	\/\/\/ Number of processed Copy node$/;"	m	class:SVF::FlowSensitive
numOfProcessedCopy	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfProcessedCopy = 0;$/;"	m	class:AndersenBase	file:
numOfProcessedFormalRet	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedFormalRet;	\/\/\/ Number of processed formal ret node$/;"	m	class:SVF::FlowSensitive
numOfProcessedGep	svf/include/WPA/Andersen.h	/^    static u32_t numOfProcessedGep;    \/\/\/ Number of processed Gep edge$/;"	m	class:SVF::AndersenBase
numOfProcessedGep	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedGep;	\/\/\/ Number of processed Gep node$/;"	m	class:SVF::FlowSensitive
numOfProcessedGep	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfProcessedGep = 0;$/;"	m	class:AndersenBase	file:
numOfProcessedLoad	svf/include/WPA/Andersen.h	/^    static u32_t numOfProcessedLoad;   \/\/\/ Number of processed Load edge$/;"	m	class:SVF::AndersenBase
numOfProcessedLoad	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedLoad;	\/\/\/ Number of processed Load node$/;"	m	class:SVF::FlowSensitive
numOfProcessedLoad	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfProcessedLoad = 0;$/;"	m	class:AndersenBase	file:
numOfProcessedMSSANode	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedMSSANode;	\/\/\/ Number of processed mssa node$/;"	m	class:SVF::FlowSensitive
numOfProcessedPhi	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedPhi;	\/\/\/ Number of processed Phi node$/;"	m	class:SVF::FlowSensitive
numOfProcessedStore	svf/include/WPA/Andersen.h	/^    static u32_t numOfProcessedStore;  \/\/\/ Number of processed Store edge$/;"	m	class:SVF::AndersenBase
numOfProcessedStore	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfProcessedStore;	\/\/\/ Number of processed Store node$/;"	m	class:SVF::FlowSensitive
numOfProcessedStore	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfProcessedStore = 0;$/;"	m	class:AndersenBase	file:
numOfResolvedIndCallEdge	svf/include/Graphs/CallGraph.h	/^    u32_t numOfResolvedIndCallEdge;$/;"	m	class:SVF::CallGraph
numOfRetEdges	svf/include/Graphs/ICFGStat.h	/^    int numOfRetEdges;$/;"	m	class:SVF::ICFGStat
numOfRetNodes	svf/include/Graphs/ICFGStat.h	/^    int numOfRetNodes;$/;"	m	class:SVF::ICFGStat
numOfSCC	svf/include/WPA/FlowSensitive.h	/^    u32_t numOfSCC;$/;"	m	class:SVF::FlowSensitive
numOfSCCDetection	svf/include/WPA/Andersen.h	/^    static u32_t numOfSCCDetection;$/;"	m	class:SVF::AndersenBase
numOfSCCDetection	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfSCCDetection = 0;$/;"	m	class:AndersenBase	file:
numOfSfrs	svf/include/WPA/Andersen.h	/^    static u32_t numOfSfrs;$/;"	m	class:SVF::AndersenBase
numOfSfrs	svf/lib/WPA/Andersen.cpp	/^u32_t AndersenBase::numOfSfrs = 0;$/;"	m	class:AndersenBase	file:
numOfStartEdges	svf/include/CFL/CFLBase.h	/^    static double numOfStartEdges;                  \/\/ Number of start nonterminal labeled edges$/;"	m	class:SVF::CFLBase
numOfStartEdges	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::numOfStartEdges = 0;$/;"	m	class:SVF::CFLBase	file:
numOfStore	svf/include/Graphs/SVFGStat.h	/^    int numOfStore;	\/\/\/< number of store svfg nodes.$/;"	m	class:SVF::SVFGStat
numOfTemporaryNonterminalEdges	svf/include/CFL/CFLBase.h	/^    static double numOfTemporaryNonterminalEdges;   \/\/ Number of temporary (ie. X0, X1..) nonterminal labeled edges$/;"	m	class:SVF::CFLBase
numOfTemporaryNonterminalEdges	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::numOfTemporaryNonterminalEdges = 0;$/;"	m	class:SVF::CFLBase	file:
numOfTerminalEdges	svf/include/CFL/CFLBase.h	/^    static double numOfTerminalEdges;               \/\/ Number of terminal labeled edges$/;"	m	class:SVF::CFLBase
numOfTerminalEdges	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::numOfTerminalEdges = 0;$/;"	m	class:SVF::CFLBase	file:
numOfTotalQueries	svf/include/MTA/LockAnalysis.h	/^    u32_t numOfTotalQueries;$/;"	m	class:SVF::LockAnalysis
numOfTotalQueries	svf/include/MTA/MHP.h	/^    u32_t numOfTotalQueries;		\/\/\/< Total number of queries$/;"	m	class:SVF::MHP
numPrelabelVersions	svf/include/WPA/VersionedFlowSensitive.h	/^    u32_t numPrelabelVersions; \/\/\/< Number of versions created during prelabeling.$/;"	m	class:SVF::VersionedFlowSensitive
numPrelabeledNodes	svf/include/WPA/VersionedFlowSensitive.h	/^    u32_t numPrelabeledNodes;  \/\/\/< Number of prelabeled nodes.$/;"	m	class:SVF::VersionedFlowSensitive
numSymbols	svf/include/Util/NodeIDAllocator.h	/^    NodeID numSymbols;$/;"	m	class:SVF::NodeIDAllocator
numTypes	svf-llvm/include/SVF-LLVM/DCHG.h	/^    NodeID numTypes;$/;"	m	class:SVF::DCHGraph
numValues	svf/include/Util/NodeIDAllocator.h	/^    NodeID numValues;$/;"	m	class:SVF::NodeIDAllocator
num_args	z3.obj/bin/python/z3/z3.py	/^    def num_args(self):$/;"	m	class:ExprRef
num_args	z3.obj/bin/python/z3/z3.py	/^    def num_args(self):$/;"	m	class:FuncEntry
num_args	z3.obj/include/z3++.h	/^        unsigned num_args() const { unsigned r = Z3_func_entry_get_num_args(ctx(), m_entry); check_error(); return r; }$/;"	f	class:z3::func_entry
num_args	z3.obj/include/z3++.h	/^        unsigned num_args() const { unsigned r = Z3_get_app_num_args(ctx(), *this); check_error(); return r; }$/;"	f	class:z3::expr
num_constructors	z3.obj/bin/python/z3/z3.py	/^    def num_constructors(self):$/;"	m	class:DatatypeSortRef
num_consts	z3.obj/include/z3++.h	/^        unsigned num_consts() const { return Z3_model_get_num_consts(ctx(), m_model); }$/;"	f	class:z3::model
num_entries	z3.obj/bin/python/z3/z3.py	/^    def num_entries(self):$/;"	m	class:FuncInterp
num_entries	z3.obj/include/z3++.h	/^        unsigned num_entries() const { unsigned r = Z3_func_interp_get_num_entries(ctx(), m_interp); check_error(); return r; }$/;"	f	class:z3::func_interp
num_exprs	z3.obj/include/z3++.h	/^        unsigned num_exprs() const { return Z3_goal_num_exprs(ctx(), m_goal); }$/;"	f	class:z3::goal
num_funcs	z3.obj/include/z3++.h	/^        unsigned num_funcs() const { return Z3_model_get_num_funcs(ctx(), m_model); }$/;"	f	class:z3::model
num_generator	svf/include/CFL/CFGrammar.h	/^    const inline u32_t num_generator()$/;"	f	class:SVF::CFGrammar
num_no_patterns	z3.obj/bin/python/z3/z3.py	/^    def num_no_patterns(self):$/;"	m	class:QuantifierRef
num_patterns	z3.obj/bin/python/z3/z3.py	/^    def num_patterns(self):$/;"	m	class:QuantifierRef
num_scopes	z3.obj/bin/python/z3/z3.py	/^    def num_scopes(self):$/;"	m	class:Solver
num_sorts	z3.obj/bin/python/z3/z3.py	/^    def num_sorts(self):$/;"	m	class:ModelRef
num_val	z3.obj/include/z3++.h	/^    inline expr context::num_val(int n, sort const & s) { Z3_ast r = Z3_mk_int(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
num_vars	z3.obj/bin/python/z3/z3.py	/^    def num_vars(self):$/;"	m	class:QuantifierRef
numerator	z3.obj/bin/python/z3/z3.py	/^    def numerator(self):$/;"	m	class:RatNumRef
numerator	z3.obj/bin/python/z3/z3num.py	/^    def numerator(self):$/;"	m	class:Numeral
numerator	z3.obj/include/z3++.h	/^        expr numerator() const {$/;"	f	class:z3::expr
numerator_as_long	z3.obj/bin/python/z3/z3.py	/^    def numerator_as_long(self):$/;"	m	class:RatNumRef
oballoc	svf-llvm/lib/extapi.c	/^void *oballoc(unsigned long size)$/;"	f
objSymMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    ValueToIDMapTy objSymMap;  \/\/\/< map a obj reference to its sym id$/;"	m	class:SVF::LLVMModuleSet
objSyms	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline ValueToIDMapTy& objSyms()$/;"	f	class:SVF::LLVMModuleSet
objToNSRevPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    PtrToNSMap objToNSRevPtsMap;$/;"	m	class:SVF::CondPTAImpl
objTyToNumFields	svf-llvm/lib/ObjTypeInference.cpp	/^u32_t ObjTypeInference::objTyToNumFields(const Type *objTy)$/;"	f	class:ObjTypeInference
objTypeInfoMap	svf/include/Graphs/IRGraph.h	/^    IDToTypeInfoMapTy objTypeInfoMap;       \/\/\/< map a memory sym id to its obj$/;"	m	class:SVF::IRGraph
objVarNum	svf/include/Graphs/IRGraph.h	/^    u32_t objVarNum;$/;"	m	class:SVF::IRGraph
obj_to_string	z3.obj/bin/python/z3/z3printer.py	/^def obj_to_string(a):$/;"	f
object	svf/include/Graphs/SVFGNode.h	/^    const NodeID object;$/;"	m	class:SVF::DummyVersionPropSVFGNode
object	z3.obj/include/z3++.h	/^        object(context & c):m_ctx(&c) {}$/;"	f	class:z3::object
object	z3.obj/include/z3++.h	/^        object(object const & s):m_ctx(s.m_ctx) {}$/;"	f	class:z3::object
object	z3.obj/include/z3++.h	/^    class object {$/;"	c	namespace:z3
objectives	z3.obj/bin/python/z3/z3.py	/^    def objectives(self):$/;"	m	class:Optimize
objectives	z3.obj/include/z3++.h	/^        expr_vector objectives() const { Z3_ast_vector r = Z3_optimize_get_objectives(ctx(), m_opt); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::optimize
offset	svf-llvm/include/SVF-LLVM/DCHG.h	/^    u32_t offset;$/;"	m	class:SVF::DCHEdge
offset	svf/include/Util/CoreBitVector.h	/^    u32_t offset;$/;"	m	class:SVF::CoreBitVector
offset	svf/lib/Util/cJSON.cpp	/^    size_t offset;$/;"	m	struct:__anon16	file:
offset	svf/lib/Util/cJSON.cpp	/^    size_t offset;$/;"	m	struct:__anon17	file:
onStack	svf/include/WPA/VersionedFlowSensitive.h	/^            bool onStack;$/;"	m	struct:SVF::VersionedFlowSensitive::SCC::NodeData
onTheFlyCallGraphSolve	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::onTheFlyCallGraphSolve(const CallSiteToFunPtrMap& callsites, CallEdgeMap& newEdges)$/;"	f	class:CFLAlias
onTheFlyCallGraphSolve	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::onTheFlyCallGraphSolve(const CallSiteToFunPtrMap& callsites, CallEdgeMap& newEdges)$/;"	f	class:BVDataPTAImpl
onTheFlyThreadCallGraphSolve	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::onTheFlyThreadCallGraphSolve(const CallSiteToFunPtrMap& callsites,$/;"	f	class:BVDataPTAImpl
opICFGNodes	svf/include/SVFIR/SVFStatements.h	/^    OpICFGNodeVec opICFGNodes;$/;"	m	class:SVF::PhiStmt
opIncomingBBs	svf/include/Graphs/VFGNode.h	/^    OPIncomingBBs opIncomingBBs;$/;"	m	class:SVF::IntraPHIVFGNode
opPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    inline PointsToID opPts(PointsToID lhs, PointsToID rhs, const DataOp &dataOp, OpCache &opCache,$/;"	f	class:SVF::PersistentPointsToCache
opVarBegin	svf/include/SVFIR/SVFStatements.h	/^    inline OPVars::const_iterator opVarBegin() const$/;"	f	class:SVF::MultiOpndStmt
opVars	svf/include/SVFIR/SVFStatements.h	/^    OPVars opVars;$/;"	m	class:SVF::MultiOpndStmt
opVer	svf/include/MSSA/MSSAMuChi.h	/^    MRVer* opVer;$/;"	m	class:SVF::MSSACHI
opVerBegin	svf/include/Graphs/SVFGNode.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::IntraMSSAPHISVFGNode
opVerBegin	svf/include/Graphs/SVFGNode.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::MSSAPHISVFGNode
opVerBegin	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::BinaryOPVFGNode
opVerBegin	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::CmpVFGNode
opVerBegin	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::PHIVFGNode
opVerBegin	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::UnaryOPVFGNode
opVerBegin	svf/include/MSSA/MSSAMuChi.h	/^    inline OPVers::const_iterator opVerBegin() const$/;"	f	class:SVF::MSSAPHI
opVerEnd	svf/include/Graphs/SVFGNode.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::IntraMSSAPHISVFGNode
opVerEnd	svf/include/Graphs/SVFGNode.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::MSSAPHISVFGNode
opVerEnd	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::BinaryOPVFGNode
opVerEnd	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::CmpVFGNode
opVerEnd	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::PHIVFGNode
opVerEnd	svf/include/Graphs/VFGNode.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::UnaryOPVFGNode
opVerEnd	svf/include/MSSA/MSSAMuChi.h	/^    inline OPVers::const_iterator opVerEnd() const$/;"	f	class:SVF::MSSAPHI
opVerEnd	svf/include/SVFIR/SVFStatements.h	/^    inline OPVars::const_iterator opVerEnd() const$/;"	f	class:SVF::MultiOpndStmt
opVers	svf/include/Graphs/SVFGNode.h	/^    OPVers opVers;$/;"	m	class:SVF::MSSAPHISVFGNode
opVers	svf/include/Graphs/VFGNode.h	/^    OPVers opVers;$/;"	m	class:SVF::BinaryOPVFGNode
opVers	svf/include/Graphs/VFGNode.h	/^    OPVers opVers;$/;"	m	class:SVF::CmpVFGNode
opVers	svf/include/Graphs/VFGNode.h	/^    OPVers opVers;$/;"	m	class:SVF::PHIVFGNode
opVers	svf/include/Graphs/VFGNode.h	/^    OPVers opVers;$/;"	m	class:SVF::UnaryOPVFGNode
opVers	svf/include/MSSA/MSSAMuChi.h	/^    OPVers opVers;$/;"	m	class:SVF::MSSAPHI
opcode	svf/include/SVFIR/SVFStatements.h	/^    u32_t opcode;$/;"	m	class:SVF::BinaryOPStmt
opcode	svf/include/SVFIR/SVFStatements.h	/^    u32_t opcode;$/;"	m	class:SVF::UnaryOPStmt
open_log	z3.obj/bin/python/z3/z3.py	/^def open_log(fname):$/;"	f
opendir	svf-llvm/lib/extapi.c	/^void *opendir(const char *name)$/;"	f
operator !	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator!(const BoundedDouble& lhs)$/;"	f	class:SVF::BoundedDouble
operator !	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator!(const BoundedInt& lhs)$/;"	f	class:SVF::BoundedInt
operator !	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator!(const Z3Expr &lhs)$/;"	f	class:SVF::Z3Expr
operator !	z3.obj/include/z3++.h	/^    inline expr operator!(expr const & a) { assert(a.is_bool()); _Z3_MK_UN_(a, Z3_mk_not); }$/;"	f	namespace:z3
operator !	z3.obj/include/z3++.h	/^    inline probe operator!(probe const & p) {$/;"	f	namespace:z3
operator !=	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    bool operator!=(const generic_bridge_gep_type_iterator& x) const$/;"	f	class:llvm::generic_bridge_gep_type_iterator
operator !=	svf/include/AE/Core/AbstractState.h	/^    bool operator!=(const AbstractState&rhs) const$/;"	f	class:SVF::AbstractState
operator !=	svf/include/AE/Core/IntervalValue.h	/^    IntervalValue operator!=(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
operator !=	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator!=(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator !=	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator!=(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator !=	svf/include/AE/Core/RelExeState.h	/^    inline bool operator!=(const RelExeState &rhs) const$/;"	f	class:SVF::RelExeState
operator !=	svf/include/CFL/CFGrammar.h	/^        bool operator!=(const Symbol& s) const$/;"	f	struct:SVF::GrammarBase::Symbol
operator !=	svf/include/MemoryModel/ConditionalPT.h	/^        bool operator != (int val)$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
operator !=	svf/include/MemoryModel/ConditionalPT.h	/^        bool operator!=(const CondPtsSetIterator &RHS) const$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
operator !=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator != (const CondVar & rhs) const$/;"	f	class:SVF::CondVar
operator !=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator!=(const CondPointsToSet<Cond>& rhs)$/;"	f	class:SVF::CondPointsToSet
operator !=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator!=(const CondStdSet<Element>& rhs) const$/;"	f	class:SVF::CondStdSet
operator !=	svf/include/Util/CxtStmt.h	/^    inline bool operator!= (const CxtStmt& rhs) const$/;"	f	class:SVF::CxtStmt
operator !=	svf/include/Util/CxtStmt.h	/^    inline bool operator!= (const CxtThread& rhs) const$/;"	f	class:SVF::CxtThread
operator !=	svf/include/Util/CxtStmt.h	/^    inline bool operator!= (const CxtThreadProc& rhs) const$/;"	f	class:SVF::CxtThreadProc
operator !=	svf/include/Util/CxtStmt.h	/^    inline bool operator!= (const CxtThreadStmt& rhs) const$/;"	f	class:SVF::CxtThreadStmt
operator !=	svf/include/Util/CxtStmt.h	/^    inline bool operator!=(const CxtProc& rhs) const$/;"	f	class:SVF::CxtProc
operator !=	svf/include/Util/DPItem.h	/^    inline bool operator!= (const ContextCond& rhs) const$/;"	f	class:SVF::ContextCond
operator !=	svf/include/Util/DPItem.h	/^    inline bool operator!= (const CxtDPItem& rhs) const$/;"	f	class:SVF::CxtDPItem
operator !=	svf/include/Util/DPItem.h	/^    inline bool operator!= (const CxtStmtDPItem<LocCond>& rhs) const$/;"	f	class:SVF::CxtStmtDPItem
operator !=	svf/include/Util/DPItem.h	/^    inline bool operator!= (const DPItem& rhs) const$/;"	f	class:SVF::DPItem
operator !=	svf/include/Util/DPItem.h	/^    inline bool operator!= (const StmtDPItem& rhs) const$/;"	f	class:SVF::StmtDPItem
operator !=	svf/include/Util/SparseBitVector.h	/^        bool operator!=(const SparseBitVectorIterator &RHS) const$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
operator !=	svf/include/Util/SparseBitVector.h	/^    bool operator!=(const SparseBitVector &RHS) const$/;"	f	class:SVF::SparseBitVector
operator !=	svf/include/Util/SparseBitVector.h	/^    bool operator!=(const SparseBitVectorElement &RHS) const$/;"	f	struct:SVF::SparseBitVectorElement
operator !=	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator!=(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator !=	svf/include/Util/iterator.h	/^    bool operator!=(const DerivedT &RHS) const$/;"	f	class:SVF::iter_facade_base
operator !=	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::PointsToIterator::operator!=(const PointsToIterator &rhs) const$/;"	f	class:SVF::PointsTo::PointsToIterator
operator !=	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::operator!=(const PointsTo &rhs) const$/;"	f	class:SVF::PointsTo
operator !=	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::CoreBitVectorIterator::operator!=(const CoreBitVectorIterator &rhs) const$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
operator !=	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::operator!=(const CoreBitVector &rhs) const$/;"	f	class:SVF::CoreBitVector
operator !=	z3.obj/include/z3++.h	/^            bool operator!=(cube_iterator const& other) {$/;"	f	class:z3::solver::cube_iterator
operator !=	z3.obj/include/z3++.h	/^            bool operator!=(iterator const& other) const {$/;"	f	class:z3::ast_vector_tpl::iterator
operator !=	z3.obj/include/z3++.h	/^    inline expr operator!=(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator !=	z3.obj/include/z3++.h	/^    inline expr operator!=(expr const & a, int b) { assert(a.is_arith() || a.is_bv() || a.is_fpa()); return a != a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator !=	z3.obj/include/z3++.h	/^    inline expr operator!=(int a, expr const & b) { assert(b.is_arith() || b.is_bv() || b.is_fpa()); return b.ctx().num_val(a, b.get_sort()) != b; }$/;"	f	namespace:z3
operator %	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator%(const IntervalValue &lhs,$/;"	f	namespace:SVF
operator %	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator%(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator %	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator%(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator %	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator%(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator %	z3.obj/include/z3++.h	/^    inline expr operator%(expr const& a, expr const& b) { return mod(a, b); }$/;"	f	namespace:z3
operator %	z3.obj/include/z3++.h	/^    inline expr operator%(expr const& a, int b) { return mod(a, b); }$/;"	f	namespace:z3
operator %	z3.obj/include/z3++.h	/^    inline expr operator%(int a, expr const& b) { return mod(a, b); }$/;"	f	namespace:z3
operator &	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator&(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator &	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator&(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator &	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator&(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator &	svf/include/Util/SparseBitVector.h	/^operator&(const SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:SVF
operator &	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator&(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator &	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo operator&(const PointsTo &lhs, const PointsTo &rhs)$/;"	f	namespace:SVF
operator &	z3.obj/include/z3++.h	/^    inline expr operator&(expr const & a, expr const & b) { check_context(a, b); Z3_ast r = Z3_mk_bvand(a.ctx(), a, b); return expr(a.ctx(), r); }$/;"	f	namespace:z3
operator &	z3.obj/include/z3++.h	/^    inline expr operator&(expr const & a, int b) { return a & a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator &	z3.obj/include/z3++.h	/^    inline expr operator&(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) & b; }$/;"	f	namespace:z3
operator &	z3.obj/include/z3++.h	/^    inline tactic operator&(tactic const & t1, tactic const & t2) {$/;"	f	namespace:z3
operator &&	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator&&(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator &&	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator&&(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator &&	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator&&(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator &&	z3.obj/include/z3++.h	/^    inline expr operator&&(bool a, expr const & b) { return b.ctx().bool_val(a) && b; }$/;"	f	namespace:z3
operator &&	z3.obj/include/z3++.h	/^    inline expr operator&&(expr const & a, bool b) { return a && a.ctx().bool_val(b); }$/;"	f	namespace:z3
operator &&	z3.obj/include/z3++.h	/^    inline expr operator&&(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator &&	z3.obj/include/z3++.h	/^    inline probe operator&&(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator &=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator &= (const CondPointsToSet<Cond>& rhs)$/;"	f	class:SVF::CondPointsToSet
operator &=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator&=(const CondStdSet<Element>& rhs)$/;"	f	class:SVF::CondStdSet
operator &=	svf/include/Util/SparseBitVector.h	/^    bool operator&=(const SparseBitVector &RHS)$/;"	f	class:SVF::SparseBitVector
operator &=	svf/include/Util/SparseBitVector.h	/^inline bool operator &=(SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:SVF
operator &=	svf/include/Util/SparseBitVector.h	/^inline bool operator &=(SparseBitVector<ElementSize> *LHS,$/;"	f	namespace:SVF
operator &=	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::operator&=(const PointsTo &rhs)$/;"	f	class:SVF::PointsTo
operator &=	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::operator&=(const CoreBitVector &rhs)$/;"	f	class:SVF::CoreBitVector
operator ()	svf/include/AE/Core/RelExeState.h	/^    size_t operator()(const SVF::RelExeState &exeState) const$/;"	f	struct:std::hash
operator ()	svf/include/CFL/CFGrammar.h	/^        size_t operator()(const Symbol &s) const$/;"	f	class:SVF::GrammarBase::SymbolHash
operator ()	svf/include/CFL/CFGrammar.h	/^        size_t operator()(const std::vector<Symbol> &v) const$/;"	f	struct:SVF::GrammarBase::SymbolVectorHash
operator ()	svf/include/Graphs/GenericGraph.h	/^        bool operator()(const GenericEdge<NodeType>* lhs, const GenericEdge<NodeType>* rhs) const$/;"	f	struct:SVF::GenericEdge::equalGEdge
operator ()	svf/include/MSSA/MemRegion.h	/^        bool operator()(const MemRegion* lhs, const MemRegion* rhs) const$/;"	f	struct:SVF::MemRegion::equalMemRegion
operator ()	svf/include/MemoryModel/AccessPath.h	/^    size_t operator()(const SVF::AccessPath &ap) const$/;"	f	struct:std::hash
operator ()	svf/include/MemoryModel/ConditionalPT.h	/^    size_t operator()(const SVF::CondStdSet<Element> &css) const$/;"	f	struct:std::hash
operator ()	svf/include/MemoryModel/ConditionalPT.h	/^    size_t operator()(const SVF::CondVar<Cond> &cv) const$/;"	f	struct:std::hash
operator ()	svf/include/MemoryModel/PointsTo.h	/^    size_t operator()(const SVF::PointsTo &pt) const$/;"	f	struct:std::hash
operator ()	svf/include/SVFIR/SVFType.h	/^    size_t operator()(const NodePair& p) const$/;"	f	struct:SVF::Hash
operator ()	svf/include/SVFIR/SVFType.h	/^    size_t operator()(const SVF::NodePair& p) const$/;"	f	struct:std::hash
operator ()	svf/include/SVFIR/SVFType.h	/^    size_t operator()(const SVF::SparseBitVector<N>& sbv) const$/;"	f	struct:std::hash
operator ()	svf/include/SVFIR/SVFType.h	/^    size_t operator()(const std::vector<T>& v) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/CommandLine.h	/^    T operator()(void) const$/;"	f	class:Option
operator ()	svf/include/Util/CommandLine.h	/^    T operator()(void) const$/;"	f	class:OptionMap
operator ()	svf/include/Util/CommandLine.h	/^    bool operator()(const T v) const$/;"	f	class:OptionMultiple
operator ()	svf/include/Util/CoreBitVector.h	/^    size_t operator()(const CoreBitVector &cbv) const$/;"	f	struct:SVF::Hash
operator ()	svf/include/Util/CxtStmt.h	/^    size_t operator()(const SVF::CxtProc& cs) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/CxtStmt.h	/^    size_t operator()(const SVF::CxtStmt& cs) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/CxtStmt.h	/^    size_t operator()(const SVF::CxtThread& cs) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/CxtStmt.h	/^    size_t operator()(const SVF::CxtThreadProc& ctp) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/CxtStmt.h	/^    size_t operator()(const SVF::CxtThreadStmt& cts) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/DPItem.h	/^    size_t operator()(const SVF::ContextCond &cc) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/DPItem.h	/^    size_t operator()(const SVF::CxtDPItem &cdpi) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/DPItem.h	/^    size_t operator()(const SVF::CxtStmtDPItem<LocCond> &csdpi) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/DPItem.h	/^    size_t operator()(const SVF::StmtDPItem<LocCond> &sdpi) const$/;"	f	struct:std::hash
operator ()	svf/include/Util/GeneralType.h	/^    size_t operator()(const T& t) const$/;"	f	struct:SVF::Hash
operator ()	svf/include/Util/GeneralType.h	/^    size_t operator()(const std::pair<S, T>& t) const$/;"	f	struct:SVF::Hash
operator ()	svf/include/Util/SVFUtil.h	/^    bool operator()(const NodeBS& lhs, const NodeBS& rhs) const$/;"	f	struct:SVF::SVFUtil::equalNodeBS
operator ()	svf/include/Util/SVFUtil.h	/^    bool operator()(const PointsTo& lhs, const PointsTo& rhs) const$/;"	f	struct:SVF::SVFUtil::equalPointsTo
operator ()	svf/include/Util/Z3Expr.h	/^    size_t operator()(const SVF::Z3Expr &z3Expr) const$/;"	f	struct:std::hash
operator ()	z3.obj/include/z3++.h	/^        apply_result operator()(goal const & g) const {$/;"	f	class:z3::tactic
operator ()	z3.obj/include/z3++.h	/^        ast operator()(context & c, Z3_ast a) { return ast(c, a); }$/;"	f	class:z3::cast_ast
operator ()	z3.obj/include/z3++.h	/^        double operator()(goal const & g) const { return apply(g); }$/;"	f	class:z3::probe
operator ()	z3.obj/include/z3++.h	/^        expr operator()(context & c, Z3_ast a) {$/;"	f	class:z3::cast_ast
operator ()	z3.obj/include/z3++.h	/^        func_decl operator()(context & c, Z3_ast a) {$/;"	f	class:z3::cast_ast
operator ()	z3.obj/include/z3++.h	/^        sort operator()(context & c, Z3_ast a) {$/;"	f	class:z3::cast_ast
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()() const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr const & a) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr const & a1, expr const & a2) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr const & a1, expr const & a2, expr const & a3) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr const & a1, expr const & a2, expr const & a3, expr const & a4) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr const & a1, expr const & a2, expr const & a3, expr const & a4, expr const & a5) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr const & a1, int a2) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(expr_vector const& args) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(int a) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(int a1, expr const & a2) const {$/;"	f	class:z3::func_decl
operator ()	z3.obj/include/z3++.h	/^    inline expr func_decl::operator()(unsigned n, expr const * args) const {$/;"	f	class:z3::func_decl
operator *	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    Type* operator*() const$/;"	f	class:llvm::generic_bridge_gep_type_iterator
operator *	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator*(const IntervalValue &lhs,$/;"	f	namespace:SVF
operator *	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator*(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator *	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator*(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator *	svf/include/Graphs/GenericGraph.h	/^    FuncReturnTy operator*() const$/;"	f	class:SVF::mapped_iter
operator *	svf/include/MemoryModel/ConditionalPT.h	/^        SingleCondVar operator *(void)$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
operator *	svf/include/Util/SparseBitVector.h	/^        unsigned operator*() const$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
operator *	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator*(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator *	svf/include/Util/iterator.h	/^    ReferenceT operator*() const$/;"	f	class:SVF::iter_adaptor_base
operator *	svf/include/Util/iterator.h	/^    T &operator*() const$/;"	f	struct:SVF::pointee_iter
operator *	svf/include/Util/iterator.h	/^    T &operator*()$/;"	f	class:SVF::pointer_iterator
operator *	svf/include/Util/iterator.h	/^    const T &operator*() const$/;"	f	class:SVF::pointer_iterator
operator *	svf/lib/MemoryModel/PointsTo.cpp	/^NodeID PointsTo::PointsToIterator::operator*() const$/;"	f	class:SVF::PointsTo::PointsToIterator
operator *	svf/lib/Util/CoreBitVector.cpp	/^u32_t CoreBitVector::CoreBitVectorIterator::operator*(void) const$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
operator *	z3.obj/include/z3++.h	/^            T operator*() const { return (*m_vector)[m_index]; }$/;"	f	class:z3::ast_vector_tpl::iterator
operator *	z3.obj/include/z3++.h	/^            expr_vector const& operator*() const { return m_cube; }$/;"	f	class:z3::solver::cube_iterator
operator *	z3.obj/include/z3++.h	/^    inline expr operator*(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator *	z3.obj/include/z3++.h	/^    inline expr operator*(expr const & a, int b) { return a * a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator *	z3.obj/include/z3++.h	/^    inline expr operator*(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) * b; }$/;"	f	namespace:z3
operator +	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator+(const IntervalValue &lhs,$/;"	f	namespace:SVF
operator +	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator+(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator +	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator+(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator +	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator+(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator +	svf/include/Util/iterator.h	/^    DerivedT operator+(DifferenceTypeT n) const$/;"	f	class:SVF::iter_facade_base
operator +	svf/include/Util/iterator.h	/^    friend DerivedT operator+(DifferenceTypeT n, const DerivedT &i)$/;"	f	class:SVF::iter_facade_base
operator +	svf/lib/MemoryModel/AccessPath.cpp	/^AccessPath AccessPath::operator+(const AccessPath& rhs) const$/;"	f	class:AccessPath
operator +	z3.obj/include/z3++.h	/^    inline expr operator+(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator +	z3.obj/include/z3++.h	/^    inline expr operator+(expr const & a, int b) { return a + a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator +	z3.obj/include/z3++.h	/^    inline expr operator+(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) + b; }$/;"	f	namespace:z3
operator ++	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    generic_bridge_gep_type_iterator operator++(int)$/;"	f	class:llvm::generic_bridge_gep_type_iterator
operator ++	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    generic_bridge_gep_type_iterator& operator++()$/;"	f	class:llvm::generic_bridge_gep_type_iterator
operator ++	svf/include/MemoryModel/ConditionalPT.h	/^        void operator ++(void)$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
operator ++	svf/include/Util/SparseBitVector.h	/^        inline SparseBitVectorIterator operator++(int)$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
operator ++	svf/include/Util/SparseBitVector.h	/^        inline SparseBitVectorIterator& operator++()$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
operator ++	svf/include/Util/iterator.h	/^    DerivedT &operator++()$/;"	f	class:SVF::iter_adaptor_base
operator ++	svf/include/Util/iterator.h	/^    DerivedT &operator++()$/;"	f	class:SVF::iter_facade_base
operator ++	svf/include/Util/iterator.h	/^    DerivedT operator++(int)$/;"	f	class:SVF::iter_facade_base
operator ++	svf/lib/MemoryModel/PointsTo.cpp	/^const PointsTo::PointsToIterator &PointsTo::PointsToIterator::operator++()$/;"	f	class:SVF::PointsTo::PointsToIterator
operator ++	svf/lib/MemoryModel/PointsTo.cpp	/^const PointsTo::PointsToIterator PointsTo::PointsToIterator::operator++(int)$/;"	f	class:SVF::PointsTo::PointsToIterator
operator ++	svf/lib/Util/CoreBitVector.cpp	/^const CoreBitVector::CoreBitVectorIterator &CoreBitVector::CoreBitVectorIterator::operator++(void)$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
operator ++	svf/lib/Util/CoreBitVector.cpp	/^const CoreBitVector::CoreBitVectorIterator CoreBitVector::CoreBitVectorIterator::operator++(int)$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
operator ++	z3.obj/include/z3++.h	/^            cube_iterator operator++(int) { assert(false); return *this; }$/;"	f	class:z3::solver::cube_iterator
operator ++	z3.obj/include/z3++.h	/^            cube_iterator& operator++() {$/;"	f	class:z3::solver::cube_iterator
operator ++	z3.obj/include/z3++.h	/^            iterator operator++(int) { iterator tmp = *this; ++m_index; return tmp; }$/;"	f	class:z3::ast_vector_tpl::iterator
operator ++	z3.obj/include/z3++.h	/^            iterator& operator++() {$/;"	f	class:z3::ast_vector_tpl::iterator
operator +=	svf/include/Util/iterator.h	/^    DerivedT &operator+=(difference_type n)$/;"	f	class:SVF::iter_adaptor_base
operator -	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator-(const IntervalValue &lhs,$/;"	f	namespace:SVF
operator -	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator-(const BoundedDouble& lhs)$/;"	f	class:SVF::BoundedDouble
operator -	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator-(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator -	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator-(const BoundedInt& lhs)$/;"	f	class:SVF::BoundedInt
operator -	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator-(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator -	svf/include/Util/SparseBitVector.h	/^operator-(const SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:SVF
operator -	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator-(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator -	svf/include/Util/iterator.h	/^    DerivedT operator-(DifferenceTypeT n) const$/;"	f	class:SVF::iter_facade_base
operator -	svf/include/Util/iterator.h	/^    difference_type operator-(const DerivedT &RHS) const$/;"	f	class:SVF::iter_adaptor_base
operator -	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo operator-(const PointsTo &lhs, const PointsTo &rhs)$/;"	f	namespace:SVF
operator -	z3.obj/include/z3++.h	/^    inline expr operator-(expr const & a) {$/;"	f	namespace:z3
operator -	z3.obj/include/z3++.h	/^    inline expr operator-(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator -	z3.obj/include/z3++.h	/^    inline expr operator-(expr const & a, int b) { return a - a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator -	z3.obj/include/z3++.h	/^    inline expr operator-(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) - b; }$/;"	f	namespace:z3
operator --	svf/include/Util/iterator.h	/^    DerivedT &operator--()$/;"	f	class:SVF::iter_adaptor_base
operator --	svf/include/Util/iterator.h	/^    DerivedT &operator--()$/;"	f	class:SVF::iter_facade_base
operator --	svf/include/Util/iterator.h	/^    DerivedT operator--(int)$/;"	f	class:SVF::iter_facade_base
operator -=	svf/include/Util/iterator.h	/^    DerivedT &operator-=(difference_type n)$/;"	f	class:SVF::iter_adaptor_base
operator -=	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::operator-=(const PointsTo &rhs)$/;"	f	class:SVF::PointsTo
operator -=	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::operator-=(const CoreBitVector &rhs)$/;"	f	class:SVF::CoreBitVector
operator ->	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    Type* operator->() const$/;"	f	class:llvm::generic_bridge_gep_type_iterator
operator ->	svf/include/Util/iterator.h	/^    PointerT operator->() const$/;"	f	class:SVF::iter_facade_base
operator ->	svf/include/Util/iterator.h	/^    PointerT operator->()$/;"	f	class:SVF::iter_facade_base
operator ->	z3.obj/include/z3++.h	/^            T * operator->() const { return &(operator*()); }$/;"	f	class:z3::ast_vector_tpl::iterator
operator ->	z3.obj/include/z3++.h	/^            expr_vector const * operator->() const { return &(operator*()); }$/;"	f	class:z3::solver::cube_iterator
operator /	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator\/(const IntervalValue &lhs,$/;"	f	namespace:SVF
operator /	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator\/(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator /	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator\/(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator /	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator\/(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator /	z3.obj/include/z3++.h	/^    inline expr operator\/(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator /	z3.obj/include/z3++.h	/^    inline expr operator\/(expr const & a, int b) { return a \/ a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator /	z3.obj/include/z3++.h	/^    inline expr operator\/(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) \/ b; }$/;"	f	namespace:z3
operator <	svf/include/AE/Core/AbstractState.h	/^    bool operator<(const AbstractState&rhs) const$/;"	f	class:SVF::AbstractState
operator <	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator<(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator <	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator<(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator <	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator<(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator <	svf/include/CFL/CFGrammar.h	/^        bool operator<(const Symbol& rhs)$/;"	f	struct:SVF::GrammarBase::Symbol
operator <	svf/include/CFL/CFLSolver.h	/^        inline bool operator<(const TreeNode& rhs) const$/;"	f	struct:SVF::POCRHybridSolver::TreeNode
operator <	svf/include/Graphs/WTO.h	/^    bool operator<(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
operator <	svf/include/MSSA/MSSAMuChi.h	/^    inline bool operator < (const MSSADEF & rhs) const$/;"	f	class:SVF::MSSADEF
operator <	svf/include/MSSA/MSSAMuChi.h	/^    inline bool operator < (const MSSAMU & rhs) const$/;"	f	class:SVF::MSSAMU
operator <	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator < (const CondVar & rhs) const$/;"	f	class:SVF::CondVar
operator <	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator< (const CondPointsToSet<Cond>& rhs) const$/;"	f	class:SVF::CondPointsToSet
operator <	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator<(const CondStdSet<Element>& rhs) const$/;"	f	class:SVF::CondStdSet
operator <	svf/include/Util/CxtStmt.h	/^    inline bool operator< (const CxtStmt& rhs) const$/;"	f	class:SVF::CxtStmt
operator <	svf/include/Util/CxtStmt.h	/^    inline bool operator< (const CxtThread& rhs) const$/;"	f	class:SVF::CxtThread
operator <	svf/include/Util/CxtStmt.h	/^    inline bool operator< (const CxtThreadProc& rhs) const$/;"	f	class:SVF::CxtThreadProc
operator <	svf/include/Util/CxtStmt.h	/^    inline bool operator< (const CxtThreadStmt& rhs) const$/;"	f	class:SVF::CxtThreadStmt
operator <	svf/include/Util/CxtStmt.h	/^    inline bool operator<(const CxtProc& rhs) const$/;"	f	class:SVF::CxtProc
operator <	svf/include/Util/DPItem.h	/^    inline bool operator< (const ContextCond& rhs) const$/;"	f	class:SVF::ContextCond
operator <	svf/include/Util/DPItem.h	/^    inline bool operator< (const CxtDPItem& rhs) const$/;"	f	class:SVF::CxtDPItem
operator <	svf/include/Util/DPItem.h	/^    inline bool operator< (const CxtStmtDPItem<LocCond>& rhs) const$/;"	f	class:SVF::CxtStmtDPItem
operator <	svf/include/Util/DPItem.h	/^    inline bool operator< (const DPItem& rhs) const$/;"	f	class:SVF::DPItem
operator <	svf/include/Util/DPItem.h	/^    inline bool operator< (const StmtDPItem& rhs) const$/;"	f	class:SVF::StmtDPItem
operator <	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator<(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator <	svf/include/Util/iterator.h	/^    friend bool operator<(const iter_adaptor_base &LHS,$/;"	f	class:SVF::iter_adaptor_base
operator <	svf/lib/AE/Core/RelExeState.cpp	/^bool RelExeState::operator<(const RelExeState &rhs) const$/;"	f	class:RelExeState
operator <	svf/lib/MemoryModel/AccessPath.cpp	/^bool AccessPath::operator< (const AccessPath& rhs) const$/;"	f	class:AccessPath
operator <	z3.obj/include/z3++.h	/^    inline expr operator<(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator <	z3.obj/include/z3++.h	/^    inline expr operator<(expr const & a, int b) { return a < a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator <	z3.obj/include/z3++.h	/^    inline expr operator<(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) < b; }$/;"	f	namespace:z3
operator <	z3.obj/include/z3++.h	/^    inline probe operator<(double p1, probe const & p2) { return probe(p2.ctx(), p1) < p2; }$/;"	f	namespace:z3
operator <	z3.obj/include/z3++.h	/^    inline probe operator<(probe const & p1, double p2) { return p1 < probe(p1.ctx(), p2); }$/;"	f	namespace:z3
operator <	z3.obj/include/z3++.h	/^    inline probe operator<(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator <<	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator<<(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator <<	svf/include/AE/Core/IntervalValue.h	/^inline std::ostream &operator<<(std::ostream &o,$/;"	f	namespace:SVF
operator <<	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator<<(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator <<	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator<<(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator <<	svf/include/AE/Core/NumericValue.h	/^    friend std::ostream& operator<<(std::ostream& out, const BoundedInt& expr)$/;"	f	class:SVF::BoundedInt
operator <<	svf/include/AE/Core/NumericValue.h	/^    friend std::ostream& operator<<(std::ostream& out,$/;"	f	class:SVF::BoundedDouble
operator <<	svf/include/Graphs/BasicBlockG.h	/^    friend OutStream &operator<<(OutStream &o, const SVFBasicBlock&node)$/;"	f	class:SVF::SVFBasicBlock
operator <<	svf/include/Graphs/BasicBlockG.h	/^    friend OutStream& operator<<(OutStream& o, const BasicBlockEdge& edge)$/;"	f	class:SVF::BasicBlockEdge
operator <<	svf/include/Graphs/CallGraph.h	/^    friend OutStream& operator<< (OutStream &o, const CallGraphEdge&edge)$/;"	f	class:SVF::CallGraphEdge
operator <<	svf/include/Graphs/CallGraph.h	/^    friend OutStream& operator<< (OutStream &o, const CallGraphNode&node)$/;"	f	class:SVF::CallGraphNode
operator <<	svf/include/Graphs/ConsGNode.h	/^    friend OutStream &operator<<(OutStream &o, const ConstraintNode &node)$/;"	f	class:SVF::ConstraintNode
operator <<	svf/include/Graphs/ICFGEdge.h	/^    friend OutStream& operator<<(OutStream& o, const ICFGEdge& edge)$/;"	f	class:SVF::ICFGEdge
operator <<	svf/include/Graphs/ICFGNode.h	/^    friend OutStream &operator<<(OutStream &o, const ICFGNode &node)$/;"	f	class:SVF::ICFGNode
operator <<	svf/include/Graphs/VFGEdge.h	/^    friend OutStream& operator<< (OutStream &o, const VFGEdge &edge)$/;"	f	class:SVF::VFGEdge
operator <<	svf/include/Graphs/VFGNode.h	/^    friend OutStream& operator<< (OutStream &o, const VFGNode &node)$/;"	f	class:SVF::VFGNode
operator <<	svf/include/Graphs/WTO.h	/^    friend std::ostream& operator<<(std::ostream& o, const WTO<GraphT>& wto)$/;"	f	class:SVF::WTO
operator <<	svf/include/Graphs/WTO.h	/^    friend std::ostream& operator<<(std::ostream& o,$/;"	f	class:SVF::WTOComponent
operator <<	svf/include/Graphs/WTO.h	/^    friend std::ostream& operator<<(std::ostream& o,$/;"	f	class:SVF::WTOCycleDepth
operator <<	svf/include/MemoryModel/ConditionalPT.h	/^    friend OutStream& operator<< (OutStream &o, const CondVar<Cond> &cvar)$/;"	f	class:SVF::CondVar
operator <<	svf/include/SVFIR/SVFStatements.h	/^    friend OutStream& operator<<(OutStream& o, const SVFStmt& edge)$/;"	f	class:SVF::SVFStmt
operator <<	svf/include/SVFIR/SVFValue.h	/^OutStream& operator<< (OutStream &o, const std::pair<F, S> &var)$/;"	f	namespace:SVF
operator <<	svf/include/SVFIR/SVFVariables.h	/^    friend OutStream& operator<< (OutStream &o, const SVFVar &node)$/;"	f	class:SVF::SVFVar
operator <<	svf/include/Util/Z3Expr.h	/^    friend std::ostream &operator<<(std::ostream &out, const Z3Expr &expr)$/;"	f	class:SVF::Z3Expr
operator <<	svf/lib/MSSA/MemRegion.cpp	/^std::ostream& SVF::operator<<(std::ostream &o, const MRVer& mrver)$/;"	f	class:SVF
operator <<	svf/lib/SVFIR/SVFType.cpp	/^std::ostream& operator<<(std::ostream& os, const SVFType& type)$/;"	f	namespace:SVF
operator <<	z3.obj/include/z3++.h	/^        friend std::ostream & operator<<(std::ostream & out, ast_vector_tpl const & v) { out << Z3_ast_vector_to_string(v.ctx(), v); return out; }$/;"	f	class:z3::ast_vector_tpl
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, apply_result const & r) { out << Z3_apply_result_to_string(r.ctx(), r); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, ast const & n) {$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, check_result r) {$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, exception const & e) { out << e.msg(); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, fixedpoint const & f) { return out << Z3_fixedpoint_to_string(f.ctx(), f, 0, 0); }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, goal const & g) { out << Z3_goal_to_string(g.ctx(), g); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, model const & m) { out << Z3_model_to_string(m.ctx(), m); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, optimize const & s) { out << Z3_optimize_to_string(s.ctx(), s.m_opt); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, params const & p) {$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, solver const & s) { out << Z3_solver_to_string(s.ctx(), s); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, stats const & s) { out << Z3_stats_to_string(s.ctx(), s); return out; }$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream & operator<<(std::ostream & out, symbol const & s) {$/;"	f	namespace:z3
operator <<	z3.obj/include/z3++.h	/^    inline std::ostream& operator<<(std::ostream & out, param_descrs const & d) { return out << d.to_string(); }$/;"	f	namespace:z3
operator <=	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator<=(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator <=	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator<=(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator <=	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator<=(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator <=	svf/include/Graphs/WTO.h	/^    bool operator<=(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
operator <=	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator<=(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator <=	svf/include/Util/iterator.h	/^    bool operator<=(const DerivedT &RHS) const$/;"	f	class:SVF::iter_facade_base
operator <=	z3.obj/include/z3++.h	/^    inline expr operator<=(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator <=	z3.obj/include/z3++.h	/^    inline expr operator<=(expr const & a, int b) { return a <= a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator <=	z3.obj/include/z3++.h	/^    inline expr operator<=(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) <= b; }$/;"	f	namespace:z3
operator <=	z3.obj/include/z3++.h	/^    inline probe operator<=(double p1, probe const & p2) { return probe(p2.ctx(), p1) <= p2; }$/;"	f	namespace:z3
operator <=	z3.obj/include/z3++.h	/^    inline probe operator<=(probe const & p1, double p2) { return p1 <= probe(p1.ctx(), p2); }$/;"	f	namespace:z3
operator <=	z3.obj/include/z3++.h	/^    inline probe operator<=(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator =	svf/include/AE/Core/AbstractState.h	/^    AbstractState&operator=(AbstractState&&rhs)$/;"	f	class:SVF::AbstractState
operator =	svf/include/AE/Core/AbstractState.h	/^    AbstractState&operator=(const AbstractState&rhs)$/;"	f	class:SVF::AbstractState
operator =	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue& operator=(const AbstractValue& other)$/;"	f	class:SVF::AbstractValue
operator =	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue& operator=(const AbstractValue&& other)$/;"	f	class:SVF::AbstractValue
operator =	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue& operator=(const AddressValue& other)$/;"	f	class:SVF::AbstractValue
operator =	svf/include/AE/Core/AbstractValue.h	/^    AbstractValue& operator=(const IntervalValue& other)$/;"	f	class:SVF::AbstractValue
operator =	svf/include/AE/Core/AddressValue.h	/^    AddressValue &operator=(const AddressValue &other)$/;"	f	class:SVF::AddressValue
operator =	svf/include/AE/Core/NumericValue.h	/^    BoundedDouble& operator=(BoundedDouble&& rhs)$/;"	f	class:SVF::BoundedDouble
operator =	svf/include/AE/Core/NumericValue.h	/^    BoundedDouble& operator=(const BoundedDouble& rhs)$/;"	f	class:SVF::BoundedDouble
operator =	svf/include/AE/Core/NumericValue.h	/^    BoundedInt& operator=(BoundedInt&& rhs)$/;"	f	class:SVF::BoundedInt
operator =	svf/include/AE/Core/NumericValue.h	/^    BoundedInt& operator=(const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator =	svf/include/CFL/CFGrammar.h	/^        void operator=(const u32_t& i)$/;"	f	struct:SVF::GrammarBase::Symbol
operator =	svf/include/CFL/CFGrammar.h	/^        void operator=(unsigned long long num)$/;"	f	struct:SVF::GrammarBase::Symbol
operator =	svf/include/MemoryModel/AccessPath.h	/^    inline const AccessPath& operator=(const AccessPath& rhs)$/;"	f	class:SVF::AccessPath
operator =	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondPointsToSet<Cond>& operator=($/;"	f	class:SVF::CondPointsToSet
operator =	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondStdSet<Element>& operator=(const CondStdSet<Element>& rhs)$/;"	f	class:SVF::CondStdSet
operator =	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondVar& operator= (const CondVar& rhs)$/;"	f	class:SVF::CondVar
operator =	svf/include/Util/CxtStmt.h	/^    inline CxtProc& operator=(const CxtProc& rhs)$/;"	f	class:SVF::CxtProc
operator =	svf/include/Util/CxtStmt.h	/^    inline CxtStmt& operator= (const CxtStmt& rhs)$/;"	f	class:SVF::CxtStmt
operator =	svf/include/Util/CxtStmt.h	/^    inline CxtThread& operator= (const CxtThread& rhs)$/;"	f	class:SVF::CxtThread
operator =	svf/include/Util/CxtStmt.h	/^    inline CxtThreadProc& operator= (const CxtThreadProc& rhs)$/;"	f	class:SVF::CxtThreadProc
operator =	svf/include/Util/CxtStmt.h	/^    inline CxtThreadStmt& operator= (const CxtThreadStmt& rhs)$/;"	f	class:SVF::CxtThreadStmt
operator =	svf/include/Util/DPItem.h	/^    inline ContextCond& operator= (const ContextCond& rhs)$/;"	f	class:SVF::ContextCond
operator =	svf/include/Util/DPItem.h	/^    inline CxtDPItem& operator= (const CxtDPItem& rhs)$/;"	f	class:SVF::CxtDPItem
operator =	svf/include/Util/DPItem.h	/^    inline CxtStmtDPItem<LocCond>& operator= (const CxtStmtDPItem<LocCond>& rhs)$/;"	f	class:SVF::CxtStmtDPItem
operator =	svf/include/Util/DPItem.h	/^    inline DPItem& operator= (const DPItem& rhs)$/;"	f	class:SVF::DPItem
operator =	svf/include/Util/DPItem.h	/^    inline StmtDPItem& operator= (const StmtDPItem& rhs)$/;"	f	class:SVF::StmtDPItem
operator =	svf/include/Util/SparseBitVector.h	/^    SparseBitVector &operator=(SparseBitVector &&RHS)$/;"	f	class:SVF::SparseBitVector
operator =	svf/include/Util/SparseBitVector.h	/^    SparseBitVector& operator=(const SparseBitVector& RHS)$/;"	f	class:SVF::SparseBitVector
operator =	svf/include/Util/Z3Expr.h	/^    inline Z3Expr &operator=(const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator =	svf/lib/AE/Core/RelExeState.cpp	/^RelExeState &RelExeState::operator=(const RelExeState &rhs)$/;"	f	class:RelExeState
operator =	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo &PointsTo::operator=(const PointsTo &rhs)$/;"	f	class:SVF::PointsTo
operator =	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::PointsToIterator &PointsTo::PointsToIterator::operator=(const PointsToIterator &rhs)$/;"	f	class:SVF::PointsTo::PointsToIterator
operator =	svf/lib/Util/BitVector.cpp	/^BitVector &BitVector::operator=(BitVector &&rhs)$/;"	f	class:SVF::BitVector
operator =	svf/lib/Util/BitVector.cpp	/^BitVector &BitVector::operator=(const BitVector &rhs)$/;"	f	class:SVF::BitVector
operator =	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector &CoreBitVector::operator=(CoreBitVector &&rhs)$/;"	f	class:SVF::CoreBitVector
operator =	svf/lib/Util/CoreBitVector.cpp	/^CoreBitVector &CoreBitVector::operator=(const CoreBitVector &rhs)$/;"	f	class:SVF::CoreBitVector
operator =	z3.obj/include/z3++.h	/^            iterator operator=(iterator const& other) { m_vector = other.m_vector; m_index = other.m_index; return *this; }$/;"	f	class:z3::ast_vector_tpl::iterator
operator =	z3.obj/include/z3++.h	/^        apply_result & operator=(apply_result const & s) {$/;"	f	class:z3::apply_result
operator =	z3.obj/include/z3++.h	/^        ast & operator=(ast const & s) { Z3_inc_ref(s.ctx(), s.m_ast); if (m_ast) Z3_dec_ref(ctx(), m_ast); m_ctx = s.m_ctx; m_ast = s.m_ast; return *this; }$/;"	f	class:z3::ast
operator =	z3.obj/include/z3++.h	/^        ast_vector_tpl & operator=(ast_vector_tpl const & s) {$/;"	f	class:z3::ast_vector_tpl
operator =	z3.obj/include/z3++.h	/^        expr & operator=(expr const & n) { return static_cast<expr&>(ast::operator=(n)); }$/;"	f	class:z3::expr
operator =	z3.obj/include/z3++.h	/^        func_decl & operator=(func_decl const & s) { return static_cast<func_decl&>(ast::operator=(s)); }$/;"	f	class:z3::func_decl
operator =	z3.obj/include/z3++.h	/^        func_entry & operator=(func_entry const & s) {$/;"	f	class:z3::func_entry
operator =	z3.obj/include/z3++.h	/^        func_interp & operator=(func_interp const & s) {$/;"	f	class:z3::func_interp
operator =	z3.obj/include/z3++.h	/^        goal & operator=(goal const & s) {$/;"	f	class:z3::goal
operator =	z3.obj/include/z3++.h	/^        model & operator=(model const & s) {$/;"	f	class:z3::model
operator =	z3.obj/include/z3++.h	/^        optimize& operator=(optimize const& o) {$/;"	f	class:z3::optimize
operator =	z3.obj/include/z3++.h	/^        param_descrs& operator=(param_descrs const& o) {$/;"	f	class:z3::param_descrs
operator =	z3.obj/include/z3++.h	/^        params & operator=(params const & s) {$/;"	f	class:z3::params
operator =	z3.obj/include/z3++.h	/^        probe & operator=(probe const & s) {$/;"	f	class:z3::probe
operator =	z3.obj/include/z3++.h	/^        solver & operator=(solver const & s) {$/;"	f	class:z3::solver
operator =	z3.obj/include/z3++.h	/^        sort & operator=(sort const & s) { return static_cast<sort&>(ast::operator=(s)); }$/;"	f	class:z3::sort
operator =	z3.obj/include/z3++.h	/^        stats & operator=(stats const & s) {$/;"	f	class:z3::stats
operator =	z3.obj/include/z3++.h	/^        symbol & operator=(symbol const & s) { m_ctx = s.m_ctx; m_sym = s.m_sym; return *this; }$/;"	f	class:z3::symbol
operator =	z3.obj/include/z3++.h	/^        tactic & operator=(tactic const & s) {$/;"	f	class:z3::tactic
operator ==	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    bool operator==(const generic_bridge_gep_type_iterator& x) const$/;"	f	class:llvm::generic_bridge_gep_type_iterator
operator ==	svf/include/AE/Core/AbstractState.h	/^    bool operator==(const AbstractState&rhs) const$/;"	f	class:SVF::AbstractState
operator ==	svf/include/AE/Core/IntervalValue.h	/^    IntervalValue operator==(const IntervalValue &other) const$/;"	f	class:SVF::IntervalValue
operator ==	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator==(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator ==	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator==(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator ==	svf/include/CFL/CFGrammar.h	/^        bool operator==(const Kind& k) const$/;"	f	struct:SVF::GrammarBase::Symbol
operator ==	svf/include/CFL/CFGrammar.h	/^        bool operator==(const Symbol& s) const$/;"	f	struct:SVF::GrammarBase::Symbol
operator ==	svf/include/CFL/CFGrammar.h	/^        bool operator==(const Symbol& s)$/;"	f	struct:SVF::GrammarBase::Symbol
operator ==	svf/include/CFL/CFGrammar.h	/^        bool operator==(const u32_t& i)$/;"	f	struct:SVF::GrammarBase::Symbol
operator ==	svf/include/CFL/CFLSolver.h	/^        inline bool operator==(const TreeNode& rhs) const$/;"	f	struct:SVF::POCRHybridSolver::TreeNode
operator ==	svf/include/Graphs/GenericGraph.h	/^    virtual inline bool operator==(const GenericEdge<NodeType>* rhs) const$/;"	f	class:SVF::GenericEdge
operator ==	svf/include/Graphs/WTO.h	/^    bool operator==(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
operator ==	svf/include/MSSA/MemRegion.h	/^    inline bool operator==(const MemRegion* rhs) const$/;"	f	class:SVF::MemRegion
operator ==	svf/include/MemoryModel/AccessPath.h	/^    inline bool operator==(const AccessPath& rhs) const$/;"	f	class:SVF::AccessPath
operator ==	svf/include/MemoryModel/ConditionalPT.h	/^        bool operator==(const CondPtsSetIterator &RHS) const$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
operator ==	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator == (const CondVar & rhs) const$/;"	f	class:SVF::CondVar
operator ==	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator==(const CondPointsToSet<Cond>& rhs) const$/;"	f	class:SVF::CondPointsToSet
operator ==	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator==(const CondStdSet<Element>& rhs) const$/;"	f	class:SVF::CondStdSet
operator ==	svf/include/Util/CxtStmt.h	/^    inline bool operator== (const CxtStmt& rhs) const$/;"	f	class:SVF::CxtStmt
operator ==	svf/include/Util/CxtStmt.h	/^    inline bool operator== (const CxtThread& rhs) const$/;"	f	class:SVF::CxtThread
operator ==	svf/include/Util/CxtStmt.h	/^    inline bool operator== (const CxtThreadProc& rhs) const$/;"	f	class:SVF::CxtThreadProc
operator ==	svf/include/Util/CxtStmt.h	/^    inline bool operator== (const CxtThreadStmt& rhs) const$/;"	f	class:SVF::CxtThreadStmt
operator ==	svf/include/Util/CxtStmt.h	/^    inline bool operator==(const CxtProc& rhs) const$/;"	f	class:SVF::CxtProc
operator ==	svf/include/Util/DPItem.h	/^    inline bool operator== (const ContextCond& rhs) const$/;"	f	class:SVF::ContextCond
operator ==	svf/include/Util/DPItem.h	/^    inline bool operator== (const CxtDPItem& rhs) const$/;"	f	class:SVF::CxtDPItem
operator ==	svf/include/Util/DPItem.h	/^    inline bool operator== (const CxtStmtDPItem<LocCond>& rhs) const$/;"	f	class:SVF::CxtStmtDPItem
operator ==	svf/include/Util/DPItem.h	/^    inline bool operator== (const DPItem& rhs) const$/;"	f	class:SVF::DPItem
operator ==	svf/include/Util/DPItem.h	/^    inline bool operator== (const StmtDPItem& rhs) const$/;"	f	class:SVF::StmtDPItem
operator ==	svf/include/Util/SparseBitVector.h	/^        bool operator==(const SparseBitVectorIterator &RHS) const$/;"	f	class:SVF::SparseBitVector::SparseBitVectorIterator
operator ==	svf/include/Util/SparseBitVector.h	/^    bool operator==(const SparseBitVector &RHS) const$/;"	f	class:SVF::SparseBitVector
operator ==	svf/include/Util/SparseBitVector.h	/^    bool operator==(const SparseBitVectorElement &RHS) const$/;"	f	struct:SVF::SparseBitVectorElement
operator ==	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator==(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator ==	svf/include/Util/iterator.h	/^    friend bool operator==(const iter_adaptor_base &LHS,$/;"	f	class:SVF::iter_adaptor_base
operator ==	svf/lib/AE/Core/RelExeState.cpp	/^bool RelExeState::operator==(const RelExeState &rhs) const$/;"	f	class:RelExeState
operator ==	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::PointsToIterator::operator==(const PointsToIterator &rhs) const$/;"	f	class:SVF::PointsTo::PointsToIterator
operator ==	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::operator==(const PointsTo &rhs) const$/;"	f	class:SVF::PointsTo
operator ==	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::CoreBitVectorIterator::operator==(const CoreBitVectorIterator &rhs) const$/;"	f	class:SVF::CoreBitVector::CoreBitVectorIterator
operator ==	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::operator==(const CoreBitVector &rhs) const$/;"	f	class:SVF::CoreBitVector
operator ==	z3.obj/include/z3++.h	/^            bool operator==(cube_iterator const& other) {$/;"	f	class:z3::solver::cube_iterator
operator ==	z3.obj/include/z3++.h	/^            bool operator==(iterator const& other) const {$/;"	f	class:z3::ast_vector_tpl::iterator
operator ==	z3.obj/include/z3++.h	/^    inline expr operator==(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator ==	z3.obj/include/z3++.h	/^    inline expr operator==(expr const & a, int b) { assert(a.is_arith() || a.is_bv() || a.is_fpa()); return a == a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator ==	z3.obj/include/z3++.h	/^    inline expr operator==(int a, expr const & b) { assert(b.is_arith() || b.is_bv() || b.is_fpa()); return b.ctx().num_val(a, b.get_sort()) == b; }$/;"	f	namespace:z3
operator ==	z3.obj/include/z3++.h	/^    inline probe operator==(double p1, probe const & p2) { return probe(p2.ctx(), p1) == p2; }$/;"	f	namespace:z3
operator ==	z3.obj/include/z3++.h	/^    inline probe operator==(probe const & p1, double p2) { return p1 == probe(p1.ctx(), p2); }$/;"	f	namespace:z3
operator ==	z3.obj/include/z3++.h	/^    inline probe operator==(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator >	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator>(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator >	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator>(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator >	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator>(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator >	svf/include/Graphs/WTO.h	/^    bool operator>(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
operator >	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator>(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator >	svf/include/Util/iterator.h	/^    bool operator>(const DerivedT &RHS) const$/;"	f	class:SVF::iter_facade_base
operator >	z3.obj/include/z3++.h	/^    inline expr operator>(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator >	z3.obj/include/z3++.h	/^    inline expr operator>(expr const & a, int b) { return a > a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator >	z3.obj/include/z3++.h	/^    inline expr operator>(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) > b; }$/;"	f	namespace:z3
operator >	z3.obj/include/z3++.h	/^    inline probe operator>(double p1, probe const & p2) { return probe(p2.ctx(), p1) > p2; }$/;"	f	namespace:z3
operator >	z3.obj/include/z3++.h	/^    inline probe operator>(probe const & p1, double p2) { return p1 > probe(p1.ctx(), p2); }$/;"	f	namespace:z3
operator >	z3.obj/include/z3++.h	/^    inline probe operator>(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator >=	svf/include/AE/Core/AbstractState.h	/^    bool operator>=(const AbstractState&rhs) const$/;"	f	class:SVF::AbstractState
operator >=	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator>=(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator >=	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator>=(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator >=	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator>=(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator >=	svf/include/Graphs/WTO.h	/^    bool operator>=(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
operator >=	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator>=(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator >=	svf/include/Util/iterator.h	/^    bool operator>=(const DerivedT &RHS) const$/;"	f	class:SVF::iter_facade_base
operator >=	z3.obj/include/z3++.h	/^    inline expr operator>=(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator >=	z3.obj/include/z3++.h	/^    inline expr operator>=(expr const & a, int b) { return a >= a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator >=	z3.obj/include/z3++.h	/^    inline expr operator>=(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) >= b; }$/;"	f	namespace:z3
operator >=	z3.obj/include/z3++.h	/^    inline probe operator>=(double p1, probe const & p2) { return probe(p2.ctx(), p1) >= p2; }$/;"	f	namespace:z3
operator >=	z3.obj/include/z3++.h	/^    inline probe operator>=(probe const & p1, double p2) { return p1 >= probe(p1.ctx(), p2); }$/;"	f	namespace:z3
operator >=	z3.obj/include/z3++.h	/^    inline probe operator>=(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator >>	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator>>(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator >>	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator>>(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator >>	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator>>(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator ReferenceT	svf/include/Util/iterator.h	/^        operator ReferenceT() const$/;"	f	class:SVF::iter_facade_base::ReferenceProxy
operator Z3_app	z3.obj/include/z3++.h	/^        operator Z3_app() const { assert(is_app()); return reinterpret_cast<Z3_app>(m_ast); }$/;"	f	class:z3::expr
operator Z3_apply_result	z3.obj/include/z3++.h	/^        operator Z3_apply_result() const { return m_apply_result; }$/;"	f	class:z3::apply_result
operator Z3_ast	z3.obj/include/z3++.h	/^        operator Z3_ast() const { return m_ast; }$/;"	f	class:z3::ast
operator Z3_ast_vector	z3.obj/include/z3++.h	/^        operator Z3_ast_vector() const { return m_vector; }$/;"	f	class:z3::ast_vector_tpl
operator Z3_config	z3.obj/include/z3++.h	/^        operator Z3_config() const { return m_cfg; }$/;"	f	class:z3::config
operator Z3_context	z3.obj/include/z3++.h	/^        operator Z3_context() const { return m_ctx; }$/;"	f	class:z3::context
operator Z3_fixedpoint	z3.obj/include/z3++.h	/^        operator Z3_fixedpoint() const { return m_fp; }$/;"	f	class:z3::fixedpoint
operator Z3_func_decl	z3.obj/include/z3++.h	/^        operator Z3_func_decl() const { return reinterpret_cast<Z3_func_decl>(m_ast); }$/;"	f	class:z3::func_decl
operator Z3_func_entry	z3.obj/include/z3++.h	/^        operator Z3_func_entry() const { return m_entry; }$/;"	f	class:z3::func_entry
operator Z3_func_interp	z3.obj/include/z3++.h	/^        operator Z3_func_interp() const { return m_interp; }$/;"	f	class:z3::func_interp
operator Z3_goal	z3.obj/include/z3++.h	/^        operator Z3_goal() const { return m_goal; }$/;"	f	class:z3::goal
operator Z3_model	z3.obj/include/z3++.h	/^        operator Z3_model() const { return m_model; }$/;"	f	class:z3::model
operator Z3_optimize	z3.obj/include/z3++.h	/^        operator Z3_optimize() const { return m_opt; }$/;"	f	class:z3::optimize
operator Z3_params	z3.obj/include/z3++.h	/^        operator Z3_params() const { return m_params; }$/;"	f	class:z3::params
operator Z3_probe	z3.obj/include/z3++.h	/^        operator Z3_probe() const { return m_probe; }$/;"	f	class:z3::probe
operator Z3_solver	z3.obj/include/z3++.h	/^        operator Z3_solver() const { return m_solver; }$/;"	f	class:z3::solver
operator Z3_sort	z3.obj/include/z3++.h	/^        operator Z3_sort() const { return reinterpret_cast<Z3_sort>(m_ast); }$/;"	f	class:z3::sort
operator Z3_stats	z3.obj/include/z3++.h	/^        operator Z3_stats() const { return m_stats; }$/;"	f	class:z3::stats
operator Z3_symbol	z3.obj/include/z3++.h	/^        operator Z3_symbol() const { return m_sym; }$/;"	f	class:z3::symbol
operator Z3_tactic	z3.obj/include/z3++.h	/^        operator Z3_tactic() const { return m_tactic; }$/;"	f	class:z3::tactic
operator []	svf/include/AE/Core/AbstractState.h	/^    inline virtual AbstractValue &operator[](u32_t varId)$/;"	f	class:SVF::AbstractState
operator []	svf/include/AE/Core/AbstractState.h	/^    inline virtual const AbstractValue &operator[](u32_t varId) const$/;"	f	class:SVF::AbstractState
operator []	svf/include/AE/Core/RelExeState.h	/^    inline Z3Expr &operator[](u32_t varId)$/;"	f	class:SVF::RelExeState
operator []	svf/include/Util/DPItem.h	/^    inline NodeID operator[] (const u32_t index) const$/;"	f	class:SVF::ContextCond
operator []	svf/include/Util/iterator.h	/^    ReferenceProxy operator[](DifferenceTypeT n) const$/;"	f	class:SVF::iter_facade_base
operator []	svf/include/Util/iterator.h	/^    ReferenceProxy operator[](DifferenceTypeT n)$/;"	f	class:SVF::iter_facade_base
operator []	z3.obj/include/z3++.h	/^        T & operator[](int i) { assert(0 <= i); assert(static_cast<unsigned>(i) < m_size); return m_array[i]; }$/;"	f	class:z3::array
operator []	z3.obj/include/z3++.h	/^        T const & operator[](int i) const { assert(0 <= i); assert(static_cast<unsigned>(i) < m_size); return m_array[i]; }$/;"	f	class:z3::array
operator []	z3.obj/include/z3++.h	/^        T operator[](int i) const { assert(0 <= i); Z3_ast r = Z3_ast_vector_get(ctx(), m_vector, i); check_error(); return cast_ast<T>()(ctx(), r); }$/;"	f	class:z3::ast_vector_tpl
operator []	z3.obj/include/z3++.h	/^        expr operator[](expr const& index) const {$/;"	f	class:z3::expr
operator []	z3.obj/include/z3++.h	/^        expr operator[](expr_vector const& index) const {$/;"	f	class:z3::expr
operator []	z3.obj/include/z3++.h	/^        expr operator[](int i) const { assert(0 <= i); Z3_ast r = Z3_goal_formula(ctx(), m_goal, i); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::goal
operator []	z3.obj/include/z3++.h	/^        func_decl operator[](int i) const {$/;"	f	class:z3::model
operator []	z3.obj/include/z3++.h	/^        goal operator[](int i) const { assert(0 <= i); Z3_goal r = Z3_apply_result_get_subgoal(ctx(), m_apply_result, i); check_error(); return goal(ctx(), r); }$/;"	f	class:z3::apply_result
operator ^	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator^(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator ^	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator^(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator ^	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator^(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator ^	svf/include/Graphs/WTO.h	/^    WTOCycleDepth operator^(const WTOCycleDepth& other) const$/;"	f	class:SVF::WTOCycleDepth
operator ^	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator^(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator ^	z3.obj/include/z3++.h	/^    inline expr operator^(expr const & a, expr const & b) { check_context(a, b); Z3_ast r = Z3_mk_bvxor(a.ctx(), a, b); return expr(a.ctx(), r); }$/;"	f	namespace:z3
operator ^	z3.obj/include/z3++.h	/^    inline expr operator^(expr const & a, int b) { return a ^ a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator ^	z3.obj/include/z3++.h	/^    inline expr operator^(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) ^ b; }$/;"	f	namespace:z3
operator bool	z3.obj/include/z3++.h	/^        operator bool() const { return m_ast != 0; }$/;"	f	class:z3::ast
operator u32_t	svf/include/CFL/CFGrammar.h	/^        operator u32_t() const$/;"	f	struct:SVF::GrammarBase::Symbol
operator u32_t	svf/include/CFL/CFGrammar.h	/^        operator u32_t()$/;"	f	struct:SVF::GrammarBase::Symbol
operator |	svf/include/AE/Core/IntervalValue.h	/^inline IntervalValue operator|(const IntervalValue &lhs, const IntervalValue &rhs)$/;"	f	namespace:SVF
operator |	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator|(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator |	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator|(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator |	svf/include/Util/SparseBitVector.h	/^operator|(const SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:SVF
operator |	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator|(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator |	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo operator|(const PointsTo &lhs, const PointsTo &rhs)$/;"	f	namespace:SVF
operator |	z3.obj/include/z3++.h	/^    inline expr operator|(expr const & a, expr const & b) { check_context(a, b); Z3_ast r = Z3_mk_bvor(a.ctx(), a, b); return expr(a.ctx(), r); }$/;"	f	namespace:z3
operator |	z3.obj/include/z3++.h	/^    inline expr operator|(expr const & a, int b) { return a | a.ctx().num_val(b, a.get_sort()); }$/;"	f	namespace:z3
operator |	z3.obj/include/z3++.h	/^    inline expr operator|(int a, expr const & b) { return b.ctx().num_val(a, b.get_sort()) | b; }$/;"	f	namespace:z3
operator |	z3.obj/include/z3++.h	/^    inline tactic operator|(tactic const & t1, tactic const & t2) {$/;"	f	namespace:z3
operator |=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator |= (const CondPointsToSet<Cond>& rhs)$/;"	f	class:SVF::CondPointsToSet
operator |=	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool operator|=(const CondStdSet<Element>& rhs)$/;"	f	class:SVF::CondStdSet
operator |=	svf/include/Util/SparseBitVector.h	/^    bool operator|=(const SparseBitVector &RHS)$/;"	f	class:SVF::SparseBitVector
operator |=	svf/include/Util/SparseBitVector.h	/^inline bool operator |=(SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:SVF
operator |=	svf/include/Util/SparseBitVector.h	/^inline bool operator |=(SparseBitVector<ElementSize> *LHS,$/;"	f	namespace:SVF
operator |=	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::operator|=(const NodeBS &rhs)$/;"	f	class:SVF::PointsTo
operator |=	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::operator|=(const PointsTo &rhs)$/;"	f	class:SVF::PointsTo
operator |=	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::operator|=(const CoreBitVector &rhs)$/;"	f	class:SVF::CoreBitVector
operator ||	svf/include/AE/Core/NumericValue.h	/^    friend BoundedDouble operator||(const BoundedDouble& lhs,$/;"	f	class:SVF::BoundedDouble
operator ||	svf/include/AE/Core/NumericValue.h	/^    friend BoundedInt operator||(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
operator ||	svf/include/Util/Z3Expr.h	/^    friend Z3Expr operator||(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
operator ||	z3.obj/include/z3++.h	/^    inline expr operator||(bool a, expr const & b) { return b.ctx().bool_val(a) || b; }$/;"	f	namespace:z3
operator ||	z3.obj/include/z3++.h	/^    inline expr operator||(expr const & a, bool b) { return a || a.ctx().bool_val(b); }$/;"	f	namespace:z3
operator ||	z3.obj/include/z3++.h	/^    inline expr operator||(expr const & a, expr const & b) {$/;"	f	namespace:z3
operator ||	z3.obj/include/z3++.h	/^    inline probe operator||(probe const & p1, probe const & p2) {$/;"	f	namespace:z3
operator ~	z3.obj/include/z3++.h	/^    inline expr operator~(expr const & a) { Z3_ast r = Z3_mk_bvnot(a.ctx(), a); return expr(a.ctx(), r); }$/;"	f	namespace:z3
optimize	z3.obj/include/z3++.h	/^        optimize(context& c):object(c) { m_opt = Z3_mk_optimize(c); Z3_optimize_inc_ref(c, m_opt); }$/;"	f	class:z3::optimize
optimize	z3.obj/include/z3++.h	/^        optimize(context& c, optimize& src):object(c) {$/;"	f	class:z3::optimize
optimize	z3.obj/include/z3++.h	/^        optimize(optimize& o):object(o)  {$/;"	f	class:z3::optimize
optimize	z3.obj/include/z3++.h	/^    class optimize : public object {$/;"	c	namespace:z3
option	z3.obj/include/z3++.h	/^    inline expr option(expr const& re) {$/;"	f	namespace:z3
optionValues	svf/include/Util/CommandLine.h	/^    std::unordered_map<T, bool> optionValues;$/;"	m	class:OptionMultiple
other	svf/include/Graphs/WTO.h	/^    WTO& operator=(WTO&& other) = default;$/;"	m	class:SVF::WTO
other	svf/include/Graphs/WTO.h	/^    WTO& operator=(const WTO& other) = default;$/;"	m	class:SVF::WTO
other	svf/include/Graphs/WTO.h	/^    WTO(WTO&& other) = default;$/;"	m	class:SVF::WTO
other	svf/include/Graphs/WTO.h	/^    WTO(const WTO& other) = default;$/;"	m	class:SVF::WTO
outCFLEdges	svf/include/Graphs/CFLGraph.h	/^    CFLEdgeDataTy outCFLEdges;$/;"	m	class:SVF::CFLNode
outICFGEdges	svf/include/MemoryModel/SVFLoop.h	/^    ICFGEdgeSet entryICFGEdges, backICFGEdges, inICFGEdges, outICFGEdges;$/;"	m	class:SVF::SVFLoop
outICFGEdgesBegin	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator outICFGEdgesBegin()$/;"	f	class:SVF::SVFLoop
outICFGEdgesEnd	svf/include/MemoryModel/SVFLoop.h	/^    inline ICFGEdgeSet::iterator outICFGEdgesEnd()$/;"	f	class:SVF::SVFLoop
outOfBudgetDpms	svf/include/DDA/DDAVFSolver.h	/^    DPTItemSet outOfBudgetDpms;		\/\/\/< out of budget dpm set$/;"	m	class:SVF::DDAVFSolver
outOfBudgetQuery	svf/include/DDA/DDAVFSolver.h	/^    bool outOfBudgetQuery;			\/\/\/< Whether the current query is out of step limits$/;"	m	class:SVF::DDAVFSolver
outUpdatedVarMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    UpdatedVarMap outUpdatedVarMap;$/;"	m	class:SVF::MutableIncDFPTData
outUpdatedVarMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    UpdatedVarMap outUpdatedVarMap;$/;"	m	class:SVF::PersistentIncDFPTData
outgoingAddrEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy& outgoingAddrEdges()$/;"	f	class:SVF::ConstraintNode
outgoingAddrsBegin	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator outgoingAddrsBegin() const$/;"	f	class:SVF::ConstraintNode
outgoingAddrsEnd	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator outgoingAddrsEnd() const$/;"	f	class:SVF::ConstraintNode
outgoingLoadsBegin	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator outgoingLoadsBegin() const$/;"	f	class:SVF::ConstraintNode
outgoingLoadsEnd	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator outgoingLoadsEnd() const$/;"	f	class:SVF::ConstraintNode
outgoingStoresBegin	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator outgoingStoresBegin() const$/;"	f	class:SVF::ConstraintNode
outgoingStoresEnd	svf/include/Graphs/ConsGNode.h	/^    inline const_iterator outgoingStoresEnd() const$/;"	f	class:SVF::ConstraintNode
outs	svf/include/Util/SVFUtil.h	/^inline std::ostream &outs()$/;"	f	namespace:SVF::SVFUtil
overlap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    bool overlap(const CPtSet& cpts1, const CPtSet& cpts2) const$/;"	f	class:SVF::CondPTAImpl
override	svf-llvm/include/SVF-LLVM/DCHG.h	/^    virtual const VFunSet &getCSVFsBasedonCHA(const CallICFGNode* cs) override;$/;"	m	class:SVF::DCHGraph
override	svf-llvm/include/SVF-LLVM/DCHG.h	/^    virtual const VTableSet &getCSVtblsBasedonCHA(const CallICFGNode* cs) override;$/;"	m	class:SVF::DCHGraph
override	svf-llvm/include/SVF-LLVM/DCHG.h	/^    virtual void getVFnsFromVtbls(const CallICFGNode* cs, const VTableSet &vtbls, VFunSet &virtualFunctions) override;$/;"	m	class:SVF::DCHGraph
override	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    void performStat() override;$/;"	m	class:SVF::AEStat
override	svf/include/DDA/ContextDDA.h	/^    virtual CxtPtSet processGepPts(const GepSVFGNode* gep, const CxtPtSet& srcPts) override;$/;"	m	class:SVF::ContextDDA
override	svf/include/DDA/ContextDDA.h	/^    virtual bool handleBKCondition(CxtLocDPItem& dpm, const SVFGEdge* edge) override;$/;"	m	class:SVF::ContextDDA
override	svf/include/DDA/ContextDDA.h	/^    virtual bool isHeapCondMemObj(const CxtVar& var, const StoreSVFGNode* store) override;$/;"	m	class:SVF::ContextDDA
override	svf/include/DDA/ContextDDA.h	/^    virtual inline bool isCondCompatible(const ContextCond& cxt1, const ContextCond& cxt2, bool singleton) const override;$/;"	m	class:SVF::ContextDDA
override	svf/include/DDA/ContextDDA.h	/^    virtual void computeDDAPts(NodeID id) override;$/;"	m	class:SVF::ContextDDA
override	svf/include/DDA/ContextDDA.h	/^    virtual void initialize() override;$/;"	m	class:SVF::ContextDDA
override	svf/include/DDA/DDAStat.h	/^    void performStat() override;$/;"	m	class:SVF::DDAStat
override	svf/include/DDA/DDAStat.h	/^    void performStatPerQuery(NodeID ptr) override;$/;"	m	class:SVF::DDAStat
override	svf/include/DDA/DDAStat.h	/^    void printStat(std::string str = "") override;$/;"	m	class:SVF::DDAStat
override	svf/include/DDA/DDAStat.h	/^    void printStatPerQuery(NodeID ptr, const PointsTo& pts) override;$/;"	m	class:SVF::DDAStat
override	svf/include/DDA/FlowDDA.h	/^    virtual PointsTo processGepPts(const GepSVFGNode* gep, const PointsTo& srcPts) override;$/;"	m	class:SVF::FlowDDA
override	svf/include/DDA/FlowDDA.h	/^    virtual bool handleBKCondition(LocDPItem& dpm, const SVFGEdge* edge) override;$/;"	m	class:SVF::FlowDDA
override	svf/include/DDA/FlowDDA.h	/^    virtual bool isHeapCondMemObj(const NodeID& var, const StoreSVFGNode* store) override;$/;"	m	class:SVF::FlowDDA
override	svf/include/DDA/FlowDDA.h	/^    void computeDDAPts(NodeID id) override;$/;"	m	class:SVF::FlowDDA
override	svf/include/Graphs/CFLGraph.h	/^    ~CFLEdge() override = default;$/;"	m	class:SVF::CFLEdge
override	svf/include/Graphs/CFLGraph.h	/^    ~CFLGraph() override = default;$/;"	m	class:SVF::CFLGraph
override	svf/include/Graphs/CFLGraph.h	/^    ~CFLNode() override = default;$/;"	m	class:SVF::CFLNode
override	svf/include/Graphs/CHG.h	/^    bool csHasVFnsBasedonCHA(const CallICFGNode* cs) override;$/;"	m	class:SVF::CHGraph
override	svf/include/Graphs/CHG.h	/^    bool csHasVtblsBasedonCHA(const CallICFGNode* cs) override;$/;"	m	class:SVF::CHGraph
override	svf/include/Graphs/CHG.h	/^    const VFunSet &getCSVFsBasedonCHA(const CallICFGNode* cs) override;$/;"	m	class:SVF::CHGraph
override	svf/include/Graphs/CHG.h	/^    const VTableSet &getCSVtblsBasedonCHA(const CallICFGNode* cs) override;$/;"	m	class:SVF::CHGraph
override	svf/include/Graphs/CHG.h	/^    void getVFnsFromVtbls(const CallICFGNode* cs, const VTableSet &vtbls, VFunSet &virtualFunctions) override;$/;"	m	class:SVF::CHGraph
override	svf/include/Graphs/CHG.h	/^    ~CHGraph() override = default;$/;"	m	class:SVF::CHGraph
override	svf/include/Graphs/ICFG.h	/^    ~ICFG() override;$/;"	m	class:SVF::ICFG
override	svf/include/Graphs/ICFGNode.h	/^    const std::string getSourceLoc() const override;$/;"	m	class:SVF::FunEntryICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string getSourceLoc() const override;$/;"	m	class:SVF::FunExitICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::CallICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::FunEntryICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::FunExitICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::GlobalICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::IntraICFGNode
override	svf/include/Graphs/ICFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::RetICFGNode
override	svf/include/Graphs/SVFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::DummyVersionPropSVFGNode
override	svf/include/Graphs/SVFGNode.h	/^    inline const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::MRSVFGNode
override	svf/include/Graphs/SVFGNode.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::MRSVFGNode
override	svf/include/Graphs/SVFGOPT.h	/^    void buildSVFG() override;$/;"	m	class:SVF::SVFGOPT
override	svf/include/Graphs/SVFGOPT.h	/^    ~SVFGOPT() override = default;$/;"	m	class:SVF::SVFGOPT
override	svf/include/Graphs/SVFGStat.h	/^    virtual void performStat() override;$/;"	m	class:SVF::MemSSAStat
override	svf/include/Graphs/SVFGStat.h	/^    virtual void performStat() override;$/;"	m	class:SVF::SVFGStat
override	svf/include/Graphs/SVFGStat.h	/^    virtual void printStat(std::string str = "") override;$/;"	m	class:SVF::MemSSAStat
override	svf/include/Graphs/SVFGStat.h	/^    virtual void printStat(std::string str = "") override;$/;"	m	class:SVF::SVFGStat
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::ActualParmVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::ActualRetVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::AddrVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::BinaryOPVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::BranchVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::CmpVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::CopyVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::FormalParmVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::FormalRetVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::GepVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::LoadVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::NullPtrVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::PHIVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::StoreVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const NodeBS getDefSVFVars() const override;$/;"	m	class:SVF::UnaryOPVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const SVFVar* getValue() const override;$/;"	m	class:SVF::ArgumentVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const SVFVar* getValue() const override;$/;"	m	class:SVF::BinaryOPVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const SVFVar* getValue() const override;$/;"	m	class:SVF::CmpVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const SVFVar* getValue() const override;$/;"	m	class:SVF::PHIVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const SVFVar* getValue() const override;$/;"	m	class:SVF::StmtVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::ActualParmVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::ActualRetVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::AddrVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::ArgumentVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::BinaryOPVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::CmpVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::CopyVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::FormalParmVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::FormalRetVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::GepVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::InterPHIVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::IntraPHIVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::LoadVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::NullPtrVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::PHIVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::StmtVFGNode
override	svf/include/Graphs/VFGNode.h	/^    const std::string toString() const override;$/;"	m	class:SVF::StoreVFGNode
override	svf/include/Graphs/VFGNode.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::BranchVFGNode
override	svf/include/Graphs/VFGNode.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::UnaryOPVFGNode
override	svf/include/MemoryModel/MutablePointsToDS.h	/^    ~MutableDiffPTData() override = default;$/;"	m	class:SVF::MutableDiffPTData
override	svf/include/MemoryModel/PersistentPointsToDS.h	/^    ~PersistentDFPTData() override = default;$/;"	m	class:SVF::PersistentDFPTData
override	svf/include/MemoryModel/PersistentPointsToDS.h	/^    ~PersistentDiffPTData() override = default;$/;"	m	class:SVF::PersistentDiffPTData
override	svf/include/MemoryModel/PersistentPointsToDS.h	/^    ~PersistentIncDFPTData() override = default;$/;"	m	class:SVF::PersistentIncDFPTData
override	svf/include/MemoryModel/PersistentPointsToDS.h	/^    ~PersistentPTData() override = default;$/;"	m	class:SVF::PersistentPTData
override	svf/include/MemoryModel/PersistentPointsToDS.h	/^    ~PersistentVersionedPTData() override = default;$/;"	m	class:SVF::PersistentVersionedPTData
override	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    AliasResult alias(NodeID node1, NodeID node2) override;$/;"	m	class:SVF::BVDataPTAImpl
override	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    void dumpAllPts() override;$/;"	m	class:SVF::BVDataPTAImpl
override	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    void dumpTopLevelPtsTo() override;$/;"	m	class:SVF::BVDataPTAImpl
override	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    void finalize() override;$/;"	m	class:SVF::BVDataPTAImpl
override	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    ~BVDataPTAImpl() override = default;$/;"	m	class:SVF::BVDataPTAImpl
override	svf/include/SABER/DoubleFreeChecker.h	/^    void reportBug(ProgSlice* slice) override;$/;"	m	class:SVF::DoubleFreeChecker
override	svf/include/SABER/LeakChecker.h	/^    virtual void initSnks() override;$/;"	m	class:SVF::LeakChecker
override	svf/include/SABER/LeakChecker.h	/^    virtual void initSrcs() override;$/;"	m	class:SVF::LeakChecker
override	svf/include/SABER/LeakChecker.h	/^    virtual void reportBug(ProgSlice* slice) override;$/;"	m	class:SVF::LeakChecker
override	svf/include/SABER/SrcSnkDDA.h	/^    void BWProcessIncomingEdge(const DPIm& item, SVFGEdge* edge) override;$/;"	m	class:SVF::SrcSnkDDA
override	svf/include/SABER/SrcSnkDDA.h	/^    void FWProcessOutgoingEdge(const DPIm& item, SVFGEdge* edge) override;$/;"	m	class:SVF::SrcSnkDDA
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::AddrStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::BinaryOPStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::BranchStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::CallPE
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::CmpStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::CopyStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::LoadStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::PhiStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::RetPE
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::SelectStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::StoreStmt
override	svf/include/SVFIR/SVFStatements.h	/^    virtual const std::string toString() const override;$/;"	m	class:SVF::UnaryOPStmt
override	svf/include/SVFIR/SVFType.h	/^    void print(std::ostream& os) const override;$/;"	m	class:SVF::SVFArrayType
override	svf/include/SVFIR/SVFType.h	/^    void print(std::ostream& os) const override;$/;"	m	class:SVF::SVFFunctionType
override	svf/include/SVFIR/SVFType.h	/^    void print(std::ostream& os) const override;$/;"	m	class:SVF::SVFIntegerType
override	svf/include/SVFIR/SVFType.h	/^    void print(std::ostream& os) const override;$/;"	m	class:SVF::SVFOtherType
override	svf/include/SVFIR/SVFType.h	/^    void print(std::ostream& os) const override;$/;"	m	class:SVF::SVFPointerType
override	svf/include/SVFIR/SVFType.h	/^    void print(std::ostream& os) const override;$/;"	m	class:SVF::SVFStructType
override	svf/include/Util/PTAStat.h	/^    void callgraphStat() override;$/;"	m	class:SVF::PTAStat
override	svf/include/Util/PTAStat.h	/^    void performStat() override;$/;"	m	class:SVF::PTAStat
override	svf/include/WPA/Andersen.h	/^    virtual bool updateCallGraph(const CallSiteToFunPtrMap&) override;$/;"	m	class:SVF::AndersenBase
override	svf/include/WPA/Andersen.h	/^    virtual void analyze() override;$/;"	m	class:SVF::AndersenBase
override	svf/include/WPA/Andersen.h	/^    virtual void finalize() override;$/;"	m	class:SVF::AndersenBase
override	svf/include/WPA/Andersen.h	/^    virtual void initialize() override;$/;"	m	class:SVF::AndersenBase
override	svf/include/WPA/Andersen.h	/^    virtual void normalizePointsTo() override;$/;"	m	class:SVF::AndersenBase
override	svf/include/WPA/Andersen.h	/^    ~AndersenBase() override;$/;"	m	class:SVF::AndersenBase
override	svf/include/WPA/FlowSensitive.h	/^    NodeStack& SCCDetect() override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    bool propFromSrcToDst(SVFGEdge* edge) override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    bool updateCallGraph(const CallSiteToFunPtrMap& callsites) override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    void analyze() override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    void finalize() override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    void initialize() override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    void processNode(NodeID nodeId) override;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/FlowSensitive.h	/^    ~FlowSensitive() override = default;$/;"	m	class:SVF::FlowSensitive
override	svf/include/WPA/Steensgaard.h	/^    virtual void solveWorklist() override;$/;"	m	class:SVF::Steensgaard
override	svf/include/WPA/TypeAnalysis.h	/^    virtual inline void finalize() override;$/;"	m	class:SVF::TypeAnalysis
override	svf/include/WPA/TypeAnalysis.h	/^    void analyze() override;$/;"	m	class:SVF::TypeAnalysis
override	svf/include/WPA/TypeAnalysis.h	/^    void initialize() override;$/;"	m	class:SVF::TypeAnalysis
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual bool processLoad(const LoadSVFGNode* load) override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual bool processStore(const StoreSVFGNode* store) override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual void cluster(void) override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual void finalize() override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual void initialize() override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual void processNode(NodeID n) override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    virtual void updateConnectedNodes(const SVFGEdgeSetTy& newEdges) override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    void readPtsFromFile(const std::string& filename) override;$/;"	m	class:SVF::VersionedFlowSensitive
override	svf/include/WPA/VersionedFlowSensitive.h	/^    void solveAndwritePtsToFile(const std::string& filename) override;$/;"	m	class:SVF::VersionedFlowSensitive
owned_ctx	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    std::unique_ptr<LLVMContext> owned_ctx;$/;"	m	class:SVF::LLVMModuleSet
owned_modules	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    std::vector<std::unique_ptr<Module>> owned_modules;$/;"	m	class:SVF::LLVMModuleSet
pag	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    SVFIR* pag;$/;"	m	class:SVF::SVFIRBuilder
pag	svf/include/DDA/DDAClient.h	/^    SVFIR*   pag;					\/\/\/< SVFIR graph used by current DDA analysis$/;"	m	class:SVF::DDAClient
pag	svf/include/Graphs/ConsG.h	/^    SVFIR* pag;$/;"	m	class:SVF::ConstraintGraph
pag	svf/include/Graphs/VFG.h	/^    SVFIR* pag;$/;"	m	class:SVF::VFG
pag	svf/include/MemoryModel/PointerAnalysis.h	/^    static SVFIR* pag;$/;"	m	class:SVF::PointerAnalysis
pag	svf/include/SVFIR/PAGBuilderFromFile.h	/^    SVFIR* pag;$/;"	m	class:SVF::PAGBuilderFromFile
pag	svf/include/SVFIR/SVFIR.h	/^    static std::unique_ptr<SVFIR> pag;	\/\/\/< Singleton pattern here to enable instance of SVFIR can only be created once.$/;"	m	class:SVF::SVFIR
pagEdge	svf/include/Graphs/VFGNode.h	/^    const PAGEdge* pagEdge;$/;"	m	class:SVF::StmtVFGNode
pagEdgeToFunMap	svf/include/MSSA/MemRegion.h	/^    PAGEdgeToFunMap pagEdgeToFunMap;$/;"	m	class:SVF::MRGenerator
pagEdges	svf/include/Graphs/ICFGNode.h	/^    SVFStmtList pagEdges; \/\/< a list of PAGEdges$/;"	m	class:SVF::ICFGNode
pagFileName	svf/include/SVFIR/SVFIR.h	/^    static inline std::string pagFileName()$/;"	f	class:SVF::SVFIR
pagReadFromTXT	svf/include/SVFIR/SVFIR.h	/^    static inline bool pagReadFromTXT()$/;"	f	class:SVF::SVFIR
pagReadFromTxt	svf/include/SVFIR/SVFIR.h	/^    static std::string pagReadFromTxt;$/;"	m	class:SVF::SVFIR
pagReadFromTxt	svf/lib/SVFIR/SVFIR.cpp	/^std::string SVFIR::pagReadFromTxt = "";$/;"	m	class:SVFIR	file:
pango_cairo_font_map_get_default	svf-llvm/lib/extapi.c	/^void *pango_cairo_font_map_get_default(void)$/;"	f
parForSites	svf/include/Graphs/ThreadCallGraph.h	/^    CallSiteSet parForSites; \/\/\/< all parallel for sites$/;"	m	class:SVF::ThreadCallGraph
parForSitesBegin	svf/include/Graphs/ThreadCallGraph.h	/^    inline CallSiteSet::const_iterator parForSitesBegin() const$/;"	f	class:SVF::ThreadCallGraph
parForSitesEnd	svf/include/Graphs/ThreadCallGraph.h	/^    inline CallSiteSet::const_iterator parForSitesEnd() const$/;"	f	class:SVF::ThreadCallGraph
par_and_then	z3.obj/include/z3++.h	/^    inline tactic par_and_then(tactic const & t1, tactic const & t2) {$/;"	f	namespace:z3
par_or	z3.obj/include/z3++.h	/^    inline tactic par_or(unsigned n, tactic const* tactics) {$/;"	f	namespace:z3
param	svf/include/Graphs/VFGNode.h	/^    const PAGNode* param;$/;"	m	class:SVF::ArgumentVFGNode
param_descrs	z3.obj/bin/python/z3/z3.py	/^    def param_descrs(self):$/;"	m	class:Fixedpoint
param_descrs	z3.obj/bin/python/z3/z3.py	/^    def param_descrs(self):$/;"	m	class:Optimize
param_descrs	z3.obj/bin/python/z3/z3.py	/^    def param_descrs(self):$/;"	m	class:Solver
param_descrs	z3.obj/bin/python/z3/z3.py	/^    def param_descrs(self):$/;"	m	class:Tactic
param_descrs	z3.obj/include/z3++.h	/^        param_descrs(context& c, Z3_param_descrs d): object(c), m_descrs(d) { Z3_param_descrs_inc_ref(c, d); }$/;"	f	class:z3::param_descrs
param_descrs	z3.obj/include/z3++.h	/^        param_descrs(param_descrs const& o): object(o.ctx()), m_descrs(o.m_descrs) { Z3_param_descrs_inc_ref(ctx(), m_descrs); }$/;"	f	class:z3::param_descrs
param_descrs	z3.obj/include/z3++.h	/^    class param_descrs : public object {$/;"	c	namespace:z3
params	svf/include/SVFIR/SVFType.h	/^    std::vector<const SVFType*> params;$/;"	m	class:SVF::SVFFunctionType
params	z3.obj/bin/python/z3/z3.py	/^    def params(self):$/;"	m	class:ExprRef
params	z3.obj/bin/python/z3/z3.py	/^    def params(self):$/;"	m	class:FuncDeclRef
params	z3.obj/include/z3++.h	/^        params(context & c):object(c) { m_params = Z3_mk_params(c); Z3_params_inc_ref(ctx(), m_params); }$/;"	f	class:z3::params
params	z3.obj/include/z3++.h	/^        params(params const & s):object(s), m_params(s.m_params) { Z3_params_inc_ref(ctx(), m_params); }$/;"	f	class:z3::params
params	z3.obj/include/z3++.h	/^    class params : public object {$/;"	c	namespace:z3
parseOptions	svf/include/Util/CommandLine.h	/^    static std::vector<std::string> parseOptions(int argc, char *argv[], std::string description, std::string callFormat)$/;"	f	class:OptionBase
parseProductionsString	svf/lib/CFL/GrammarBuilder.cpp	/^const inline std::string GrammarBuilder::parseProductionsString() const$/;"	f	class:SVF::GrammarBuilder
parseSelfCycleHandleOption	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::parseSelfCycleHandleOption()$/;"	f	class:SVFGOPT
parse_array	svf/lib/Util/cJSON.cpp	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	svf/lib/Util/cJSON.cpp	/^} parse_buffer;$/;"	t	typeref:struct:__anon16	file:
parse_file	z3.obj/bin/python/z3/z3.py	/^    def parse_file(self, f):$/;"	m	class:Fixedpoint
parse_file	z3.obj/include/z3++.h	/^    inline expr_vector context::parse_file(char const* s) {$/;"	f	class:z3::context
parse_file	z3.obj/include/z3++.h	/^    inline expr_vector context::parse_file(char const* s, sort_vector const& sorts, func_decl_vector const& decls) {$/;"	f	class:z3::context
parse_hex4	svf/lib/Util/cJSON.cpp	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_number	svf/lib/Util/cJSON.cpp	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	svf/lib/Util/cJSON.cpp	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_smt2_file	z3.obj/bin/python/z3/z3.py	/^def parse_smt2_file(f, sorts={}, decls={}, ctx=None):$/;"	f
parse_smt2_string	z3.obj/bin/python/z3/z3.py	/^def parse_smt2_string(s, sorts={}, decls={}, ctx=None):$/;"	f
parse_string	svf/lib/Util/cJSON.cpp	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	z3.obj/bin/python/z3/z3.py	/^    def parse_string(self, s):$/;"	m	class:Fixedpoint
parse_string	z3.obj/include/z3++.h	/^    inline expr_vector context::parse_string(char const* s) {$/;"	f	class:z3::context
parse_string	z3.obj/include/z3++.h	/^    inline expr_vector context::parse_string(char const* s, sort_vector const& sorts, func_decl_vector const& decls) {$/;"	f	class:z3::context
parse_value	svf/lib/Util/cJSON.cpp	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
partialJoin	svf/include/MTA/MHP.h	/^    ThreadPairSet partialJoin;		\/\/\/< t1 partially joins t2 along some program path(s)$/;"	m	class:SVF::ForkJoinAnalysis
partialReachable	svf/include/SABER/ProgSlice.h	/^    bool partialReachable;					\/\/\/<  reachable from some paths$/;"	m	class:SVF::ProgSlice
partial_order	z3.obj/include/z3++.h	/^    inline func_decl partial_order(sort const& a, unsigned index) {$/;"	f	namespace:z3
partitionMRs	svf/lib/MSSA/MemPartition.cpp	/^void DistinctMRG::partitionMRs()$/;"	f	class:DistinctMRG
partitionMRs	svf/lib/MSSA/MemPartition.cpp	/^void InterDisjointMRG::partitionMRs()$/;"	f	class:InterDisjointMRG
partitionMRs	svf/lib/MSSA/MemPartition.cpp	/^void IntraDisjointMRG::partitionMRs()$/;"	f	class:IntraDisjointMRG
partitionMRs	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::partitionMRs()$/;"	f	class:MRGenerator
pasMsg	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::pasMsg(const std::string& msg)$/;"	f	class:SVFUtil
pathAllocator	svf/include/SABER/ProgSlice.h	/^    SaberCondAllocator* pathAllocator;		\/\/\/<  path condition allocator$/;"	m	class:SVF::ProgSlice
pattern	z3.obj/bin/python/z3/z3.py	/^    def pattern(self, idx):$/;"	m	class:QuantifierRef
pbeq	z3.obj/include/z3++.h	/^    inline expr pbeq(expr_vector const& es, int const* coeffs, int bound) {$/;"	f	namespace:z3
pbge	z3.obj/include/z3++.h	/^    inline expr pbge(expr_vector const& es, int const* coeffs, int bound) {$/;"	f	namespace:z3
pble	z3.obj/include/z3++.h	/^    inline expr pble(expr_vector const& es, int const* coeffs, int bound) {$/;"	f	namespace:z3
pdtBBsMap	svf/include/Util/SVFLoopAndDomInfo.h	/^    Map<const SVFBasicBlock*,BBSet> pdtBBsMap;   \/\/\/< map a BasicBlock to BasicBlocks it PostDominates$/;"	m	class:SVF::SVFLoopAndDomInfo
performAPIStat	svf/lib/Util/ThreadAPI.cpp	/^void ThreadAPI::performAPIStat()$/;"	f	class:ThreadAPI
performMHPPairStat	svf/lib/MTA/MTAStat.cpp	/^void MTAStat::performMHPPairStat(MHP* mhp, LockAnalysis* lsa)$/;"	f	class:MTAStat
performSCCStat	svf/lib/Graphs/SVFGStat.cpp	/^void SVFGStat::performSCCStat(SVFGEdgeSet insensitiveCalRetEdges)$/;"	f	class:SVFGStat
performStat	svf/include/DDA/DDAClient.h	/^    virtual inline void performStat(PointerAnalysis*) {}$/;"	f	class:SVF::DDAClient
performStat	svf/include/Graphs/ICFGStat.h	/^    void performStat()$/;"	f	class:SVF::ICFGStat
performStat	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AEStat::performStat()$/;"	f	class:AEStat
performStat	svf/lib/CFL/CFLStat.cpp	/^void CFLStat::performStat()$/;"	f	class:CFLStat
performStat	svf/lib/DDA/DDAClient.cpp	/^void AliasDDAClient::performStat(PointerAnalysis* pta)$/;"	f	class:AliasDDAClient
performStat	svf/lib/DDA/DDAClient.cpp	/^void FunptrDDAClient::performStat(PointerAnalysis* pta)$/;"	f	class:FunptrDDAClient
performStat	svf/lib/DDA/DDAStat.cpp	/^void DDAStat::performStat()$/;"	f	class:DDAStat
performStat	svf/lib/Graphs/SVFG.cpp	/^void SVFG::performStat()$/;"	f	class:SVFG
performStat	svf/lib/Graphs/SVFGStat.cpp	/^void MemSSAStat::performStat()$/;"	f	class:MemSSAStat
performStat	svf/lib/Graphs/SVFGStat.cpp	/^void SVFGStat::performStat()$/;"	f	class:SVFGStat
performStat	svf/lib/MSSA/MemSSA.cpp	/^void MemSSA::performStat()$/;"	f	class:MemSSA
performStat	svf/lib/Util/PTAStat.cpp	/^void PTAStat::performStat()$/;"	f	class:PTAStat
performStat	svf/lib/Util/SVFStat.cpp	/^void SVFStat::performStat()$/;"	f	class:SVFStat
performStat	svf/lib/WPA/AndersenStat.cpp	/^void AndersenStat::performStat()$/;"	f	class:AndersenStat
performStat	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::performStat()$/;"	f	class:FlowSensitiveStat
performStat	svf/lib/WPA/VersionedFlowSensitiveStat.cpp	/^void VersionedFlowSensitiveStat::performStat()$/;"	f	class:VersionedFlowSensitiveStat
performStatPerQuery	svf/include/Util/SVFStat.h	/^    virtual void performStatPerQuery(NodeID) {}$/;"	f	class:SVF::SVFStat
performStatPerQuery	svf/lib/DDA/DDAStat.cpp	/^void DDAStat::performStatPerQuery(NodeID ptr)$/;"	f	class:DDAStat
performStatforIFDS	svf/include/Graphs/ICFGStat.h	/^    void performStatforIFDS()$/;"	f	class:SVF::ICFGStat
performTCTStat	svf/lib/MTA/MTAStat.cpp	/^void MTAStat::performTCTStat(TCT* tct)$/;"	f	class:MTAStat
performThreadCallGraphStat	svf/lib/MTA/MTAStat.cpp	/^void MTAStat::performThreadCallGraphStat(ThreadCallGraph* tcg)$/;"	f	class:MTAStat
persPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPTData<Key, KeySet, Data, DataSet> persPTData;$/;"	m	class:SVF::PersistentDFPTData
persPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPTData<Key, KeySet, Data, DataSet> persPTData;$/;"	m	class:SVF::PersistentDiffPTData
phiNodeMap	svf/include/SVFIR/SVFIR.h	/^    PHINodeMap phiNodeMap;	\/\/\/< A set of phi copy edges$/;"	m	class:SVF::SVFIR
phiTime	svf/include/WPA/FlowSensitive.h	/^    double phiTime;	\/\/\/< time of phi nodes.$/;"	m	class:SVF::FlowSensitive
piecewise_linear_order	z3.obj/include/z3++.h	/^    inline func_decl piecewise_linear_order(sort const& a, unsigned index) {$/;"	f	namespace:z3
plain	svf/include/CFL/CFLGraphBuilder.h	/^    plain,$/;"	m	class:SVF::BuildDirection
plainMap	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::plainMap(void) const$/;"	f	class:FlowSensitive
plus	z3.obj/include/z3++.h	/^    inline expr plus(expr const& re) {$/;"	f	namespace:z3
plus_infinity	svf/include/AE/Core/IntervalValue.h	/^    static BoundedInt plus_infinity()$/;"	f	class:SVF::IntervalValue
plus_infinity	svf/include/AE/Core/NumericValue.h	/^    static BoundedDouble plus_infinity()$/;"	f	class:SVF::BoundedDouble
plus_infinity	svf/include/AE/Core/NumericValue.h	/^    static BoundedInt plus_infinity()$/;"	f	class:SVF::BoundedInt
pointee_iter	svf/include/Util/iterator.h	/^    pointee_iter(U &&u)$/;"	f	struct:SVF::pointee_iter
pointee_iter	svf/include/Util/iterator.h	/^struct pointee_iter$/;"	s	namespace:SVF
pointer_iterator	svf/include/Util/iterator.h	/^    explicit pointer_iterator(WrappedIteratorT u)$/;"	f	class:SVF::pointer_iterator
pointer_iterator	svf/include/Util/iterator.h	/^class pointer_iterator$/;"	c	namespace:SVF
pointsTo	svf/include/MemoryModel/ConditionalPT.h	/^    inline CondPts &pointsTo(void)$/;"	f	class:SVF::CondPointsToSet
pointsTo	svf/include/MemoryModel/ConditionalPT.h	/^    inline PointsTo &pointsTo(Cond cond)$/;"	f	class:SVF::CondPointsToSet
pointsTo	svf/include/MemoryModel/ConditionalPT.h	/^    inline const CondPts &pointsTo(void) const$/;"	f	class:SVF::CondPointsToSet
pointsTo	svf/include/MemoryModel/ConditionalPT.h	/^    inline const PointsTo &pointsTo(Cond cond) const$/;"	f	class:SVF::CondPointsToSet
pop	svf/include/CFL/CFGrammar.h	/^    inline Data pop()$/;"	f	class:SVF::CFLFIFOWorkList
pop	svf/include/Graphs/WTO.h	/^    const NodeT* pop()$/;"	f	class:SVF::WTO
pop	svf/include/Util/WorkList.h	/^    Data pop()$/;"	f	class:SVF::List
pop	svf/include/Util/WorkList.h	/^    inline Data pop()$/;"	f	class:SVF::FIFOWorkList
pop	svf/include/Util/WorkList.h	/^    inline Data pop()$/;"	f	class:SVF::FILOWorkList
pop	z3.obj/bin/python/z3/z3.py	/^    def pop(self):$/;"	m	class:Optimize
pop	z3.obj/bin/python/z3/z3.py	/^    def pop(self, num=1):$/;"	m	class:Solver
pop	z3.obj/include/z3++.h	/^        void pop() {$/;"	f	class:z3::optimize
pop	z3.obj/include/z3++.h	/^        void pop(unsigned n = 1) { Z3_solver_pop(ctx(), m_solver, n); check_error(); }$/;"	f	class:z3::solver
popFromCTPWorkList	svf/include/MTA/LockAnalysis.h	/^    inline CxtLockProc popFromCTPWorkList()$/;"	f	class:SVF::LockAnalysis
popFromCTPWorkList	svf/include/MTA/TCT.h	/^    inline CxtThreadProc popFromCTPWorkList()$/;"	f	class:SVF::TCT
popFromCTSWorkList	svf/include/MTA/LockAnalysis.h	/^    inline CxtStmt popFromCTSWorkList()$/;"	f	class:SVF::LockAnalysis
popFromCTSWorkList	svf/include/MTA/MHP.h	/^    inline CxtStmt popFromCTSWorkList()$/;"	f	class:SVF::ForkJoinAnalysis
popFromCTSWorkList	svf/include/MTA/MHP.h	/^    inline CxtThreadStmt popFromCTSWorkList()$/;"	f	class:SVF::MHP
popFromWorklist	svf/include/CFL/CFLSolver.h	/^    inline const CFLEdge* popFromWorklist()$/;"	f	class:SVF::CFLSolver
popFromWorklist	svf/include/SABER/SrcSnkSolver.h	/^    inline DPIm popFromWorklist()$/;"	f	class:SVF::SrcSnkSolver
popFromWorklist	svf/include/Util/GraphReachSolver.h	/^    inline DPIm popFromWorklist()$/;"	f	class:SVF::GraphReachSolver
popFromWorklist	svf/include/WPA/WPASolver.h	/^    inline NodeID popFromWorklist()$/;"	f	class:SVF::WPASolver
popRecursiveCallSites	svf/include/DDA/ContextDDA.h	/^    inline virtual void popRecursiveCallSites(CxtLocDPItem& dpm)$/;"	f	class:SVF::ContextDDA
pop_back	z3.obj/include/z3++.h	/^        void pop_back() { assert(size() > 0); resize(size() - 1); }$/;"	f	class:z3::ast_vector_tpl
popen	svf-llvm/lib/extapi.c	/^void *popen(const char *command, const char *type)$/;"	f
position	svf/lib/Util/cJSON.cpp	/^    size_t position;$/;"	m	struct:__anon15	file:
posix_memalign	svf-llvm/lib/extapi.c	/^int posix_memalign(void **a, unsigned long b, unsigned long c)$/;"	f
possibilities	svf/include/Util/CommandLine.h	/^    OptionPossibilities possibilities;$/;"	m	class:OptionMap
possibilities	svf/include/Util/CommandLine.h	/^    OptionPossibilities possibilities;$/;"	m	class:OptionMultiple
possibilityDescriptions	svf/include/Util/CommandLine.h	/^    PossibilityDescriptions possibilityDescriptions;$/;"	m	class:OptionBase
postDominate	svf/include/SABER/SaberCondAllocator.h	/^    inline bool postDominate(const SVFBasicBlock* bbKey, const SVFBasicBlock* bbValue) const$/;"	f	class:SVF::SaberCondAllocator
postDominate	svf/include/SVFIR/SVFVariables.h	/^    inline bool postDominate(const SVFBasicBlock* bbKey, const SVFBasicBlock* bbValue) const$/;"	f	class:SVF::FunObjVar
postDominate	svf/lib/SVFIR/SVFValue.cpp	/^bool SVFLoopAndDomInfo::postDominate(const SVFBasicBlock* bbKey, const SVFBasicBlock* bbValue) const$/;"	f	class:SVFLoopAndDomInfo
postProcessNode	svf/lib/WPA/AndersenWaveDiff.cpp	/^void AndersenWaveDiff::postProcessNode(NodeID nodeId)$/;"	f	class:AndersenWaveDiff
power	z3.obj/bin/python/z3/z3num.py	/^    def power(self, k):$/;"	m	class:Numeral
power	z3.obj/bin/python/z3/z3rcf.py	/^    def power(self, k):$/;"	m	class:RCFNum
pp	z3.obj/bin/python/z3/z3printer.py	/^    def pp(self, f, indent):$/;"	m	class:PP
pp	z3.obj/bin/python/z3/z3printer.py	/^def pp(a):$/;"	f
pp_K	z3.obj/bin/python/z3/z3printer.py	/^    def pp_K(self, a, d, xs):$/;"	m	class:Formatter
pp_algebraic	z3.obj/bin/python/z3/z3printer.py	/^    def pp_algebraic(self, a):$/;"	m	class:Formatter
pp_app	z3.obj/bin/python/z3/z3printer.py	/^    def pp_app(self, a, d, xs):$/;"	m	class:Formatter
pp_arrow	z3.obj/bin/python/z3/z3printer.py	/^    def pp_arrow(self):$/;"	m	class:Formatter
pp_arrow	z3.obj/bin/python/z3/z3printer.py	/^    def pp_arrow(self):$/;"	m	class:HTMLFormatter
pp_atmost	z3.obj/bin/python/z3/z3printer.py	/^    def pp_atmost(self, a, d, f, xs):$/;"	m	class:Formatter
pp_bv	z3.obj/bin/python/z3/z3printer.py	/^    def pp_bv(self, a):$/;"	m	class:Formatter
pp_choice	z3.obj/bin/python/z3/z3printer.py	/^    def pp_choice(self, f, indent):$/;"	m	class:PP
pp_compose	z3.obj/bin/python/z3/z3printer.py	/^    def pp_compose(self, f, indent):$/;"	m	class:PP
pp_const	z3.obj/bin/python/z3/z3printer.py	/^    def pp_const(self, a):$/;"	m	class:Formatter
pp_decl	z3.obj/bin/python/z3/z3printer.py	/^    def pp_decl(self, f):$/;"	m	class:Formatter
pp_distinct	z3.obj/bin/python/z3/z3printer.py	/^    def pp_distinct(self, a, d, xs):$/;"	m	class:Formatter
pp_ellipses	z3.obj/bin/python/z3/z3printer.py	/^    def pp_ellipses(self):$/;"	m	class:Formatter
pp_expr	z3.obj/bin/python/z3/z3printer.py	/^    def pp_expr(self, a, d, xs):$/;"	m	class:Formatter
pp_extract	z3.obj/bin/python/z3/z3printer.py	/^    def pp_extract(self, a, d, xs):$/;"	m	class:Formatter
pp_fd	z3.obj/bin/python/z3/z3printer.py	/^    def pp_fd(self, a):$/;"	m	class:Formatter
pp_fdecl	z3.obj/bin/python/z3/z3printer.py	/^    def pp_fdecl(self, f, a, d, xs):$/;"	m	class:Formatter
pp_fp	z3.obj/bin/python/z3/z3printer.py	/^    def pp_fp(self, a, d, xs):$/;"	m	class:Formatter
pp_fp_value	z3.obj/bin/python/z3/z3printer.py	/^    def pp_fp_value(self, a):$/;"	m	class:Formatter
pp_fprm_value	z3.obj/bin/python/z3/z3printer.py	/^    def pp_fprm_value(self, a):$/;"	m	class:Formatter
pp_func_entry	z3.obj/bin/python/z3/z3printer.py	/^    def pp_func_entry(self, e):$/;"	m	class:Formatter
pp_func_interp	z3.obj/bin/python/z3/z3printer.py	/^    def pp_func_interp(self, f):$/;"	m	class:Formatter
pp_infix	z3.obj/bin/python/z3/z3printer.py	/^    def pp_infix(self, a, d, xs):$/;"	m	class:Formatter
pp_int	z3.obj/bin/python/z3/z3printer.py	/^    def pp_int(self, a):$/;"	m	class:Formatter
pp_is	z3.obj/bin/python/z3/z3printer.py	/^    def pp_is(self, a, d, xs):$/;"	m	class:Formatter
pp_line_break	z3.obj/bin/python/z3/z3printer.py	/^    def pp_line_break(self, f, indent):$/;"	m	class:PP
pp_list	z3.obj/bin/python/z3/z3printer.py	/^    def pp_list(self, a):$/;"	m	class:Formatter
pp_loop	z3.obj/bin/python/z3/z3printer.py	/^    def pp_loop(self, a, d, xs):$/;"	m	class:Formatter
pp_map	z3.obj/bin/python/z3/z3printer.py	/^    def pp_map(self, a, d, xs):$/;"	m	class:Formatter
pp_model	z3.obj/bin/python/z3/z3printer.py	/^    def pp_model(self, m):$/;"	m	class:Formatter
pp_name	z3.obj/bin/python/z3/z3printer.py	/^    def pp_name(self, a):$/;"	m	class:Formatter
pp_name	z3.obj/bin/python/z3/z3printer.py	/^    def pp_name(self, a):$/;"	m	class:HTMLFormatter
pp_neq	z3.obj/bin/python/z3/z3printer.py	/^    def pp_neq(self):$/;"	m	class:Formatter
pp_neq	z3.obj/bin/python/z3/z3printer.py	/^    def pp_neq(self):$/;"	m	class:HTMLFormatter
pp_pattern	z3.obj/bin/python/z3/z3printer.py	/^    def pp_pattern(self, a, d, xs):$/;"	m	class:Formatter
pp_pbcmp	z3.obj/bin/python/z3/z3printer.py	/^    def pp_pbcmp(self, a, d, f, xs):$/;"	m	class:Formatter
pp_power	z3.obj/bin/python/z3/z3printer.py	/^    def pp_power(self, a, d, xs):$/;"	m	class:Formatter
pp_power	z3.obj/bin/python/z3/z3printer.py	/^    def pp_power(self, a, d, xs):$/;"	m	class:HTMLFormatter
pp_power_arg	z3.obj/bin/python/z3/z3printer.py	/^    def pp_power_arg(self, arg, d, xs):$/;"	m	class:Formatter
pp_prefix	z3.obj/bin/python/z3/z3printer.py	/^    def pp_prefix(self, a, d, xs):$/;"	m	class:Formatter
pp_quantifier	z3.obj/bin/python/z3/z3printer.py	/^    def pp_quantifier(self, a, d, xs):$/;"	m	class:Formatter
pp_quantifier	z3.obj/bin/python/z3/z3printer.py	/^    def pp_quantifier(self, a, d, xs):$/;"	m	class:HTMLFormatter
pp_rational	z3.obj/bin/python/z3/z3printer.py	/^    def pp_rational(self, a):$/;"	m	class:Formatter
pp_select	z3.obj/bin/python/z3/z3printer.py	/^    def pp_select(self, a, d, xs):$/;"	m	class:Formatter
pp_seq	z3.obj/bin/python/z3/z3printer.py	/^    def pp_seq(self, a, d, xs):$/;"	m	class:Formatter
pp_seq_core	z3.obj/bin/python/z3/z3printer.py	/^    def pp_seq_core(self, f, a, d, xs):$/;"	m	class:Formatter
pp_seq_seq	z3.obj/bin/python/z3/z3printer.py	/^    def pp_seq_seq(self, a, d, xs):$/;"	m	class:Formatter
pp_set	z3.obj/bin/python/z3/z3printer.py	/^    def pp_set(self, id, a):$/;"	m	class:Formatter
pp_sort	z3.obj/bin/python/z3/z3printer.py	/^    def pp_sort(self, s):$/;"	m	class:Formatter
pp_string	z3.obj/bin/python/z3/z3printer.py	/^    def pp_string(self, a):$/;"	m	class:Formatter
pp_string	z3.obj/bin/python/z3/z3printer.py	/^    def pp_string(self, f, indent):$/;"	m	class:PP
pp_unary	z3.obj/bin/python/z3/z3printer.py	/^    def pp_unary(self, a, d, xs):$/;"	m	class:Formatter
pp_unary_param	z3.obj/bin/python/z3/z3printer.py	/^    def pp_unary_param(self, a, d, xs):$/;"	m	class:Formatter
pp_unknown	z3.obj/bin/python/z3/z3printer.py	/^    def pp_unknown(self):$/;"	m	class:Formatter
pp_unknown	z3.obj/bin/python/z3/z3printer.py	/^    def pp_unknown(self):$/;"	m	class:HTMLFormatter
pp_var	z3.obj/bin/python/z3/z3printer.py	/^    def pp_var(self, a, d, xs):$/;"	m	class:Formatter
pp_var	z3.obj/bin/python/z3/z3printer.py	/^    def pp_var(self, a, d, xs):$/;"	m	class:HTMLFormatter
prePassSchedule	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::prePassSchedule()$/;"	f	class:LLVMModuleSet
preProcessBCs	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::preProcessBCs(std::vector<std::string> &moduleNameVec)$/;"	f	class:LLVMModuleSet
preProcessed	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    static bool preProcessed;$/;"	m	class:SVF::LLVMModuleSet
preProcessed	svf-llvm/lib/LLVMModule.cpp	/^bool LLVMModuleSet::preProcessed = false;$/;"	m	class:LLVMModuleSet	file:
prec	z3.obj/bin/python/z3/z3.py	/^    def prec(self):$/;"	m	class:Goal
precision	z3.obj/bin/python/z3/z3.py	/^    def precision(self):$/;"	m	class:Goal
precision	z3.obj/include/z3++.h	/^        Z3_goal_prec precision() const { return Z3_goal_precision(ctx(), m_goal); }$/;"	f	class:z3::goal
predBBs	svf/include/Graphs/BasicBlockG.h	/^    std::vector<const SVFBasicBlock*> predBBs;$/;"	m	class:SVF::SVFBasicBlock
predMap	svf/include/CFL/CFLSolver.h	/^    DataMap predMap;                                                \/\/ pred map for nodes contains Label: edgeset$/;"	m	class:SVF::POCRSolver
predicate	svf/include/SVFIR/SVFStatements.h	/^    u32_t predicate;$/;"	m	class:SVF::CmpStmt
preemptiveComplements	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t preemptiveComplements;$/;"	m	class:SVF::PersistentPointsToCache
preemptiveIntersections	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t preemptiveIntersections;$/;"	m	class:SVF::PersistentPointsToCache
preemptiveUnions	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t preemptiveUnions;$/;"	m	class:SVF::PersistentPointsToCache
prefixof	z3.obj/include/z3++.h	/^    inline expr prefixof(expr const& a, expr const& b) {$/;"	f	namespace:z3
prelabel	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::prelabel(void)$/;"	f	class:VersionedFlowSensitive
prelabeledObjects	svf/include/WPA/VersionedFlowSensitive.h	/^    Set<NodeID> prelabeledObjects;$/;"	m	class:SVF::VersionedFlowSensitive
prelabelingTime	svf/include/WPA/VersionedFlowSensitive.h	/^    double prelabelingTime;  \/\/\/< Time to prelabel SVFG.$/;"	m	class:SVF::VersionedFlowSensitive
prev	svf/include/Util/cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
primaryVTable	svf-llvm/include/SVF-LLVM/DCHG.h	/^    std::vector<const Function* > primaryVTable;$/;"	m	class:SVF::DCHNode
print	svf-llvm/lib/DCHG.cpp	/^void DCHGraph::print(void)$/;"	f	class:DCHGraph
print	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::print()$/;"	f	class:ConstraintGraph
print	svf/lib/MTA/TCT.cpp	/^void TCT::print() const$/;"	f	class:TCT
print	svf/lib/SVFIR/SVFIR.cpp	/^void SVFIR::print()$/;"	f	class:SVFIR
print	svf/lib/SVFIR/SVFType.cpp	/^void SVFArrayType::print(std::ostream& os) const$/;"	f	class:SVF::SVFArrayType
print	svf/lib/SVFIR/SVFType.cpp	/^void SVFFunctionType::print(std::ostream& os) const$/;"	f	class:SVF::SVFFunctionType
print	svf/lib/SVFIR/SVFType.cpp	/^void SVFIntegerType::print(std::ostream& os) const$/;"	f	class:SVF::SVFIntegerType
print	svf/lib/SVFIR/SVFType.cpp	/^void SVFOtherType::print(std::ostream& os) const$/;"	f	class:SVF::SVFOtherType
print	svf/lib/SVFIR/SVFType.cpp	/^void SVFPointerType::print(std::ostream& os) const$/;"	f	class:SVF::SVFPointerType
print	svf/lib/SVFIR/SVFType.cpp	/^void SVFStructType::print(std::ostream& os) const$/;"	f	class:SVF::SVFStructType
print	svf/lib/Util/cJSON.cpp	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
printAbstractState	svf/lib/AE/Core/AbstractState.cpp	/^void AbstractState::printAbstractState() const$/;"	f	class:AbstractState
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void BufferOverflowBug::printBugToTerminal() const$/;"	f	class:BufferOverflowBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void DoubleFreeBug::printBugToTerminal() const$/;"	f	class:DoubleFreeBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void FileNeverCloseBug::printBugToTerminal() const$/;"	f	class:FileNeverCloseBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void FilePartialCloseBug::printBugToTerminal() const$/;"	f	class:FilePartialCloseBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void FullNullPtrDereferenceBug::printBugToTerminal() const$/;"	f	class:FullNullPtrDereferenceBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void NeverFreeBug::printBugToTerminal() const$/;"	f	class:NeverFreeBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void PartialLeakBug::printBugToTerminal() const$/;"	f	class:PartialLeakBug
printBugToTerminal	svf/lib/Util/SVFBugReport.cpp	/^void PartialNullPtrDereferenceBug::printBugToTerminal() const$/;"	f	class:PartialNullPtrDereferenceBug
printCH	svf/lib/Graphs/CHG.cpp	/^void CHGraph::printCH()$/;"	f	class:CHGraph
printExprValues	svf/lib/AE/Core/RelExeState.cpp	/^void RelExeState::printExprValues()$/;"	f	class:RelExeState
printFlattenFields	svf/lib/Graphs/IRGraph.cpp	/^void IRGraph::printFlattenFields(const SVFType *type)$/;"	f	class:IRGraph
printGeneralStats	svf/include/Util/SVFStat.h	/^    static bool printGeneralStats;$/;"	m	class:SVF::SVFStat
printGeneralStats	svf/lib/Util/SVFStat.cpp	/^bool SVFStat::printGeneralStats = true;$/;"	m	class:SVFStat	file:
printIndCSTargets	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::printIndCSTargets()$/;"	f	class:PointerAnalysis
printIndCSTargets	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::printIndCSTargets(const CallICFGNode* cs, const FunctionSet& targets)$/;"	f	class:PointerAnalysis
printInterleaving	svf/lib/MTA/MHP.cpp	/^void MHP::printInterleaving()$/;"	f	class:MHP
printLocks	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::printLocks(const CxtStmt& cts)$/;"	f	class:LockAnalysis
printPathCond	svf/lib/SABER/SaberCondAllocator.cpp	/^void SaberCondAllocator::printPathCond()$/;"	f	class:SaberCondAllocator
printPts	svf-llvm/tools/Example/svf-ex.cpp	/^std::string printPts(PointerAnalysis* pta, const SVFVar* svfval)$/;"	f
printQueryPTS	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::printQueryPTS()$/;"	f	class:DDAPass
printStat	svf/include/Graphs/ICFGStat.h	/^    void printStat(std::string statname)$/;"	f	class:SVF::ICFGStat
printStat	svf/include/MemoryModel/PointerAnalysis.h	/^    inline bool printStat()$/;"	f	class:SVF::PointerAnalysis
printStat	svf/include/WPA/Andersen.h	/^    inline void printStat()$/;"	f	class:SVF::AndersenBase
printStat	svf/lib/DDA/DDAStat.cpp	/^void DDAStat::printStat(string str)$/;"	f	class:DDAStat
printStat	svf/lib/Graphs/SVFGStat.cpp	/^void MemSSAStat::printStat(string str)$/;"	f	class:MemSSAStat
printStat	svf/lib/Graphs/SVFGStat.cpp	/^void SVFGStat::printStat(string str)$/;"	f	class:SVFGStat
printStat	svf/lib/Util/SVFStat.cpp	/^void SVFStat::printStat(string statname)$/;"	f	class:SVFStat
printStatPerQuery	svf/include/Util/SVFStat.h	/^    virtual void printStatPerQuery(NodeID, const PointsTo &) {}$/;"	f	class:SVF::SVFStat
printStatPerQuery	svf/lib/DDA/DDAStat.cpp	/^void DDAStat::printStatPerQuery(NodeID ptr, const PointsTo& pts)$/;"	f	class:DDAStat
printStats	svf/include/MemoryModel/PersistentPointsToCache.h	/^    void printStats(const std::string subtitle) const$/;"	f	class:SVF::PersistentPointsToCache
printStats	svf/lib/Util/NodeIDAllocator.cpp	/^void NodeIDAllocator::Clusterer::printStats(std::string subtitle, Map<std::string, std::string> &stats)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
printZ3Stat	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::printZ3Stat()$/;"	f	class:SrcSnkDDA
print_array	svf/lib/Util/cJSON.cpp	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_matrix	z3.obj/bin/python/z3/z3printer.py	/^def print_matrix(m):$/;"	f
print_number	svf/lib/Util/cJSON.cpp	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	svf/lib/Util/cJSON.cpp	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_stat	svf/include/MemoryModel/PointerAnalysis.h	/^    bool print_stat;$/;"	m	class:SVF::PointerAnalysis
print_string	svf/lib/Util/cJSON.cpp	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	svf/lib/Util/cJSON.cpp	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	svf/lib/Util/cJSON.cpp	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	svf/lib/Util/cJSON.cpp	/^} printbuffer;$/;"	t	typeref:struct:__anon17	file:
probe	z3.obj/include/z3++.h	/^        probe(context & c, Z3_probe s):object(c) { init(s); }$/;"	f	class:z3::probe
probe	z3.obj/include/z3++.h	/^        probe(context & c, char const * name):object(c) { Z3_probe r = Z3_mk_probe(c, name); check_error(); init(r); }$/;"	f	class:z3::probe
probe	z3.obj/include/z3++.h	/^        probe(context & c, double val):object(c) { Z3_probe r = Z3_probe_const(c, val); check_error(); init(r); }$/;"	f	class:z3::probe
probe	z3.obj/include/z3++.h	/^        probe(probe const & s):object(s) { init(s.m_probe); }$/;"	f	class:z3::probe
probe	z3.obj/include/z3++.h	/^    class probe : public object {$/;"	c	namespace:z3
probe_description	z3.obj/bin/python/z3/z3.py	/^def probe_description(name, ctx=None):$/;"	f
probes	z3.obj/bin/python/z3/z3.py	/^def probes(ctx=None):$/;"	f
processAddr	svf/lib/WPA/Andersen.cpp	/^void Andersen::processAddr(const AddrCGEdge* addr)$/;"	f	class:Andersen
processAddr	svf/lib/WPA/AndersenSCD.cpp	/^void AndersenSCD::processAddr(const AddrCGEdge *addr)$/;"	f	class:AndersenSCD
processAddr	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processAddr(const AddrSVFGNode* addr)$/;"	f	class:FlowSensitive
processAllAddr	svf/lib/WPA/Andersen.cpp	/^void Andersen::processAllAddr()$/;"	f	class:Andersen
processAllAddr	svf/lib/WPA/Steensgaard.cpp	/^void Steensgaard::processAllAddr()$/;"	f	class:Steensgaard
processArguments	svf-llvm/lib/LLVMUtil.cpp	/^void LLVMUtil::processArguments(int argc, char **argv, int &arg_num, char **arg_value,$/;"	f	class:LLVMUtil
processCE	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::processCE(const Value* val)$/;"	f	class:SVFIRBuilder
processCFLEdge	svf/lib/CFL/CFLSolver.cpp	/^void CFLSolver::processCFLEdge(const CFLEdge* Y_edge)$/;"	f	class:CFLSolver
processCFLEdge	svf/lib/CFL/CFLSolver.cpp	/^void POCRHybridSolver::processCFLEdge(const CFLEdge* Y_edge)$/;"	f	class:POCRHybridSolver
processCFLEdge	svf/lib/CFL/CFLSolver.cpp	/^void POCRSolver::processCFLEdge(const CFLEdge* Y_edge)$/;"	f	class:POCRSolver
processCopy	svf/lib/WPA/Andersen.cpp	/^bool Andersen::processCopy(NodeID node, const ConstraintEdge* edge)$/;"	f	class:Andersen
processCopy	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processCopy(const CopySVFGNode* copy)$/;"	f	class:FlowSensitive
processFunBody	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::processFunBody(WorkList& worklist)$/;"	f	class:ICFGBuilder
processFunEntry	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::processFunEntry(const Function*  fun, WorkList& worklist)$/;"	f	class:ICFGBuilder
processFunExit	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::processFunExit(const Function*  f)$/;"	f	class:ICFGBuilder
processGep	svf/lib/WPA/Andersen.cpp	/^bool Andersen::processGep(NodeID, const GepCGEdge* edge)$/;"	f	class:Andersen
processGep	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processGep(const GepSVFGNode* edge)$/;"	f	class:FlowSensitive
processGepPts	svf/lib/DDA/ContextDDA.cpp	/^CxtPtSet ContextDDA::processGepPts(const GepSVFGNode* gep, const CxtPtSet& srcPts)$/;"	f	class:ContextDDA
processGepPts	svf/lib/DDA/FlowDDA.cpp	/^PointsTo FlowDDA::processGepPts(const GepSVFGNode* gep, const PointsTo& srcPts)$/;"	f	class:FlowDDA
processGepPts	svf/lib/WPA/Andersen.cpp	/^bool Andersen::processGepPts(const PointsTo& pts, const GepCGEdge* edge)$/;"	f	class:Andersen
processGepPts	svf/lib/WPA/AndersenSFR.cpp	/^bool AndersenSFR::processGepPts(const PointsTo& pts, const GepCGEdge* edge)$/;"	f	class:AndersenSFR
processGraph	svf/lib/Graphs/SVFGStat.cpp	/^void SVFGStat::processGraph()$/;"	f	class:SVFGStat
processLoad	svf/lib/WPA/Andersen.cpp	/^bool Andersen::processLoad(NodeID node, const ConstraintEdge* load)$/;"	f	class:Andersen
processLoad	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processLoad(const LoadSVFGNode* load)$/;"	f	class:FlowSensitive
processLoad	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::processLoad(const LoadSVFGNode* load)$/;"	f	class:VersionedFlowSensitive
processNode	svf/include/WPA/WPASolver.h	/^    virtual inline void processNode(NodeID) {}$/;"	f	class:SVF::WPASolver
processNode	svf/lib/WPA/Andersen.cpp	/^void Andersen::processNode(NodeID nodeId)$/;"	f	class:Andersen
processNode	svf/lib/WPA/AndersenWaveDiff.cpp	/^void AndersenWaveDiff::processNode(NodeID nodeId)$/;"	f	class:AndersenWaveDiff
processNode	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::processNode(NodeID nodeId)$/;"	f	class:FlowSensitive
processNode	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::processNode(NodeID n)$/;"	f	class:VersionedFlowSensitive
processPWC	svf/lib/WPA/AndersenSCD.cpp	/^void AndersenSCD::processPWC(ConstraintNode* rep)$/;"	f	class:AndersenSCD
processPhi	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processPhi(const PHISVFGNode* phi)$/;"	f	class:FlowSensitive
processSVFGNode	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processSVFGNode(SVFGNode* node)$/;"	f	class:FlowSensitive
processStore	svf/lib/WPA/Andersen.cpp	/^bool Andersen::processStore(NodeID node, const ConstraintEdge* store)$/;"	f	class:Andersen
processStore	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::processStore(const StoreSVFGNode* store)$/;"	f	class:FlowSensitive
processStore	svf/lib/WPA/VersionedFlowSensitive.cpp	/^bool VersionedFlowSensitive::processStore(const StoreSVFGNode* store)$/;"	f	class:VersionedFlowSensitive
processTime	svf/include/WPA/FlowSensitive.h	/^    double processTime;	\/\/\/< time of processNode.$/;"	m	class:SVF::FlowSensitive
processUnreachableFromEntry	svf-llvm/lib/ICFGBuilder.cpp	/^void ICFGBuilder::processUnreachableFromEntry(const Function* fun, WorkList& worklist)$/;"	f	class:ICFGBuilder
proof	z3.obj/bin/python/z3/z3.py	/^    def proof(self):$/;"	m	class:Solver
proof	z3.obj/include/z3++.h	/^        expr proof() const { Z3_ast r = Z3_solver_get_proof(ctx(), m_solver); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::solver
propAlongDirectEdge	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propAlongDirectEdge(const DirectSVFGEdge* edge)$/;"	f	class:FlowSensitive
propAlongIndirectEdge	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propAlongIndirectEdge(const IndirectSVFGEdge* edge)$/;"	f	class:FlowSensitive
propDFInToIn	svf/include/WPA/FlowSensitive.h	/^    virtual inline bool propDFInToIn(const SVFGNode* srcStmt, NodeID srcVar, const SVFGNode* dstStmt, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
propDFOutToIn	svf/include/WPA/FlowSensitive.h	/^    virtual inline bool propDFOutToIn(const SVFGNode* srcStmt, NodeID srcVar, const SVFGNode* dstStmt, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
propFromSrcToDst	svf/include/WPA/WPASolver.h	/^    virtual bool propFromSrcToDst(GEDGE*)$/;"	f	class:SVF::WPASolver
propFromSrcToDst	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propFromSrcToDst(SVFGEdge* edge)$/;"	f	class:FlowSensitive
propVarPtsAfterCGUpdated	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propVarPtsAfterCGUpdated(NodeID var, const SVFGNode* src, const SVFGNode* dst)$/;"	f	class:FlowSensitive
propVarPtsFromSrcToDst	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propVarPtsFromSrcToDst(NodeID var, const SVFGNode* src, const SVFGNode* dst)$/;"	f	class:FlowSensitive
propaPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    PtsMap propaPtsMap;$/;"	m	class:SVF::MutableDiffPTData
propaPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    KeyToIDMap propaPtsMap;$/;"	m	class:SVF::PersistentDiffPTData
propagate	svf/include/WPA/WPAFSSolver.h	/^    virtual void propagate(GNODE* v)$/;"	f	class:SVF::WPASCCSolver
propagate	svf/include/WPA/WPASolver.h	/^    virtual void propagate(GNODE* v)$/;"	f	class:SVF::WPASolver
propagateFromAPToFP	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propagateFromAPToFP(const ActualParmSVFGNode* ap, const SVFGNode* dst)$/;"	f	class:FlowSensitive
propagateFromFRToAR	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::propagateFromFRToAR(const FormalRetSVFGNode* fr, const SVFGNode* dst)$/;"	f	class:FlowSensitive
propagateVersion	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::propagateVersion(NodeID o, Version v)$/;"	f	class:VersionedFlowSensitive
propagateVersion	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::propagateVersion(const NodeID o, const Version v, const Version vp, bool time\/*=true*\/)$/;"	f	class:VersionedFlowSensitive
propagateViaObj	svf/include/DDA/DDAVFSolver.h	/^    virtual inline bool propagateViaObj(const CVar& storeObj, const CVar& loadObj)$/;"	f	class:SVF::DDAVFSolver
propagationTime	svf/include/WPA/FlowSensitive.h	/^    double propagationTime;	\/\/\/< time of points-to propagation.$/;"	m	class:SVF::FlowSensitive
propertyComplements	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t propertyComplements;$/;"	m	class:SVF::PersistentPointsToCache
propertyIntersections	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t propertyIntersections;$/;"	m	class:SVF::PersistentPointsToCache
propertyUnions	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t propertyUnions;$/;"	m	class:SVF::PersistentPointsToCache
prove	z3.obj/bin/python/z3/z3.py	/^def prove(claim, **keywords):$/;"	f
prove	z3.obj/bin/python/z3/z3util.py	/^def prove(claim,assume=None,verbose=0):$/;"	f
pt	svf/include/MemoryModel/PointsTo.h	/^        const PointsTo *pt;$/;"	m	class:SVF::PointsTo::PointsToIterator
pt	svf/lib/MemoryModel/PointsTo.cpp	/^noexcept     : pt(pt.pt)$/;"	f	namespace:SVF
ptCache	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPointsToCache<DataSet> &ptCache;$/;"	m	class:SVF::PersistentDFPTData
ptCache	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPointsToCache<DataSet> &ptCache;$/;"	m	class:SVF::PersistentDiffPTData
ptCache	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPointsToCache<DataSet> &ptCache;$/;"	m	class:SVF::PersistentPTData
ptCache	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    PersistentPointsToCache<PointsTo> ptCache;$/;"	m	class:SVF::BVDataPTAImpl
ptD	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    PTDataTy* ptD;$/;"	m	class:SVF::CondPTAImpl
ptD	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    std::unique_ptr<PTDataTy> ptD;$/;"	m	class:SVF::BVDataPTAImpl
ptDataBacking	svf/include/Util/Options.h	/^    static const OptionMap<BVDataPTAImpl::PTBackingType> ptDataBacking;$/;"	m	class:SVF::Options
pta	svf/include/CFL/CFLStat.h	/^    CFLBase* pta;$/;"	m	class:SVF::CFLStat
pta	svf/include/Graphs/SVFG.h	/^    PointerAnalysis* pta;$/;"	m	class:SVF::SVFG
pta	svf/include/MSSA/MemRegion.h	/^    BVDataPTAImpl* pta;$/;"	m	class:SVF::MRGenerator
pta	svf/include/MSSA/MemSSA.h	/^    BVDataPTAImpl* pta;$/;"	m	class:SVF::MemSSA
pta	svf/include/MTA/TCT.h	/^    PointerAnalysis* pta;$/;"	m	class:SVF::TCT
pta	svf/include/Util/PTAStat.h	/^    PointerAnalysis* pta;$/;"	m	class:SVF::PTAStat
pta	svf/include/WPA/WPAStat.h	/^    AndersenBase* pta;$/;"	m	class:SVF::AndersenStat
ptaImplTy	svf/include/MemoryModel/PointerAnalysis.h	/^    PTAImplTy ptaImplTy;$/;"	m	class:SVF::PointerAnalysis
ptaTy	svf/include/MemoryModel/PointerAnalysis.h	/^    PTATY ptaTy;$/;"	m	class:SVF::PointerAnalysis
ptaVector	svf/include/WPA/WPAPass.h	/^    PTAVector ptaVector;	\/\/\/< all pointer analysis to be executed.$/;"	m	class:SVF::WPAPass
ptdTy	svf/include/MemoryModel/AbstractPointsToDS.h	/^    PTDataTy ptdTy;$/;"	m	class:SVF::PTData
pthread_getspecific	svf-llvm/lib/extapi.c	/^void *pthread_getspecific(const char *a, const char *b)$/;"	f
ptr	z3.obj/include/z3++.h	/^        T * ptr() { return m_array; }$/;"	f	class:z3::array
ptr	z3.obj/include/z3++.h	/^        T const * ptr() const { return m_array; }$/;"	f	class:z3::array
ptrInUncalledFunction	svf/include/SVFIR/SVFVariables.h	/^    virtual inline bool ptrInUncalledFunction() const$/;"	f	class:SVF::GepObjVar
ptrInUncalledFunction	svf/include/SVFIR/SVFVariables.h	/^    virtual inline bool ptrInUncalledFunction() const$/;"	f	class:SVF::GepValVar
ptrInUncalledFunction	svf/lib/SVFIR/SVFVariables.cpp	/^bool SVFVar::ptrInUncalledFunction() const$/;"	f	class:SVFVar
ptrOnlyMSSA	svf/include/MSSA/MemRegion.h	/^    bool ptrOnlyMSSA;$/;"	m	class:SVF::MRGenerator
ptrToBVPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    PtrToBVPtsMap ptrToBVPtsMap;$/;"	m	class:SVF::CondPTAImpl
ptrToCPtsMap	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    PtrToCPtsMap ptrToCPtsMap;$/;"	m	class:SVF::CondPTAImpl
ptrType	svf-llvm/include/SVF-LLVM/ObjTypeInference.h	/^    inline const Type *ptrType()$/;"	f	class:SVF::ObjTypeInference
ptsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    PtsMap ptsMap;$/;"	m	class:SVF::MutablePTData
ptsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    KeyToIDMap ptsMap;$/;"	m	class:SVF::PersistentPTData
ptsSizeStat	svf/lib/WPA/VersionedFlowSensitiveStat.cpp	/^void VersionedFlowSensitiveStat::ptsSizeStat()$/;"	f	class:VersionedFlowSensitiveStat
ptsToId	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PTSToIDMap ptsToId;$/;"	m	class:SVF::PersistentPointsToCache
ptsToNodeBS	svf/include/Util/SVFUtil.h	/^inline NodeBS ptsToNodeBS(const PointsTo &pts)$/;"	f	namespace:SVF::SVFUtil
pureVirtualFunName	svf-llvm/lib/CHGBuilder.cpp	/^const string pureVirtualFunName = "__cxa_pure_virtual";$/;"	v
push	svf/include/CFL/CFGrammar.h	/^    inline bool push(Data data)$/;"	f	class:SVF::CFLFIFOWorkList
push	svf/include/Graphs/WTO.h	/^    void push(const NodeT* n)$/;"	f	class:SVF::WTO
push	svf/include/Util/WorkList.h	/^    inline bool push(const Data &data)$/;"	f	class:SVF::FIFOWorkList
push	svf/include/Util/WorkList.h	/^    inline bool push(const Data &data)$/;"	f	class:SVF::FILOWorkList
push	svf/include/Util/WorkList.h	/^    void push(const Data &data)$/;"	f	class:SVF::List
push	z3.obj/bin/python/z3/z3.py	/^    def push(self):$/;"	m	class:Optimize
push	z3.obj/bin/python/z3/z3.py	/^    def push(self):$/;"	m	class:Solver
push	z3.obj/bin/python/z3/z3.py	/^    def push(self, v):$/;"	m	class:AstVector
push	z3.obj/include/z3++.h	/^        void push() { Z3_solver_push(ctx(), m_solver); check_error(); }$/;"	f	class:z3::solver
push	z3.obj/include/z3++.h	/^        void push() {$/;"	f	class:z3::optimize
pushContext	svf/include/Util/DPItem.h	/^    inline bool pushContext(NodeID cxt)$/;"	f	class:SVF::CxtStmtDPItem
pushContext	svf/include/Util/DPItem.h	/^    inline virtual bool pushContext(NodeID ctx)$/;"	f	class:SVF::ContextCond
pushContext	svf/include/Util/DPItem.h	/^    inline void pushContext(NodeID cxt)$/;"	f	class:SVF::CxtDPItem
pushCxt	svf/include/MTA/MHP.h	/^    inline void pushCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:SVF::ForkJoinAnalysis
pushCxt	svf/include/MTA/MHP.h	/^    inline void pushCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:SVF::MHP
pushCxt	svf/include/MTA/TCT.h	/^    inline void pushCxt(CallStrCxt& cxt, CallSiteID csId)$/;"	f	class:SVF::TCT
pushCxt	svf/lib/MTA/LockAnalysis.cpp	/^void LockAnalysis::pushCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:LockAnalysis
pushCxt	svf/lib/MTA/TCT.cpp	/^void TCT::pushCxt(CallStrCxt& cxt, const CallICFGNode* call, const FunObjVar* callee)$/;"	f	class:TCT
pushIntoWorklist	svf/include/CFL/CFLSolver.h	/^    virtual inline bool pushIntoWorklist(const CFLEdge* item)$/;"	f	class:SVF::CFLSolver
pushIntoWorklist	svf/include/SABER/SrcSnkSolver.h	/^    inline bool pushIntoWorklist(DPIm& item)$/;"	f	class:SVF::SrcSnkSolver
pushIntoWorklist	svf/include/Util/GraphReachSolver.h	/^    inline bool pushIntoWorklist(DPIm& item)$/;"	f	class:SVF::GraphReachSolver
pushIntoWorklist	svf/include/WPA/WPASolver.h	/^    virtual inline void pushIntoWorklist(NodeID id)$/;"	f	class:SVF::WPASolver
pushToCTPWorkList	svf/include/MTA/LockAnalysis.h	/^    inline bool pushToCTPWorkList(const CxtLockProc& clp)$/;"	f	class:SVF::LockAnalysis
pushToCTPWorkList	svf/include/MTA/TCT.h	/^    inline bool pushToCTPWorkList(const CxtThreadProc& ctp)$/;"	f	class:SVF::TCT
pushToCTSWorkList	svf/include/MTA/LockAnalysis.h	/^    inline bool pushToCTSWorkList(const CxtStmt& cs)$/;"	f	class:SVF::LockAnalysis
pushToCTSWorkList	svf/include/MTA/MHP.h	/^    inline bool pushToCTSWorkList(const CxtStmt& cs)$/;"	f	class:SVF::ForkJoinAnalysis
pushToCTSWorkList	svf/include/MTA/MHP.h	/^    inline bool pushToCTSWorkList(const CxtThreadStmt& cs)$/;"	f	class:SVF::MHP
push_back	z3.obj/include/z3++.h	/^        void push_back(T const & e) { Z3_ast_vector_push(ctx(), m_vector, e); check_error(); }$/;"	f	class:z3::ast_vector_tpl
pw	z3.obj/include/z3++.h	/^    inline expr pw(expr const & a, expr const & b) { _Z3_MK_BIN_(a, b, Z3_mk_power);   }$/;"	f	namespace:z3
pw	z3.obj/include/z3++.h	/^    inline expr pw(expr const & a, int b) { return pw(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
pw	z3.obj/include/z3++.h	/^    inline expr pw(int a, expr const & b) { return pw(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
pwcReps	svf/include/WPA/AndersenPWC.h	/^    NodeToNodeMap pwcReps;$/;"	m	class:SVF::AndersenSCD
qnxnto	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	Release-build/CMakeFiles/3.31.6/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
query	z3.obj/bin/python/z3/z3.py	/^    def query(self, *query):$/;"	m	class:Fixedpoint
query	z3.obj/include/z3++.h	/^        check_result query(expr& q) { Z3_lbool r = Z3_fixedpoint_query(ctx(), m_fp, q); check_error(); return to_check_result(r); }$/;"	f	class:z3::fixedpoint
query	z3.obj/include/z3++.h	/^        check_result query(func_decl_vector& relations) {$/;"	f	class:z3::fixedpoint
query_from_lvl	z3.obj/bin/python/z3/z3.py	/^    def query_from_lvl (self, lvl, *query):$/;"	m	class:Fixedpoint
range	z3.obj/bin/python/z3/z3.py	/^    def range(self):$/;"	m	class:ArrayRef
range	z3.obj/bin/python/z3/z3.py	/^    def range(self):$/;"	m	class:ArraySortRef
range	z3.obj/bin/python/z3/z3.py	/^    def range(self):$/;"	m	class:FuncDeclRef
range	z3.obj/include/z3++.h	/^        sort range() const { Z3_sort r = Z3_get_range(ctx(), *this); check_error(); return sort(ctx(), r); }$/;"	f	class:z3::func_decl
range	z3.obj/include/z3++.h	/^    inline expr range(expr const& lo, expr const& hi) {$/;"	f	namespace:z3
rawProductions	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions> rawProductions;$/;"	m	class:SVF::GrammarBase
raw_fd_ostream	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::raw_fd_ostream raw_fd_ostream;$/;"	t	namespace:SVF
reCompute	svf/include/DDA/DDAVFSolver.h	/^    void reCompute(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
reComputeForEdges	svf/include/DDA/DDAVFSolver.h	/^    void reComputeForEdges(const DPIm& dpm, const SVFGEdgeSet& edgeSet, bool indirectCall = false)$/;"	f	class:SVF::DDAVFSolver
reTargetDstOfEdge	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::reTargetDstOfEdge(ConstraintEdge* edge, ConstraintNode* newDstNode)$/;"	f	class:ConstraintGraph
reTargetSrcOfEdge	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::reTargetSrcOfEdge(ConstraintEdge* edge, ConstraintNode* newSrcNode)$/;"	f	class:ConstraintGraph
re_comp	svf-llvm/lib/extapi.c	/^char *re_comp(const char *regex)$/;"	f
re_complement	z3.obj/include/z3++.h	/^    inline expr re_complement(expr const& a) {$/;"	f	namespace:z3
re_empty	z3.obj/include/z3++.h	/^    inline expr re_empty(sort const& s) {$/;"	f	namespace:z3
re_full	z3.obj/include/z3++.h	/^    inline expr re_full(sort const& s) {$/;"	f	namespace:z3
re_intersect	z3.obj/include/z3++.h	/^    inline expr re_intersect(expr_vector const& args) {$/;"	f	namespace:z3
re_sort	z3.obj/include/z3++.h	/^    inline sort context::re_sort(sort& s) { Z3_sort r = Z3_mk_re_sort(m_ctx, s); check_error(); return sort(*this, r); }$/;"	f	class:z3::context
reachGlob	svf/include/SABER/ProgSlice.h	/^    bool reachGlob;							\/\/\/<  Whether slice reach a global$/;"	m	class:SVF::ProgSlice
reachableBBs	svf/include/Util/SVFLoopAndDomInfo.h	/^    BBList reachableBBs;    \/\/\/< reachable BasicBlocks from the function entry.$/;"	m	class:SVF::SVFLoopAndDomInfo
readAndSetObjFieldSensitivity	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::readAndSetObjFieldSensitivity(std::ifstream& F, const std::string& delimiterStr)$/;"	f	class:BVDataPTAImpl
readFile	svf/lib/Graphs/SVFGReadWrite.cpp	/^void SVFG::readFile(const string& filename)$/;"	f	class:SVFG
readFromFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^bool BVDataPTAImpl::readFromFile(const string& filename)$/;"	f	class:BVDataPTAImpl
readGepObjVarMapFromFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::readGepObjVarMapFromFile(std::ifstream& F)$/;"	f	class:BVDataPTAImpl
readInheritanceMetadataFromModule	svf-llvm/lib/CHGBuilder.cpp	/^void CHGBuilder::readInheritanceMetadataFromModule(const Module &M)$/;"	f	class:CHGBuilder
readPtsFromFile	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::readPtsFromFile(const std::string& filename)$/;"	f	class:AndersenBase
readPtsFromFile	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::readPtsFromFile(const std::string& filename)$/;"	f	class:FlowSensitive
readPtsFromFile	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::readPtsFromFile(const std::string& filename)$/;"	f	class:VersionedFlowSensitive
readPtsResultFromFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::readPtsResultFromFile(std::ifstream& F)$/;"	f	class:BVDataPTAImpl
readVersionedAnalysisResultFromFile	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::readVersionedAnalysisResultFromFile(std::ifstream& F)$/;"	f	class:VersionedFlowSensitive
readdir	svf-llvm/lib/extapi.c	/^struct dirent *readdir(void *dirp)$/;"	f
readdir64	svf-llvm/lib/extapi.c	/^struct dirent64 *readdir64(void *dirp)$/;"	f
readdir_r	svf-llvm/lib/extapi.c	/^int readdir_r(void *__restrict__dir, void *__restrict__entry, void **__restrict__result)$/;"	f
realDefFun	svf/include/SVFIR/SVFVariables.h	/^    const FunObjVar * realDefFun;  \/\/\/ the definition of a function across multiple modules$/;"	m	class:SVF::FunObjVar
real_const	z3.obj/include/z3++.h	/^    inline expr context::real_const(char const * name) { return constant(name, real_sort()); }$/;"	f	class:z3::context
real_sort	z3.obj/include/z3++.h	/^    inline sort context::real_sort() { Z3_sort s = Z3_mk_real_sort(m_ctx); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
real_val	z3.obj/include/z3++.h	/^    inline expr context::real_val(char const * n) { Z3_ast r = Z3_mk_numeral(m_ctx, n, real_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
real_val	z3.obj/include/z3++.h	/^    inline expr context::real_val(int n) { Z3_ast r = Z3_mk_int(m_ctx, n, real_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
real_val	z3.obj/include/z3++.h	/^    inline expr context::real_val(int n, int d) { Z3_ast r = Z3_mk_real(m_ctx, n, d); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
real_val	z3.obj/include/z3++.h	/^    inline expr context::real_val(int64_t n) { Z3_ast r = Z3_mk_int64(m_ctx, n, real_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
real_val	z3.obj/include/z3++.h	/^    inline expr context::real_val(uint64_t n) { Z3_ast r = Z3_mk_unsigned_int64(m_ctx, n, real_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
real_val	z3.obj/include/z3++.h	/^    inline expr context::real_val(unsigned n) { Z3_ast r = Z3_mk_unsigned_int(m_ctx, n, real_sort()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
realloc	svf-llvm/lib/extapi.c	/^char *realloc(void *ptr, unsigned long size)$/;"	f
reallocate	svf/lib/Util/cJSON.cpp	/^    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
realpath	svf-llvm/lib/extapi.c	/^char *realpath(const char *restrict path, char *restrict resolved_path)$/;"	f
reanalyze	svf/include/WPA/WPASolver.h	/^    bool reanalyze;$/;"	m	class:SVF::WPASolver
reason_unknown	z3.obj/bin/python/z3/z3.py	/^    def reason_unknown(self):$/;"	m	class:Fixedpoint
reason_unknown	z3.obj/bin/python/z3/z3.py	/^    def reason_unknown(self):$/;"	m	class:Optimize
reason_unknown	z3.obj/bin/python/z3/z3.py	/^    def reason_unknown(self):$/;"	m	class:Solver
reason_unknown	z3.obj/include/z3++.h	/^        std::string reason_unknown() const { Z3_string r = Z3_solver_get_reason_unknown(ctx(), m_solver); check_error(); return r; }$/;"	f	class:z3::solver
reason_unknown	z3.obj/include/z3++.h	/^        std::string reason_unknown() { return Z3_fixedpoint_get_reason_unknown(ctx(), m_fp); }$/;"	f	class:z3::fixedpoint
recdef	z3.obj/include/z3++.h	/^    inline void context::recdef(func_decl f, expr_vector const& args, expr const& body) {$/;"	f	class:z3::context
recfun	z3.obj/include/z3++.h	/^    inline func_decl context::recfun(char const * name, sort const& d1, sort const & range) {$/;"	f	class:z3::context
recfun	z3.obj/include/z3++.h	/^    inline func_decl context::recfun(char const * name, sort const& d1, sort const& d2, sort const & range) {$/;"	f	class:z3::context
recfun	z3.obj/include/z3++.h	/^    inline func_decl context::recfun(char const * name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	class:z3::context
recfun	z3.obj/include/z3++.h	/^    inline func_decl context::recfun(symbol const & name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	class:z3::context
recfun	z3.obj/include/z3++.h	/^    inline func_decl recfun(char const * name, sort const& d1, sort const & range) {$/;"	f	namespace:z3
recfun	z3.obj/include/z3++.h	/^    inline func_decl recfun(char const * name, sort const& d1, sort const& d2, sort const & range) {$/;"	f	namespace:z3
recfun	z3.obj/include/z3++.h	/^    inline func_decl recfun(char const * name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	namespace:z3
recfun	z3.obj/include/z3++.h	/^    inline func_decl recfun(symbol const & name, unsigned arity, sort const * domain, sort const & range) {$/;"	f	namespace:z3
recoder	svf/include/AE/Svfexe/AEDetector.h	/^    SVFBugReport recoder; \/\/\/< Recorder for abstract execution bugs.$/;"	m	class:SVF::BufOverflowDetector
recognizer	z3.obj/bin/python/z3/z3.py	/^    def recognizer(self, idx):$/;"	m	class:DatatypeSortRef
recursiveCallPass	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::recursiveCallPass(const SVF::CallICFGNode *callNode)$/;"	f	class:AbstractInterpretation
recursiveFuns	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    Set<const FunObjVar*> recursiveFuns;$/;"	m	class:SVF::AbstractInterpretation
redundantGepNodes	svf/include/WPA/Andersen.h	/^    NodeBS redundantGepNodes;$/;"	m	class:SVF::AndersenBase
ref	z3.obj/bin/python/z3/z3.py	/^    def ref(self):$/;"	m	class:Context
reg2BBMap	svf/include/MSSA/MemSSA.h	/^    MemRegToBBsMap reg2BBMap;$/;"	m	class:SVF::MemSSA
regionObjects	svf/lib/Util/NodeIDAllocator.cpp	/^std::vector<NodeID> NodeIDAllocator::Clusterer::regionObjects(const Map<NodeID, Set<NodeID>> &graph, size_t numObjects, size_t &numLabels)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
register_relation	z3.obj/bin/python/z3/z3.py	/^    def register_relation(self, *relations):$/;"	m	class:Fixedpoint
register_relation	z3.obj/include/z3++.h	/^        void register_relation(func_decl& p) { Z3_fixedpoint_register_relation(ctx(), m_fp, p); }$/;"	f	class:z3::fixedpoint
releaseAndersenSCD	svf/include/WPA/AndersenPWC.h	/^    static void releaseAndersenSCD()$/;"	f	class:SVF::AndersenSCD
releaseAndersenSFR	svf/include/WPA/AndersenPWC.h	/^    static void releaseAndersenSFR()$/;"	f	class:SVF::AndersenSFR
releaseAndersenWaveDiff	svf/include/WPA/Andersen.h	/^    static void releaseAndersenWaveDiff()$/;"	f	class:SVF::AndersenWaveDiff
releaseCDG	svf/include/Graphs/CDG.h	/^    static void releaseCDG()$/;"	f	class:SVF::CDG
releaseContext	svf/lib/Util/Z3Expr.cpp	/^void Z3Expr::releaseContext()$/;"	f	class:SVF::Z3Expr
releaseFSWPA	svf/include/WPA/FlowSensitive.h	/^    static void releaseFSWPA()$/;"	f	class:SVF::FlowSensitive
releaseLLVMModuleSet	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    static void releaseLLVMModuleSet()$/;"	f	class:SVF::LLVMModuleSet
releaseMemory	svf/lib/MSSA/SVFGBuilder.cpp	/^void SVFGBuilder::releaseMemory()$/;"	f	class:SVFGBuilder
releaseSVFIR	svf/include/SVFIR/SVFIR.h	/^    static void releaseSVFIR()$/;"	f	class:SVF::SVFIR
releaseSolver	svf/lib/Util/Z3Expr.cpp	/^void Z3Expr::releaseSolver()$/;"	f	class:SVF::Z3Expr
releaseSteensgaard	svf/include/WPA/Steensgaard.h	/^    static void releaseSteensgaard()$/;"	f	class:SVF::Steensgaard
releaseVFSWPA	svf/include/WPA/VersionedFlowSensitive.h	/^    static void releaseVFSWPA()$/;"	f	class:SVF::VersionedFlowSensitive
rem	z3.obj/include/z3++.h	/^    inline expr rem(expr const & a, int b) { return rem(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
rem	z3.obj/include/z3++.h	/^    inline expr rem(expr const& a, expr const& b) {$/;"	f	namespace:z3
rem	z3.obj/include/z3++.h	/^    inline expr rem(int a, expr const & b) { return rem(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
remapAllPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    void remapAllPts(void)$/;"	f	class:SVF::PersistentPointsToCache
remapPointsToSets	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::remapPointsToSets(void)$/;"	f	class:BVDataPTAImpl
removeAddrEdge	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::removeAddrEdge(AddrCGEdge* edge)$/;"	f	class:ConstraintGraph
removeAllEdges	svf/include/Graphs/SVFGOPT.h	/^    inline void removeAllEdges(const SVFGNode* node)$/;"	f	class:SVF::SVFGOPT
removeAllIndirectSVFGEdges	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::removeAllIndirectSVFGEdges(void)$/;"	f	class:VersionedFlowSensitive
removeBack	svf/include/Util/WorkList.h	/^    inline void removeBack()$/;"	f	class:SVF::FILOWorkList
removeCDGEdge	svf/include/Graphs/CDG.h	/^    inline void removeCDGEdge(CDGEdge *edge)$/;"	f	class:SVF::CDG
removeCDGNode	svf/include/Graphs/CDG.h	/^    inline bool removeCDGNode(NodeID id)$/;"	f	class:SVF::CDG
removeCDGNode	svf/include/Graphs/CDG.h	/^    inline void removeCDGNode(CDGNode *node)$/;"	f	class:SVF::CDG
removeCFLInEdge	svf/include/Graphs/CFLGraph.h	/^    inline bool removeCFLInEdge(CFLEdge* inEdge)$/;"	f	class:SVF::CFLNode
removeCFLOutEdge	svf/include/Graphs/CFLGraph.h	/^    inline bool removeCFLOutEdge(CFLEdge* outEdge)$/;"	f	class:SVF::CFLNode
removeCandidates	svf/include/WPA/WPAFSSolver.h	/^    inline void removeCandidates(const NodeBS& nodes)$/;"	f	class:SVF::WPAMinimumSolver
removeConstraintNode	svf/include/Graphs/ConsG.h	/^    inline void removeConstraintNode(ConstraintNode* node)$/;"	f	class:SVF::ConstraintGraph
removeCxtStmtToSpan	svf/include/MTA/LockAnalysis.h	/^    inline bool removeCxtStmtToSpan(CxtStmt& cts, const CxtLock& cl)$/;"	f	class:SVF::LockAnalysis
removeDirectEdge	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::removeDirectEdge(ConstraintEdge* edge)$/;"	f	class:ConstraintGraph
removeDpmFromLoc	svf/include/DDA/DDAVFSolver.h	/^    inline void removeDpmFromLoc(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
removeFirstSymbol	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::removeFirstSymbol(CFGrammar *grammar)$/;"	f	class:CFGNormalizer
removeFront	svf/include/Util/WorkList.h	/^    inline void removeFront()$/;"	f	class:SVF::FIFOWorkList
removeGNode	svf/include/Graphs/GenericGraph.h	/^    inline void removeGNode(NodeType* node)$/;"	f	class:SVF::GenericGraph
removeICFGEdge	svf/include/Graphs/ICFG.h	/^    inline void removeICFGEdge(ICFGEdge* edge)$/;"	f	class:SVF::ICFG
removeICFGNode	svf/include/Graphs/ICFG.h	/^    inline void removeICFGNode(ICFGNode* node)$/;"	f	class:SVF::ICFG
removeInEdges	svf/include/Graphs/SVFGOPT.h	/^    inline void removeInEdges(const SVFGNode* node)$/;"	f	class:SVF::SVFGOPT
removeIncomingAddrEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeIncomingAddrEdge(AddrCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
removeIncomingDirectEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeIncomingDirectEdge(ConstraintEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
removeIncomingEdge	svf/include/Graphs/GenericGraph.h	/^    inline u32_t removeIncomingEdge(EdgeType* edge)$/;"	f	class:SVF::GenericNode
removeIncomingLoadEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeIncomingLoadEdge(LoadCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
removeIncomingStoreEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeIncomingStoreEdge(StoreCGEdge* inEdge)$/;"	f	class:SVF::ConstraintNode
removeKey	svf/include/Util/SVFUtil.h	/^inline void removeKey(const Key &key, KeySet &keySet)$/;"	f	namespace:SVF::SVFUtil
removeKey	svf/include/Util/SVFUtil.h	/^inline void removeKey(const NodeID &key, NodeBS &keySet)$/;"	f	namespace:SVF::SVFUtil
removeLoadEdge	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::removeLoadEdge(LoadCGEdge* edge)$/;"	f	class:ConstraintGraph
removeMDTag	svf/include/Util/Annotator.h	/^    inline void removeMDTag(Instruction* inst, Value* val, std::string str)$/;"	f	class:SVF::Annotator
removeMDTag	svf/include/Util/Annotator.h	/^    inline void removeMDTag(Instruction* inst, std::string str)$/;"	f	class:SVF::Annotator
removeOutEdges	svf/include/Graphs/SVFGOPT.h	/^    inline void removeOutEdges(const SVFGNode* node)$/;"	f	class:SVF::SVFGOPT
removeOutgoingAddrEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeOutgoingAddrEdge(AddrCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
removeOutgoingDirectEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeOutgoingDirectEdge(ConstraintEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
removeOutgoingEdge	svf/include/Graphs/GenericGraph.h	/^    inline u32_t removeOutgoingEdge(EdgeType* edge)$/;"	f	class:SVF::GenericNode
removeOutgoingLoadEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeOutgoingLoadEdge(LoadCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
removeOutgoingStoreEdge	svf/include/Graphs/ConsGNode.h	/^    inline bool removeOutgoingStoreEdge(StoreCGEdge* outEdge)$/;"	f	class:SVF::ConstraintNode
removeSVFGEdge	svf/include/Graphs/SVFG.h	/^    inline void removeSVFGEdge(SVFGEdge* edge)$/;"	f	class:SVF::SVFG
removeSVFGNode	svf/include/Graphs/SVFG.h	/^    inline void removeSVFGNode(SVFGNode* node)$/;"	f	class:SVF::SVFG
removeStoreEdge	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::removeStoreEdge(StoreCGEdge* edge)$/;"	f	class:ConstraintGraph
removeVFGEdge	svf/include/Graphs/VFG.h	/^    inline void removeVFGEdge(VFGEdge* edge)$/;"	f	class:SVF::VFG
removeVFGNode	svf/include/Graphs/VFG.h	/^    inline void removeVFGNode(VFGNode* node)$/;"	f	class:SVF::VFG
removeVarFromDFInUpdatedSet	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void removeVarFromDFInUpdatedSet(LocID loc,const Key& var)$/;"	f	class:SVF::MutableIncDFPTData
removeVarFromDFInUpdatedSet	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline void removeVarFromDFInUpdatedSet(LocID loc, const Key& var)$/;"	f	class:SVF::PersistentIncDFPTData
removeVarFromDFOutUpdatedSet	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void removeVarFromDFOutUpdatedSet(LocID loc,const Key& var)$/;"	f	class:SVF::MutableIncDFPTData
removeVarFromDFOutUpdatedSet	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline void removeVarFromDFOutUpdatedSet(LocID loc, const Key& var)$/;"	f	class:SVF::PersistentIncDFPTData
removedSUVFEdges	svf/include/SABER/SaberCondAllocator.h	/^    SVFGNodeToSVFGNodeSetMap removedSUVFEdges;$/;"	m	class:SVF::SaberCondAllocator
renderGraphFromBottomUp	svf/include/Graphs/DOTGraphTraits.h	/^    static bool renderGraphFromBottomUp()$/;"	f	struct:SVF::DefaultDOTGraphTraits
rep	svf/include/Graphs/SCC.h	/^        inline NodeID rep(void)const$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
rep	svf/include/Graphs/SCC.h	/^        inline void rep(NodeID n)$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
rep	svf/include/Graphs/SCC.h	/^    inline NodeID rep(NodeID n)$/;"	f	class:SVF::SCCDetection
rep	svf/include/Graphs/SCC.h	/^    inline void rep(NodeID n, NodeID r)$/;"	f	class:SVF::SCCDetection
repNode	svf/include/Graphs/SCC.h	/^    inline NodeID repNode(NodeID n) const$/;"	f	class:SVF::SCCDetection
repNodes	svf/include/Graphs/SCC.h	/^    NodeBS repNodes;$/;"	m	class:SVF::SCCDetection
repeat	z3.obj/include/z3++.h	/^        expr repeat(unsigned i) { Z3_ast r = Z3_mk_repeat(ctx(), i, *this); ctx().check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
repeat	z3.obj/include/z3++.h	/^    inline tactic repeat(tactic const & t, unsigned max=UINT_MAX) {$/;"	f	namespace:z3
replace	z3.obj/include/z3++.h	/^        expr replace(expr const& src, expr const& dst) const {$/;"	f	class:z3::expr
replaceExtension	svf-llvm/tools/LLVM2SVF/llvm2svf.cpp	/^std::string replaceExtension(const std::string& path)$/;"	f
replaceFParamARetWithPHI	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::replaceFParamARetWithPHI(PHISVFGNode* phi, SVFGNode* svfgNode)$/;"	f	class:SVFGOPT
replace_item_in_object	svf/lib/Util/cJSON.cpp	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
report	svf/include/SABER/SrcSnkDDA.h	/^    SVFBugReport report; \/\/\/ Bug Reporter$/;"	m	class:SVF::SrcSnkDDA
reportBug	svf/include/AE/Svfexe/AEDetector.h	/^    void reportBug()$/;"	f	class:SVF::BufOverflowDetector
reportBug	svf/lib/SABER/DoubleFreeChecker.cpp	/^void DoubleFreeChecker::reportBug(ProgSlice* slice)$/;"	f	class:DoubleFreeChecker
reportBug	svf/lib/SABER/FileChecker.cpp	/^void FileChecker::reportBug(ProgSlice* slice)$/;"	f	class:FileChecker
reportBug	svf/lib/SABER/LeakChecker.cpp	/^void LeakChecker::reportBug(ProgSlice* slice)$/;"	f	class:LeakChecker
reportMemoryUsageKB	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::reportMemoryUsageKB(const std::string& infor, OutStream & O)$/;"	f	class:SVFUtil
repr	svf/include/SVFIR/SVFType.h	/^    std::string repr; \/\/\/ Field representation for printing$/;"	m	class:SVF::SVFOtherType
requiredBits	svf/lib/Util/NodeIDAllocator.cpp	/^unsigned NodeIDAllocator::Clusterer::requiredBits(const PointsTo &pts)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
requiredBits	svf/lib/Util/NodeIDAllocator.cpp	/^unsigned NodeIDAllocator::Clusterer::requiredBits(const size_t n)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
res	svf/include/Graphs/VFGNode.h	/^    const PAGNode* res;$/;"	m	class:SVF::BinaryOPVFGNode
res	svf/include/Graphs/VFGNode.h	/^    const PAGNode* res;$/;"	m	class:SVF::CmpVFGNode
res	svf/include/Graphs/VFGNode.h	/^    const PAGNode* res;$/;"	m	class:SVF::PHIVFGNode
res	svf/include/Graphs/VFGNode.h	/^    const PAGNode* res;$/;"	m	class:SVF::UnaryOPVFGNode
resVer	svf/include/MSSA/MSSAMuChi.h	/^    MRVer* resVer;$/;"	m	class:SVF::MSSADEF
reset	svf/include/MemoryModel/ConditionalPT.h	/^    inline void reset(const Element& var)$/;"	f	class:SVF::CondStdSet
reset	svf/include/MemoryModel/ConditionalPT.h	/^    inline void reset(const SingleCondVar& var)$/;"	f	class:SVF::CondPointsToSet
reset	svf/include/MemoryModel/PersistentPointsToCache.h	/^    void reset(void)$/;"	f	class:SVF::PersistentPointsToCache
reset	svf/include/Util/SparseBitVector.h	/^    void reset(unsigned Idx)$/;"	f	class:SVF::SparseBitVector
reset	svf/include/Util/SparseBitVector.h	/^    void reset(unsigned Idx)$/;"	f	struct:SVF::SparseBitVectorElement
reset	svf/lib/MemoryModel/PointsTo.cpp	/^void PointsTo::reset(u32_t n)$/;"	f	class:SVF::PointsTo
reset	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::reset(u32_t bit)$/;"	f	class:SVF::CoreBitVector
reset	z3.obj/bin/python/z3/z3.py	/^    def reset(self):$/;"	m	class:AstMap
reset	z3.obj/bin/python/z3/z3.py	/^    def reset(self):$/;"	m	class:Solver
reset	z3.obj/include/z3++.h	/^        void reset() { Z3_goal_reset(ctx(), m_goal); }$/;"	f	class:z3::goal
reset	z3.obj/include/z3++.h	/^        void reset() { Z3_solver_reset(ctx(), m_solver); check_error(); }$/;"	f	class:z3::solver
resetData	svf/include/WPA/Andersen.h	/^    inline void resetData()$/;"	f	class:SVF::Andersen
resetDef	svf/include/Graphs/SVFGOPT.h	/^    inline void resetDef(const PAGNode* pagNode, const SVFGNode* node)$/;"	f	class:SVF::SVFGOPT
resetObjFieldSensitive	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::resetObjFieldSensitive()$/;"	f	class:PointerAnalysis
resetQuery	svf/include/DDA/DDAVFSolver.h	/^    virtual inline void resetQuery()$/;"	f	class:SVF::DDAVFSolver
resetRep	svf/include/Graphs/ConsG.h	/^    inline void resetRep(NodeID node)$/;"	f	class:SVF::ConstraintGraph
resetSubs	svf/include/Graphs/ConsG.h	/^    inline void resetSubs(NodeID node)$/;"	f	class:SVF::ConstraintGraph
resetTypeForHeapStaticObj	svf/include/SVFIR/ObjTypeInfo.h	/^    inline void resetTypeForHeapStaticObj(const SVFType* t)$/;"	f	class:SVF::ObjTypeInfo
reset_params	z3.obj/bin/python/z3/z3.py	/^def reset_params():$/;"	f
reset_params	z3.obj/include/z3++.h	/^    inline void reset_params() { Z3_global_param_reset_all(); }$/;"	f	namespace:z3
resize	z3.obj/bin/python/z3/z3.py	/^    def resize(self, sz):$/;"	m	class:AstVector
resize	z3.obj/include/z3++.h	/^        void resize(unsigned sz) { Z3_ast_vector_resize(ctx(), m_vector, sz); check_error(); }$/;"	f	class:z3::ast_vector_tpl
resize	z3.obj/include/z3++.h	/^        void resize(unsigned sz) { delete[] m_array; m_size = sz; m_array = new T[sz]; }$/;"	f	class:z3::array
resolveCPPIndCalls	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::resolveCPPIndCalls(const CallICFGNode* cs, const PointsTo& target, CallEdgeMap& newEdges)$/;"	f	class:PointerAnalysis
resolveFunPtr	svf/include/DDA/DDAVFSolver.h	/^    void resolveFunPtr(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
resolveIndCalls	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::resolveIndCalls(const CallICFGNode* cs, const PointsTo& target, CallEdgeMap& newEdges)$/;"	f	class:PointerAnalysis
restoreFuncName	svf-llvm/lib/LLVMUtil.cpp	/^std::string LLVMUtil::restoreFuncName(std::string funcName)$/;"	f	class:LLVMUtil
ret	svf/include/Graphs/ICFGNode.h	/^    const RetICFGNode* ret;$/;"	m	class:SVF::CallICFGNode
retFunObjSyms	svf/include/Graphs/IRGraph.h	/^    inline FunObjVarToIDMapTy& retFunObjSyms()$/;"	f	class:SVF::IRGraph
retPE	svf/include/Graphs/ICFGEdge.h	/^    const RetPE* retPE;$/;"	m	class:SVF::RetCFGEdge
retPEBegin	svf/include/Graphs/VFGNode.h	/^    inline RetPESet::const_iterator retPEBegin() const$/;"	f	class:SVF::FormalRetVFGNode
retPEEnd	svf/include/Graphs/VFGNode.h	/^    inline RetPESet::const_iterator retPEEnd() const$/;"	f	class:SVF::FormalRetVFGNode
retPEs	svf/include/Graphs/VFGNode.h	/^    RetPESet retPEs;$/;"	m	class:SVF::FormalRetVFGNode
retSyms	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline FunToIDMapTy& retSyms()$/;"	f	class:SVF::LLVMModuleSet
retTy	svf/include/SVFIR/SVFType.h	/^    const SVFType* retTy;$/;"	m	class:SVF::SVFFunctionType
retargetEdgesOfAInFOut	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::retargetEdgesOfAInFOut(SVFGNode* node)$/;"	f	class:SVFGOPT
retargetEdgesOfAOutFIn	svf/lib/Graphs/SVFGOPT.cpp	/^void SVFGOPT::retargetEdgesOfAOutFIn(SVFGNode* node)$/;"	f	class:SVFGOPT
returnFunObjSymMap	svf/include/Graphs/IRGraph.h	/^    FunObjVarToIDMapTy returnFunObjSymMap; \/\/\/< return map$/;"	m	class:SVF::IRGraph
returnSymMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunToIDMapTy returnSymMap; \/\/\/< return map$/;"	m	class:SVF::LLVMModuleSet
rev	svf/include/MemoryModel/AbstractPointsToDS.h	/^    bool rev;$/;"	m	class:SVF::PTData
revPtsMap	svf/include/MemoryModel/MutablePointsToDS.h	/^    RevPtsMap revPtsMap;$/;"	m	class:SVF::MutablePTData
revPtsMap	svf/include/MemoryModel/PersistentPointsToDS.h	/^    RevPtsMap revPtsMap;$/;"	m	class:SVF::PersistentPTData
revTopoNodeStack	svf/include/Graphs/SCC.h	/^    inline FIFOWorkList<NodeID> revTopoNodeStack() const$/;"	f	class:SVF::SCCDetection
reverseNodeMapping	svf/include/MemoryModel/PointsTo.h	/^    MappingPtr reverseNodeMapping;$/;"	m	class:SVF::PointsTo
rid	svf/include/MSSA/MemRegion.h	/^    MRID rid;$/;"	m	class:SVF::MemRegion
rindex	svf-llvm/lib/extapi.c	/^char* rindex(const char *s, int c)$/;"	f
rmDerefDirSVFGEdges	svf/lib/SABER/SaberSVFGBuilder.cpp	/^void SaberSVFGBuilder::rmDerefDirSVFGEdges(BVDataPTAImpl* pta)$/;"	f	class:SaberSVFGBuilder
rmIncomingEdgeForSUStore	svf/lib/CFL/CFLSVFGBuilder.cpp	/^void CFLSVFGBuilder::rmIncomingEdgeForSUStore(BVDataPTAImpl* pta)$/;"	f	class:CFLSVFGBuilder
rmIncomingEdgeForSUStore	svf/lib/SABER/SaberSVFGBuilder.cpp	/^void SaberSVFGBuilder::rmIncomingEdgeForSUStore(BVDataPTAImpl* pta)$/;"	f	class:SaberSVFGBuilder
rmInterleavingThread	svf/include/MTA/MHP.h	/^    inline void rmInterleavingThread(const CxtThreadStmt& tgr, const NodeBS& tids, const ICFGNode* joinsite)$/;"	f	class:SVF::MHP
rmSUStat	svf/include/DDA/DDAVFSolver.h	/^    inline void rmSUStat(const DPIm& dpm, const SVFGNode* node)$/;"	f	class:SVF::DDAVFSolver
root	svf/include/SABER/ProgSlice.h	/^    const SVFGNode* root;					\/\/\/<  root node on the slice$/;"	m	class:SVF::ProgSlice
root	z3.obj/bin/python/z3/z3num.py	/^    def root(self, k):$/;"	m	class:Numeral
rotate_left	z3.obj/include/z3++.h	/^        expr rotate_left(unsigned i) { Z3_ast r = Z3_mk_rotate_left(ctx(), i, *this); ctx().check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
rotate_right	z3.obj/include/z3++.h	/^        expr rotate_right(unsigned i) { Z3_ast r = Z3_mk_rotate_right(ctx(), i, *this); ctx().check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
rounding_mode	z3.obj/include/z3++.h	/^    enum rounding_mode {$/;"	g	namespace:z3
rule	z3.obj/bin/python/z3/z3.py	/^    def rule(self, head, body = None, name = None):$/;"	m	class:Fixedpoint
rules	z3.obj/include/z3++.h	/^        expr_vector rules() const { Z3_ast_vector r = Z3_fixedpoint_get_rules(ctx(), m_fp); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::fixedpoint
runOnModule	svf-llvm/include/SVF-LLVM/BreakConstantExpr.h	/^    virtual bool runOnModule (Module & M)$/;"	f	class:SVF::MergeFunctionRets
runOnModule	svf-llvm/lib/BreakConstantExpr.cpp	/^BreakConstantGEPs::runOnModule (Module & module)$/;"	f	class:BreakConstantGEPs
runOnModule	svf/include/SABER/FileChecker.h	/^    virtual bool runOnModule(SVFIR* pag)$/;"	f	class:SVF::FileChecker
runOnModule	svf/include/SABER/LeakChecker.h	/^    virtual bool runOnModule(SVFIR* pag)$/;"	f	class:SVF::LeakChecker
runOnModule	svf/include/WPA/FlowSensitive.h	/^    virtual bool runOnModule()$/;"	f	class:SVF::FlowSensitive
runOnModule	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::runOnModule(ICFG *_icfg)$/;"	f	class:AbstractInterpretation
runOnModule	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::runOnModule(SVFIR* pag)$/;"	f	class:DDAPass
runOnModule	svf/lib/MTA/MTA.cpp	/^bool MTA::runOnModule(SVFIR* pag)$/;"	f	class:MTA
runOnModule	svf/lib/WPA/WPAPass.cpp	/^void WPAPass::runOnModule(SVFIR* pag)$/;"	f	class:WPAPass
runPointerAnalysis	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::runPointerAnalysis(SVFIR* pag, u32_t kind)$/;"	f	class:DDAPass
runPointerAnalysis	svf/lib/WPA/WPAPass.cpp	/^void WPAPass::runPointerAnalysis(SVFIR* pag, u32_t kind)$/;"	f	class:WPAPass
s	z3.obj/bin/python/example.py	/^s = Solver()$/;"	v
s16_t	svf/include/Util/GeneralType.h	/^typedef signed short s16_t;$/;"	t	namespace:SVF
s32_t	svf/include/Util/GeneralType.h	/^typedef signed s32_t;$/;"	t	namespace:SVF
s64_t	svf/include/Util/GeneralType.h	/^typedef signed long long s64_t;$/;"	t	namespace:SVF
s8_t	svf/include/Util/GeneralType.h	/^typedef signed char s8_t;$/;"	t	namespace:SVF
saberCondAllocator	svf/include/SABER/SaberSVFGBuilder.h	/^    SaberCondAllocator* saberCondAllocator;$/;"	m	class:SVF::SaberSVFGBuilder
saberCondAllocator	svf/include/SABER/SrcSnkDDA.h	/^    std::unique_ptr<SaberCondAllocator> saberCondAllocator;$/;"	m	class:SVF::SrcSnkDDA
safeAdd	svf/include/AE/Core/NumericValue.h	/^    static BoundedInt safeAdd(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
safeAdd	svf/include/AE/Core/NumericValue.h	/^    static double safeAdd(double lhs, double rhs)$/;"	f	class:SVF::BoundedDouble
safeDiv	svf/include/AE/Core/NumericValue.h	/^    static double safeDiv(double lhs, double rhs)$/;"	f	class:SVF::BoundedDouble
safeMul	svf/include/AE/Core/NumericValue.h	/^    static BoundedInt safeMul(const BoundedInt& lhs, const BoundedInt& rhs)$/;"	f	class:SVF::BoundedInt
safeMul	svf/include/AE/Core/NumericValue.h	/^    static double safeMul(double lhs, double rhs)$/;"	f	class:SVF::BoundedDouble
safe_calloc	svf-llvm/lib/extapi.c	/^void* safe_calloc(unsigned nelem, unsigned elsize)$/;"	f
safe_malloc	svf-llvm/lib/extapi.c	/^void* safe_malloc(unsigned long size)$/;"	f
safe_realloc	svf-llvm/lib/extapi.c	/^void* safe_realloc(void *p, unsigned long n)$/;"	f
safecalloc	svf-llvm/lib/extapi.c	/^char* safecalloc(int a, int b)$/;"	f
safemalloc	svf-llvm/lib/extapi.c	/^char* safemalloc(int a, int b)$/;"	f
saferealloc	svf-llvm/lib/extapi.c	/^void* saferealloc(void *p, unsigned long n1, unsigned long n2)$/;"	f
safexrealloc	svf-llvm/lib/extapi.c	/^void* safexrealloc()$/;"	f
sameLoopTripCount	svf/lib/MTA/MHP.cpp	/^bool ForkJoinAnalysis::sameLoopTripCount(const ICFGNode* forkSite, const ICFGNode* joinSite)$/;"	f	class:ForkJoinAnalysis
sanitizePts	svf/include/WPA/Andersen.h	/^    void sanitizePts()$/;"	f	class:SVF::Andersen
sanityCheck	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::sanityCheck()$/;"	f	class:SVFIRBuilder
sat	z3.obj/bin/python/z3/z3.py	/^sat     = CheckSatResult(Z3_L_TRUE)$/;"	v
sat	z3.obj/include/z3++.h	/^        unsat, sat, unknown$/;"	e	enum:z3::check_result
sbits	z3.obj/bin/python/z3/z3.py	/^    def sbits(self):$/;"	m	class:FPRef
sbits	z3.obj/bin/python/z3/z3.py	/^    def sbits(self):$/;"	m	class:FPSortRef
sbrk	svf-llvm/lib/extapi.c	/^void *sbrk(long increment)$/;"	f
sbv	svf/include/MemoryModel/PointsTo.h	/^        SparseBitVector<> sbv;$/;"	m	union:SVF::PointsTo::__anon19
sbvIt	svf/include/MemoryModel/PointsTo.h	/^            SparseBitVector<>::iterator sbvIt;$/;"	m	union:SVF::PointsTo::PointsToIterator::__anon20
scandir	svf-llvm/lib/extapi.c	/^int scandir(const char *restrict dirp, struct dirent ***restrict namelist, int (*filter)(const struct dirent *), int (*compar)(const struct dirent **, const struct dirent **))$/;"	f
scc	svf/include/WPA/WPASolver.h	/^    std::unique_ptr<SCC> scc;$/;"	m	class:SVF::WPASolver
sccCandidates	svf/include/WPA/AndersenPWC.h	/^    NodeSet sccCandidates;$/;"	m	class:SVF::AndersenSCD
sccRepNode	svf/include/Graphs/ConsG.h	/^    inline NodeID sccRepNode(NodeID id) const$/;"	f	class:SVF::ConstraintGraph
sccRepNode	svf/include/WPA/WPAFSSolver.h	/^    virtual inline NodeID sccRepNode(NodeID id) const$/;"	f	class:SVF::WPAFSSolver
sccRepNode	svf/include/WPA/WPASolver.h	/^    virtual NodeID sccRepNode(NodeID id) const$/;"	f	class:SVF::WPASolver
sccSubNodes	svf/include/Graphs/ConsG.h	/^    inline NodeBS& sccSubNodes(NodeID id)$/;"	f	class:SVF::ConstraintGraph
sccSubNodes	svf/include/WPA/Andersen.h	/^    inline NodeBS& sccSubNodes(NodeID repId)$/;"	f	class:SVF::AndersenBase
sccTime	svf/include/WPA/FlowSensitive.h	/^    double sccTime;	\/\/\/< time of SCC detection.$/;"	m	class:SVF::FlowSensitive
scdAndersen	svf/include/WPA/AndersenPWC.h	/^    static AndersenSCD* scdAndersen;$/;"	m	class:SVF::AndersenSCD
secondRHSToProds	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions> secondRHSToProds;$/;"	m	class:SVF::CFGrammar
select	z3.obj/include/z3++.h	/^    inline expr select(expr const & a, expr const & i) {$/;"	f	namespace:z3
select	z3.obj/include/z3++.h	/^    inline expr select(expr const & a, expr_vector const & i) {$/;"	f	namespace:z3
select	z3.obj/include/z3++.h	/^    inline expr select(expr const & a, int i) {$/;"	f	namespace:z3
selectClient	svf/lib/DDA/DDAPass.cpp	/^void DDAPass::selectClient()$/;"	f	class:DDAPass
selectLargestSizedType	svf-llvm/lib/ObjTypeInference.cpp	/^const Type *ObjTypeInference::selectLargestSizedType(Set<const Type *> &objTys)$/;"	f	class:ObjTypeInference
seq	z3.obj/bin/python/z3/z3printer.py	/^def seq(args, sep=',', space=True):$/;"	f
seq1	z3.obj/bin/python/z3/z3printer.py	/^def seq1(header, args, lp='(', rp=')'):$/;"	f
seq2	z3.obj/bin/python/z3/z3printer.py	/^def seq2(header, args, i=4, lp='(', rp=')'):$/;"	f
seq3	z3.obj/bin/python/z3/z3printer.py	/^def seq3(args, lp='(', rp=')'):$/;"	f
seq_sort	z3.obj/include/z3++.h	/^    inline sort context::seq_sort(sort& s) { Z3_sort r = Z3_mk_seq_sort(m_ctx, s); check_error(); return sort(*this, r); }$/;"	f	class:z3::context
set	svf/include/MemoryModel/ConditionalPT.h	/^    inline void set(const Element& var)$/;"	f	class:SVF::CondStdSet
set	svf/include/MemoryModel/ConditionalPT.h	/^    inline void set(const SingleCondVar& var)$/;"	f	class:SVF::CondPointsToSet
set	svf/include/Util/SparseBitVector.h	/^    void set(unsigned Idx)$/;"	f	class:SVF::SparseBitVector
set	svf/include/Util/SparseBitVector.h	/^    void set(unsigned Idx)$/;"	f	struct:SVF::SparseBitVectorElement
set	svf/lib/MemoryModel/PointsTo.cpp	/^void PointsTo::set(u32_t n)$/;"	f	class:SVF::PointsTo
set	svf/lib/Util/CoreBitVector.cpp	/^void CoreBitVector::set(u32_t bit)$/;"	f	class:SVF::CoreBitVector
set	z3.obj/bin/python/z3/z3.py	/^    def set(self, *args, **keys):$/;"	m	class:Fixedpoint
set	z3.obj/bin/python/z3/z3.py	/^    def set(self, *args, **keys):$/;"	m	class:Optimize
set	z3.obj/bin/python/z3/z3.py	/^    def set(self, *args, **keys):$/;"	m	class:Solver
set	z3.obj/bin/python/z3/z3.py	/^    def set(self, name, val):$/;"	m	class:ParamsRef
set	z3.obj/include/z3++.h	/^            void set(T& arg) {$/;"	f	class:z3::ast_vector_tpl::iterator
set	z3.obj/include/z3++.h	/^        ast_vector_tpl& set(unsigned idx, ast& a) {$/;"	f	class:z3::ast_vector_tpl
set	z3.obj/include/z3++.h	/^        void set(char const * k, bool b) { Z3_params_set_bool(ctx(), m_params, ctx().str_symbol(k), b); }$/;"	f	class:z3::params
set	z3.obj/include/z3++.h	/^        void set(char const * k, bool v) { params p(ctx()); p.set(k, v); set(p); }$/;"	f	class:z3::solver
set	z3.obj/include/z3++.h	/^        void set(char const * k, char const* s) { Z3_params_set_symbol(ctx(), m_params, ctx().str_symbol(k), ctx().str_symbol(s)); }$/;"	f	class:z3::params
set	z3.obj/include/z3++.h	/^        void set(char const * k, char const* v) { params p(ctx()); p.set(k, v); set(p); }$/;"	f	class:z3::solver
set	z3.obj/include/z3++.h	/^        void set(char const * k, double n) { Z3_params_set_double(ctx(), m_params, ctx().str_symbol(k), n); }$/;"	f	class:z3::params
set	z3.obj/include/z3++.h	/^        void set(char const * k, double v) { params p(ctx()); p.set(k, v); set(p); }$/;"	f	class:z3::solver
set	z3.obj/include/z3++.h	/^        void set(char const * k, symbol const & s) { Z3_params_set_symbol(ctx(), m_params, ctx().str_symbol(k), s); }$/;"	f	class:z3::params
set	z3.obj/include/z3++.h	/^        void set(char const * k, symbol const & v) { params p(ctx()); p.set(k, v); set(p); }$/;"	f	class:z3::solver
set	z3.obj/include/z3++.h	/^        void set(char const * k, unsigned n) { Z3_params_set_uint(ctx(), m_params, ctx().str_symbol(k), n); }$/;"	f	class:z3::params
set	z3.obj/include/z3++.h	/^        void set(char const * k, unsigned v) { params p(ctx()); p.set(k, v); set(p); }$/;"	f	class:z3::solver
set	z3.obj/include/z3++.h	/^        void set(char const * param, bool value) { Z3_set_param_value(m_cfg, param, value ? "true" : "false"); }$/;"	f	class:z3::config
set	z3.obj/include/z3++.h	/^        void set(char const * param, bool value) { Z3_update_param_value(m_ctx, param, value ? "true" : "false"); }$/;"	f	class:z3::context
set	z3.obj/include/z3++.h	/^        void set(char const * param, char const * value) { Z3_set_param_value(m_cfg, param, value); }$/;"	f	class:z3::config
set	z3.obj/include/z3++.h	/^        void set(char const * param, char const * value) { Z3_update_param_value(m_ctx, param, value); }$/;"	f	class:z3::context
set	z3.obj/include/z3++.h	/^        void set(char const * param, int value) {$/;"	f	class:z3::config
set	z3.obj/include/z3++.h	/^        void set(char const * param, int value) {$/;"	f	class:z3::context
set	z3.obj/include/z3++.h	/^        void set(params const & p) { Z3_fixedpoint_set_params(ctx(), m_fp, p); check_error(); }$/;"	f	class:z3::fixedpoint
set	z3.obj/include/z3++.h	/^        void set(params const & p) { Z3_optimize_set_params(ctx(), m_opt, p); check_error(); }$/;"	f	class:z3::optimize
set	z3.obj/include/z3++.h	/^        void set(params const & p) { Z3_solver_set_params(ctx(), m_solver, p); check_error(); }$/;"	f	class:z3::solver
setActualINDef	svf/include/Graphs/SVFGOPT.h	/^    inline void setActualINDef(NodeID ai, NodeID def)$/;"	f	class:SVF::SVFGOPT
setAllReachable	svf/include/SABER/ProgSlice.h	/^    inline void setAllReachable()$/;"	f	class:SVF::ProgSlice
setAttributeKinds	svf/lib/CFL/CFGrammar.cpp	/^void GrammarBase::setAttributeKinds(const Set<Kind>& attributeKinds)$/;"	f	class:GrammarBase
setBB	svf/include/SVFIR/SVFStatements.h	/^    inline void setBB(const SVFBasicBlock* bb)$/;"	f	class:SVF::SVFStmt
setBasicBlockGraph	svf/include/SVFIR/SVFVariables.h	/^    void setBasicBlockGraph(BasicBlockGraph* graph)$/;"	f	class:SVF::FunObjVar
setBottom	svf/include/AE/Core/AddressValue.h	/^    inline void setBottom()$/;"	f	class:SVF::AddressValue
setBranchCond	svf/lib/SABER/SaberCondAllocator.cpp	/^void SaberCondAllocator::setBranchCond(const SVFBasicBlock* bb, const SVFBasicBlock* succ, const Condition &cond)$/;"	f	class:SaberCondAllocator
setBranchCondVal	svf/include/Graphs/ICFGEdge.h	/^    inline void setBranchCondVal(s64_t bVal)$/;"	f	class:SVF::IntraCFGEdge
setByteSizeOfObj	svf/include/SVFIR/ObjTypeInfo.h	/^    inline void setByteSizeOfObj(u32_t size)$/;"	f	class:SVF::ObjTypeInfo
setCDN	svf/include/Graphs/WTO.h	/^    void setCDN(const NodeT* n, const CycleDepthNumber& dfn)$/;"	f	class:SVF::WTO
setCFCond	svf/include/SABER/SaberCondAllocator.h	/^    inline bool setCFCond(const SVFBasicBlock* bb, const Condition& cond)$/;"	f	class:SVF::SaberCondAllocator
setCHG	svf/include/SVFIR/SVFIR.h	/^    inline void setCHG(CommonCHGraph* c)$/;"	f	class:SVF::SVFIR
setCallGraph	svf/include/DDA/DDAVFSolver.h	/^    inline void setCallGraph (CallGraph* cg)$/;"	f	class:SVF::DDAVFSolver
setCallGraph	svf/include/SVFIR/SVFIR.h	/^    inline void setCallGraph(CallGraph* c)$/;"	f	class:SVF::SVFIR
setCallGraphSCC	svf/include/DDA/DDAVFSolver.h	/^    inline void setCallGraphSCC (CallGraphSCC* scc)$/;"	f	class:SVF::DDAVFSolver
setCondInst	svf/include/SABER/SaberCondAllocator.h	/^    inline void setCondInst(const Condition &condition, const ICFGNode* inst)$/;"	f	class:SVF::SaberCondAllocator
setConditionVar	svf/include/Graphs/ICFGEdge.h	/^    inline void setConditionVar(const SVFVar* c)$/;"	f	class:SVF::IntraCFGEdge
setConsume	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::setConsume(const NodeID l, const NodeID o, const Version v)$/;"	f	class:VersionedFlowSensitive
setCurEvalSVFGNode	svf/include/SABER/SaberCondAllocator.h	/^    inline void setCurEvalSVFGNode(const SVFGNode* node)$/;"	f	class:SVF::SaberCondAllocator
setCurNodeID	svf/include/Util/DPItem.h	/^    inline void setCurNodeID(NodeID c)$/;"	f	class:SVF::DPItem
setCurSVFGNode	svf/include/SABER/ProgSlice.h	/^    inline void setCurSVFGNode(const SVFGNode* node)$/;"	f	class:SVF::ProgSlice
setCurSlice	svf/lib/SABER/SrcSnkDDA.cpp	/^void SrcSnkDDA::setCurSlice(const SVFGNode* src)$/;"	f	class:SrcSnkDDA
setCurrentBBAndValueForPAGEdge	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::setCurrentBBAndValueForPAGEdge(PAGEdge* edge)$/;"	f	class:SVFIRBuilder
setCurrentBestNodeMapping	svf/lib/MemoryModel/PointsTo.cpp	/^void PointsTo::setCurrentBestNodeMapping(MappingPtr newCurrentBestNodeMapping,$/;"	f	class:SVF::PointsTo
setCurrentLocation	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void setCurrentLocation(const Value* val, const BasicBlock* bb)$/;"	f	class:SVF::SVFIRBuilder
setCurrentLocation	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void setCurrentLocation(const Value* val, const SVFBasicBlock* bb)$/;"	f	class:SVF::SVFIRBuilder
setCurrentQueryPtr	svf/include/DDA/DDAClient.h	/^    void setCurrentQueryPtr(NodeID ptr)$/;"	f	class:SVF::DDAClient
setCurrentSCC	svf/include/WPA/WPAFSSolver.h	/^    inline void setCurrentSCC(NodeID id)$/;"	f	class:SVF::WPASCCSolver
setDDAStat	svf/include/DDA/DDAVFSolver.h	/^    inline DDAStat* setDDAStat(DDAStat* s)$/;"	f	class:SVF::DDAVFSolver
setDef	svf/include/Graphs/SVFG.h	/^    inline void setDef(const MRVer* mvar, const SVFGNode* node)$/;"	f	class:SVF::SVFG
setDef	svf/include/Graphs/SVFG.h	/^    inline void setDef(const PAGNode* pagNode, const SVFGNode* node)$/;"	f	class:SVF::SVFG
setDef	svf/include/Graphs/VFG.h	/^    inline void setDef(const PAGNode* pagNode, const VFGNode* node)$/;"	f	class:SVF::VFG
setDetectPWC	svf/include/WPA/Andersen.h	/^    void setDetectPWC(bool flag)$/;"	f	class:SVF::Andersen
setEBNFSigns	svf/include/CFL/CFGrammar.h	/^    inline void setEBNFSigns(Map<std::string, Kind>& EBNFSigns)$/;"	f	class:SVF::GrammarBase
setEC	svf/lib/WPA/Steensgaard.cpp	/^void Steensgaard::setEC(NodeID node, NodeID rep)$/;"	f	class:Steensgaard
setExitBlock	svf/include/SVFIR/SVFVariables.h	/^    inline void setExitBlock(SVFBasicBlock *bb)$/;"	f	class:SVF::FunObjVar
setExtBcPath	svf/lib/Util/ExtAPI.cpp	/^bool ExtAPI::setExtBcPath(const std::string& path)$/;"	f	class:ExtAPI
setExtFuncAnnotations	svf-llvm/lib/LLVMModule.cpp	/^void LLVMModuleSet::setExtFuncAnnotations(const Function* fun, const std::vector<std::string>& funcAnnotations)$/;"	f	class:LLVMModuleSet
setExtFuncAnnotations	svf/lib/Util/ExtAPI.cpp	/^void ExtAPI::setExtFuncAnnotations(const FunObjVar* fun, const std::vector<std::string>& funcAnnotations)$/;"	f	class:ExtAPI
setFieldInsensitive	svf/include/SVFIR/SVFVariables.h	/^    void setFieldInsensitive()$/;"	f	class:SVF::BaseObjVar
setFieldSensitive	svf/include/SVFIR/SVFVariables.h	/^    void setFieldSensitive()$/;"	f	class:SVF::BaseObjVar
setFinalCond	svf/include/SABER/ProgSlice.h	/^    inline void setFinalCond(const Condition &cond)$/;"	f	class:SVF::ProgSlice
setFlag	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline void setFlag(CLASSATTR mask)$/;"	f	class:SVF::DCHNode
setFlag	svf/include/Graphs/CHG.h	/^    inline void setFlag(CLASSATTR mask)$/;"	f	class:SVF::CHNode
setFlag	svf/include/SVFIR/ObjTypeInfo.h	/^    inline void setFlag(MEMTYPE mask)$/;"	f	class:SVF::ObjTypeInfo
setFldIdx	svf/include/MemoryModel/AccessPath.h	/^    inline void setFldIdx(APOffset idx)$/;"	f	class:SVF::AccessPath
setFormalOUTDef	svf/include/Graphs/SVFGOPT.h	/^    inline void setFormalOUTDef(NodeID fo, NodeID def)$/;"	f	class:SVF::SVFGOPT
setFun	svf/include/Graphs/BasicBlockG.h	/^    inline void setFun(const FunObjVar* f)$/;"	f	class:SVF::SVFBasicBlock
setFunExitBB	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void setFunExitBB(const Function* fun, const BasicBlock* bb)$/;"	f	class:SVF::LLVMModuleSet
setFunRealDefFun	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline void setFunRealDefFun(const Function* fun, const Function* realDefFun)$/;"	f	class:SVF::LLVMModuleSet
setGraph	svf/include/SABER/SrcSnkSolver.h	/^    inline void setGraph(GraphType g)$/;"	f	class:SVF::SrcSnkSolver
setGraph	svf/include/Util/GraphReachSolver.h	/^    inline void setGraph(GraphType g)$/;"	f	class:SVF::GraphReachSolver
setGraph	svf/include/WPA/WPASolver.h	/^    inline void setGraph(GraphType g)$/;"	f	class:SVF::WPASolver
setICFG	svf/include/SVFIR/SVFIR.h	/^    inline void setICFG(ICFG* i)$/;"	f	class:SVF::SVFIR
setICFGNode	svf/include/Graphs/VFGNode.h	/^    virtual void setICFGNode(const ICFGNode* node )$/;"	f	class:SVF::VFGNode
setICFGNode	svf/include/SVFIR/SVFStatements.h	/^    inline void setICFGNode(ICFGNode* node)$/;"	f	class:SVF::SVFStmt
setInSCC	svf/include/Graphs/SCC.h	/^    inline void setInSCC(NodeID n,bool v)$/;"	f	class:SVF::SCCDetection
setIncycle	svf/include/Util/CxtStmt.h	/^    inline void setIncycle(bool in)$/;"	f	class:SVF::CxtThread
setInloop	svf/include/Util/CxtStmt.h	/^    inline void setInloop(bool in)$/;"	f	class:SVF::CxtThread
setKindToAttrsMap	svf/lib/CFL/CFGrammar.cpp	/^void GrammarBase::setKindToAttrsMap(const Map<Kind,  Set<Attribute>>& kindToAttrsMap)$/;"	f	class:GrammarBase
setLoc	svf/include/Util/DPItem.h	/^    inline void setLoc(const LocCond* l)$/;"	f	class:SVF::StmtDPItem
setLocVar	svf/include/Util/DPItem.h	/^    inline void setLocVar(const LocCond* l,NodeID v)$/;"	f	class:SVF::StmtDPItem
setLoopBound	svf/include/MemoryModel/SVFLoop.h	/^    inline void setLoopBound(u32_t _bound)$/;"	f	class:SVF::SVFLoop
setMaxBudget	svf/include/Util/DPItem.h	/^    static inline void setMaxBudget(u32_t max)$/;"	f	class:SVF::DPItem
setMaxCxtLen	svf/include/Util/DPItem.h	/^    static inline void setMaxCxtLen(u32_t max)$/;"	f	class:SVF::ContextCond
setMaxFieldOffsetLimit	svf/include/SVFIR/ObjTypeInfo.h	/^    inline void setMaxFieldOffsetLimit(u32_t limit)$/;"	f	class:SVF::ObjTypeInfo
setMaxPathLen	svf/include/Util/DPItem.h	/^    static inline void setMaxPathLen(u32_t max)$/;"	f	class:SVF::ContextCond
setMemUsageAfter	svf/include/Util/PTAStat.h	/^    inline void setMemUsageAfter(u32_t vmrss, u32_t vmsize)$/;"	f	class:SVF::PTAStat
setMemUsageBefore	svf/include/Util/PTAStat.h	/^    inline void setMemUsageBefore(u32_t vmrss, u32_t vmsize)$/;"	f	class:SVF::PTAStat
setModuleIdentifier	svf/include/SVFIR/SVFIR.h	/^    inline void setModuleIdentifier(const std::string& moduleIdentifier)$/;"	f	class:SVF::SVFIR
setMultiForkedAttrs	svf/include/MTA/TCT.h	/^    void setMultiForkedAttrs(CxtThread& ct)$/;"	f	class:SVF::TCT
setMultiInheritance	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline void setMultiInheritance()$/;"	f	class:SVF::DCHNode
setMultiInheritance	svf/include/Graphs/CHG.h	/^    inline void setMultiInheritance()$/;"	f	class:SVF::CHNode
setMultiforked	svf/include/MTA/TCT.h	/^    inline void setMultiforked(bool value)$/;"	f	class:SVF::TCTNode
setName	svf/include/SVFIR/SVFType.h	/^    void setName(const std::string& structName)$/;"	f	class:SVF::SVFStructType
setName	svf/include/SVFIR/SVFType.h	/^    void setName(std::string&& structName)$/;"	f	class:SVF::SVFStructType
setName	svf/include/SVFIR/SVFValue.h	/^    inline virtual void setName(const std::string& nameInfo)$/;"	f	class:SVF::SVFValue
setName	svf/include/SVFIR/SVFValue.h	/^    inline virtual void setName(std::string&& nameInfo)$/;"	f	class:SVF::SVFValue
setNegCondInst	svf/include/SABER/SaberCondAllocator.h	/^    inline void setNegCondInst(const Condition &condition, const ICFGNode* inst)$/;"	f	class:SVF::SaberCondAllocator
setNodeNumAfterPAGBuild	svf/include/Graphs/IRGraph.h	/^    inline void setNodeNumAfterPAGBuild(u32_t num)$/;"	f	class:SVF::IRGraph
setNonConcreteCxt	svf/include/Util/DPItem.h	/^    inline void setNonConcreteCxt()$/;"	f	class:SVF::ContextCond
setNonterminals	svf/include/CFL/CFGrammar.h	/^    inline void setNonterminals(Map<std::string, Kind>& nonterminals)$/;"	f	class:SVF::GrammarBase
setNumOfElement	svf/include/SVFIR/SVFType.h	/^    void setNumOfElement(unsigned elemNum)$/;"	f	class:SVF::SVFArrayType
setNumOfElements	svf/include/SVFIR/ObjTypeInfo.h	/^    inline void setNumOfElements(u32_t num)$/;"	f	class:SVF::ObjTypeInfo
setNumOfElements	svf/include/SVFIR/SVFVariables.h	/^    void setNumOfElements(u32_t num)$/;"	f	class:SVF::BaseObjVar
setNumOfFieldsAndElems	svf/include/SVFIR/SVFType.h	/^    inline void setNumOfFieldsAndElems(u32_t nf, u32_t ne)$/;"	f	class:SVF::StInfo
setObjFieldInsensitive	svf/include/MemoryModel/PointerAnalysis.h	/^    inline void setObjFieldInsensitive(NodeID id)$/;"	f	class:SVF::PointerAnalysis
setOffset	svf-llvm/include/SVF-LLVM/DCHG.h	/^    void setOffset(u32_t offset)$/;"	f	class:SVF::DCHEdge
setOpVer	svf/include/Graphs/SVFGNode.h	/^    inline void setOpVer(u32_t pos, const MRVer* node)$/;"	f	class:SVF::MSSAPHISVFGNode
setOpVer	svf/include/Graphs/VFGNode.h	/^    inline void setOpVer(u32_t pos, const PAGNode* node)$/;"	f	class:SVF::BinaryOPVFGNode
setOpVer	svf/include/Graphs/VFGNode.h	/^    inline void setOpVer(u32_t pos, const PAGNode* node)$/;"	f	class:SVF::CmpVFGNode
setOpVer	svf/include/Graphs/VFGNode.h	/^    inline void setOpVer(u32_t pos, const PAGNode* node)$/;"	f	class:SVF::PHIVFGNode
setOpVer	svf/include/Graphs/VFGNode.h	/^    inline void setOpVer(u32_t pos, const PAGNode* node)$/;"	f	class:SVF::UnaryOPVFGNode
setOpVer	svf/include/MSSA/MSSAMuChi.h	/^    inline void setOpVer(MRVer* v)$/;"	f	class:SVF::MSSACHI
setOpVer	svf/include/MSSA/MSSAMuChi.h	/^    inline void setOpVer(const MRVer* v, u32_t pos)$/;"	f	class:SVF::MSSAPHI
setOpVerAndBB	svf/include/Graphs/VFGNode.h	/^    inline void setOpVerAndBB(u32_t pos, const PAGNode* node, const ICFGNode* bb)$/;"	f	class:SVF::IntraPHIVFGNode
setPAG	svf/include/DDA/DDAClient.h	/^    inline void setPAG(SVFIR* g)$/;"	f	class:SVF::DDAClient
setPWCNode	svf/include/Graphs/ConsG.h	/^    inline void setPWCNode(NodeID nodeId)$/;"	f	class:SVF::ConstraintGraph
setPWCNode	svf/include/Graphs/ConsGNode.h	/^    inline void setPWCNode()$/;"	f	class:SVF::ConstraintNode
setPagFromTXT	svf/include/SVFIR/SVFIR.h	/^    static inline void setPagFromTXT(const std::string& txt)$/;"	f	class:SVF::SVFIR
setPartialReachable	svf/include/SABER/ProgSlice.h	/^    inline void setPartialReachable()$/;"	f	class:SVF::ProgSlice
setPureAbstract	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline void setPureAbstract()$/;"	f	class:SVF::DCHNode
setPureAbstract	svf/include/Graphs/CHG.h	/^    inline void setPureAbstract()$/;"	f	class:SVF::CHNode
setQuery	svf/include/DDA/DDAClient.h	/^    void setQuery(NodeID ptr)$/;"	f	class:SVF::DDAClient
setRawProductions	svf/lib/CFL/CFGrammar.cpp	/^void GrammarBase::setRawProductions(SymbolMap<Symbol, Productions>& rawProductions)$/;"	f	class:GrammarBase
setReachGlobal	svf/include/SABER/ProgSlice.h	/^    inline bool setReachGlobal()$/;"	f	class:SVF::ProgSlice
setReachableBBs	svf/include/Util/SVFLoopAndDomInfo.h	/^    inline void setReachableBBs(BBList& bbs)$/;"	f	class:SVF::SVFLoopAndDomInfo
setRelDefFun	svf/include/SVFIR/SVFVariables.h	/^    void setRelDefFun(const FunObjVar *real)$/;"	f	class:SVF::FunObjVar
setRep	svf/include/Graphs/ConsG.h	/^    inline void setRep(NodeID node, NodeID rep)$/;"	f	class:SVF::ConstraintGraph
setRepr	svf/include/SVFIR/SVFType.h	/^    void setRepr(const std::string& r)$/;"	f	class:SVF::SVFOtherType
setRepr	svf/include/SVFIR/SVFType.h	/^    void setRepr(std::string&& r)$/;"	f	class:SVF::SVFOtherType
setResVer	svf/include/MSSA/MSSAMuChi.h	/^    inline void setResVer(MRVer* v)$/;"	f	class:SVF::MSSADEF
setRetICFGNode	svf/include/Graphs/ICFGNode.h	/^    inline void setRetICFGNode(const RetICFGNode* r)$/;"	f	class:SVF::CallICFGNode
setSaberCondAllocator	svf/include/SABER/SaberSVFGBuilder.h	/^    void setSaberCondAllocator(SaberCondAllocator* allocator)$/;"	f	class:SVF::SaberSVFGBuilder
setScalar	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline void setScalar()$/;"	f	class:SVF::DCHNode
setSignAndWidth	svf/include/SVFIR/SVFType.h	/^    void setSignAndWidth(short sw)$/;"	f	class:SVF::SVFIntegerType
setSourceLoc	svf/include/SVFIR/SVFValue.h	/^    inline virtual void setSourceLoc(const std::string& sourceCodeInfo)$/;"	f	class:SVF::SVFValue
setStartKind	svf/include/CFL/CFGrammar.h	/^    inline void setStartKind(Kind startKind)$/;"	f	class:SVF::GrammarBase
setStat	svf/include/Util/SVFBugReport.h	/^    void setStat(double time, std::string mem, double coverage)$/;"	f	class:SVF::SVFBugReport
setSubs	svf/include/Graphs/ConsG.h	/^    inline void setSubs(NodeID node, NodeBS& subs)$/;"	f	class:SVF::ConstraintGraph
setTemplate	svf-llvm/include/SVF-LLVM/DCHG.h	/^    inline void setTemplate()$/;"	f	class:SVF::DCHNode
setTemplate	svf/include/Graphs/CHG.h	/^    inline void setTemplate()$/;"	f	class:SVF::CHNode
setTerminals	svf/include/CFL/CFGrammar.h	/^    inline void setTerminals(Map<std::string, Kind>& terminals)$/;"	f	class:SVF::GrammarBase
setTokeepActualOutFormalIn	svf/include/Graphs/SVFGOPT.h	/^    inline void setTokeepActualOutFormalIn()$/;"	f	class:SVF::SVFGOPT
setTokeepAllSelfCycle	svf/include/Graphs/SVFGOPT.h	/^    inline void setTokeepAllSelfCycle()$/;"	f	class:SVF::SVFGOPT
setTokeepContextSelfCycle	svf/include/Graphs/SVFGOPT.h	/^    inline void setTokeepContextSelfCycle()$/;"	f	class:SVF::SVFGOPT
setTop	svf/include/AE/Core/AddressValue.h	/^    inline void setTop()$/;"	f	class:SVF::AddressValue
setTotalKind	svf/include/CFL/CFGrammar.h	/^    inline void setTotalKind(Kind totalKind)$/;"	f	class:SVF::GrammarBase
setTypeInfo	svf/include/SVFIR/SVFType.h	/^    inline void setTypeInfo(StInfo* ti)$/;"	f	class:SVF::SVFType
setTypeOfElement	svf/include/SVFIR/SVFType.h	/^    void setTypeOfElement(const SVFType* elemType)$/;"	f	class:SVF::SVFArrayType
setVFCond	svf/include/SABER/ProgSlice.h	/^    inline bool setVFCond(const SVFGNode* node, const Condition &cond)$/;"	f	class:SVF::ProgSlice
setVTable	svf-llvm/include/SVF-LLVM/DCHG.h	/^    void setVTable(const GlobalObjVar *vtbl)$/;"	f	class:SVF::DCHNode
setVTable	svf/include/Graphs/CHG.h	/^    void setVTable(const GlobalObjVar *vtbl)$/;"	f	class:SVF::CHNode
setVals	svf/include/AE/Core/AddressValue.h	/^    void setVals(const AddrSet &vals)$/;"	f	class:SVF::AddressValue
setValue	svf/include/AE/Core/IntervalValue.h	/^    void setValue(const BoundedInt &lb, const BoundedInt &ub)$/;"	f	class:SVF::IntervalValue
setValue	svf/include/SVFIR/SVFStatements.h	/^    inline void setValue(const SVFVar* val)$/;"	f	class:SVF::SVFStmt
setValue	svf/include/Util/CommandLine.h	/^    void setValue(T v)$/;"	f	class:Option
setVarDFInSetUpdated	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void setVarDFInSetUpdated(LocID loc,const Key& var)$/;"	f	class:SVF::MutableIncDFPTData
setVarDFInSetUpdated	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline void setVarDFInSetUpdated(LocID loc, const Key& var)$/;"	f	class:SVF::PersistentIncDFPTData
setVarDFOutSetUpdated	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline void setVarDFOutSetUpdated(LocID loc,const Key& var)$/;"	f	class:SVF::MutableIncDFPTData
setVarDFOutSetUpdated	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline void setVarDFOutSetUpdated(LocID loc, const Key& var)$/;"	f	class:SVF::PersistentIncDFPTData
setVer	svf/include/MSSA/MSSAMuChi.h	/^    inline void setVer(MRVer* v)$/;"	f	class:SVF::MSSAMU
setVersion	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::setVersion(const NodeID l, const NodeID o, const Version v, LocVersionMap &lvm)$/;"	f	class:VersionedFlowSensitive
setVisited	svf/include/Graphs/SCC.h	/^    inline void setVisited(NodeID n,bool v)$/;"	f	class:SVF::SCCDetection
setVisited	svf/include/WPA/CSC.h	/^    void setVisited(NodeID nId)$/;"	f	class:SVF::CSC
setVtablePtr	svf/include/Graphs/ICFGNode.h	/^    inline void setVtablePtr(SVFVar* v)$/;"	f	class:SVF::CallICFGNode
setYield	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::setYield(const NodeID l, const NodeID o, const Version v)$/;"	f	class:VersionedFlowSensitive
set_add	z3.obj/include/z3++.h	/^    inline expr set_add(expr const& s, expr const& e) {$/;"	f	namespace:z3
set_complement	z3.obj/include/z3++.h	/^    inline expr set_complement(expr const& a) {$/;"	f	namespace:z3
set_cutoff	z3.obj/include/z3++.h	/^            void set_cutoff(unsigned c) { m_cutoff = c; }$/;"	f	class:z3::solver::cube_generator
set_default_fp_sort	z3.obj/bin/python/z3/z3.py	/^def set_default_fp_sort(ebits, sbits, ctx=None):$/;"	f
set_default_rounding_mode	z3.obj/bin/python/z3/z3.py	/^def set_default_rounding_mode(rm, ctx=None):$/;"	f
set_del	z3.obj/include/z3++.h	/^    inline expr set_del(expr const& s, expr const& e) {$/;"	f	namespace:z3
set_difference	z3.obj/include/z3++.h	/^    inline expr set_difference(expr const& a, expr const& b) {$/;"	f	namespace:z3
set_else	z3.obj/include/z3++.h	/^        void set_else(expr& value) {$/;"	f	class:z3::func_interp
set_enable_exceptions	z3.obj/include/z3++.h	/^        void set_enable_exceptions(bool f) { m_enable_exceptions = f; }$/;"	f	class:z3::context
set_fpa_pretty	z3.obj/bin/python/z3/z3printer.py	/^def set_fpa_pretty(flag=True):$/;"	f
set_html_mode	z3.obj/bin/python/z3/z3printer.py	/^def set_html_mode(flag=True):$/;"	f
set_intersect	z3.obj/include/z3++.h	/^    inline expr set_intersect(expr const& a, expr const& b) {$/;"	f	namespace:z3
set_llvm	setup.sh	/^function set_llvm {$/;"	f
set_member	z3.obj/include/z3++.h	/^    inline expr set_member(expr const& s, expr const& e) {$/;"	f	namespace:z3
set_minus_infinity	svf/include/AE/Core/NumericValue.h	/^    void set_minus_infinity()$/;"	f	class:SVF::BoundedDouble
set_minus_infinity	svf/include/AE/Core/NumericValue.h	/^    void set_minus_infinity()$/;"	f	class:SVF::BoundedInt
set_option	z3.obj/bin/python/z3/z3.py	/^def set_option(*args, **kws):$/;"	f
set_param	z3.obj/bin/python/z3/z3.py	/^def set_param(*args, **kws):$/;"	f
set_param	z3.obj/include/z3++.h	/^    inline void set_param(char const * param, bool value) { Z3_global_param_set(param, value ? "true" : "false"); }$/;"	f	namespace:z3
set_param	z3.obj/include/z3++.h	/^    inline void set_param(char const * param, char const * value) { Z3_global_param_set(param, value); }$/;"	f	namespace:z3
set_param	z3.obj/include/z3++.h	/^    inline void set_param(char const * param, int value) { std::ostringstream oss; oss << value; Z3_global_param_set(param, oss.str().c_str()); }$/;"	f	namespace:z3
set_plus_infinity	svf/include/AE/Core/NumericValue.h	/^    void set_plus_infinity()$/;"	f	class:SVF::BoundedDouble
set_plus_infinity	svf/include/AE/Core/NumericValue.h	/^    void set_plus_infinity()$/;"	f	class:SVF::BoundedInt
set_pp_option	z3.obj/bin/python/z3/z3printer.py	/^def set_pp_option(k, v):$/;"	f
set_predicate_representation	z3.obj/bin/python/z3/z3.py	/^    def set_predicate_representation(self, f, *representations):$/;"	m	class:Fixedpoint
set_rounding_mode	z3.obj/include/z3++.h	/^    inline void context::set_rounding_mode(rounding_mode rm) { m_rounding_mode = rm; }$/;"	f	class:z3::context
set_subset	z3.obj/include/z3++.h	/^    inline expr set_subset(expr const& a, expr const& b) {$/;"	f	namespace:z3
set_to_bottom	svf/include/AE/Core/IntervalValue.h	/^    void set_to_bottom()$/;"	f	class:SVF::IntervalValue
set_to_top	svf/include/AE/Core/IntervalValue.h	/^    void set_to_top()$/;"	f	class:SVF::IntervalValue
set_union	z3.obj/include/z3++.h	/^    inline expr set_union(expr const& a, expr const& b) {$/;"	f	namespace:z3
set_z3	setup.sh	/^function set_z3 {$/;"	f
setlocale	svf-llvm/lib/extapi.c	/^char *setlocale(int category, const char *locale)$/;"	f
setmntent	svf-llvm/lib/extapi.c	/^void *setmntent(const char *voidname, const char *type)$/;"	f
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:ApplyResult
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:AstRef
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:AstVector
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:Fixedpoint
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:Goal
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:ModelRef
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:Optimize
sexpr	z3.obj/bin/python/z3/z3.py	/^    def sexpr(self):$/;"	m	class:Solver
sexpr	z3.obj/bin/python/z3/z3num.py	/^    def sexpr(self):$/;"	m	class:Numeral
sext	z3.obj/include/z3++.h	/^    inline expr sext(expr const & a, unsigned i) { return to_expr(a.ctx(), Z3_mk_sign_ext(a.ctx(), i, a)); }$/;"	f	namespace:z3
sfrAndersen	svf/include/WPA/AndersenPWC.h	/^    static AndersenSFR* sfrAndersen;$/;"	m	class:SVF::AndersenSFR
sfrObjNodes	svf/include/WPA/AndersenPWC.h	/^    NodeSet sfrObjNodes;$/;"	m	class:SVF::AndersenSFR
sfvgOptEnd	svf/include/Graphs/SVFGStat.h	/^    void sfvgOptEnd()$/;"	f	class:SVF::SVFGStat
sfvgOptStart	svf/include/Graphs/SVFGStat.h	/^    void sfvgOptStart()$/;"	f	class:SVF::SVFGStat
shl	svf/include/Util/Z3Expr.h	/^    friend Z3Expr shl(const Z3Expr &lhs, const Z3Expr &rhs)$/;"	f	class:SVF::Z3Expr
shl	z3.obj/include/z3++.h	/^    inline expr shl(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvshl(a.ctx(), a, b)); }$/;"	f	namespace:z3
shl	z3.obj/include/z3++.h	/^    inline expr shl(expr const & a, int b) { return shl(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
shl	z3.obj/include/z3++.h	/^    inline expr shl(int a, expr const & b) { return shl(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
shmat	svf-llvm/lib/extapi.c	/^void *shmat(int shmid, const void *shmaddr, int shmflg)$/;"	f
sign	z3.obj/bin/python/z3/z3.py	/^    def sign(self):$/;"	m	class:FPNumRef
sign	z3.obj/bin/python/z3/z3num.py	/^    def sign(self):$/;"	m	class:Numeral
signAndWidth	svf/include/SVFIR/SVFType.h	/^    short signAndWidth; \/\/\/< For printing$/;"	m	class:SVF::SVFIntegerType
sign_as_bv	z3.obj/bin/python/z3/z3.py	/^    def sign_as_bv(self):$/;"	m	class:FPNumRef
signal	svf-llvm/lib/extapi.c	/^void (*signal(int sig, void (*func)(int)))(int)$/;"	f
significand	z3.obj/bin/python/z3/z3.py	/^    def significand(self):$/;"	m	class:FPNumRef
significand_as_bv	z3.obj/bin/python/z3/z3.py	/^    def significand_as_bv(self):$/;"	m	class:FPNumRef
significand_as_long	z3.obj/bin/python/z3/z3.py	/^    def significand_as_long(self):$/;"	m	class:FPNumRef
simple	z3.obj/include/z3++.h	/^        struct simple {};$/;"	s	class:z3::solver
simplify	svf/include/Util/Z3Expr.h	/^    inline Z3Expr simplify() const$/;"	f	class:SVF::Z3Expr
simplify	z3.obj/bin/python/z3/z3.py	/^    def simplify(self, *arguments, **keywords):$/;"	m	class:Goal
simplify	z3.obj/bin/python/z3/z3.py	/^def simplify(a, *arguments, **keywords):$/;"	f
simplify	z3.obj/include/z3++.h	/^        expr simplify() const { Z3_ast r = Z3_simplify(ctx(), m_ast); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
simplify	z3.obj/include/z3++.h	/^        expr simplify(params const & p) const { Z3_ast r = Z3_simplify_ex(ctx(), m_ast, p); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::expr
simplify_param_descrs	z3.obj/bin/python/z3/z3.py	/^def simplify_param_descrs():$/;"	f
simplify_param_descrs	z3.obj/include/z3++.h	/^        static param_descrs simplify_param_descrs(context& c) { return param_descrs(c, Z3_simplify_get_param_descrs(c)); }$/;"	f	class:z3::param_descrs
simplify_type	svf/include/Util/Casting.h	/^template<typename From> struct simplify_type$/;"	s	namespace:SVF::SVFUtil
simplify_type	svf/include/Util/Casting.h	/^template<typename From> struct simplify_type<const From>$/;"	s	namespace:SVF::SVFUtil
singleRHSToProds	svf/include/CFL/CFGrammar.h	/^    SymbolMap<Symbol, Productions> singleRHSToProds;$/;"	m	class:SVF::CFGrammar
sinks	svf/include/Graphs/SVFGStat.h	/^    SVFGNodeSet	sinks;$/;"	m	class:SVF::SVFGStat
sinks	svf/include/SABER/ProgSlice.h	/^    SVFGNodeSet sinks;						\/\/\/<  a set of sink nodes$/;"	m	class:SVF::ProgSlice
sinks	svf/include/SABER/SrcSnkDDA.h	/^    SVFGNodeSet sinks;		\/\/\/ source nodes$/;"	m	class:SVF::SrcSnkDDA
sinksBegin	svf/include/SABER/ProgSlice.h	/^    inline SVFGNodeSetIter sinksBegin() const$/;"	f	class:SVF::ProgSlice
sinksBegin	svf/include/SABER/SrcSnkDDA.h	/^    inline SVFGNodeSetIter sinksBegin() const$/;"	f	class:SVF::SrcSnkDDA
sinksEnd	svf/include/SABER/ProgSlice.h	/^    inline SVFGNodeSetIter sinksEnd() const$/;"	f	class:SVF::ProgSlice
sinksEnd	svf/include/SABER/SrcSnkDDA.h	/^    inline SVFGNodeSetIter sinksEnd() const$/;"	f	class:SVF::SrcSnkDDA
size	svf/include/AE/Core/AddressValue.h	/^    u32_t size() const$/;"	f	class:SVF::AddressValue
size	svf/include/MemoryModel/ConditionalPT.h	/^    inline unsigned size() const$/;"	f	class:SVF::CondStdSet
size	svf/include/Util/WorkList.h	/^    inline u32_t size() const$/;"	f	class:SVF::FIFOWorkList
size	svf/include/Util/WorkList.h	/^    inline u32_t size() const$/;"	f	class:SVF::FILOWorkList
size	svf/include/Util/cJSON.h	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size);$/;"	v
size	z3.obj/bin/python/z3/z3.py	/^    def size(self):$/;"	m	class:BitVecRef
size	z3.obj/bin/python/z3/z3.py	/^    def size(self):$/;"	m	class:BitVecSortRef
size	z3.obj/bin/python/z3/z3.py	/^    def size(self):$/;"	m	class:FiniteDomainSortRef
size	z3.obj/bin/python/z3/z3.py	/^    def size(self):$/;"	m	class:Goal
size	z3.obj/bin/python/z3/z3.py	/^    def size(self):$/;"	m	class:ParamDescrsRef
size	z3.obj/include/z3++.h	/^        unsigned size() const { return Z3_apply_result_get_num_subgoals(ctx(), m_apply_result); }$/;"	f	class:z3::apply_result
size	z3.obj/include/z3++.h	/^        unsigned size() const { return Z3_ast_vector_size(ctx(), m_vector); }$/;"	f	class:z3::ast_vector_tpl
size	z3.obj/include/z3++.h	/^        unsigned size() const { return Z3_goal_size(ctx(), m_goal); }$/;"	f	class:z3::goal
size	z3.obj/include/z3++.h	/^        unsigned size() const { return Z3_stats_size(ctx(), m_stats); }$/;"	f	class:z3::stats
size	z3.obj/include/z3++.h	/^        unsigned size() const { return m_size; }$/;"	f	class:z3::array
size	z3.obj/include/z3++.h	/^        unsigned size() const { return num_consts() + num_funcs(); }$/;"	f	class:z3::model
size	z3.obj/include/z3++.h	/^        unsigned size() { return Z3_param_descrs_size(ctx(), m_descrs); }$/;"	f	class:z3::param_descrs
skip_multiline_comment	svf/lib/Util/cJSON.cpp	/^static void skip_multiline_comment(char **input)$/;"	f	file:
skip_oneline_comment	svf/lib/Util/cJSON.cpp	/^static void skip_oneline_comment(char **input)$/;"	f	file:
skip_utf8_bom	svf/lib/Util/cJSON.cpp	/^static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)$/;"	f	file:
sle	z3.obj/include/z3++.h	/^    inline expr sle(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvsle(a.ctx(), a, b)); }$/;"	f	namespace:z3
sle	z3.obj/include/z3++.h	/^    inline expr sle(expr const & a, int b) { return sle(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
sle	z3.obj/include/z3++.h	/^    inline expr sle(int a, expr const & b) { return sle(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
sliceState	svf/include/AE/Core/AbstractState.h	/^    AbstractState sliceState(Set<u32_t> &sl)$/;"	f	class:SVF::AbstractState
slt	z3.obj/include/z3++.h	/^    inline expr slt(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvslt(a.ctx(), a, b)); }$/;"	f	namespace:z3
slt	z3.obj/include/z3++.h	/^    inline expr slt(expr const & a, int b) { return slt(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
slt	z3.obj/include/z3++.h	/^    inline expr slt(int a, expr const & b) { return slt(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
smod	z3.obj/include/z3++.h	/^    inline expr smod(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvsmod(a.ctx(), a, b)); }$/;"	f	namespace:z3
smod	z3.obj/include/z3++.h	/^    inline expr smod(expr const & a, int b) { return smod(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
smod	z3.obj/include/z3++.h	/^    inline expr smod(int a, expr const & b) { return smod(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
solve	svf/include/WPA/WPAFSSolver.h	/^    virtual void solve()$/;"	f	class:SVF::WPAMinimumSolver
solve	svf/include/WPA/WPAFSSolver.h	/^    virtual void solve()$/;"	f	class:SVF::WPASCCSolver
solve	svf/lib/CFL/CFLAlias.cpp	/^void CFLAlias::solve()$/;"	f	class:CFLAlias
solve	svf/lib/CFL/CFLBase.cpp	/^void CFLBase::solve()$/;"	f	class:SVF::CFLBase
solve	svf/lib/CFL/CFLSolver.cpp	/^void CFLSolver::solve()$/;"	f	class:CFLSolver
solve	z3.obj/bin/python/z3/z3.py	/^def solve(*args, **keywords):$/;"	f
solveAll	svf/include/DDA/DDAClient.h	/^    bool solveAll;				\/\/\/< TRUE if all top level pointers are being queried$/;"	m	class:SVF::DDAClient
solveAndwritePtsToFile	svf/lib/WPA/Andersen.cpp	/^void AndersenBase:: solveAndwritePtsToFile(const std::string& filename)$/;"	f	class:AndersenBase
solveAndwritePtsToFile	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::solveAndwritePtsToFile(const std::string& filename)$/;"	f	class:FlowSensitive
solveAndwritePtsToFile	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::solveAndwritePtsToFile(const std::string& filename)$/;"	f	class:VersionedFlowSensitive
solveConstraints	svf/lib/WPA/Andersen.cpp	/^void AndersenBase::solveConstraints()$/;"	f	class:AndersenBase
solveConstraints	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::solveConstraints()$/;"	f	class:FlowSensitive
solveTime	svf/include/WPA/FlowSensitive.h	/^    double solveTime;	\/\/\/< time of solve.$/;"	m	class:SVF::FlowSensitive
solveWorklist	svf/include/WPA/WPASolver.h	/^    virtual inline void solveWorklist()$/;"	f	class:SVF::WPASolver
solveWorklist	svf/lib/WPA/AndersenSCD.cpp	/^void AndersenSCD::solveWorklist()$/;"	f	class:AndersenSCD
solveWorklist	svf/lib/WPA/AndersenWaveDiff.cpp	/^void AndersenWaveDiff::solveWorklist()$/;"	f	class:AndersenWaveDiff
solveWorklist	svf/lib/WPA/Steensgaard.cpp	/^void Steensgaard::solveWorklist()$/;"	f	class:Steensgaard
solve_using	z3.obj/bin/python/z3/z3.py	/^def solve_using(s, *args, **keywords):$/;"	f
solver	svf/include/CFL/CFLBase.h	/^    CFLSolver* solver;$/;"	m	class:SVF::CFLBase
solver	svf/include/Util/Z3Expr.h	/^    static z3::solver* solver;$/;"	m	class:SVF::Z3Expr
solver	svf/lib/Util/Z3Expr.cpp	/^z3::solver* Z3Expr::solver = nullptr;$/;"	m	class:SVF::Z3Expr	file:
solver	z3.obj/bin/python/z3/z3.py	/^    def solver(self, logFile=None):$/;"	m	class:Tactic
solver	z3.obj/include/z3++.h	/^        solver(context & c):object(c) { init(Z3_mk_solver(c)); }$/;"	f	class:z3::solver
solver	z3.obj/include/z3++.h	/^        solver(context & c, Z3_solver s):object(c) { init(s); }$/;"	f	class:z3::solver
solver	z3.obj/include/z3++.h	/^        solver(context & c, char const * logic):object(c) { init(Z3_mk_solver_for_logic(c, c.str_symbol(logic))); }$/;"	f	class:z3::solver
solver	z3.obj/include/z3++.h	/^        solver(context & c, simple):object(c) { init(Z3_mk_simple_solver(c)); }$/;"	f	class:z3::solver
solver	z3.obj/include/z3++.h	/^        solver(context & c, solver const& src, translate): object(c) { init(Z3_solver_translate(src.ctx(), src, c)); }$/;"	f	class:z3::solver
solver	z3.obj/include/z3++.h	/^        solver(solver const & s):object(s) { init(s.m_solver); }$/;"	f	class:z3::solver
solver	z3.obj/include/z3++.h	/^    class solver : public object {$/;"	c	namespace:z3
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:ArithRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:ArrayRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:BitVecRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:BoolRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:DatatypeRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:ExprRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:FPRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:FiniteDomainRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:QuantifierRef
sort	z3.obj/bin/python/z3/z3.py	/^    def sort(self):$/;"	m	class:SeqRef
sort	z3.obj/include/z3++.h	/^        sort(context & c):ast(c) {}$/;"	f	class:z3::sort
sort	z3.obj/include/z3++.h	/^        sort(context & c, Z3_ast a):ast(c, a) {}$/;"	f	class:z3::sort
sort	z3.obj/include/z3++.h	/^        sort(context & c, Z3_sort s):ast(c, reinterpret_cast<Z3_ast>(s)) {}$/;"	f	class:z3::sort
sort	z3.obj/include/z3++.h	/^        sort(sort const & s):ast(s) {}$/;"	f	class:z3::sort
sort	z3.obj/include/z3++.h	/^    class sort : public ast {$/;"	c	namespace:z3
sortPointsTo	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::sortPointsTo(const NodeBS& cpts)$/;"	f	class:MRGenerator
sort_kind	z3.obj/bin/python/z3/z3.py	/^    def sort_kind(self):$/;"	m	class:ExprRef
sort_kind	z3.obj/include/z3++.h	/^        Z3_sort_kind sort_kind() const { return Z3_get_sort_kind(*m_ctx, *this); }$/;"	f	class:z3::sort
sort_vector	z3.obj/include/z3++.h	/^    typedef ast_vector_tpl<sort>      sort_vector;$/;"	t	namespace:z3
sorts	z3.obj/bin/python/z3/z3.py	/^    def sorts(self):$/;"	m	class:ModelRef
sourceLoc	svf/include/SVFIR/SVFValue.h	/^    std::string sourceLoc;  \/\/\/< Source code information of this value$/;"	m	class:SVF::SVFValue
sources	svf/include/Graphs/SVFGStat.h	/^    SVFGNodeSet	sources;$/;"	m	class:SVF::SVFGStat
sources	svf/include/SABER/SrcSnkDDA.h	/^    SVFGNodeSet sources;		\/\/\/ source nodes$/;"	m	class:SVF::SrcSnkDDA
sourcesBegin	svf/include/SABER/SrcSnkDDA.h	/^    inline SVFGNodeSetIter sourcesBegin() const$/;"	f	class:SVF::SrcSnkDDA
sourcesEnd	svf/include/SABER/SrcSnkDDA.h	/^    inline SVFGNodeSetIter sourcesEnd() const$/;"	f	class:SVF::SrcSnkDDA
space_upto_nl	z3.obj/bin/python/z3/z3printer.py	/^    def space_upto_nl(self):$/;"	m	class:ChoiceFormatObject
space_upto_nl	z3.obj/bin/python/z3/z3printer.py	/^    def space_upto_nl(self):$/;"	m	class:ComposeFormatObject
space_upto_nl	z3.obj/bin/python/z3/z3printer.py	/^    def space_upto_nl(self):$/;"	m	class:FormatObject
space_upto_nl	z3.obj/bin/python/z3/z3printer.py	/^    def space_upto_nl(self):$/;"	m	class:IndentFormatObject
space_upto_nl	z3.obj/bin/python/z3/z3printer.py	/^    def space_upto_nl(self):$/;"	m	class:LineBreakFormatObject
space_upto_nl	z3.obj/bin/python/z3/z3printer.py	/^    def space_upto_nl(self):$/;"	m	class:StringFormatObject
split	svf/include/Util/SVFUtil.h	/^inline std::vector<std::string> split(const std::string& s, char separator)$/;"	f	namespace:SVF::SVFUtil
split	z3.obj/bin/python/z3/z3rcf.py	/^    def split(self):$/;"	m	class:RCFNum
splitAndStrip	svf-llvm/lib/CppUtil.cpp	/^std::vector<std::string> splitAndStrip(const std::string &input, char delimiter)$/;"	f
sqrt	z3.obj/include/z3++.h	/^    inline expr sqrt(expr const & a, expr const& rm) {$/;"	f	namespace:z3
src	svf/include/Graphs/GenericGraph.h	/^    NodeTy* src;		\/\/\/< source node$/;"	m	class:SVF::GenericEdge
srcToCSIDMap	svf/include/SABER/LeakChecker.h	/^    SVFGNodeToCSIDMap srcToCSIDMap;$/;"	m	class:SVF::LeakChecker
srem	z3.obj/include/z3++.h	/^    inline expr srem(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvsrem(a.ctx(), a, b)); }$/;"	f	namespace:z3
srem	z3.obj/include/z3++.h	/^    inline expr srem(expr const & a, int b) { return srem(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
srem	z3.obj/include/z3++.h	/^    inline expr srem(int a, expr const & b) { return srem(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
st	svf/include/SVFIR/SVFType.h	/^    StInfo(const StInfo& st) = delete;$/;"	m	class:SVF::StInfo
stInfos	svf/include/Graphs/IRGraph.h	/^    Set<const StInfo*> stInfos;$/;"	m	class:SVF::IRGraph
star	z3.obj/include/z3++.h	/^    inline expr star(expr const& re) {$/;"	f	namespace:z3
startAnalysisLimitTimer	svf/lib/Util/SVFUtil.cpp	/^bool SVFUtil::startAnalysisLimitTimer(unsigned timeLimit)$/;"	f	class:SVFUtil
startClk	svf/include/Util/SVFStat.h	/^    virtual inline void startClk()$/;"	f	class:SVF::SVFStat
startKind	svf/include/CFL/CFGrammar.h	/^    Kind startKind;$/;"	m	class:SVF::GrammarBase
startKind	svf/include/Graphs/CFLGraph.h	/^    Kind startKind;$/;"	m	class:SVF::CFLGraph
startNewPTCompFromLoadSrc	svf/include/DDA/DDAVFSolver.h	/^    inline void startNewPTCompFromLoadSrc(CPtSet& pts, const DPIm& oldDpm)$/;"	f	class:SVF::DDAVFSolver
startNewPTCompFromStoreDst	svf/include/DDA/DDAVFSolver.h	/^    inline void startNewPTCompFromStoreDst(CPtSet& pts, const DPIm& oldDpm)$/;"	f	class:SVF::DDAVFSolver
startTime	svf/include/Util/SVFStat.h	/^    double startTime;$/;"	m	class:SVF::SVFStat
stat	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    AEStat* stat;$/;"	m	class:SVF::AbstractInterpretation
stat	svf/include/Graphs/SVFG.h	/^    SVFGStat * stat;$/;"	m	class:SVF::SVFG
stat	svf/include/MSSA/MemSSA.h	/^    MemSSAStat* stat;$/;"	m	class:SVF::MemSSA
stat	svf/include/MTA/MTA.h	/^    std::unique_ptr<MTAStat> stat;$/;"	m	class:SVF::MTA
stat	svf/include/MemoryModel/PointerAnalysis.h	/^    PTAStat* stat;$/;"	m	class:SVF::PointerAnalysis
statAddrVarPtsSize	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::statAddrVarPtsSize()$/;"	f	class:FlowSensitiveStat
statInOutPtsSize	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::statInOutPtsSize(const DFInOutMap& data, ENUM_INOUT inOrOut)$/;"	f	class:FlowSensitiveStat
statInit	svf/lib/Util/ThreadAPI.cpp	/^void ThreadAPI::statInit(Map<std::string, u32_t>& tdAPIStatMap)$/;"	f	class:ThreadAPI
statNullPtr	svf/lib/WPA/AndersenStat.cpp	/^void AndersenStat::statNullPtr()$/;"	f	class:AndersenStat
statNullPtr	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::statNullPtr()$/;"	f	class:FlowSensitiveStat
statPtsSize	svf/lib/WPA/FlowSensitiveStat.cpp	/^void FlowSensitiveStat::statPtsSize()$/;"	f	class:FlowSensitiveStat
static_strlen	svf/lib/Util/cJSON.cpp	185;"	d	file:
statistics	z3.obj/bin/python/z3/z3.py	/^    def statistics(self):$/;"	m	class:Fixedpoint
statistics	z3.obj/bin/python/z3/z3.py	/^    def statistics(self):$/;"	m	class:Optimize
statistics	z3.obj/bin/python/z3/z3.py	/^    def statistics(self):$/;"	m	class:Solver
statistics	z3.obj/include/z3++.h	/^        stats statistics() const { Z3_stats r = Z3_fixedpoint_get_statistics(ctx(), m_fp); check_error(); return stats(ctx(), r); }$/;"	f	class:z3::fixedpoint
statistics	z3.obj/include/z3++.h	/^        stats statistics() const { Z3_stats r = Z3_optimize_get_statistics(ctx(), m_opt); check_error(); return stats(ctx(), r); }$/;"	f	class:z3::optimize
statistics	z3.obj/include/z3++.h	/^        stats statistics() const { Z3_stats r = Z3_solver_get_statistics(ctx(), m_solver); check_error(); return stats(ctx(), r); }$/;"	f	class:z3::solver
stats	z3.obj/include/z3++.h	/^        stats(context & c):object(c), m_stats(0) {}$/;"	f	class:z3::stats
stats	z3.obj/include/z3++.h	/^        stats(context & c, Z3_stats e):object(c) { init(e); }$/;"	f	class:z3::stats
stats	z3.obj/include/z3++.h	/^        stats(stats const & s):object(s) { init(s.m_stats); }$/;"	f	class:z3::stats
stats	z3.obj/include/z3++.h	/^    class stats : public object {$/;"	c	namespace:z3
steens	svf/include/WPA/Steensgaard.h	/^    static Steensgaard* steens; \/\/ static instance$/;"	m	class:SVF::Steensgaard
stmtReliance	svf/include/WPA/VersionedFlowSensitive.h	/^    Map<NodeID, Map<Version, NodeBS>> stmtReliance;$/;"	m	class:SVF::VersionedFlowSensitive
stoi	z3.obj/include/z3++.h	/^        expr stoi() const {$/;"	f	class:z3::expr
stopAnalysisLimitTimer	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::stopAnalysisLimitTimer(bool limitTimerSet)$/;"	f	class:SVFUtil
store	svf/include/AE/Core/AbstractState.h	/^    inline void store(u32_t addr, const AbstractValue &val)$/;"	f	class:SVF::AbstractState
store	svf/include/AE/Core/RelExeState.h	/^    inline void store(u32_t objId, const Z3Expr &z3Expr)$/;"	f	class:SVF::RelExeState
store	svf/lib/AE/Core/RelExeState.cpp	/^void RelExeState::store(const Z3Expr &loc, const Z3Expr &value)$/;"	f	class:RelExeState
store	z3.obj/include/z3++.h	/^    inline expr store(expr const & a, expr const & i, expr const & v) {$/;"	f	namespace:z3
store	z3.obj/include/z3++.h	/^    inline expr store(expr const & a, expr i, int v) { return store(a, i, a.ctx().num_val(v, a.get_sort().array_range())); }$/;"	f	namespace:z3
store	z3.obj/include/z3++.h	/^    inline expr store(expr const & a, expr_vector const & i, expr const & v) {$/;"	f	namespace:z3
store	z3.obj/include/z3++.h	/^    inline expr store(expr const & a, int i, expr const & v) { return store(a, a.ctx().num_val(i, a.get_sort().array_domain()), v); }$/;"	f	namespace:z3
store	z3.obj/include/z3++.h	/^    inline expr store(expr const & a, int i, int v) {$/;"	f	namespace:z3
store2ChiSetMap	svf/include/MSSA/MemSSA.h	/^    StoreToChiSetMap store2ChiSetMap;$/;"	m	class:SVF::MemSSA
storeDstNodes	svf/include/DDA/DDAClient.h	/^    PAGNodeSet storeDstNodes;$/;"	m	class:SVF::AliasDDAClient
storeEdgeLabelCounter	svf/include/SVFIR/SVFStatements.h	/^    static u64_t storeEdgeLabelCounter;  \/\/\/< Store Instruction counter$/;"	m	class:SVF::SVFStmt
storeEdgeLabelCounter	svf/lib/SVFIR/SVFStatements.cpp	/^u64_t SVFStmt::storeEdgeLabelCounter = 0;$/;"	m	class:SVFStmt	file:
storeInEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy storeInEdges; \/\/\/< all incoming store edge of this node$/;"	m	class:SVF::ConstraintNode
storeOutEdges	svf/include/Graphs/ConsGNode.h	/^    ConstraintEdge::ConstraintEdgeSetTy storeOutEdges; \/\/\/< all outgoing store edge of this node$/;"	m	class:SVF::ConstraintNode
storeTime	svf/include/WPA/FlowSensitive.h	/^    double storeTime;	\/\/\/< time of store edges$/;"	m	class:SVF::FlowSensitive
storeToDPMs	svf/include/DDA/DDAVFSolver.h	/^    StoreToPMSetMap storeToDPMs;	\/\/\/< map store to set of DPM which have been stong updated there$/;"	m	class:SVF::DDAVFSolver
storeValue	svf/lib/AE/Core/AbstractState.cpp	/^void AbstractState::storeValue(NodeID varId, AbstractValue val)$/;"	f	class:AbstractState
storesToMRsMap	svf/include/MSSA/MemRegion.h	/^    StoresToMRsMap storesToMRsMap;$/;"	m	class:SVF::MRGenerator
storesToPointsToMap	svf/include/MSSA/MemRegion.h	/^    StoresToPointsToMap	storesToPointsToMap;$/;"	m	class:SVF::MRGenerator
stpcpy	svf-llvm/lib/extapi.c	/^char *stpcpy(char *restrict dst, const char *restrict src)$/;"	f
str	z3.obj/include/z3++.h	/^        std::string str() const { assert(kind() == Z3_STRING_SYMBOL); return Z3_get_symbol_string(ctx(), m_sym); }$/;"	f	class:z3::symbol
strRead	svf/lib/AE/Svfexe/AbsExtAPI.cpp	/^std::string AbsExtAPI::strRead(AbstractState& as, const SVFVar* rhs)$/;"	f	class:AbsExtAPI
strToKind	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Kind GrammarBase::strToKind(std::string str) const$/;"	f	class:GrammarBase
strToSymbol	svf/lib/CFL/CFGrammar.cpp	/^GrammarBase::Symbol GrammarBase::strToSymbol(const std::string str) const$/;"	f	class:GrammarBase
strTrans	svf/lib/CFL/CFGNormalizer.cpp	/^void CFGNormalizer::strTrans(std::string LHS, CFGrammar *grammar, GrammarBase::Production& normalProd)$/;"	f	class:CFGNormalizer
str_symbol	z3.obj/include/z3++.h	/^    inline symbol context::str_symbol(char const * s) { Z3_symbol r = Z3_mk_string_symbol(m_ctx, s); check_error(); return symbol(*this, r); }$/;"	f	class:z3::context
strategy	svf/include/Util/NodeIDAllocator.h	/^    enum Strategy strategy;$/;"	m	class:SVF::NodeIDAllocator	typeref:enum:SVF::NodeIDAllocator::Strategy
strcasestr	svf-llvm/lib/extapi.c	/^char *strcasestr(const char *haystack, const char *needle)$/;"	f
strcat	svf-llvm/lib/extapi.c	/^char *strcat(char *dest, const char *src)$/;"	f
strchr	svf-llvm/lib/extapi.c	/^char *strchr(const char *str, int c)$/;"	f
strcpy	svf-llvm/lib/extapi.c	/^char *strcpy(char *dest, const char *src)$/;"	f
strdup	svf-llvm/lib/extapi.c	/^char *strdup(const char *s)$/;"	f
strerror	svf-llvm/lib/extapi.c	/^char *strerror(int errnum)$/;"	f
strerror_r	svf-llvm/lib/extapi.c	/^char *strerror_r(int errnum, char *buf, unsigned long buflen)$/;"	f
stride	svf/include/SVFIR/SVFType.h	/^    u32_t stride;$/;"	m	class:SVF::StInfo
strides	svf/include/Graphs/ConsGNode.h	/^    NodeBS strides;$/;"	m	class:SVF::ConstraintNode
string	svf/include/Util/cJSON.h	/^    char *string;$/;"	m	struct:cJSON
string_sort	z3.obj/include/z3++.h	/^    inline sort context::string_sort() { Z3_sort s = Z3_mk_string_sort(m_ctx); check_error(); return sort(*this, s); }$/;"	f	class:z3::context
string_val	z3.obj/include/z3++.h	/^    inline expr context::string_val(char const* s) { Z3_ast r = Z3_mk_string(m_ctx, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
string_val	z3.obj/include/z3++.h	/^    inline expr context::string_val(char const* s, unsigned n) { Z3_ast r = Z3_mk_lstring(m_ctx, n, s); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
string_val	z3.obj/include/z3++.h	/^    inline expr context::string_val(std::string const& s) { Z3_ast r = Z3_mk_string(m_ctx, s.c_str()); check_error(); return expr(*this, r); }$/;"	f	class:z3::context
stripAllCasts	svf-llvm/lib/LLVMUtil.cpp	/^const Value*  LLVMUtil::stripAllCasts(const Value* val)$/;"	f	class:LLVMUtil
stripArray	svf-llvm/lib/DCHG.cpp	/^const DIType *DCHGraph::stripArray(const DIType *t)$/;"	f	class:DCHGraph
stripBracketsAndNamespace	svf-llvm/lib/CppUtil.cpp	/^void stripBracketsAndNamespace(cppUtil::DemangledName& dname)$/;"	f
stripConstantCasts	svf-llvm/lib/LLVMUtil.cpp	/^const Value* LLVMUtil::stripConstantCasts(const Value* val)$/;"	f	class:LLVMUtil
stripQualifiers	svf-llvm/lib/DCHG.cpp	/^const DIType *DCHGraph::stripQualifiers(const DIType *t)$/;"	f	class:DCHGraph
stripSpace	svf/lib/CFL/GrammarBuilder.cpp	/^const inline std::string GrammarBuilder::stripSpace(std::string s) const$/;"	f	class:SVF::GrammarBuilder
stripWhitespaces	svf-llvm/lib/CppUtil.cpp	/^std::string stripWhitespaces(const std::string &str)$/;"	f
strncat	svf-llvm/lib/extapi.c	/^char *strncat(char *dest, const char *src, unsigned long n)$/;"	f
strncpy	svf-llvm/lib/extapi.c	/^char *strncpy(char *dest, const char *src, unsigned long n)$/;"	f
strongUpdateOutFromIn	svf/include/WPA/FlowSensitive.h	/^    virtual bool strongUpdateOutFromIn(const SVFGNode* node, NodeID singleton)$/;"	f	class:SVF::FlowSensitive
strpbrk	svf-llvm/lib/extapi.c	/^char *strpbrk(const char *str1, const char *str2)$/;"	f
strptime	svf-llvm/lib/extapi.c	/^char *strptime(const void* s, const void* format, void* tm)$/;"	f
strrchr	svf-llvm/lib/extapi.c	/^char *strrchr(const char *str, int c)$/;"	f
strsep	svf-llvm/lib/extapi.c	/^char* strsep(char** stringp, const char* delim)$/;"	f
strsignal	svf-llvm/lib/extapi.c	/^char *strsignal(int errnum)$/;"	f
strstr	svf-llvm/lib/extapi.c	/^char *strstr(const char *haystack, const char *needle)$/;"	f
strtod	svf-llvm/lib/extapi.c	/^double strtod(const char *str, char **endptr)$/;"	f
strtod_l	svf-llvm/lib/extapi.c	/^double strtod_l(const char *str, char **endptr, void *loc)$/;"	f
strtof	svf-llvm/lib/extapi.c	/^float strtof(const char *nptr, char **endptr)$/;"	f
strtof_l	svf-llvm/lib/extapi.c	/^float strtof_l(const char *nptr, char **endptr, void *loc)$/;"	f
strtok	svf-llvm/lib/extapi.c	/^char *strtok(char *str, const char *delim)$/;"	f
strtok_r	svf-llvm/lib/extapi.c	/^char *strtok_r(char *str, const char *delim, char **saveptr)$/;"	f
strtol	svf-llvm/lib/extapi.c	/^long int strtol(const char *str, char **endptr, int base)$/;"	f
strtold	svf-llvm/lib/extapi.c	/^long double strtold(const char* str, char** endptr)$/;"	f
strtoll	svf-llvm/lib/extapi.c	/^long long strtoll(const char *str, char **endptr, int base)$/;"	f
strtoul	svf-llvm/lib/extapi.c	/^unsigned long int strtoul(const char *str, char **endptr, int base)$/;"	f
strtoull	svf-llvm/lib/extapi.c	/^unsigned long long strtoull(const char *str, char **endptr, int base)$/;"	f
structName	svf-llvm/lib/CppUtil.cpp	/^const std::string structName = "struct.";$/;"	v
subNodes	svf/include/Graphs/SCC.h	/^        inline NodeBS& subNodes()$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
subNodes	svf/include/Graphs/SCC.h	/^        inline const NodeBS& subNodes() const$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
subNodes	svf/include/Graphs/SCC.h	/^    inline const NodeBS& subNodes(NodeID n)  const$/;"	f	class:SVF::SCCDetection
subresultants	z3.obj/bin/python/z3/z3poly.py	/^def subresultants(p, q, x):$/;"	f
subsort	z3.obj/bin/python/z3/z3.py	/^    def subsort(self, other):$/;"	m	class:ArithSortRef
subsort	z3.obj/bin/python/z3/z3.py	/^    def subsort(self, other):$/;"	m	class:BitVecSortRef
subsort	z3.obj/bin/python/z3/z3.py	/^    def subsort(self, other):$/;"	m	class:BoolSortRef
subsort	z3.obj/bin/python/z3/z3.py	/^    def subsort(self, other):$/;"	m	class:SortRef
substitute	z3.obj/bin/python/z3/z3.py	/^def substitute(t, *m):$/;"	f
substitute	z3.obj/include/z3++.h	/^    inline expr expr::substitute(expr_vector const& dst) {$/;"	f	class:z3::expr
substitute	z3.obj/include/z3++.h	/^    inline expr expr::substitute(expr_vector const& src, expr_vector const& dst) {$/;"	f	class:z3::expr
substitute_vars	z3.obj/bin/python/z3/z3.py	/^def substitute_vars(t, *m):$/;"	f
sucMsg	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::sucMsg(const std::string& msg)$/;"	f	class:SVFUtil
succBBs	svf/include/Graphs/BasicBlockG.h	/^    std::vector<const SVFBasicBlock*> succBBs;$/;"	m	class:SVF::SVFBasicBlock
succMap	svf/include/CFL/CFLSolver.h	/^    DataMap succMap;                                                \/\/ succ map for nodes contains Label: Edgeset$/;"	m	class:SVF::POCRSolver
succ_const_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::const_succ_iterator succ_const_iterator;$/;"	t	namespace:SVF
succ_const_iterator	svf-llvm/include/SVF-LLVM/BasicTypes.h	/^typedef llvm::succ_const_iterator succ_const_iterator;$/;"	t	namespace:SVF
successors	svf/include/SVFIR/SVFStatements.h	/^    SuccAndCondPairVec successors;$/;"	m	class:SVF::BranchStmt
suffix_object	svf/lib/Util/cJSON.cpp	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
suffixof	z3.obj/include/z3++.h	/^    inline expr suffixof(expr const& a, expr const& b) {$/;"	f	namespace:z3
sum	z3.obj/include/z3++.h	/^    inline expr sum(expr_vector const& args) {$/;"	f	namespace:z3
supVarArg	svf/include/SVFIR/SVFVariables.h	/^    bool supVarArg;    \/\/\/ return true if this function supports variable arguments$/;"	m	class:SVF::FunObjVar
super	svf-llvm/include/SVF-LLVM/GEPTypeBridgeIterator.h	/^    typedef std::iterator<std::forward_iterator_tag,Type*, ptrdiff_t> super;$/;"	t	class:llvm::generic_bridge_gep_type_iterator
sval	svf/include/SVFIR/SVFVariables.h	/^    s64_t sval;$/;"	m	class:SVF::ConstIntObjVar
sval	svf/include/SVFIR/SVFVariables.h	/^    s64_t sval;$/;"	m	class:SVF::ConstIntValVar
svfI8Ty	svf/include/SVFIR/SVFType.h	/^    static SVFType* svfI8Ty; \/\/\/< 8-bit int type$/;"	m	class:SVF::SVFType
svfI8Ty	svf/lib/SVFIR/SVFType.cpp	/^SVFType* SVFType::svfI8Ty = nullptr;$/;"	m	class:SVF::SVFType	file:
svfPtrTy	svf/include/SVFIR/SVFType.h	/^    static SVFType* svfPtrTy; \/\/\/< ptr type$/;"	m	class:SVF::SVFType
svfPtrTy	svf/lib/SVFIR/SVFType.cpp	/^SVFType* SVFType::svfPtrTy = nullptr;$/;"	m	class:SVF::SVFType	file:
svfTypes	svf/include/Graphs/IRGraph.h	/^    SVFTypeSet svfTypes;$/;"	m	class:SVF::IRGraph
svfg	svf/include/CFL/CFLVF.h	/^    SVFG* svfg;$/;"	m	class:SVF::CFLVF
svfg	svf/include/MSSA/SVFGBuilder.h	/^    std::unique_ptr<SVFG> svfg;$/;"	m	class:SVF::SVFGBuilder
svfg	svf/include/SABER/ProgSlice.h	/^    const SVFG* svfg;						\/\/\/<  SVFG$/;"	m	class:SVF::ProgSlice
svfg	svf/include/SABER/SrcSnkDDA.h	/^    SVFG* svfg;$/;"	m	class:SVF::SrcSnkDDA
svfg	svf/include/WPA/FlowSensitive.h	/^    SVFG* svfg;$/;"	m	class:SVF::FlowSensitive
svfgBuilder	svf/include/DDA/DDAVFSolver.h	/^    SVFGBuilder svfgBuilder;			\/\/\/< SVFG Builder$/;"	m	class:SVF::DDAVFSolver
svfgHasSU	svf/include/WPA/FlowSensitive.h	/^    NodeBS svfgHasSU;$/;"	m	class:SVF::FlowSensitive
svfgNodeToCondMap	svf/include/SABER/ProgSlice.h	/^    SVFGNodeToCondMap svfgNodeToCondMap;	\/\/\/<  map a SVFGNode to its path condition starting from root$/;"	m	class:SVF::ProgSlice
svfgOptTimeEnd	svf/include/Graphs/SVFGStat.h	/^    double svfgOptTimeEnd;$/;"	m	class:SVF::SVFGStat
svfgOptTimeStart	svf/include/Graphs/SVFGStat.h	/^    double svfgOptTimeStart;$/;"	m	class:SVF::SVFGStat
svfgcry_md_algo_name_	svf-llvm/lib/extapi.c	/^const char *svfgcry_md_algo_name_(int errcode)$/;"	f
svfir	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    SVFIR* svfir;$/;"	m	class:SVF::LLVMModuleSet
svfir	svf-llvm/include/SVF-LLVM/SymbolTableBuilder.h	/^    SVFIR* svfir;$/;"	m	class:SVF::SymbolTableBuilder
svfir	svf/include/AE/Svfexe/AbsExtAPI.h	/^    SVFIR* svfir; \/\/\/< Pointer to the SVF intermediate representation.$/;"	m	class:SVF::AbsExtAPI
svfir	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    SVFIR* svfir;$/;"	m	class:SVF::AbstractInterpretation
svfir	svf/include/CFL/CFLBase.h	/^    SVFIR* svfir;$/;"	m	class:SVF::CFLBase
symToStrDump	svf/lib/CFL/CFGrammar.cpp	/^std::string GrammarBase::symToStrDump(Symbol sym) const$/;"	f	class:GrammarBase
symbol	z3.obj/include/z3++.h	/^        symbol(context & c, Z3_symbol s):object(c), m_sym(s) {}$/;"	f	class:z3::symbol
symbol	z3.obj/include/z3++.h	/^        symbol(symbol const & s):object(s), m_sym(s.m_sym) {}$/;"	f	class:z3::symbol
symbol	z3.obj/include/z3++.h	/^    class symbol : public object {$/;"	c	namespace:z3
szudzik	svf/include/Util/GeneralType.h	/^    static size_t szudzik(size_t a, size_t b)$/;"	f	struct:SVF::Hash
t	svf/lib/SABER/SaberCheckerAPI.cpp	/^    SaberCheckerAPI::CHECKER_TYPE t;$/;"	m	struct:__anon13::ei_pair	file:
t	svf/lib/Util/ThreadAPI.cpp	/^    ThreadAPI::TD_TYPE t;$/;"	m	struct:__anon14::ei_pair	file:
tactic	z3.obj/include/z3++.h	/^        tactic(context & c, Z3_tactic s):object(c) { init(s); }$/;"	f	class:z3::tactic
tactic	z3.obj/include/z3++.h	/^        tactic(context & c, char const * name):object(c) { Z3_tactic r = Z3_mk_tactic(c, name); check_error(); init(r); }$/;"	f	class:z3::tactic
tactic	z3.obj/include/z3++.h	/^        tactic(tactic const & s):object(s) { init(s.m_tactic); }$/;"	f	class:z3::tactic
tactic	z3.obj/include/z3++.h	/^    class tactic : public object {$/;"	c	namespace:z3
tactic_description	z3.obj/bin/python/z3/z3.py	/^def tactic_description(name, ctx=None):$/;"	f
tactics	z3.obj/bin/python/z3/z3.py	/^def tactics(ctx=None):$/;"	f
tail	svf/include/Util/WorkList.h	/^    Node *tail;$/;"	m	class:SVF::List
tcg	svf/include/MTA/MHP.h	/^    ThreadCallGraph* tcg;				\/\/\/< TCG$/;"	m	class:SVF::MHP
tcg	svf/include/MTA/MTA.h	/^    ThreadCallGraph* tcg;$/;"	m	class:SVF::MTA
tcg	svf/include/MTA/TCT.h	/^    ThreadCallGraph* tcg;$/;"	m	class:SVF::TCT
tcgSCC	svf/include/MTA/TCT.h	/^    ThreadCallGraphSCC* tcgSCC; \/\/\/ Thread call graph SCC$/;"	m	class:SVF::TCT
tct	svf/include/MTA/LockAnalysis.h	/^    TCT* tct;$/;"	m	class:SVF::LockAnalysis
tct	svf/include/MTA/MHP.h	/^    TCT* tct;							\/\/\/< TCT$/;"	m	class:SVF::MHP
tct	svf/include/MTA/MHP.h	/^    TCT* tct;$/;"	m	class:SVF::ForkJoinAnalysis
tct	svf/include/MTA/MTA.h	/^    std::unique_ptr<TCT> tct;$/;"	m	class:SVF::MTA
tdAPI	svf/include/Graphs/ThreadCallGraph.h	/^    ThreadAPI* tdAPI;		\/\/\/< Thread API$/;"	m	class:SVF::ThreadCallGraph
tdAPI	svf/include/Util/ThreadAPI.h	/^    static ThreadAPI* tdAPI;$/;"	m	class:SVF::ThreadAPI
tdAPIMap	svf/include/SABER/SaberCheckerAPI.h	/^    TDAPIMap tdAPIMap;$/;"	m	class:SVF::SaberCheckerAPI
tdAPIMap	svf/include/Util/ThreadAPI.h	/^    TDAPIMap tdAPIMap;$/;"	m	class:SVF::ThreadAPI
templateNameToInstancesMap	svf/include/Graphs/CHG.h	/^    NameToCHNodesMap templateNameToInstancesMap;$/;"	m	class:SVF::CHGraph
tempnam	svf-llvm/lib/extapi.c	/^char *tempnam(const char *dir, const char *pfx)$/;"	f
teq	svf-llvm/lib/DCHG.cpp	/^bool DCHGraph::teq(const DIType *t1, const DIType *t2)$/;"	f	class:DCHGraph
terminals	svf/include/CFL/CFGrammar.h	/^    Map<std::string, Kind> terminals;$/;"	m	class:SVF::GrammarBase
test	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool test(const Element& var) const$/;"	f	class:SVF::CondStdSet
test	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool test(const SingleCondVar& var) const$/;"	f	class:SVF::CondPointsToSet
test	svf/include/Util/SparseBitVector.h	/^    bool test(unsigned Idx) const$/;"	f	class:SVF::SparseBitVector
test	svf/include/Util/SparseBitVector.h	/^    bool test(unsigned Idx) const$/;"	f	struct:SVF::SparseBitVectorElement
test	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::test(u32_t n) const$/;"	f	class:SVF::PointsTo
test	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::test(u32_t bit) const$/;"	f	class:SVF::CoreBitVector
testAbsState	svf-llvm/tools/AE/ae.cpp	/^    void testAbsState()$/;"	f	class:AETest
testBinaryOpStmt	svf-llvm/tools/AE/ae.cpp	/^    void testBinaryOpStmt()$/;"	f	class:AETest
testIndCallReachability	svf/lib/DDA/ContextDDA.cpp	/^bool ContextDDA::testIndCallReachability(CxtLocDPItem& dpm, const FunObjVar* callee, const CallICFGNode* cs)$/;"	f	class:ContextDDA
testIndCallReachability	svf/lib/DDA/FlowDDA.cpp	/^bool FlowDDA::testIndCallReachability(LocDPItem&, const FunObjVar* callee, CallSiteID csId)$/;"	f	class:FlowDDA
testOutOfBudget	svf/include/DDA/DDAVFSolver.h	/^    inline bool testOutOfBudget(const DPIm& dpm)$/;"	f	class:SVF::DDAVFSolver
testRelExeState1_1	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState1_1()$/;"	f	class:SymblicAbstractionTest
testRelExeState1_2	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState1_2()$/;"	f	class:SymblicAbstractionTest
testRelExeState2_1	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState2_1()$/;"	f	class:SymblicAbstractionTest
testRelExeState2_2	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState2_2()$/;"	f	class:SymblicAbstractionTest
testRelExeState2_3	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState2_3()$/;"	f	class:SymblicAbstractionTest
testRelExeState2_4	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState2_4()$/;"	f	class:SymblicAbstractionTest
testRelExeState2_5	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState2_5()$/;"	f	class:SymblicAbstractionTest
testRelExeState3_1	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState3_1()$/;"	f	class:SymblicAbstractionTest
testRelExeState3_2	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState3_2()$/;"	f	class:SymblicAbstractionTest
testRelExeState3_3	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState3_3()$/;"	f	class:SymblicAbstractionTest
testRelExeState3_4	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState3_4()$/;"	f	class:SymblicAbstractionTest
testRelExeState4_1	svf-llvm/tools/AE/ae.cpp	/^    void testRelExeState4_1()$/;"	f	class:SymblicAbstractionTest
test_and_set	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool test_and_set(const Element& var)$/;"	f	class:SVF::CondStdSet
test_and_set	svf/include/MemoryModel/ConditionalPT.h	/^    inline bool test_and_set(const SingleCondVar& var)$/;"	f	class:SVF::CondPointsToSet
test_and_set	svf/include/Util/SparseBitVector.h	/^    bool test_and_set(unsigned Idx)$/;"	f	class:SVF::SparseBitVector
test_and_set	svf/include/Util/SparseBitVector.h	/^    bool test_and_set(unsigned Idx)$/;"	f	struct:SVF::SparseBitVectorElement
test_and_set	svf/lib/MemoryModel/PointsTo.cpp	/^bool PointsTo::test_and_set(u32_t n)$/;"	f	class:SVF::PointsTo
test_and_set	svf/lib/Util/CoreBitVector.cpp	/^bool CoreBitVector::test_and_set(u32_t bit)$/;"	f	class:SVF::CoreBitVector
test_print	svf-llvm/tools/AE/ae.cpp	/^    void test_print()$/;"	f	class:SymblicAbstractionTest
testsValidation	svf-llvm/tools/AE/ae.cpp	/^    void testsValidation()$/;"	f	class:SymblicAbstractionTest
testsValidation	svf/lib/SABER/DoubleFreeChecker.cpp	/^void DoubleFreeChecker::testsValidation(ProgSlice *slice)$/;"	f	class:DoubleFreeChecker
testsValidation	svf/lib/SABER/LeakChecker.cpp	/^void LeakChecker::testsValidation(const ProgSlice* slice)$/;"	f	class:LeakChecker
textdomain	svf-llvm/lib/extapi.c	/^char *textdomain(const char * domainname)$/;"	f
tgetstr	svf-llvm/lib/extapi.c	/^char *tgetstr(char *id, char **area)$/;"	f
tgoto	svf-llvm/lib/extapi.c	/^char *tgoto(const char *cap, int col, int row)$/;"	f
threadStmtToTheadInterLeav	svf/include/MTA/MHP.h	/^    ThreadStmtToThreadInterleav threadStmtToTheadInterLeav; \/\/\/ Map a statement to its thread interleavings$/;"	m	class:SVF::MHP
tid	svf/include/Util/CxtStmt.h	/^    NodeID tid;$/;"	m	class:SVF::CxtThreadProc
tid	svf/include/Util/CxtStmt.h	/^    NodeID tid;$/;"	m	class:SVF::CxtThreadStmt
tigetstr	svf-llvm/lib/extapi.c	/^char *tigetstr(char *capname)$/;"	f
time	svf/include/Util/SVFBugReport.h	/^    double time;     \/\/ time (sec)$/;"	m	class:SVF::SVFBugReport
timeLimitReached	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::timeLimitReached(int)$/;"	f	class:SVFUtil
timeOfBuildCFLGrammar	svf/include/CFL/CFLBase.h	/^    static double timeOfBuildCFLGrammar;            \/\/ Time of building grammarBase from text file$/;"	m	class:SVF::CFLBase
timeOfBuildCFLGrammar	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::timeOfBuildCFLGrammar = 0;$/;"	m	class:SVF::CFLBase	file:
timeOfBuildCFLGraph	svf/include/CFL/CFLBase.h	/^    static double timeOfBuildCFLGraph;              \/\/ Time of building CFLGraph$/;"	m	class:SVF::CFLBase
timeOfBuildCFLGraph	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::timeOfBuildCFLGraph = 0;$/;"	m	class:SVF::CFLBase	file:
timeOfBuildingLLVMModule	svf/include/Util/SVFStat.h	/^    static double timeOfBuildingLLVMModule;$/;"	m	class:SVF::SVFStat
timeOfBuildingLLVMModule	svf/lib/Util/SVFStat.cpp	/^double SVFStat::timeOfBuildingLLVMModule = 0;$/;"	m	class:SVFStat	file:
timeOfBuildingSVFIR	svf/include/Util/SVFStat.h	/^    static double timeOfBuildingSVFIR;$/;"	m	class:SVF::SVFStat
timeOfBuildingSVFIR	svf/lib/Util/SVFStat.cpp	/^double SVFStat::timeOfBuildingSVFIR = 0;$/;"	m	class:SVFStat	file:
timeOfBuildingSymbolTable	svf/include/Util/SVFStat.h	/^    static double timeOfBuildingSymbolTable;$/;"	m	class:SVF::SVFStat
timeOfBuildingSymbolTable	svf/lib/Util/SVFStat.cpp	/^double SVFStat::timeOfBuildingSymbolTable = 0;$/;"	m	class:SVFStat	file:
timeOfCollapse	svf/include/WPA/Andersen.h	/^    static double timeOfCollapse;$/;"	m	class:SVF::AndersenBase
timeOfCollapse	svf/lib/WPA/Andersen.cpp	/^double AndersenBase::timeOfCollapse = 0;$/;"	m	class:AndersenBase	file:
timeOfCreateMUCHI	svf/include/MSSA/MemSSA.h	/^    static double timeOfCreateMUCHI;	\/\/\/< Time for generating mu\/chi for load\/store\/calls$/;"	m	class:SVF::MemSSA
timeOfCreateMUCHI	svf/lib/MSSA/MemSSA.cpp	/^double MemSSA::timeOfCreateMUCHI  = 0;	\/\/\/< Time for generating mu\/chi for load\/store\/calls$/;"	m	class:MemSSA	file:
timeOfGeneratingMemRegions	svf/include/MSSA/MemSSA.h	/^    static double timeOfGeneratingMemRegions;	\/\/\/< Time for allocating regions$/;"	m	class:SVF::MemSSA
timeOfGeneratingMemRegions	svf/lib/MSSA/MemSSA.cpp	/^double MemSSA::timeOfGeneratingMemRegions = 0;	\/\/\/< Time for allocating regions$/;"	m	class:MemSSA	file:
timeOfInsertingPHI	svf/include/MSSA/MemSSA.h	/^    static double timeOfInsertingPHI;	\/\/\/< Time for inserting phis$/;"	m	class:SVF::MemSSA
timeOfInsertingPHI	svf/lib/MSSA/MemSSA.cpp	/^double MemSSA::timeOfInsertingPHI  = 0;	\/\/\/< Time for inserting phis$/;"	m	class:MemSSA	file:
timeOfNormalizeGrammar	svf/include/CFL/CFLBase.h	/^    static double timeOfNormalizeGrammar;           \/\/ Time of normalizing grammarBase to CFGrammar$/;"	m	class:SVF::CFLBase
timeOfNormalizeGrammar	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::timeOfNormalizeGrammar = 0;$/;"	m	class:SVF::CFLBase	file:
timeOfProcessCopyGep	svf/include/WPA/Andersen.h	/^    static double timeOfProcessCopyGep;$/;"	m	class:SVF::AndersenBase
timeOfProcessCopyGep	svf/lib/WPA/Andersen.cpp	/^double AndersenBase::timeOfProcessCopyGep = 0;$/;"	m	class:AndersenBase	file:
timeOfProcessLoadStore	svf/include/WPA/Andersen.h	/^    static double timeOfProcessLoadStore;$/;"	m	class:SVF::AndersenBase
timeOfProcessLoadStore	svf/lib/WPA/Andersen.cpp	/^double AndersenBase::timeOfProcessLoadStore = 0;$/;"	m	class:AndersenBase	file:
timeOfSCCDetection	svf/include/WPA/Andersen.h	/^    static double timeOfSCCDetection;$/;"	m	class:SVF::AndersenBase
timeOfSCCDetection	svf/lib/WPA/Andersen.cpp	/^double AndersenBase::timeOfSCCDetection = 0;$/;"	m	class:AndersenBase	file:
timeOfSCCMerges	svf/include/WPA/Andersen.h	/^    static double timeOfSCCMerges;$/;"	m	class:SVF::AndersenBase
timeOfSCCMerges	svf/lib/WPA/Andersen.cpp	/^double AndersenBase::timeOfSCCMerges = 0;$/;"	m	class:AndersenBase	file:
timeOfSSARenaming	svf/include/MSSA/MemSSA.h	/^    static double timeOfSSARenaming;	\/\/\/< Time for SSA rename$/;"	m	class:SVF::MemSSA
timeOfSSARenaming	svf/lib/MSSA/MemSSA.cpp	/^double MemSSA::timeOfSSARenaming  = 0;	\/\/\/< Time for SSA rename$/;"	m	class:MemSSA	file:
timeOfSolving	svf/include/CFL/CFLBase.h	/^    static double timeOfSolving;                    \/\/ time of solving CFL Reachability$/;"	m	class:SVF::CFLBase
timeOfSolving	svf/lib/CFL/CFLBase.cpp	/^double CFLBase::timeOfSolving = 0;$/;"	m	class:SVF::CFLBase	file:
timeOfUpdateCallGraph	svf/include/WPA/Andersen.h	/^    static double timeOfUpdateCallGraph;$/;"	m	class:SVF::AndersenBase
timeOfUpdateCallGraph	svf/lib/WPA/Andersen.cpp	/^double AndersenBase::timeOfUpdateCallGraph = 0;$/;"	m	class:AndersenBase	file:
timeStatMap	svf/include/Util/SVFStat.h	/^    TIMEStatMap timeStatMap;$/;"	m	class:SVF::SVFStat
tlPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    MutablePTData<Key, KeySet, Data, DataSet> tlPTData;$/;"	m	class:SVF::MutableVersionedPTData
tlPTData	svf/include/MemoryModel/PersistentPointsToDS.h	/^    PersistentPTData<Key, KeySet, Data, DataSet> tlPTData;$/;"	m	class:SVF::PersistentVersionedPTData
tmpnam	svf-llvm/lib/extapi.c	/^char *tmpnam(char *s)$/;"	f
tmpnam_r	svf-llvm/lib/extapi.c	/^char *tmpnam_r(char *s)$/;"	f
tmpvoid	svf-llvm/lib/extapi.c	/^void *tmpvoid(void)$/;"	f
tmpvoid64	svf-llvm/lib/extapi.c	/^void *tmpvoid64(void)$/;"	f
toIntVal	svf/include/AE/Core/RelationSolver.h	/^    inline Z3Expr toIntVal(s32_t f) const$/;"	f	class:SVF::RelationSolver
toIntZ3Expr	svf/include/AE/Core/RelationSolver.h	/^    virtual inline Z3Expr toIntZ3Expr(u32_t varId) const$/;"	f	class:SVF::RelationSolver
toNodeBS	svf/lib/MemoryModel/PointsTo.cpp	/^NodeBS PointsTo::toNodeBS() const$/;"	f	class:SVF::PointsTo
toRealVal	svf/include/AE/Core/RelationSolver.h	/^    inline Z3Expr toRealVal(BoundedDouble f) const$/;"	f	class:SVF::RelationSolver
toString	svf/include/AE/Core/AbstractState.h	/^    std::string toString() const$/;"	f	class:SVF::AbstractState
toString	svf/include/AE/Core/AbstractValue.h	/^    std::string toString() const$/;"	f	class:SVF::AbstractValue
toString	svf/include/AE/Core/AddressValue.h	/^    const std::string toString() const$/;"	f	class:SVF::AddressValue
toString	svf/include/AE/Core/IntervalValue.h	/^    const std::string toString() const$/;"	f	class:SVF::IntervalValue
toString	svf/include/Graphs/CDG.h	/^    virtual const std::string toString() const$/;"	f	class:SVF::CDGEdge
toString	svf/include/Graphs/CDG.h	/^    virtual const std::string toString() const$/;"	f	class:SVF::CDGNode
toString	svf/include/Graphs/WTO.h	/^    [[nodiscard]] std::string toString() const$/;"	f	class:SVF::WTO
toString	svf/include/Graphs/WTO.h	/^    [[nodiscard]] std::string toString() const$/;"	f	class:SVF::WTOCycleDepth
toString	svf/include/MemoryModel/ConditionalPT.h	/^    inline std::string toString() const$/;"	f	class:SVF::CondStdSet
toString	svf/include/MemoryModel/ConditionalPT.h	/^    inline std::string toString() const$/;"	f	class:SVF::CondVar
toString	svf/include/SVFIR/SVFVariables.h	/^    virtual const std::string toString() const$/;"	f	class:SVF::BlackHoleValVar
toString	svf/include/Util/DPItem.h	/^    inline std::string toString() const$/;"	f	class:SVF::ContextCond
toString	svf/lib/Graphs/BasicBlockG.cpp	/^const std::string BasicBlockEdge::toString() const$/;"	f	class:BasicBlockEdge
toString	svf/lib/Graphs/BasicBlockG.cpp	/^const std::string SVFBasicBlock::toString() const$/;"	f	class:SVFBasicBlock
toString	svf/lib/Graphs/CallGraph.cpp	/^const std::string CallGraphEdge::toString() const$/;"	f	class:CallGraphEdge
toString	svf/lib/Graphs/CallGraph.cpp	/^const std::string CallGraphNode::toString() const$/;"	f	class:CallGraphNode
toString	svf/lib/Graphs/ConsG.cpp	/^const std::string ConstraintNode::toString() const$/;"	f	class:ConstraintNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string CallCFGEdge::toString() const$/;"	f	class:CallCFGEdge
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string CallICFGNode::toString() const$/;"	f	class:CallICFGNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string FunEntryICFGNode::toString() const$/;"	f	class:FunEntryICFGNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string FunExitICFGNode::toString() const$/;"	f	class:FunExitICFGNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string GlobalICFGNode::toString() const$/;"	f	class:GlobalICFGNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string ICFGEdge::toString() const$/;"	f	class:ICFGEdge
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string ICFGNode::toString() const$/;"	f	class:ICFGNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string IntraCFGEdge::toString() const$/;"	f	class:IntraCFGEdge
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string IntraICFGNode::toString() const$/;"	f	class:IntraICFGNode
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string RetCFGEdge::toString() const$/;"	f	class:RetCFGEdge
toString	svf/lib/Graphs/ICFG.cpp	/^const std::string RetICFGNode::toString() const$/;"	f	class:RetICFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string ActualINSVFGNode::toString() const$/;"	f	class:ActualINSVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string ActualOUTSVFGNode::toString() const$/;"	f	class:ActualOUTSVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string CallIndSVFGEdge::toString() const$/;"	f	class:CallIndSVFGEdge
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string FormalINSVFGNode::toString() const$/;"	f	class:FormalINSVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string FormalOUTSVFGNode::toString() const$/;"	f	class:FormalOUTSVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string IndirectSVFGEdge::toString() const$/;"	f	class:IndirectSVFGEdge
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string InterMSSAPHISVFGNode::toString() const$/;"	f	class:InterMSSAPHISVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string IntraIndSVFGEdge::toString() const$/;"	f	class:IntraIndSVFGEdge
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string IntraMSSAPHISVFGNode::toString() const$/;"	f	class:IntraMSSAPHISVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string MRSVFGNode::toString() const$/;"	f	class:MRSVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string MSSAPHISVFGNode::toString() const$/;"	f	class:MSSAPHISVFGNode
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string RetIndSVFGEdge::toString() const$/;"	f	class:RetIndSVFGEdge
toString	svf/lib/Graphs/SVFG.cpp	/^const std::string ThreadMHPIndSVFGEdge::toString() const$/;"	f	class:ThreadMHPIndSVFGEdge
toString	svf/lib/Graphs/ThreadCallGraph.cpp	/^const std::string ThreadForkEdge::toString() const$/;"	f	class:ThreadForkEdge
toString	svf/lib/Graphs/ThreadCallGraph.cpp	/^const std::string ThreadJoinEdge::toString() const$/;"	f	class:ThreadJoinEdge
toString	svf/lib/Graphs/VFG.cpp	/^const std::string ActualParmVFGNode::toString() const$/;"	f	class:ActualParmVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string ActualRetVFGNode::toString() const$/;"	f	class:ActualRetVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string AddrVFGNode::toString() const$/;"	f	class:AddrVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string ArgumentVFGNode::toString() const$/;"	f	class:ArgumentVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string BinaryOPVFGNode::toString() const$/;"	f	class:BinaryOPVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string BranchVFGNode::toString() const$/;"	f	class:BranchVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string CallDirSVFGEdge::toString() const$/;"	f	class:CallDirSVFGEdge
toString	svf/lib/Graphs/VFG.cpp	/^const std::string CmpVFGNode::toString() const$/;"	f	class:CmpVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string CopyVFGNode::toString() const$/;"	f	class:CopyVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string DirectSVFGEdge::toString() const$/;"	f	class:DirectSVFGEdge
toString	svf/lib/Graphs/VFG.cpp	/^const std::string FormalParmVFGNode::toString() const$/;"	f	class:FormalParmVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string FormalRetVFGNode::toString() const$/;"	f	class:FormalRetVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string GepVFGNode::toString() const$/;"	f	class:GepVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string InterPHIVFGNode::toString() const$/;"	f	class:InterPHIVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string IntraDirSVFGEdge::toString() const$/;"	f	class:IntraDirSVFGEdge
toString	svf/lib/Graphs/VFG.cpp	/^const std::string IntraPHIVFGNode::toString() const$/;"	f	class:IntraPHIVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string LoadVFGNode::toString() const$/;"	f	class:LoadVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string NullPtrVFGNode::toString() const$/;"	f	class:NullPtrVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string PHIVFGNode::toString() const$/;"	f	class:PHIVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string RetDirSVFGEdge::toString() const$/;"	f	class:RetDirSVFGEdge
toString	svf/lib/Graphs/VFG.cpp	/^const std::string StmtVFGNode::toString() const$/;"	f	class:StmtVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string StoreVFGNode::toString() const$/;"	f	class:StoreVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string UnaryOPVFGNode::toString() const$/;"	f	class:UnaryOPVFGNode
toString	svf/lib/Graphs/VFG.cpp	/^const std::string VFGEdge::toString() const$/;"	f	class:VFGEdge
toString	svf/lib/Graphs/VFG.cpp	/^const std::string VFGNode::toString() const$/;"	f	class:VFGNode
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string AddrStmt::toString() const$/;"	f	class:AddrStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string BinaryOPStmt::toString() const$/;"	f	class:BinaryOPStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string BranchStmt::toString() const$/;"	f	class:BranchStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string CallPE::toString() const$/;"	f	class:CallPE
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string CmpStmt::toString() const$/;"	f	class:CmpStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string CopyStmt::toString() const$/;"	f	class:CopyStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string GepStmt::toString() const$/;"	f	class:GepStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string LoadStmt::toString() const$/;"	f	class:LoadStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string PhiStmt::toString() const$/;"	f	class:PhiStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string RetPE::toString() const$/;"	f	class:RetPE
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string SVFStmt::toString() const$/;"	f	class:SVFStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string SelectStmt::toString() const$/;"	f	class:SelectStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string StoreStmt::toString() const$/;"	f	class:StoreStmt
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string TDForkPE::toString() const$/;"	f	class:TDForkPE
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string TDJoinPE::toString() const$/;"	f	class:TDJoinPE
toString	svf/lib/SVFIR/SVFStatements.cpp	/^const std::string UnaryOPStmt::toString() const$/;"	f	class:UnaryOPStmt
toString	svf/lib/SVFIR/SVFType.cpp	/^std::string SVFType::toString() const$/;"	f	class:SVF::SVFType
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ArgValVar::toString() const$/;"	f	class:ArgValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string BaseObjVar::toString() const$/;"	f	class:BaseObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstAggObjVar::toString() const$/;"	f	class:ConstAggObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstAggValVar::toString() const$/;"	f	class:ConstAggValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstDataObjVar::toString() const$/;"	f	class:ConstDataObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstDataValVar::toString() const$/;"	f	class:ConstDataValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstFPObjVar::toString() const$/;"	f	class:ConstFPObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstFPValVar::toString() const$/;"	f	class:ConstFPValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstIntObjVar::toString() const$/;"	f	class:ConstIntObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstIntValVar::toString() const$/;"	f	class:ConstIntValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstNullPtrObjVar::toString() const$/;"	f	class:ConstNullPtrObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ConstNullPtrValVar::toString() const$/;"	f	class:ConstNullPtrValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string DummyObjVar::toString() const$/;"	f	class:DummyObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string DummyValVar::toString() const$/;"	f	class:DummyValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string FunObjVar::toString() const$/;"	f	class:FunObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string FunValVar::toString() const$/;"	f	class:FunValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string GepObjVar::toString() const$/;"	f	class:GepObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string GepValVar::toString() const$/;"	f	class:GepValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string GlobalObjVar::toString() const$/;"	f	class:GlobalObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string GlobalValVar::toString() const$/;"	f	class:GlobalValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string HeapObjVar::toString() const$/;"	f	class:HeapObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ObjVar::toString() const$/;"	f	class:ObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string RetValPN::toString() const$/;"	f	class:RetValPN
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string SVFVar::toString() const$/;"	f	class:SVFVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string StackObjVar::toString() const$/;"	f	class:StackObjVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string ValVar::toString() const$/;"	f	class:ValVar
toString	svf/lib/SVFIR/SVFVariables.cpp	/^const std::string VarArgValPN::toString() const$/;"	f	class:VarArgValPN
toZ3Expr	svf/include/AE/Core/RelExeState.h	/^    virtual inline Z3Expr toZ3Expr(u32_t varId) const$/;"	f	class:SVF::RelExeState
to_check_result	z3.obj/include/z3++.h	/^    inline check_result to_check_result(Z3_lbool l) {$/;"	f	namespace:z3
to_expr	z3.obj/include/z3++.h	/^    inline expr to_expr(context & c, Z3_ast a) {$/;"	f	namespace:z3
to_format	z3.obj/bin/python/z3/z3printer.py	/^def to_format(arg, size=None):$/;"	f
to_func_decl	z3.obj/include/z3++.h	/^    inline func_decl to_func_decl(context & c, Z3_func_decl f) {$/;"	f	namespace:z3
to_int	z3.obj/include/z3++.h	/^        int to_int() const { assert(kind() == Z3_INT_SYMBOL); return Z3_get_symbol_int(ctx(), m_sym); }$/;"	f	class:z3::symbol
to_re	z3.obj/include/z3++.h	/^    inline expr to_re(expr const& s) {$/;"	f	namespace:z3
to_real	z3.obj/include/z3++.h	/^    inline expr to_real(expr const & a) { Z3_ast r = Z3_mk_int2real(a.ctx(), a); a.check_error(); return expr(a.ctx(), r); }$/;"	f	namespace:z3
to_smt2	z3.obj/bin/python/z3/z3.py	/^    def to_smt2(self):$/;"	m	class:Solver
to_smt2	z3.obj/include/z3++.h	/^        std::string to_smt2(char const* status = "unknown") {$/;"	f	class:z3::solver
to_sort	z3.obj/include/z3++.h	/^    inline sort to_sort(context & c, Z3_sort s) {$/;"	f	namespace:z3
to_string	svf/include/AE/Core/NumericValue.h	/^    inline virtual const std::string to_string() const$/;"	f	class:SVF::BoundedDouble
to_string	svf/include/AE/Core/NumericValue.h	/^    inline virtual const std::string to_string() const$/;"	f	class:SVF::BoundedInt
to_string	svf/include/Util/Z3Expr.h	/^    inline const std::string to_string() const$/;"	f	class:SVF::Z3Expr
to_string	z3.obj/bin/python/z3/z3.py	/^    def to_string(self, queries):$/;"	m	class:Fixedpoint
to_string	z3.obj/include/z3++.h	/^        std::string to_string() const { return Z3_param_descrs_to_string(ctx(), m_descrs); }$/;"	f	class:z3::param_descrs
to_string	z3.obj/include/z3++.h	/^        std::string to_string() const { return std::string(Z3_ast_to_string(ctx(), m_ast)); }$/;"	f	class:z3::ast
to_string	z3.obj/include/z3++.h	/^        std::string to_string() { return Z3_fixedpoint_to_string(ctx(), m_fp, 0, 0); }$/;"	f	class:z3::fixedpoint
to_string	z3.obj/include/z3++.h	/^        std::string to_string(expr_vector const& queries) {$/;"	f	class:z3::fixedpoint
to_symbol	z3.obj/bin/python/z3/z3.py	/^def to_symbol(s, ctx=None):$/;"	f
top	svf/include/AE/Core/AbstractState.h	/^    AbstractState top() const$/;"	f	class:SVF::AbstractState
top	svf/include/AE/Core/IntervalValue.h	/^    static IntervalValue top()$/;"	f	class:SVF::IntervalValue
topoNodeStack	svf/include/Graphs/SCC.h	/^    inline GNodeStack &topoNodeStack()$/;"	f	class:SVF::SCCDetection
topoNodeStack	svf/include/Graphs/SCC.h	/^    inline const GNodeStack& topoNodeStack() const$/;"	f	class:SVF::SCCDetection
totalCallSiteNum	svf/include/Graphs/CallGraph.h	/^    static CallSiteID totalCallSiteNum;	\/\/\/< CallSiteIDs, start from 1;$/;"	m	class:SVF::CallGraph
totalCallSiteNum	svf/lib/Graphs/CallGraph.cpp	/^CallSiteID CallGraph::totalCallSiteNum=1;$/;"	m	class:CallGraph	file:
totalComplements	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t totalComplements;$/;"	m	class:SVF::PersistentPointsToCache
totalCondNum	svf/include/SABER/SaberCondAllocator.h	/^    static u32_t totalCondNum; \/\/\/ a counter for fresh condition$/;"	m	class:SVF::SaberCondAllocator
totalCondNum	svf/lib/SABER/SaberCondAllocator.cpp	/^u32_t SaberCondAllocator::totalCondNum = 0;$/;"	m	class:SaberCondAllocator	file:
totalDirCallEdge	svf/include/Graphs/SVFGStat.h	/^    int totalDirCallEdge;$/;"	m	class:SVF::SVFGStat
totalDirRetEdge	svf/include/Graphs/SVFGStat.h	/^    int totalDirRetEdge;$/;"	m	class:SVF::SVFGStat
totalEdgeNum	svf/include/SVFIR/SVFStatements.h	/^    static u32_t totalEdgeNum; \/\/\/< Total edge number$/;"	m	class:SVF::SVFStmt
totalICFGNode	svf/include/Graphs/ICFG.h	/^    NodeID totalICFGNode;$/;"	m	class:SVF::ICFG
totalInEdge	svf/include/Graphs/SVFGStat.h	/^    int totalInEdge;	\/\/\/< Total number of incoming SVFG edges$/;"	m	class:SVF::SVFGStat
totalIndCallEdge	svf/include/Graphs/SVFGStat.h	/^    int totalIndCallEdge;$/;"	m	class:SVF::SVFGStat
totalIndEdgeLabels	svf/include/Graphs/SVFGStat.h	/^    int totalIndEdgeLabels; \/\/\/< Total number of l --o--> lp$/;"	m	class:SVF::SVFGStat
totalIndInEdge	svf/include/Graphs/SVFGStat.h	/^    int totalIndInEdge;	\/\/\/< Total number of indirect SVFG edges$/;"	m	class:SVF::SVFGStat
totalIndOutEdge	svf/include/Graphs/SVFGStat.h	/^    int totalIndOutEdge;$/;"	m	class:SVF::SVFGStat
totalIndRetEdge	svf/include/Graphs/SVFGStat.h	/^    int totalIndRetEdge;$/;"	m	class:SVF::SVFGStat
totalIntersections	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t totalIntersections;$/;"	m	class:SVF::PersistentPointsToCache
totalKind	svf/include/CFL/CFGrammar.h	/^    u32_t totalKind;$/;"	m	class:SVF::GrammarBase
totalMRNum	svf/include/MSSA/MemRegion.h	/^    static u32_t totalMRNum;$/;"	m	class:SVF::MemRegion
totalOutEdge	svf/include/Graphs/SVFGStat.h	/^    int totalOutEdge;	\/\/\/< Total number of outgoing SVFG edges$/;"	m	class:SVF::SVFGStat
totalPTAPAGEdge	svf/include/Graphs/IRGraph.h	/^    u32_t totalPTAPAGEdge;$/;"	m	class:SVF::IRGraph
totalSymNum	svf/include/Graphs/IRGraph.h	/^    NodeID totalSymNum;$/;"	m	class:SVF::IRGraph
totalUnions	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t totalUnions;$/;"	m	class:SVF::PersistentPointsToCache
totalVERNum	svf/include/MSSA/MSSAMuChi.h	/^    static u32_t totalVERNum;$/;"	m	class:SVF::MRVer
totalVERNum	svf/lib/MSSA/MemRegion.cpp	/^u32_t MRVer::totalVERNum = 0;$/;"	m	class:MRVer	file:
totalVFGNode	svf/include/Graphs/VFG.h	/^    NodeID totalVFGNode;$/;"	m	class:SVF::VFG
touchCxtStmt	svf/include/MTA/LockAnalysis.h	/^    inline void touchCxtStmt(CxtStmt& cts)$/;"	f	class:SVF::LockAnalysis
tparm	svf-llvm/lib/extapi.c	/^char *tparm(char *str, ...)$/;"	f
trail	z3.obj/bin/python/z3/z3.py	/^    def trail(self):$/;"	m	class:Solver
trail	z3.obj/include/z3++.h	/^        expr_vector trail() const { Z3_ast_vector r = Z3_solver_get_trail(ctx(), m_solver); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::solver
trail	z3.obj/include/z3++.h	/^        expr_vector trail(array<unsigned>& levels) const { $/;"	f	class:z3::solver
trail_levels	z3.obj/bin/python/z3/z3.py	/^    def trail_levels(self):$/;"	m	class:Solver
transitive_closure	z3.obj/include/z3++.h	/^        func_decl transitive_closure(func_decl const&) {$/;"	f	class:z3::func_decl
translate	z3.obj/bin/python/z3/z3.py	/^    def translate(self, other_ctx):$/;"	m	class:AstVector
translate	z3.obj/bin/python/z3/z3.py	/^    def translate(self, other_ctx):$/;"	m	class:FuncInterp
translate	z3.obj/bin/python/z3/z3.py	/^    def translate(self, target):$/;"	m	class:AstRef
translate	z3.obj/bin/python/z3/z3.py	/^    def translate(self, target):$/;"	m	class:Goal
translate	z3.obj/bin/python/z3/z3.py	/^    def translate(self, target):$/;"	m	class:ModelRef
translate	z3.obj/bin/python/z3/z3.py	/^    def translate(self, target):$/;"	m	class:Solver
translate	z3.obj/include/z3++.h	/^        struct translate {};$/;"	s	class:z3::model
translate	z3.obj/include/z3++.h	/^        struct translate {};$/;"	s	class:z3::solver
traverseDendrogram	svf/lib/Util/NodeIDAllocator.cpp	/^void NodeIDAllocator::Clusterer::traverseDendrogram(std::vector<NodeID> &nodeMap, const int *dendrogram, const size_t numObjects, unsigned &allocCounter, Set<int> &visited, const int index, const std::vector<NodeID> &regionNodeMap)$/;"	f	class:SVF::NodeIDAllocator::Clusterer
traverseOnICFG	svf-llvm/tools/Example/svf-ex.cpp	/^void traverseOnICFG(ICFG* icfg, const ICFGNode* iNode)$/;"	f
traverseOnVFG	svf-llvm/tools/Example/svf-ex.cpp	/^void traverseOnVFG(const SVFG* vfg, const SVFVar* svfval)$/;"	f
tree_order	z3.obj/include/z3++.h	/^    inline func_decl tree_order(sort const& a, unsigned index) {$/;"	f	namespace:z3
true	svf/lib/Util/cJSON.cpp	63;"	d	file:
true	svf/lib/Util/cJSON.cpp	65;"	d	file:
try_for	z3.obj/include/z3++.h	/^    inline tactic try_for(tactic const & t, unsigned ms) {$/;"	f	namespace:z3
ttyname	svf-llvm/lib/extapi.c	/^char *ttyname(int fd)$/;"	f
tuple_sort	z3.obj/include/z3++.h	/^    inline func_decl context::tuple_sort(char const * name, unsigned n, char const * const * names, sort const* sorts, func_decl_vector & projs) {$/;"	f	class:z3::context
type	svf/include/MSSA/MSSAMuChi.h	/^    DEFTYPE type;$/;"	m	class:SVF::MSSADEF
type	svf/include/MSSA/MSSAMuChi.h	/^    MUTYPE type;$/;"	m	class:SVF::MSSAMU
type	svf/include/MemoryModel/PointsTo.h	/^    enum Type type;$/;"	m	class:SVF::PointsTo	typeref:enum:SVF::PointsTo::Type
type	svf/include/SVFIR/ObjTypeInfo.h	/^    const SVFType* type;$/;"	m	class:SVF::ObjTypeInfo
type	svf/include/SVFIR/SVFValue.h	/^    const SVFType* type; \/\/\/< SVF type$/;"	m	class:SVF::SVFValue
type	svf/include/Util/SVFUtil.h	/^    typedef void type;$/;"	t	struct:SVF::SVFUtil::make_void
type	svf/include/Util/cJSON.h	/^    int type;$/;"	m	struct:cJSON
typeAndInfoFlag	svf/include/Util/SVFBugReport.h	/^    u32_t typeAndInfoFlag;$/;"	m	class:SVF::SVFBugEvent
typeInference	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    ObjTypeInference* typeInference;$/;"	m	class:SVF::LLVMModuleSet
typeInfo	svf/include/SVFIR/SVFVariables.h	/^    ObjTypeInfo* typeInfo;$/;"	m	class:SVF::BaseObjVar
typeLocSetsMap	svf/include/SVFIR/SVFIR.h	/^    TypeLocSetsMap typeLocSetsMap;	\/\/\/< Map an arg to its base SVFType* and all its field location sets$/;"	m	class:SVF::SVFIR
typeName	svf-llvm/include/SVF-LLVM/DCHG.h	/^    std::string typeName;$/;"	m	class:SVF::DCHNode
typeOfElement	svf/include/SVFIR/SVFType.h	/^    const SVFType* typeOfElement; \/\/\/ For printing & debugging$/;"	m	class:SVF::SVFArrayType
typeSizeDiffTest	svf-llvm/lib/ObjTypeInference.cpp	/^void ObjTypeInference::typeSizeDiffTest(const PointerType *oPTy, const Type *iTy, const Value *val)$/;"	f	class:ObjTypeInference
typedefs	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Set<const DIDerivedType *> typedefs;$/;"	m	class:SVF::DCHNode
typeinfo	svf/include/SVFIR/SVFType.h	/^    StInfo* typeinfo;   \/\/\/< SVF's TypeInfo$/;"	m	class:SVF::SVFType
u	z3.obj/bin/python/z3/z3printer.py	/^    def u(x):$/;"	f
u	z3.obj/bin/python/z3/z3printer.py	/^    def u(x):$/;"	f	function:_is_sub
u16_t	svf/include/Util/GeneralType.h	/^typedef unsigned short u16_t;$/;"	t	namespace:SVF
u32_t	svf/include/Util/CommandLine.h	/^typedef unsigned u32_t;$/;"	t
u32_t	svf/include/Util/GeneralType.h	/^typedef unsigned u32_t;$/;"	t	namespace:SVF
u64_t	svf/include/Util/GeneralType.h	/^typedef unsigned long long u64_t;$/;"	t	namespace:SVF
u8_t	svf/include/Util/GeneralType.h	/^typedef unsigned char u8_t;$/;"	t	namespace:SVF
ub	svf/include/AE/Core/IntervalValue.h	/^    const BoundedInt &ub() const$/;"	f	class:SVF::IntervalValue
udiv	z3.obj/include/z3++.h	/^    inline expr udiv(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvudiv(a.ctx(), a, b)); }$/;"	f	namespace:z3
udiv	z3.obj/include/z3++.h	/^    inline expr udiv(expr const & a, int b) { return udiv(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
udiv	z3.obj/include/z3++.h	/^    inline expr udiv(int a, expr const & b) { return udiv(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
uge	z3.obj/include/z3++.h	/^    inline expr uge(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvuge(a.ctx(), a, b)); }$/;"	f	namespace:z3
uge	z3.obj/include/z3++.h	/^    inline expr uge(expr const & a, int b) { return uge(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
uge	z3.obj/include/z3++.h	/^    inline expr uge(int a, expr const & b) { return uge(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
ugt	z3.obj/include/z3++.h	/^    inline expr ugt(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvugt(a.ctx(), a, b)); }$/;"	f	namespace:z3
ugt	z3.obj/include/z3++.h	/^    inline expr ugt(expr const & a, int b) { return ugt(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
ugt	z3.obj/include/z3++.h	/^    inline expr ugt(int a, expr const & b) { return ugt(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
uint_value	z3.obj/include/z3++.h	/^        unsigned uint_value(unsigned i) const { unsigned r = Z3_stats_get_uint_value(ctx(), m_stats, i); check_error(); return r; }$/;"	f	class:z3::stats
ule	z3.obj/include/z3++.h	/^    inline expr ule(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvule(a.ctx(), a, b)); }$/;"	f	namespace:z3
ule	z3.obj/include/z3++.h	/^    inline expr ule(expr const & a, int b) { return ule(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
ule	z3.obj/include/z3++.h	/^    inline expr ule(int a, expr const & b) { return ule(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
ult	z3.obj/include/z3++.h	/^    inline expr ult(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvult(a.ctx(), a, b)); }$/;"	f	namespace:z3
ult	z3.obj/include/z3++.h	/^    inline expr ult(expr const & a, int b) { return ult(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
ult	z3.obj/include/z3++.h	/^    inline expr ult(int a, expr const & b) { return ult(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
uninterpreted_sort	z3.obj/include/z3++.h	/^    inline sort context::uninterpreted_sort(char const* name) {$/;"	f	class:z3::context
uninterpreted_sort	z3.obj/include/z3++.h	/^    inline sort context::uninterpreted_sort(symbol const& name) {$/;"	f	class:z3::context
unionCache	svf/include/MemoryModel/PersistentPointsToCache.h	/^    OpCache unionCache;$/;"	m	class:SVF::PersistentPointsToCache
unionDDAPts	svf/include/DDA/DDAVFSolver.h	/^    virtual bool unionDDAPts(CPtSet& pts, const CPtSet& targetPts)$/;"	f	class:SVF::DDAVFSolver
unionDDAPts	svf/include/DDA/DDAVFSolver.h	/^    virtual bool unionDDAPts(DPIm dpm, const CPtSet& targetPts)$/;"	f	class:SVF::DDAVFSolver
unionPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline bool unionPts(DataSet& dstDataSet, const DataSet& srcDataSet)$/;"	f	class:SVF::MutableDFPTData
unionPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline bool unionPts(DataSet& dstDataSet, const DataSet& srcDataSet)$/;"	f	class:SVF::MutablePTData
unionPts	svf/include/MemoryModel/PersistentPointsToCache.h	/^    PointsToID unionPts(PointsToID lhs, PointsToID rhs)$/;"	f	class:SVF::PersistentPointsToCache
unionPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool unionPts(CVar id, CVar ptd)$/;"	f	class:SVF::CondPTAImpl
unionPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool unionPts(CVar id, const CPtSet& target)$/;"	f	class:SVF::CondPTAImpl
unionPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool unionPts(NodeID id, NodeID ptd)$/;"	f	class:SVF::BVDataPTAImpl
unionPts	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool unionPts(NodeID id, const PointsTo& target)$/;"	f	class:SVF::BVDataPTAImpl
unionPts	svf/include/WPA/Andersen.h	/^    virtual inline bool unionPts(NodeID id, NodeID ptd)$/;"	f	class:SVF::Andersen
unionPts	svf/include/WPA/Andersen.h	/^    virtual inline bool unionPts(NodeID id, const PointsTo& target)$/;"	f	class:SVF::Andersen
unionPtsFromId	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline bool unionPtsFromId(const Key &dstKey, PointsToID srcId)$/;"	f	class:SVF::PersistentPTData
unionPtsFromIn	svf/include/WPA/FlowSensitive.h	/^    virtual inline bool unionPtsFromIn(const SVFGNode* stmt, NodeID srcVar, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
unionPtsFromTop	svf/include/WPA/FlowSensitive.h	/^    virtual inline bool unionPtsFromTop(const SVFGNode* stmt, NodeID srcVar, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
unionPtsThroughIds	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline bool unionPtsThroughIds(PointsToID &dst, PointsToID &src)$/;"	f	class:SVF::PersistentDFPTData
unionWith	svf/include/Util/SparseBitVector.h	/^    bool unionWith(const SparseBitVectorElement &RHS)$/;"	f	struct:SVF::SparseBitVectorElement
uniqueComplements	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t uniqueComplements;$/;"	m	class:SVF::PersistentPointsToCache
uniqueIntersections	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t uniqueIntersections;$/;"	m	class:SVF::PersistentPointsToCache
uniqueUnions	svf/include/MemoryModel/PersistentPointsToCache.h	/^    u64_t uniqueUnions;$/;"	m	class:SVF::PersistentPointsToCache
unit	z3.obj/include/z3++.h	/^        expr unit() const {$/;"	f	class:z3::expr
units	z3.obj/bin/python/z3/z3.py	/^    def units(self):$/;"	m	class:Solver
units	z3.obj/include/z3++.h	/^        expr_vector units() const { Z3_ast_vector r = Z3_solver_get_units(ctx(), m_solver); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::solver
unknown	z3.obj/bin/python/z3/z3.py	/^unknown = CheckSatResult(Z3_L_UNDEF)$/;"	v
unknown	z3.obj/include/z3++.h	/^        unsat, sat, unknown$/;"	e	enum:z3::check_result
unlocksites	svf/include/MTA/LockAnalysis.h	/^    InstSet unlocksites;$/;"	m	class:SVF::LockAnalysis
unsat	z3.obj/bin/python/z3/z3.py	/^unsat   = CheckSatResult(Z3_L_FALSE)$/;"	v
unsat	z3.obj/include/z3++.h	/^        unsat, sat, unknown$/;"	e	enum:z3::check_result
unsat_core	z3.obj/bin/python/z3/z3.py	/^    def unsat_core(self):$/;"	m	class:Optimize
unsat_core	z3.obj/bin/python/z3/z3.py	/^    def unsat_core(self):$/;"	m	class:Solver
unsat_core	z3.obj/include/z3++.h	/^        expr_vector unsat_core() const { Z3_ast_vector r = Z3_optimize_get_unsat_core(ctx(), m_opt); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::optimize
unsat_core	z3.obj/include/z3++.h	/^        expr_vector unsat_core() const { Z3_ast_vector r = Z3_solver_get_unsat_core(ctx(), m_solver); check_error(); return expr_vector(ctx(), r); }$/;"	f	class:z3::solver
unset	svf/lib/Util/NodeIDAllocator.cpp	/^void NodeIDAllocator::unset(void)$/;"	f	class:SVF::NodeIDAllocator
updateAliasMRs	svf/lib/MSSA/MemRegion.cpp	/^void MRGenerator::updateAliasMRs()$/;"	f	class:MRGenerator
updateAncestorThreads	svf/lib/MTA/MHP.cpp	/^void MHP::updateAncestorThreads(NodeID curTid)$/;"	f	class:MHP
updateCachedPointsTo	svf/include/DDA/DDAVFSolver.h	/^    virtual inline void updateCachedPointsTo(const DPIm& dpm, const CPtSet& pts)$/;"	f	class:SVF::DDAVFSolver
updateCallGraph	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::updateCallGraph(CallGraph* callgraph)$/;"	f	class:SVFIRBuilder
updateCallGraph	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual inline bool updateCallGraph(const CallSiteToFunPtrMap&)$/;"	f	class:SVF::BVDataPTAImpl
updateCallGraph	svf/lib/CFL/CFLAlias.cpp	/^bool CFLAlias::updateCallGraph(const CallSiteToFunPtrMap& callsites)$/;"	f	class:CFLAlias
updateCallGraph	svf/lib/Graphs/ICFG.cpp	/^void ICFG::updateCallGraph(CallGraph* callgraph)$/;"	f	class:ICFG
updateCallGraph	svf/lib/Graphs/ThreadCallGraph.cpp	/^void ThreadCallGraph::updateCallGraph(PointerAnalysis* pta)$/;"	f	class:ThreadCallGraph
updateCallGraph	svf/lib/Graphs/VFG.cpp	/^void VFG::updateCallGraph(PointerAnalysis* pta)$/;"	f	class:VFG
updateCallGraph	svf/lib/WPA/Andersen.cpp	/^bool AndersenBase::updateCallGraph(const CallSiteToFunPtrMap& callsites)$/;"	f	class:AndersenBase
updateCallGraph	svf/lib/WPA/AndersenSCD.cpp	/^bool AndersenSCD::updateCallGraph(const PointerAnalysis::CallSiteToFunPtrMap& callsites)$/;"	f	class:AndersenSCD
updateCallGraph	svf/lib/WPA/FlowSensitive.cpp	/^bool FlowSensitive::updateCallGraph(const CallSiteToFunPtrMap& callsites)$/;"	f	class:FlowSensitive
updateCallGraphAndSVFG	svf/include/DDA/DDAVFSolver.h	/^    virtual inline void updateCallGraphAndSVFG(const DPIm&, const CallICFGNode*, SVFGEdgeSet&) {}$/;"	f	class:SVF::DDAVFSolver
updateCallGraphTime	svf/include/WPA/FlowSensitive.h	/^    double updateCallGraphTime; \/\/\/< time of updating call graph$/;"	m	class:SVF::FlowSensitive
updateConnectedNodes	svf/lib/WPA/FlowSensitive.cpp	/^void FlowSensitive::updateConnectedNodes(const SVFGEdgeSetTy& edges)$/;"	f	class:FlowSensitive
updateConnectedNodes	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::updateConnectedNodes(const SVFGEdgeSetTy& newEdges)$/;"	f	class:VersionedFlowSensitive
updateGepObjOffsetFromBase	svf/lib/AE/Svfexe/AEDetector.cpp	/^void BufOverflowDetector::updateGepObjOffsetFromBase(SVF::AddressValue gepAddrs, SVF::AddressValue objAddrs, SVF::IntervalValue offset)$/;"	f	class:BufOverflowDetector
updateInFromIn	svf/include/WPA/FlowSensitive.h	/^    virtual inline bool updateInFromIn(const SVFGNode* srcStmt, NodeID srcVar, const SVFGNode* dstStmt, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
updateInFromOut	svf/include/WPA/FlowSensitive.h	/^    virtual inline bool updateInFromOut(const SVFGNode* srcStmt, NodeID srcVar, const SVFGNode* dstStmt, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
updateJoinEdge	svf/lib/Graphs/ThreadCallGraph.cpp	/^void ThreadCallGraph::updateJoinEdge(PointerAnalysis* pta)$/;"	f	class:ThreadCallGraph
updateMap	svf/include/Util/CDGBuilder.h	/^    inline void updateMap(const SVFBasicBlock *pred, const SVFBasicBlock *bb, s32_t pos)$/;"	f	class:SVF::CDGBuilder
updateMap	svf/lib/AE/Core/RelationSolver.cpp	/^void RelationSolver::updateMap(Map<u32_t, s32_t>& map, u32_t key, const s32_t& value)$/;"	f	class:RelationSolver
updateNodeRepAndSubs	svf/lib/WPA/Andersen.cpp	/^void Andersen::updateNodeRepAndSubs(NodeID nodeId, NodeID newRepId)$/;"	f	class:Andersen
updateNonCandidateFunInterleaving	svf/lib/MTA/MHP.cpp	/^void MHP::updateNonCandidateFunInterleaving()$/;"	f	class:MHP
updateOutFromIn	svf/include/WPA/FlowSensitive.h	/^    inline bool updateOutFromIn(const SVFGNode* srcStmt, NodeID srcVar, const SVFGNode* dstStmt, NodeID dstVar)$/;"	f	class:SVF::FlowSensitive
updatePropaPts	svf/include/WPA/Andersen.h	/^    inline void updatePropaPts(NodeID dstId, NodeID srcId)$/;"	f	class:SVF::Andersen
updateRepNode	svf/include/Graphs/ICFG.h	/^    void updateRepNode(const ICFGNode* rep, const ICFGNode* sub)$/;"	f	class:SVF::ICFG
updateSiblingThreads	svf/lib/MTA/MHP.cpp	/^void MHP::updateSiblingThreads(NodeID curTid)$/;"	f	class:MHP
updateStateOnAddr	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnAddr(const AddrStmt *addr)$/;"	f	class:AbstractInterpretation
updateStateOnBinary	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnBinary(const BinaryOPStmt *binary)$/;"	f	class:AbstractInterpretation
updateStateOnCall	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnCall(const CallPE *callPE)$/;"	f	class:AbstractInterpretation
updateStateOnCmp	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnCmp(const CmpStmt *cmp)$/;"	f	class:AbstractInterpretation
updateStateOnCopy	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnCopy(const CopyStmt *copy)$/;"	f	class:AbstractInterpretation
updateStateOnGep	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnGep(const GepStmt *gep)$/;"	f	class:AbstractInterpretation
updateStateOnLoad	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnLoad(const LoadStmt *load)$/;"	f	class:AbstractInterpretation
updateStateOnPhi	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnPhi(const PhiStmt *phi)$/;"	f	class:AbstractInterpretation
updateStateOnRet	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnRet(const RetPE *retPE)$/;"	f	class:AbstractInterpretation
updateStateOnSelect	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnSelect(const SelectStmt *select)$/;"	f	class:AbstractInterpretation
updateStateOnStore	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^void AbstractInterpretation::updateStateOnStore(const StoreStmt *store)$/;"	f	class:AbstractInterpretation
updateSubAndRep	svf/include/Graphs/ICFG.h	/^    void updateSubAndRep(const ICFGNode* rep, const ICFGNode* sub)$/;"	f	class:SVF::ICFG
updateThreadCallGraph	svf/lib/WPA/Andersen.cpp	/^bool AndersenBase::updateThreadCallGraph(const CallSiteToFunPtrMap& callsites,$/;"	f	class:AndersenBase
updateTime	svf/include/WPA/FlowSensitive.h	/^    double updateTime;	\/\/\/< time of strong\/weak updates.$/;"	m	class:SVF::FlowSensitive
update_offset	svf/lib/Util/cJSON.cpp	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
update_rule	z3.obj/bin/python/z3/z3.py	/^    def update_rule(self, head, body, name):$/;"	m	class:Fixedpoint
update_rule	z3.obj/include/z3++.h	/^        void update_rule(expr& rule, symbol const& name) { Z3_fixedpoint_update_rule(ctx(), m_fp, rule, name); check_error(); }$/;"	f	class:z3::fixedpoint
upper	z3.obj/bin/python/z3/z3.py	/^    def upper(self):$/;"	m	class:OptimizeObjective
upper	z3.obj/bin/python/z3/z3.py	/^    def upper(self, obj):$/;"	m	class:Optimize
upper	z3.obj/bin/python/z3/z3num.py	/^    def upper(self, precision=10):$/;"	m	class:Numeral
upper	z3.obj/include/z3++.h	/^        expr upper(handle const& h) {$/;"	f	class:z3::optimize
upper_values	z3.obj/bin/python/z3/z3.py	/^    def upper_values(self):$/;"	m	class:OptimizeObjective
upper_values	z3.obj/bin/python/z3/z3.py	/^    def upper_values(self, obj):$/;"	m	class:Optimize
urem	z3.obj/include/z3++.h	/^    inline expr urem(expr const & a, expr const & b) { return to_expr(a.ctx(), Z3_mk_bvurem(a.ctx(), a, b)); }$/;"	f	namespace:z3
urem	z3.obj/include/z3++.h	/^    inline expr urem(expr const & a, int b) { return urem(a, a.ctx().num_val(b, a.get_sort())); }$/;"	f	namespace:z3
urem	z3.obj/include/z3++.h	/^    inline expr urem(int a, expr const & b) { return urem(b.ctx().num_val(a, b.get_sort()), b); }$/;"	f	namespace:z3
usageAndExit	svf/include/Util/CommandLine.h	/^    static void usageAndExit(const std::string usage, bool error)$/;"	f	class:OptionBase
use_pp	z3.obj/bin/python/z3/z3.py	/^    def use_pp(self):$/;"	m	class:Z3PPObject
usedMRVers	svf/include/MSSA/MemSSA.h	/^    std::vector<std::unique_ptr<MRVer>> usedMRVers;$/;"	m	class:SVF::MemSSA
usedRegs	svf/include/MSSA/MemSSA.h	/^    MRSet usedRegs;$/;"	m	class:SVF::MemSSA
userInput	svf/include/DDA/DDAClient.h	/^    OrderedNodeSet userInput;           \/\/\/< User input queries$/;"	m	class:SVF::DDAClient
utf16_literal_to_utf8	svf/lib/Util/cJSON.cpp	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
utils	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    AbsExtAPI* utils;$/;"	m	class:SVF::AbstractInterpretation
vPtD	svf/include/WPA/VersionedFlowSensitive.h	/^    BVDataPTAImpl::VersionedPTDataTy *vPtD;$/;"	m	class:SVF::VersionedFlowSensitive
vWorklist	svf/include/WPA/VersionedFlowSensitive.h	/^    FIFOWorkList<NodeID> vWorklist;$/;"	m	class:SVF::VersionedFlowSensitive
valSymMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    ValueToIDMapTy valSymMap;  \/\/\/< map a value to its sym id$/;"	m	class:SVF::LLVMModuleSet
valSyms	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline ValueToIDMapTy& valSyms()$/;"	f	class:SVF::LLVMModuleSet
valVarNum	svf/include/Graphs/IRGraph.h	/^    u32_t valVarNum;$/;"	m	class:SVF::IRGraph
validate	z3.obj/bin/python/z3/z3.py	/^    def validate(self, ds):$/;"	m	class:ParamsRef
validateExpectedFailureTests	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::validateExpectedFailureTests(std::string fun)$/;"	f	class:PointerAnalysis
validateExpectedFailureTests	svf/lib/SABER/DoubleFreeChecker.cpp	/^void DoubleFreeChecker::validateExpectedFailureTests(ProgSlice *slice, const FunObjVar *fun)$/;"	f	class:DoubleFreeChecker
validateExpectedFailureTests	svf/lib/SABER/LeakChecker.cpp	/^void LeakChecker::validateExpectedFailureTests(const SVFGNode* source, const FunObjVar* fun)$/;"	f	class:LeakChecker
validateSuccessTests	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::validateSuccessTests(std::string fun)$/;"	f	class:PointerAnalysis
validateSuccessTests	svf/lib/SABER/DoubleFreeChecker.cpp	/^void DoubleFreeChecker::validateSuccessTests(ProgSlice *slice, const FunObjVar *fun)$/;"	f	class:DoubleFreeChecker
validateSuccessTests	svf/lib/SABER/LeakChecker.cpp	/^void LeakChecker::validateSuccessTests(const SVFGNode* source, const FunObjVar* fun)$/;"	f	class:LeakChecker
validateTests	svf/lib/MemoryModel/PointerAnalysis.cpp	/^void PointerAnalysis::validateTests()$/;"	f	class:PointerAnalysis
validateTypeCheck	svf-llvm/lib/ObjTypeInference.cpp	/^void ObjTypeInference::validateTypeCheck(const CallBase *cs)$/;"	f	class:ObjTypeInference
valloc	svf-llvm/lib/extapi.c	/^void *valloc(unsigned long size)$/;"	f
value	svf/include/SVFIR/SVFStatements.h	/^    const SVFVar* value;           \/\/\/< LLVM value$/;"	m	class:SVF::SVFStmt
value	svf/include/Util/Casting.h	/^    static const bool value =$/;"	m	struct:SVF::SVFUtil::is_simple_type
value	svf/include/Util/CommandLine.h	/^    T value;$/;"	m	class:Option
value	svf/include/Util/CommandLine.h	/^    T value;$/;"	m	class:OptionMap
value	z3.obj/bin/python/z3/z3.py	/^    def value(self):$/;"	m	class:FuncEntry
value	z3.obj/bin/python/z3/z3.py	/^    def value(self):$/;"	m	class:OptimizeObjective
value	z3.obj/include/z3++.h	/^        expr value() const { Z3_ast r = Z3_func_entry_get_value(ctx(), m_entry); check_error(); return expr(ctx(), r); }$/;"	f	class:z3::func_entry
valueOnlyToString	svf-llvm/lib/LLVMUtil.cpp	/^const std::string SVFValue::valueOnlyToString() const$/;"	f	class:SVF::SVFValue
valueOnlyToString	svf/lib/SVFIR/SVFValue.cpp	/^const std::string SVFValue::valueOnlyToString() const$/;"	f	class:SVFValue
valuedouble	svf/include/Util/cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON
valueint	svf/include/Util/cJSON.h	/^    int valueint;$/;"	m	struct:cJSON
valuestring	svf/include/Util/cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON
var2LabelMap	svf/include/SVFIR/SVFStatements.h	/^    static Var2LabelMap var2LabelMap;  \/\/\/< Second operand of MultiOpndStmt to label map$/;"	m	class:SVF::SVFStmt
var2LabelMap	svf/lib/SVFIR/SVFStatements.cpp	/^SVFStmt::Var2LabelMap SVFStmt::var2LabelMap;$/;"	m	class:SVFStmt	file:
varArg	svf/include/SVFIR/SVFType.h	/^    bool varArg;$/;"	m	class:SVF::SVFFunctionType
varHasNewDFInPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline bool varHasNewDFInPts(LocID loc,const Key& var)$/;"	f	class:SVF::MutableIncDFPTData
varHasNewDFInPts	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline bool varHasNewDFInPts(LocID loc, const Key& var)$/;"	f	class:SVF::PersistentIncDFPTData
varHasNewDFOutPts	svf/include/MemoryModel/MutablePointsToDS.h	/^    inline bool varHasNewDFOutPts(LocID loc,const Key& var)$/;"	f	class:SVF::MutableIncDFPTData
varHasNewDFOutPts	svf/include/MemoryModel/PersistentPointsToDS.h	/^    inline bool varHasNewDFOutPts(LocID loc, const Key& var)$/;"	f	class:SVF::PersistentIncDFPTData
varKills	svf/include/MSSA/MemSSA.h	/^    MRSet varKills;$/;"	m	class:SVF::MemSSA
var_name	z3.obj/bin/python/z3/z3.py	/^    def var_name(self, idx):$/;"	m	class:QuantifierRef
var_sort	z3.obj/bin/python/z3/z3.py	/^    def var_sort(self, idx):$/;"	m	class:QuantifierRef
varargFunObjSymMap	svf/include/Graphs/IRGraph.h	/^    FunObjVarToIDMapTy varargFunObjSymMap; \/\/\/< vararg map$/;"	m	class:SVF::IRGraph
varargFunObjSyms	svf/include/Graphs/IRGraph.h	/^    inline FunObjVarToIDMapTy& varargFunObjSyms()$/;"	f	class:SVF::IRGraph
varargSymMap	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    FunToIDMapTy varargSymMap; \/\/\/< vararg map$/;"	m	class:SVF::LLVMModuleSet
varargSyms	svf-llvm/include/SVF-LLVM/LLVMModule.h	/^    inline FunToIDMapTy& varargSyms()$/;"	f	class:SVF::LLVMModuleSet
variableAttribute	svf/include/CFL/CFGrammar.h	/^        VariableAttribute variableAttribute: 8;$/;"	m	struct:SVF::GrammarBase::Symbol
variantField	svf/include/SVFIR/SVFStatements.h	/^    bool variantField;  \/\/\/< Gep statement with a variant field index (pointer arithmetic) for struct field access (e.g., p = &(q + f), where f is a variable)$/;"	m	class:SVF::GepStmt
vasprintf	svf-llvm/lib/extapi.c	/^int vasprintf(char **strp, const char *fmt, void* ap)$/;"	f
ver	svf/include/Graphs/SVFGNode.h	/^    const MRVer* ver;$/;"	m	class:SVF::ActualINSVFGNode
ver	svf/include/Graphs/SVFGNode.h	/^    const MRVer* ver;$/;"	m	class:SVF::ActualOUTSVFGNode
ver	svf/include/Graphs/SVFGNode.h	/^    const MRVer* ver;$/;"	m	class:SVF::FormalINSVFGNode
ver	svf/include/Graphs/SVFGNode.h	/^    const MRVer* ver;$/;"	m	class:SVF::FormalOUTSVFGNode
ver	svf/include/Graphs/SVFGNode.h	/^    const MRVer* ver;$/;"	m	class:SVF::MSSAPHISVFGNode
ver	svf/include/MSSA/MSSAMuChi.h	/^    MRVer* ver;$/;"	m	class:SVF::MSSAMU
verifyCallGraph	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::verifyCallGraph()$/;"	f	class:CallGraph
version	svf/include/Graphs/SVFGNode.h	/^    const Version version;$/;"	m	class:SVF::DummyVersionPropSVFGNode
version	svf/include/MSSA/MSSAMuChi.h	/^    MRVERSION version;$/;"	m	class:SVF::MRVer
versionPropTime	svf/include/WPA/VersionedFlowSensitive.h	/^    double versionPropTime;  \/\/\/< Time to propagate versions to versions which rely on them.$/;"	m	class:SVF::VersionedFlowSensitive
versionReliance	svf/include/WPA/VersionedFlowSensitive.h	/^    VersionRelianceMap versionReliance;$/;"	m	class:SVF::VersionedFlowSensitive
versionStat	svf/lib/WPA/VersionedFlowSensitiveStat.cpp	/^void VersionedFlowSensitiveStat::versionStat(void)$/;"	f	class:VersionedFlowSensitiveStat
versionedVarToPropNode	svf/include/WPA/VersionedFlowSensitive.h	/^    VarToPropNodeMap versionedVarToPropNode;$/;"	m	class:SVF::VersionedFlowSensitive
vfEdgesAtIndCallSite	svf/include/MSSA/SVFGBuilder.h	/^    SVFGEdgeSet vfEdgesAtIndCallSite;$/;"	m	class:SVF::SVFGBuilder
vfID	svf/include/Graphs/CHG.h	/^    u32_t vfID;$/;"	m	class:SVF::CHGraph
vfnVectors	svf-llvm/include/SVF-LLVM/DCHG.h	/^    std::vector<std::vector<const Function*>> vfnVectors;$/;"	m	class:SVF::DCHNode
vfspta	svf/include/WPA/VersionedFlowSensitive.h	/^    static VersionedFlowSensitive *vfspta;$/;"	m	class:SVF::VersionedFlowSensitive
vfspta	svf/include/WPA/WPAStat.h	/^    VersionedFlowSensitive *vfspta;$/;"	m	class:SVF::VersionedFlowSensitiveStat
vfspta	svf/lib/WPA/VersionedFlowSensitive.cpp	/^VersionedFlowSensitive *VersionedFlowSensitive::vfspta = nullptr;$/;"	m	class:VersionedFlowSensitive	file:
vfunPreLabel	svf-llvm/lib/CppUtil.cpp	/^const std::string vfunPreLabel = "_Z";$/;"	v
vid	svf/include/MSSA/MSSAMuChi.h	/^    MRVERID vid;$/;"	m	class:SVF::MRVer
view	svf/include/Graphs/CDG.h	/^    void view()$/;"	f	class:SVF::CDG
view	svf/lib/Graphs/CFLGraph.cpp	/^void CFLGraph::view()$/;"	f	class:CFLGraph
view	svf/lib/Graphs/CHG.cpp	/^void CHGraph::view()$/;"	f	class:CHGraph
view	svf/lib/Graphs/CallGraph.cpp	/^void CallGraph::view()$/;"	f	class:CallGraph
view	svf/lib/Graphs/ConsG.cpp	/^void ConstraintGraph::view()$/;"	f	class:ConstraintGraph
view	svf/lib/Graphs/ICFG.cpp	/^void ICFG::view()$/;"	f	class:ICFG
view	svf/lib/Graphs/IRGraph.cpp	/^void IRGraph::view()$/;"	f	class:IRGraph
view	svf/lib/Graphs/VFG.cpp	/^void VFG::view()$/;"	f	class:VFG
viewCFG	svf-llvm/lib/LLVMUtil.cpp	/^void LLVMUtil::viewCFG(const Function* fun)$/;"	f	class:LLVMUtil
viewCFGOnly	svf-llvm/lib/LLVMUtil.cpp	/^void LLVMUtil::viewCFGOnly(const Function* fun)$/;"	f	class:LLVMUtil
virtualFunIdx	svf/include/Graphs/ICFGNode.h	/^    s32_t virtualFunIdx;            \/\/\/ virtual function index of the virtual table(s) at a virtual call$/;"	m	class:SVF::CallICFGNode
virtualFunctionToIDMap	svf/include/Graphs/CHG.h	/^    Map<const FunObjVar*, u32_t> virtualFunctionToIDMap;$/;"	m	class:SVF::CHGraph
virtualFunctionVectors	svf/include/Graphs/CHG.h	/^    std::vector<FuncVector> virtualFunctionVectors;$/;"	m	class:SVF::CHNode
visit	svf/include/Graphs/SCC.h	/^    void visit(NodeID v)$/;"	f	class:SVF::SCCDetection
visit	svf/include/Graphs/WTO.h	/^    virtual CycleDepthNumber visit(const NodeT* node,$/;"	f	class:SVF::WTO
visit	svf/lib/WPA/CSC.cpp	/^void CSC::visit(NodeID nodeId, s32_t _w)$/;"	f	class:CSC
visit	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::SCC::visit(VersionedFlowSensitive *vfs,$/;"	f	class:VersionedFlowSensitive::SCC
visitAllocaInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitAllocaInst(AllocaInst &inst)$/;"	f	class:SVFIRBuilder
visitAtomicCmpXchgInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitAtomicCmpXchgInst(AtomicCmpXchgInst &I)$/;"	f	class:SVF::SVFIRBuilder
visitAtomicRMWInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitAtomicRMWInst(AtomicRMWInst &I)$/;"	f	class:SVF::SVFIRBuilder
visitBinaryOperator	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitBinaryOperator(BinaryOperator &inst)$/;"	f	class:SVFIRBuilder
visitBranchInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitBranchInst(BranchInst &inst)$/;"	f	class:SVFIRBuilder
visitCallBrInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitCallBrInst(CallBrInst &i)$/;"	f	class:SVFIRBuilder
visitCallInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitCallInst(CallInst &i)$/;"	f	class:SVFIRBuilder
visitCallSite	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitCallSite(CallBase* cs)$/;"	f	class:SVFIRBuilder
visitCastInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitCastInst(CastInst &inst)$/;"	f	class:SVFIRBuilder
visitCmpInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitCmpInst(CmpInst &inst)$/;"	f	class:SVFIRBuilder
visitExtractElementInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitExtractElementInst(ExtractElementInst &inst)$/;"	f	class:SVFIRBuilder
visitExtractValueInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitExtractValueInst(ExtractValueInst  &inst)$/;"	f	class:SVFIRBuilder
visitFenceInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitFenceInst(FenceInst &I)   \/*returns void*\/$/;"	f	class:SVF::SVFIRBuilder
visitFreezeInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitFreezeInst(FreezeInst &inst)$/;"	f	class:SVFIRBuilder
visitGetElementPtrInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitGetElementPtrInst(GetElementPtrInst &inst)$/;"	f	class:SVFIRBuilder
visitGlobal	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitGlobal()$/;"	f	class:SVFIRBuilder
visitInsertElementInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitInsertElementInst(InsertElementInst &I)$/;"	f	class:SVF::SVFIRBuilder
visitInsertValueInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitInsertValueInst(InsertValueInst &I)$/;"	f	class:SVF::SVFIRBuilder
visitInstruction	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    inline void visitInstruction(Instruction&)$/;"	f	class:SVF::SVFIRBuilder
visitInvokeInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitInvokeInst(InvokeInst &i)$/;"	f	class:SVFIRBuilder
visitLandingPadInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitLandingPadInst(LandingPadInst &I)$/;"	f	class:SVF::SVFIRBuilder
visitLoadInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitLoadInst(LoadInst &inst)$/;"	f	class:SVFIRBuilder
visitPHINode	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitPHINode(PHINode &inst)$/;"	f	class:SVFIRBuilder
visitResumeInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitResumeInst(ResumeInst&)   \/*returns void*\/$/;"	f	class:SVF::SVFIRBuilder
visitReturnInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitReturnInst(ReturnInst &inst)$/;"	f	class:SVFIRBuilder
visitSelectInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitSelectInst(SelectInst &inst)$/;"	f	class:SVFIRBuilder
visitShuffleVectorInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitShuffleVectorInst(ShuffleVectorInst &I)$/;"	f	class:SVF::SVFIRBuilder
visitStoreInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitStoreInst(StoreInst &inst)$/;"	f	class:SVFIRBuilder
visitSwitchInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitSwitchInst(SwitchInst &inst)$/;"	f	class:SVFIRBuilder
visitUnaryOperator	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitUnaryOperator(UnaryOperator &inst)$/;"	f	class:SVFIRBuilder
visitUnreachableInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitUnreachableInst(UnreachableInst&)   \/*returns void*\/$/;"	f	class:SVF::SVFIRBuilder
visitVAArgInst	svf-llvm/lib/SVFIRBuilder.cpp	/^void SVFIRBuilder::visitVAArgInst(VAArgInst &inst)$/;"	f	class:SVFIRBuilder
visitVACopyInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitVACopyInst(VACopyInst&) {}$/;"	f	class:SVF::SVFIRBuilder
visitVAEndInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitVAEndInst(VAEndInst&) {}$/;"	f	class:SVF::SVFIRBuilder
visitVAStartInst	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    void visitVAStartInst(VAStartInst&) {}$/;"	f	class:SVF::SVFIRBuilder
visited	svf-llvm/include/SVF-LLVM/ICFGBuilder.h	/^    BBSet visited;$/;"	m	class:SVF::ICFGBuilder
visited	svf/include/Graphs/SCC.h	/^        inline bool visited(void) const$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
visited	svf/include/Graphs/SCC.h	/^        inline void visited(bool v)$/;"	f	class:SVF::SCCDetection::GNodeSCCInfo
visited	svf/include/Graphs/SCC.h	/^    inline bool visited(NodeID n)$/;"	f	class:SVF::SCCDetection
visitedCTPs	svf/include/MTA/LockAnalysis.h	/^    CxtLockProcSet visitedCTPs; \/\/\/ Record all visited clps$/;"	m	class:SVF::LockAnalysis
visitedCTPs	svf/include/MTA/TCT.h	/^    CxtThreadProcSet visitedCTPs; \/\/\/ Record all visited ctps$/;"	m	class:SVF::TCT
visitedSet	svf/include/SABER/SrcSnkDDA.h	/^    SVFGNodeSet visitedSet;	\/\/\/<  record backward visited nodes$/;"	m	class:SVF::SrcSnkDDA
volatile	Release-build/CMakeFiles/3.31.6/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
vset	z3.obj/bin/python/z3/z3util.py	/^def vset(seq, idfun=None, as_list=True):$/;"	f
vtInitMDName	svf-llvm/include/SVF-LLVM/CppUtil.h	/^const std::string vtInitMDName = "ctir.vt.init";$/;"	m	namespace:SVF::cppUtil::ctir
vtMDName	svf-llvm/include/SVF-LLVM/CppUtil.h	/^const std::string vtMDName = "ctir.vt";$/;"	m	namespace:SVF::cppUtil::ctir
vtabPtr	svf/include/Graphs/ICFGNode.h	/^    SVFVar* vtabPtr;                \/\/\/ virtual table pointer$/;"	m	class:SVF::CallICFGNode
vtable	svf-llvm/include/SVF-LLVM/DCHG.h	/^    const GlobalObjVar* vtable;$/;"	m	class:SVF::DCHNode
vtable	svf/include/Graphs/CHG.h	/^    const GlobalObjVar* vtable;$/;"	m	class:SVF::CHNode
vtableToCallSiteMap	svf/include/DDA/DDAClient.h	/^    VTablePtrToCallSiteMap vtableToCallSiteMap;$/;"	m	class:SVF::AliasDDAClient
vtableToCallSiteMap	svf/include/DDA/DDAClient.h	/^    VTablePtrToCallSiteMap vtableToCallSiteMap;$/;"	m	class:SVF::FunptrDDAClient
vtableType	svf-llvm/lib/CppUtil.cpp	/^const std::string vtableType = "(...)**";$/;"	v
vtblCHAMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const DIType*, VTableSet> vtblCHAMap;$/;"	m	class:SVF::DCHGraph
vtblLabelAfterDemangle	svf-llvm/lib/CppUtil.cpp	/^const std::string vtblLabelAfterDemangle = "vtable for ";$/;"	v
vtblLabelBeforeDemangle	svf-llvm/lib/CppUtil.cpp	/^const std::string vtblLabelBeforeDemangle = "_ZTV";$/;"	v
vtblToTypeMap	svf-llvm/include/SVF-LLVM/DCHG.h	/^    Map<const GlobalObjVar*, const DIType*> vtblToTypeMap;$/;"	m	class:SVF::DCHGraph
wcscat	svf-llvm/lib/extapi.c	/^char *wcscat(char *dest, const char *src)$/;"	f
wcscpy	svf-llvm/lib/extapi.c	/^char *wcscpy(wchar_t* dest, const wchar_t* src) {$/;"	f
wcsncat	svf-llvm/lib/extapi.c	/^wchar_t* wcsncat(wchar_t * dest, const wchar_t * src, int n) {$/;"	f
weakUpdateOutFromIn	svf/include/WPA/FlowSensitive.h	/^    virtual bool weakUpdateOutFromIn(const SVFGNode* node)$/;"	f	class:SVF::FlowSensitive
weight	z3.obj/bin/python/z3/z3.py	/^    def weight(self):$/;"	m	class:QuantifierRef
what	svf/include/AE/Svfexe/AEDetector.h	/^    virtual const char* what() const throw()$/;"	f	class:SVF::AEException
what	z3.obj/include/z3++.h	/^        char const * what() const throw() { return m_msg.c_str(); }$/;"	f	class:z3::exception
when	z3.obj/include/z3++.h	/^    inline tactic when(probe const & p, tactic const & t) {$/;"	f	namespace:z3
widen_with	svf/include/AE/Core/AbstractValue.h	/^    void widen_with(const AbstractValue &other)$/;"	f	class:SVF::AbstractValue
widen_with	svf/include/AE/Core/IntervalValue.h	/^    void widen_with(const IntervalValue &other)$/;"	f	class:SVF::IntervalValue
widening	svf/lib/AE/Core/AbstractState.cpp	/^AbstractState AbstractState::widening(const AbstractState& other)$/;"	f	class:AbstractState
with	z3.obj/include/z3++.h	/^    inline tactic with(tactic const & t, params const & p) {$/;"	f	namespace:z3
wmemset	svf-llvm/lib/extapi.c	/^char *wmemset(wchar_t * dst, wchar_t elem, int sz, int flag) {$/;"	f
word	svf/include/Util/SparseBitVector.h	/^    BitWord word(unsigned Idx) const$/;"	f	struct:SVF::SparseBitVectorElement
wordIt	svf/include/Util/CoreBitVector.h	/^        std::vector<Word>::const_iterator wordIt;$/;"	m	class:SVF::CoreBitVector::CoreBitVectorIterator
words	svf/include/Util/CoreBitVector.h	/^    std::vector<Word> words;$/;"	m	class:SVF::CoreBitVector
worklist	svf/include/CFL/CFLSolver.h	/^    WorkList worklist;$/;"	m	class:SVF::CFLSolver
worklist	svf/include/Graphs/SVFGOPT.h	/^    WorkList worklist;	\/\/\/< storing MSSAPHI nodes which may be removed.$/;"	m	class:SVF::SVFGOPT
worklist	svf/include/SABER/SrcSnkSolver.h	/^    WorkList worklist;$/;"	m	class:SVF::SrcSnkSolver
worklist	svf/include/Util/GraphReachSolver.h	/^    WorkList worklist;$/;"	m	class:SVF::GraphReachSolver
worklist	svf/include/WPA/WPASolver.h	/^    WorkList worklist;$/;"	m	class:SVF::WPASolver
wrapped	svf/include/Util/iterator.h	/^    const WrappedIteratorT &wrapped() const$/;"	f	class:SVF::iter_adaptor_base
writeEdge	svf/include/Graphs/GraphWriter.h	/^    void writeEdge(NodeRef Node, unsigned edgeidx, child_iterator EI)$/;"	f	class:SVF::GraphWriter
writeFooter	svf/include/Graphs/GraphWriter.h	/^    void writeFooter()$/;"	f	class:SVF::GraphWriter
writeGepObjVarMapToFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::writeGepObjVarMapToFile(std::fstream& f)$/;"	f	class:BVDataPTAImpl
writeGraph	svf/include/Graphs/GraphWriter.h	/^    void writeGraph(const std::string &Title = "")$/;"	f	class:SVF::GraphWriter
writeHeader	svf/include/Graphs/GraphWriter.h	/^    void writeHeader(const std::string &Title)$/;"	f	class:SVF::GraphWriter
writeNode	svf/include/Graphs/GraphWriter.h	/^    void writeNode(NodeRef Node)$/;"	f	class:SVF::GraphWriter
writeNodes	svf/include/Graphs/GraphWriter.h	/^    void writeNodes()$/;"	f	class:SVF::GraphWriter
writeObjVarToFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::writeObjVarToFile(const string& filename)$/;"	f	class:BVDataPTAImpl
writePtsResultToFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::writePtsResultToFile(std::fstream& f)$/;"	f	class:BVDataPTAImpl
writeToFile	svf/lib/Graphs/SVFGReadWrite.cpp	/^void SVFG::writeToFile(const string& filename)$/;"	f	class:SVFG
writeToFile	svf/lib/MemoryModel/PointerAnalysisImpl.cpp	/^void BVDataPTAImpl::writeToFile(const string& filename)$/;"	f	class:BVDataPTAImpl
writeVersionedAnalysisResultToFile	svf/lib/WPA/VersionedFlowSensitive.cpp	/^void VersionedFlowSensitive::writeVersionedAnalysisResultToFile(const std::string& filename)$/;"	f	class:VersionedFlowSensitive
writeWrnMsg	svf/lib/Util/SVFUtil.cpp	/^void SVFUtil::writeWrnMsg(const std::string& msg)$/;"	f	class:SVFUtil
wrnMsg	svf/lib/Util/SVFUtil.cpp	/^std::string SVFUtil::wrnMsg(const std::string& msg)$/;"	f	class:SVFUtil
x	z3.obj/bin/python/example.py	/^x = Real('x')$/;"	v
xcalloc	svf-llvm/lib/extapi.c	/^void* xcalloc(unsigned long size1, unsigned long size2)$/;"	f
xmalloc	svf-llvm/lib/extapi.c	/^void* xmalloc(unsigned long size)$/;"	f
xnor	z3.obj/include/z3++.h	/^    inline expr xnor(expr const& a, expr const& b) { check_context(a, b); Z3_ast r = Z3_mk_bvxnor(a.ctx(), a, b); return expr(a.ctx(), r); }$/;"	f	namespace:z3
xrealloc	svf-llvm/lib/extapi.c	/^void *xrealloc(void *ptr, unsigned long bytes)$/;"	f
y	z3.obj/bin/python/example.py	/^y = Real('y')$/;"	v
yield	svf/include/WPA/VersionedFlowSensitive.h	/^    LocVersionMap yield;$/;"	m	class:SVF::VersionedFlowSensitive
z3	z3.obj/include/z3++.h	/^namespace z3 {$/;"	n
z3Expr2NumValue	svf/include/AE/Core/RelExeState.h	/^    static inline s32_t z3Expr2NumValue(const Z3Expr &e)$/;"	f	class:SVF::RelExeState
z3_debug	z3.obj/bin/python/z3/z3.py	/^def z3_debug():$/;"	f
z3_error_handler	z3.obj/bin/python/z3/z3.py	/^def z3_error_handler(c, e):$/;"	f
zError	svf-llvm/lib/extapi.c	/^const char *zError(int a)$/;"	f
zext	z3.obj/include/z3++.h	/^    inline expr zext(expr const & a, unsigned i) { return to_expr(a.ctx(), Z3_mk_zero_ext(a.ctx(), i, a)); }$/;"	f	namespace:z3
zmalloc	svf-llvm/lib/extapi.c	/^void *zmalloc(unsigned long size)$/;"	f
zn1Label	svf-llvm/lib/CppUtil.cpp	/^const std::string zn1Label = "_ZN1"; \/\/ c++ constructor$/;"	v
znk9Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znk9Label = "_ZNK9"; \/\/ _ZNK9__gnu_cxx17__normal_iteratorIPK1ASt6vectorIS1_SaIS1_EEEdeEv -> __gnu_cxx::__normal_iterator<A const*, std::vector<A, std::allocator<A> > >::operator*() const$/;"	v
znkLabel	svf-llvm/lib/CppUtil.cpp	/^const std::string znkLabel = "_ZNK";$/;"	v
znkst20Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znkst20Label = "_ZNKSt20_"; \/\/ _ZNKSt20_List_const_iteratorIPK1AEdeEv -> std::_List_const_iterator<A const*>::operator*() const$/;"	v
znkst23Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znkst23Label = "_ZNKSt23_"; \/\/ _ZNKSt23_Rb_tree_const_iteratorISt4pairIKi1AEEptEv -> std::_List_const_iterator<A const*>::operator*() const$/;"	v
znkst5Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znkst5Label = "_ZNKSt15_"; \/\/ _ZNKSt15_Deque_iteratorIPK1ARS2_PS2_EdeEv -> std::_Deque_iterator<A const*, A const*&, A const**>::operator*() const$/;"	v
znkstLabel	svf-llvm/lib/CppUtil.cpp	/^const std::string znkstLabel = "_ZNKSt";$/;"	v
znst12Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znst12Label = "_ZNSt12"; \/\/ _ZNSt12forward_listIPK1ASaIS2_EEC2Ev -> std::forward_list<A const*, std::allocator<A const*> >::forward_list()$/;"	v
znst14Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znst14Label = "_ZNSt14"; \/\/ _ZNSt14_Fwd_list_baseI1ASaIS0_EEC2Ev -> std::_Fwd_list_base<A, std::allocator<A> >::_Fwd_list_base()$/;"	v
znst5Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znst5Label = "_ZNSt5"; \/\/ _ZNSt5dequeIPK1ASaIS2_EE5frontEv -> std::deque<A const*, std::allocator<A const*> >::front()$/;"	v
znst6Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znst6Label = "_ZNSt6"; \/\/ _ZNSt6vectorIP1ASaIS1_EEC2Ev -> std::vector<A*, std::allocator<A*> >::vector()$/;"	v
znst7Label	svf-llvm/lib/CppUtil.cpp	/^const std::string znst7Label = "_ZNSt7"; \/\/ _ZNSt7__cxx114listIPK1ASaIS3_EEC2Ev -> std::__cxx11::list<A const*, std::allocator<A const*> >::list()$/;"	v
znstLabel	svf-llvm/lib/CppUtil.cpp	/^const std::string znstLabel = "_ZNSt";$/;"	v
znwm	svf-llvm/lib/CppUtil.cpp	/^const std::string znwm = "_Znwm";$/;"	v
ztiLabel	svf-llvm/lib/CHGBuilder.cpp	/^const string ztiLabel = "_ZTI";$/;"	v
ztilabel	svf-llvm/lib/CppUtil.cpp	/^const std::string ztilabel = "_ZTI";$/;"	v
ztiprefix	svf-llvm/lib/CppUtil.cpp	/^const std::string ztiprefix = "typeinfo for ";$/;"	v
zval	svf/include/SVFIR/SVFVariables.h	/^    u64_t zval;$/;"	m	class:SVF::ConstIntObjVar
zval	svf/include/SVFIR/SVFVariables.h	/^    u64_t zval;$/;"	m	class:SVF::ConstIntValVar
~AEStat	svf/include/AE/Svfexe/AbstractInterpretation.h	/^    ~AEStat()$/;"	f	class:SVF::AEStat
~AbstractInterpretation	svf/lib/AE/Svfexe/AbstractInterpretation.cpp	/^AbstractInterpretation::~AbstractInterpretation()$/;"	f	class:AbstractInterpretation
~AbstractValue	svf/include/AE/Core/AbstractValue.h	/^    ~AbstractValue() {};$/;"	f	class:SVF::AbstractValue
~AccessPath	svf/include/MemoryModel/AccessPath.h	/^    ~AccessPath() {}$/;"	f	class:SVF::AccessPath
~AliasDDAClient	svf/include/DDA/DDAClient.h	/^    ~AliasDDAClient() {}$/;"	f	class:SVF::AliasDDAClient
~Andersen	svf/include/WPA/Andersen.h	/^    virtual ~Andersen()$/;"	f	class:SVF::Andersen
~AndersenBase	svf/lib/WPA/Andersen.cpp	/^AndersenBase::~AndersenBase()$/;"	f	class:AndersenBase
~AndersenSFR	svf/include/WPA/AndersenPWC.h	/^    ~AndersenSFR()$/;"	f	class:SVF::AndersenSFR
~AndersenStat	svf/include/WPA/WPAStat.h	/^    virtual ~AndersenStat()$/;"	f	class:SVF::AndersenStat
~Annotator	svf/include/Util/Annotator.h	/^    virtual ~Annotator()$/;"	f	class:SVF::Annotator
~BasicBlockEdge	svf/include/Graphs/BasicBlockG.h	/^    ~BasicBlockEdge() {}$/;"	f	class:SVF::BasicBlockEdge
~BoundedDouble	svf/include/AE/Core/NumericValue.h	/^    virtual ~BoundedDouble() {}$/;"	f	class:SVF::BoundedDouble
~BoundedInt	svf/include/AE/Core/NumericValue.h	/^    virtual ~BoundedInt() {}$/;"	f	class:SVF::BoundedInt
~CDG	svf/include/Graphs/CDG.h	/^    virtual ~CDG() {}$/;"	f	class:SVF::CDG
~CDGBuilder	svf/include/Util/CDGBuilder.h	/^    ~CDGBuilder()$/;"	f	class:SVF::CDGBuilder
~CDGEdge	svf/include/Graphs/CDG.h	/^    ~CDGEdge()$/;"	f	class:SVF::CDGEdge
~CFLBase	svf/include/CFL/CFLBase.h	/^    virtual ~CFLBase()$/;"	f	class:SVF::CFLBase
~CFLFIFOWorkList	svf/include/CFL/CFGrammar.h	/^    ~CFLFIFOWorkList() {}$/;"	f	class:SVF::CFLFIFOWorkList
~CFLSolver	svf/include/CFL/CFLSolver.h	/^    virtual ~CFLSolver()$/;"	f	class:SVF::CFLSolver
~CFLStat	svf/include/CFL/CFLStat.h	/^    virtual ~CFLStat()$/;"	f	class:SVF::CFLStat
~CHNode	svf/include/Graphs/CHG.h	/^    ~CHNode()$/;"	f	class:SVF::CHNode
~CallCHI	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~CallCHI()$/;"	f	class:SVF::CallCHI
~CallGraph	svf/include/Graphs/CallGraph.h	/^    virtual ~CallGraph()$/;"	f	class:SVF::CallGraph
~CallGraphEdge	svf/include/Graphs/CallGraph.h	/^    virtual ~CallGraphEdge()$/;"	f	class:SVF::CallGraphEdge
~CallMU	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~CallMU()$/;"	f	class:SVF::CallMU
~CommonCHGraph	svf/include/Graphs/CHG.h	/^    virtual ~CommonCHGraph() { };$/;"	f	class:SVF::CommonCHGraph
~CondPTAImpl	svf/include/MemoryModel/PointerAnalysisImpl.h	/^    virtual ~CondPTAImpl()$/;"	f	class:SVF::CondPTAImpl
~CondPtsSetIterator	svf/include/MemoryModel/ConditionalPT.h	/^        ~CondPtsSetIterator() {}$/;"	f	class:SVF::CondPointsToSet::CondPtsSetIterator
~CondStdSet	svf/include/MemoryModel/ConditionalPT.h	/^    ~CondStdSet() {}$/;"	f	class:SVF::CondStdSet
~CondVar	svf/include/MemoryModel/ConditionalPT.h	/^    ~CondVar() {}$/;"	f	class:SVF::CondVar
~ConstraintEdge	svf/include/Graphs/ConsGEdge.h	/^    ~ConstraintEdge()$/;"	f	class:SVF::ConstraintEdge
~ConstraintGraph	svf/include/Graphs/ConsG.h	/^    virtual ~ConstraintGraph()$/;"	f	class:SVF::ConstraintGraph
~ContextCond	svf/include/Util/DPItem.h	/^    virtual ~ContextCond()$/;"	f	class:SVF::ContextCond
~ContextDDA	svf/lib/DDA/ContextDDA.cpp	/^ContextDDA::~ContextDDA()$/;"	f	class:ContextDDA
~CxtDPItem	svf/include/Util/DPItem.h	/^    virtual ~CxtDPItem()$/;"	f	class:SVF::CxtDPItem
~CxtProc	svf/include/Util/CxtStmt.h	/^    virtual ~CxtProc()$/;"	f	class:SVF::CxtProc
~CxtStmt	svf/include/Util/CxtStmt.h	/^    virtual ~CxtStmt()$/;"	f	class:SVF::CxtStmt
~CxtStmtDPItem	svf/include/Util/DPItem.h	/^    virtual ~CxtStmtDPItem()$/;"	f	class:SVF::CxtStmtDPItem
~CxtThread	svf/include/Util/CxtStmt.h	/^    virtual ~CxtThread()$/;"	f	class:SVF::CxtThread
~CxtThreadProc	svf/include/Util/CxtStmt.h	/^    virtual ~CxtThreadProc()$/;"	f	class:SVF::CxtThreadProc
~CxtThreadStmt	svf/include/Util/CxtStmt.h	/^    virtual ~CxtThreadStmt()$/;"	f	class:SVF::CxtThreadStmt
~DCHGraph	svf-llvm/include/SVF-LLVM/DCHG.h	/^    virtual ~DCHGraph() { };$/;"	f	class:SVF::DCHGraph
~DCHNode	svf-llvm/include/SVF-LLVM/DCHG.h	/^    ~DCHNode() { }$/;"	f	class:SVF::DCHNode
~DDAClient	svf/include/DDA/DDAClient.h	/^    virtual ~DDAClient() {}$/;"	f	class:SVF::DDAClient
~DDAPass	svf/lib/DDA/DDAPass.cpp	/^DDAPass::~DDAPass()$/;"	f	class:DDAPass
~DDAVFSolver	svf/include/DDA/DDAVFSolver.h	/^    virtual ~DDAVFSolver()$/;"	f	class:SVF::DDAVFSolver
~DFPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    virtual ~DFPTData() { }$/;"	f	class:SVF::DFPTData
~DPItem	svf/include/Util/DPItem.h	/^    virtual ~DPItem()$/;"	f	class:SVF::DPItem
~DiffPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    virtual ~DiffPTData() { }$/;"	f	class:SVF::DiffPTData
~DistinctMRG	svf/include/MSSA/MemPartition.h	/^    ~DistinctMRG() {}$/;"	f	class:SVF::DistinctMRG
~DoubleFreeChecker	svf/include/SABER/DoubleFreeChecker.h	/^    virtual ~DoubleFreeChecker()$/;"	f	class:SVF::DoubleFreeChecker
~EntryCHI	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~EntryCHI()$/;"	f	class:SVF::EntryCHI
~FIFOWorkList	svf/include/Util/WorkList.h	/^    ~FIFOWorkList() {}$/;"	f	class:SVF::FIFOWorkList
~FILOWorkList	svf/include/Util/WorkList.h	/^    ~FILOWorkList() {}$/;"	f	class:SVF::FILOWorkList
~FileChecker	svf/include/SABER/FileChecker.h	/^    virtual ~FileChecker()$/;"	f	class:SVF::FileChecker
~FlowDDA	svf/include/DDA/FlowDDA.h	/^    inline virtual ~FlowDDA()$/;"	f	class:SVF::FlowDDA
~FlowSensitiveStat	svf/include/WPA/WPAStat.h	/^    virtual ~FlowSensitiveStat() {}$/;"	f	class:SVF::FlowSensitiveStat
~FunObjVar	svf/include/SVFIR/SVFVariables.h	/^    virtual ~FunObjVar()$/;"	f	class:SVF::FunObjVar
~FunptrDDAClient	svf/include/DDA/DDAClient.h	/^    ~FunptrDDAClient() {}$/;"	f	class:SVF::FunptrDDAClient
~GenericEdge	svf/include/Graphs/GenericGraph.h	/^    virtual ~GenericEdge()$/;"	f	class:SVF::GenericEdge
~GenericGraph	svf/include/Graphs/GenericGraph.h	/^    virtual ~GenericGraph()$/;"	f	class:SVF::GenericGraph
~GenericNode	svf/include/Graphs/GenericGraph.h	/^    virtual ~GenericNode()$/;"	f	class:SVF::GenericNode
~GraphReachSolver	svf/include/Util/GraphReachSolver.h	/^    virtual ~GraphReachSolver()$/;"	f	class:SVF::GraphReachSolver
~HareParForEdge	svf/include/Graphs/ThreadCallGraph.h	/^    virtual ~HareParForEdge()$/;"	f	class:SVF::HareParForEdge
~ICFG	svf/lib/Graphs/ICFG.cpp	/^ICFG::~ICFG()$/;"	f	class:ICFG
~ICFGEdge	svf/include/Graphs/ICFGEdge.h	/^    ~ICFGEdge() {}$/;"	f	class:SVF::ICFGEdge
~ICFGWTO	svf/include/AE/Core/ICFGWTO.h	/^    virtual ~ICFGWTO()$/;"	f	class:SVF::ICFGWTO
~IRGraph	svf/lib/Graphs/IRGraph.cpp	/^IRGraph::~IRGraph()$/;"	f	class:IRGraph
~InterDisjointMRG	svf/include/MSSA/MemPartition.h	/^    ~InterDisjointMRG() {}$/;"	f	class:SVF::InterDisjointMRG
~IntraDisjointMRG	svf/include/MSSA/MemPartition.h	/^    ~IntraDisjointMRG() {}$/;"	f	class:SVF::IntraDisjointMRG
~LLVMModuleSet	svf-llvm/lib/LLVMModule.cpp	/^LLVMModuleSet::~LLVMModuleSet()$/;"	f	class:LLVMModuleSet
~LeakChecker	svf/include/SABER/LeakChecker.h	/^    virtual ~LeakChecker()$/;"	f	class:SVF::LeakChecker
~List	svf/include/Util/WorkList.h	/^    ~List() {}$/;"	f	class:SVF::List
~ListNode	svf/include/Util/WorkList.h	/^        ~ListNode() {}$/;"	f	class:SVF::List::ListNode
~LoadMU	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~LoadMU()$/;"	f	class:SVF::LoadMU
~MHP	svf/lib/MTA/MHP.cpp	/^MHP::~MHP()$/;"	f	class:MHP
~MRGenerator	svf/include/MSSA/MemRegion.h	/^    virtual ~MRGenerator()$/;"	f	class:SVF::MRGenerator
~MSSACHI	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~MSSACHI() {}$/;"	f	class:SVF::MSSACHI
~MSSADEF	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~MSSADEF() {}$/;"	f	class:SVF::MSSADEF
~MSSAMU	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~MSSAMU()$/;"	f	class:SVF::MSSAMU
~MSSAPHI	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~MSSAPHI()$/;"	f	class:SVF::MSSAPHI
~MTA	svf/lib/MTA/MTA.cpp	/^MTA::~MTA()$/;"	f	class:MTA
~MemRegion	svf/include/MSSA/MemRegion.h	/^    ~MemRegion()$/;"	f	class:SVF::MemRegion
~MemSSA	svf/include/MSSA/MemSSA.h	/^    virtual ~MemSSA()$/;"	f	class:SVF::MemSSA
~MemSSAStat	svf/include/Graphs/SVFGStat.h	/^    virtual ~MemSSAStat()$/;"	f	class:SVF::MemSSAStat
~MutableDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual ~MutableDFPTData() { }$/;"	f	class:SVF::MutableDFPTData
~MutableIncDFPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual ~MutableIncDFPTData() { }$/;"	f	class:SVF::MutableIncDFPTData
~MutablePTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual ~MutablePTData() { }$/;"	f	class:SVF::MutablePTData
~MutableVersionedPTData	svf/include/MemoryModel/MutablePointsToDS.h	/^    virtual ~MutableVersionedPTData() { }$/;"	f	class:SVF::MutableVersionedPTData
~ObjTypeInfo	svf/include/SVFIR/ObjTypeInfo.h	/^    virtual ~ObjTypeInfo()$/;"	f	class:SVF::ObjTypeInfo
~PAGBuilderFromFile	svf/include/SVFIR/PAGBuilderFromFile.h	/^    ~PAGBuilderFromFile()$/;"	f	class:SVF::PAGBuilderFromFile
~POCRHybridSolver	svf/include/CFL/CFLSolver.h	/^    virtual ~POCRHybridSolver()$/;"	f	class:SVF::POCRHybridSolver
~POCRSolver	svf/include/CFL/CFLSolver.h	/^    virtual ~POCRSolver()$/;"	f	class:SVF::POCRSolver
~PTAStat	svf/include/Util/PTAStat.h	/^    virtual ~PTAStat() {}$/;"	f	class:SVF::PTAStat
~PTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    virtual ~PTData() { }$/;"	f	class:SVF::PTData
~PointerAnalysis	svf/lib/MemoryModel/PointerAnalysis.cpp	/^PointerAnalysis::~PointerAnalysis()$/;"	f	class:PointerAnalysis
~PointsTo	svf/lib/MemoryModel/PointsTo.cpp	/^PointsTo::~PointsTo()$/;"	f	class:SVF::PointsTo
~ProgSlice	svf/include/SABER/ProgSlice.h	/^    virtual ~ProgSlice()$/;"	f	class:SVF::ProgSlice
~RetMU	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~RetMU() {}$/;"	f	class:SVF::RetMU
~SVFBasicBlock	svf/include/Graphs/BasicBlockG.h	/^    ~SVFBasicBlock()$/;"	f	class:SVF::SVFBasicBlock
~SVFBugReport	svf/lib/Util/SVFBugReport.cpp	/^SVFBugReport::~SVFBugReport()$/;"	f	class:SVFBugReport
~SVFG	svf/include/Graphs/SVFG.h	/^    virtual ~SVFG()$/;"	f	class:SVF::SVFG
~SVFGStat	svf/include/Graphs/SVFGStat.h	/^    virtual ~SVFGStat() {}$/;"	f	class:SVF::SVFGStat
~SVFIR	svf/include/SVFIR/SVFIR.h	/^    virtual ~SVFIR()$/;"	f	class:SVF::SVFIR
~SVFIRBuilder	svf-llvm/include/SVF-LLVM/SVFIRBuilder.h	/^    virtual ~SVFIRBuilder()$/;"	f	class:SVF::SVFIRBuilder
~SVFLoopAndDomInfo	svf/include/Util/SVFLoopAndDomInfo.h	/^    virtual ~SVFLoopAndDomInfo() {}$/;"	f	class:SVF::SVFLoopAndDomInfo
~SVFStat	svf/include/Util/SVFStat.h	/^    virtual ~SVFStat() {}$/;"	f	class:SVF::SVFStat
~SVFStmt	svf/include/SVFIR/SVFStatements.h	/^    ~SVFStmt() {}$/;"	f	class:SVF::SVFStmt
~SVFType	svf/include/SVFIR/SVFType.h	/^    virtual ~SVFType() {}$/;"	f	class:SVF::SVFType
~SVFVar	svf/include/SVFIR/SVFVariables.h	/^    virtual ~SVFVar() {}$/;"	f	class:SVF::SVFVar
~SaberCondAllocator	svf/include/SABER/SaberCondAllocator.h	/^    virtual ~SaberCondAllocator()$/;"	f	class:SVF::SaberCondAllocator
~SaberSVFGBuilder	svf/include/SABER/SaberSVFGBuilder.h	/^    virtual ~SaberSVFGBuilder() {}$/;"	f	class:SVF::SaberSVFGBuilder
~SrcSnkSolver	svf/include/SABER/SrcSnkSolver.h	/^    virtual ~SrcSnkSolver()$/;"	f	class:SVF::SrcSnkSolver
~StmtDPItem	svf/include/Util/DPItem.h	/^    virtual ~StmtDPItem()$/;"	f	class:SVF::StmtDPItem
~StoreCHI	svf/include/MSSA/MSSAMuChi.h	/^    virtual ~StoreCHI()$/;"	f	class:SVF::StoreCHI
~TCT	svf/include/MTA/TCT.h	/^    virtual ~TCT()$/;"	f	class:SVF::TCT
~TCTEdge	svf/include/MTA/TCT.h	/^    virtual ~TCTEdge()$/;"	f	class:SVF::TCTEdge
~ThreadCallGraph	svf/include/Graphs/ThreadCallGraph.h	/^    virtual ~ThreadCallGraph()$/;"	f	class:SVF::ThreadCallGraph
~ThreadForkEdge	svf/include/Graphs/ThreadCallGraph.h	/^    virtual ~ThreadForkEdge()$/;"	f	class:SVF::ThreadForkEdge
~ThreadJoinEdge	svf/include/Graphs/ThreadCallGraph.h	/^    virtual ~ThreadJoinEdge()$/;"	f	class:SVF::ThreadJoinEdge
~TreeNode	svf/include/CFL/CFLSolver.h	/^        ~TreeNode()$/;"	f	struct:SVF::POCRHybridSolver::TreeNode
~TypeAnalysis	svf/include/WPA/TypeAnalysis.h	/^    virtual ~TypeAnalysis()$/;"	f	class:SVF::TypeAnalysis
~VFG	svf/include/Graphs/VFG.h	/^    virtual ~VFG()$/;"	f	class:SVF::VFG
~VFGEdge	svf/include/Graphs/VFGEdge.h	/^    ~VFGEdge()$/;"	f	class:SVF::VFGEdge
~VersionedFlowSensitiveStat	svf/include/WPA/WPAStat.h	/^    virtual ~VersionedFlowSensitiveStat() { }$/;"	f	class:SVF::VersionedFlowSensitiveStat
~VersionedPTData	svf/include/MemoryModel/AbstractPointsToDS.h	/^    virtual ~VersionedPTData() { }$/;"	f	class:SVF::VersionedPTData
~WPAFSSolver	svf/include/WPA/WPAFSSolver.h	/^    virtual ~WPAFSSolver() {}$/;"	f	class:SVF::WPAFSSolver
~WPAMinimumSolver	svf/include/WPA/WPAFSSolver.h	/^    virtual ~WPAMinimumSolver() {}$/;"	f	class:SVF::WPAMinimumSolver
~WPAPass	svf/lib/WPA/WPAPass.cpp	/^WPAPass::~WPAPass()$/;"	f	class:WPAPass
~WPASCCSolver	svf/include/WPA/WPAFSSolver.h	/^    virtual ~WPASCCSolver() {}$/;"	f	class:SVF::WPASCCSolver
~WTO	svf/include/Graphs/WTO.h	/^    ~WTO()$/;"	f	class:SVF::WTO
~apply_result	z3.obj/include/z3++.h	/^        ~apply_result() { Z3_apply_result_dec_ref(ctx(), m_apply_result); }$/;"	f	class:z3::apply_result
~array	z3.obj/include/z3++.h	/^        ~array() { delete[] m_array; }$/;"	f	class:z3::array
~ast	z3.obj/include/z3++.h	/^        ~ast() { if (m_ast) Z3_dec_ref(*m_ctx, m_ast); }$/;"	f	class:z3::ast
~ast_vector_tpl	z3.obj/include/z3++.h	/^        ~ast_vector_tpl() { Z3_ast_vector_dec_ref(ctx(), m_vector); }$/;"	f	class:z3::ast_vector_tpl
~config	z3.obj/include/z3++.h	/^        ~config() { Z3_del_config(m_cfg); }$/;"	f	class:z3::config
~context	z3.obj/include/z3++.h	/^        ~context() { Z3_del_context(m_ctx); }$/;"	f	class:z3::context
~exception	z3.obj/include/z3++.h	/^        virtual ~exception() throw() {}$/;"	f	class:z3::exception
~fixedpoint	z3.obj/include/z3++.h	/^        ~fixedpoint() { Z3_fixedpoint_dec_ref(ctx(), m_fp); }$/;"	f	class:z3::fixedpoint
~func_entry	z3.obj/include/z3++.h	/^        ~func_entry() { Z3_func_entry_dec_ref(ctx(), m_entry); }$/;"	f	class:z3::func_entry
~func_interp	z3.obj/include/z3++.h	/^        ~func_interp() { Z3_func_interp_dec_ref(ctx(), m_interp); }$/;"	f	class:z3::func_interp
~goal	z3.obj/include/z3++.h	/^        ~goal() { Z3_goal_dec_ref(ctx(), m_goal); }$/;"	f	class:z3::goal
~model	z3.obj/include/z3++.h	/^        ~model() { Z3_model_dec_ref(ctx(), m_model); }$/;"	f	class:z3::model
~optimize	z3.obj/include/z3++.h	/^        ~optimize() { Z3_optimize_dec_ref(ctx(), m_opt); }$/;"	f	class:z3::optimize
~param_descrs	z3.obj/include/z3++.h	/^        ~param_descrs() { Z3_param_descrs_dec_ref(ctx(), m_descrs); }$/;"	f	class:z3::param_descrs
~params	z3.obj/include/z3++.h	/^        ~params() { Z3_params_dec_ref(ctx(), m_params); }$/;"	f	class:z3::params
~probe	z3.obj/include/z3++.h	/^        ~probe() { Z3_probe_dec_ref(ctx(), m_probe); }$/;"	f	class:z3::probe
~solver	z3.obj/include/z3++.h	/^        ~solver() { Z3_solver_dec_ref(ctx(), m_solver); }$/;"	f	class:z3::solver
~stats	z3.obj/include/z3++.h	/^        ~stats() { if (m_stats) Z3_stats_dec_ref(ctx(), m_stats); }$/;"	f	class:z3::stats
~tactic	z3.obj/include/z3++.h	/^        ~tactic() { Z3_tactic_dec_ref(ctx(), m_tactic); }$/;"	f	class:z3::tactic
